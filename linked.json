[{
		"id": "f0a9f1ca14764095ae089b152e0e7f12",
		"question": "Which comic characters are painted by Bill Finger?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Bill_Finger>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
		"sparql_id": "301",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "painted by",
			"seq": "27,37"
		}, {
			"uri": "http://dbpedia.org/ontology/ComicsCharacter",
			"label": "comic characters",
			"seq": "6,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bill_Finger",
			"label": "Bill Finger",
			"seq": "38,48"
		}]
	},
	{
		"id": "30b709079ea5421cb33c227c3feb9019",
		"question": "Was winston churchill the prime minister of Selwyn Lloyd?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Selwyn_Lloyd> <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Winston_Churchill> }",
		"sparql_id": "152",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "prime minister",
			"seq": "26,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Selwyn_Lloyd",
			"label": "selwyn lloyd",
			"seq": "44,55"
		}, {
			"uri": "http://dbpedia.org/resource/Winston_Churchill",
			"label": "winston churchill",
			"seq": "4,20"
		}]
	},
	{
		"id": "dad51bf9d0294cac99d176aba17c0241",
		"question": "Name some leaders of the parent organisation of the Gestapo?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Gestapo> <http://dbpedia.org/ontology/parentOrganisation> ?x . ?x <http://dbpedia.org/ontology/leader> ?uri  . }",
		"sparql_id": "3",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentOrganisation",
			"label": "parent organisation",
			"seq": "25,43"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leaders",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gestapo",
			"label": "gestapo",
			"seq": "52,58"
		}]
	},
	{
		"id": "00a3465694634edc903510572f23b487",
		"question": "Which party has come in power in Mumbai North?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Mumbai_North_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
		"sparql_id": "5",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "in power",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mumbai_North_(Lok_Sabha_constituency)",
			"label": "mumbai north",
			"seq": "33,44"
		}]
	},
	{
		"id": "8216e5b6033a407191548689994aa32e",
		"question": "Name the municipality of Roberto Clemente Bridge ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roberto_Clemente_Bridge> <http://dbpedia.org/ontology/municipality> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/municipality",
			"label": "municipality",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Roberto_Clemente_Bridge",
			"label": "Roberto Clemente Bridge",
			"seq": "25,47"
		}]
	},
	{
		"id": "e963127fc9c048e089c071e56b80f214",
		"question": "Which royalty was married to ptolemy XIII Theos Philopator and had mother named Cleopatra V ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Cleopatra_V_of_Egypt> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "308",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mother",
			"label": "mother",
			"seq": "67,72"
		}, {
			"uri": "http://dbpedia.org/property/spouse",
			"label": "married",
			"seq": "18,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "royalty",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cleopatra_V_of_Egypt",
			"label": "Cleopatra V",
			"seq": "80,91"
		}, {
			"uri": "http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator",
			"label": "ptolemy XIII Theos Philopator",
			"seq": "29,58"
		}]
	},
	{
		"id": "4447f7daa7cf45eaadac04711dce299a",
		"question": "In which monarch did Li Si succeed someone?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Li_Si> . ?x <http://dbpedia.org/ontology/monarch> ?uri  . }",
		"sparql_id": "5",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "succeed",
			"seq": "27,33"
		}, {
			"uri": "http://dbpedia.org/ontology/monarch",
			"label": "monarch",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Li_Si",
			"label": "Li Si",
			"seq": "21,25"
		}]
	},
	{
		"id": "a899e312823543e7b728a2517d29392d",
		"question": "Which home town of PAvel Moroz is the death location of the Yakov Estrin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pavel_Moroz> <http://dbpedia.org/property/hometown> ?uri. <http://dbpedia.org/resource/Yakov_Estrin> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hometown",
			"label": "home town",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "death location",
			"seq": "38,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pavel_Moroz",
			"label": "PAvel Moroz",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/resource/Yakov_Estrin",
			"label": "Yakov Estrin",
			"seq": "60,71"
		}]
	},
	{
		"id": "338733202ebc4df1b6b92c618ebe3fc7",
		"question": "Which company which assembles its cars in Broadmeadows, Victoria?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Broadmeadows,_Victoria> . ?x <http://dbpedia.org/ontology/parentCompany> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/assembly",
			"label": "assembles",
			"seq": "20,28"
		}, {
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "company",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "cars",
			"seq": "34,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Broadmeadows,_Victoria",
			"label": "broadmeadows, victoria",
			"seq": "42,63"
		}]
	},
	{
		"id": "efa779115ad94d16aa180258a272a399",
		"question": "Which person designed the cars which has been designed by ASC Creative Services?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/ASC_Creative_Services> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designCompany",
			"label": "designed by",
			"seq": "46,56"
		}, {
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "car",
			"seq": "22,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/ASC_Creative_Services",
			"label": "ASC Creative Services",
			"seq": "58,78"
		}]
	},
	{
		"id": "7136d470a4c340bb8a9e1b60d5e68fdf",
		"question": "Name the scientist whose supervisor was Ernest Rutherford and had a doctoral students named Charles Drummond Ellis?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/doctoralAdvisor> <http://dbpedia.org/resource/Ernest_Rutherford> . ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Charles_Drummond_Ellis>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "308",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralAdvisor",
			"label": "supervisor",
			"seq": "25,34"
		}, {
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "students doctoral",
			"seq": "68,84"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ernest_Rutherford",
			"label": "Ernest Rutherford",
			"seq": "40,56"
		}, {
			"uri": "http://dbpedia.org/resource/Charles_Drummond_Ellis",
			"label": "Charles Drummond Ellis",
			"seq": "92,113"
		}]
	},
	{
		"id": "250dc8957716408cbea2c7c1918791f8",
		"question": "Where was the designer of REP Parasol born?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/REP_Parasol> <http://dbpedia.org/ontology/designer> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designer",
			"label": "designer",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "born",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/REP_Parasol",
			"label": "REP Parasol",
			"seq": "26,36"
		}]
	},
	{
		"id": "35fd0b13f9824451b518e8b26ba64bde",
		"question": "What is the common affiliation of the Monroe Carell Jr. Children's Hospital at Vanderbilt and alma mater of the Duncan U. Fletcher?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Monroe_Carell_Jr._Children's_Hospital_at_Vanderbilt> <http://dbpedia.org/property/affiliation> ?uri. <http://dbpedia.org/resource/Duncan_U._Fletcher> <http://dbpedia.org/ontology/almaMater> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliation",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "alma mater",
			"seq": "94,103"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Monroe_Carell_Jr._Children's_Hospital_at_Vanderbilt",
			"label": "Monroe Carell Jr. Children's Hospital at Vanderbilt",
			"seq": "38,88"
		}, {
			"uri": "http://dbpedia.org/resource/Duncan_U._Fletcher",
			"label": "Duncan U. Fletcher",
			"seq": "112,129"
		}]
	},
	{
		"id": "243f95d2144c4b2fadb5a18aa339bd98",
		"question": "What is the hometown of Nader Guirat, where Josef Johansson was born too?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Josef_Johansson> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/Nader_Guirat> <http://dbpedia.org/ontology/hometown> ?uri . }",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "born",
			"seq": "64,67"
		}, {
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "hometown",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Josef_Johansson",
			"label": "Josef Johansson",
			"seq": "44,58"
		}, {
			"uri": "http://dbpedia.org/resource/Nader_Guirat",
			"label": "Nader Guirat",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6ff03a568e2e4105b491ab1c1411c1ab",
		"question": "What tv series can be said to be related to the sarah jane adventure and dr who confidential?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> . ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Doctor_Who_Confidential> . }",
		"sparql_id": "7",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "33,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Sarah_Jane_Adventures",
			"label": "sarah jane adventure",
			"seq": "48,67"
		}, {
			"uri": "http://dbpedia.org/resource/Doctor_Who_Confidential",
			"label": "dr who confidential",
			"seq": "73,91"
		}]
	},
	{
		"id": "1b604c16430a441ebbae9e095b36661e",
		"question": "How many shows does HBO have?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/HBO>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "401",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/company",
			"label": "@@@",
			"seq": "-1,-1"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/HBO",
			"label": "hbo",
			"seq": "20,22"
		}]
	},
	{
		"id": "80d88d56a6634b49b41ded0bdc54ae5c",
		"question": "Is Nikolai Morozov the former coach of Stanislav Morozov?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Stanislav_Morozov> <http://dbpedia.org/ontology/formerCoach> <http://dbpedia.org/resource/Nikolai_Morozov_(figure_skater)> }",
		"sparql_id": "151",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerCoach",
			"label": "former coach",
			"seq": "23,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stanislav_Morozov",
			"label": "Stanislav Morozo",
			"seq": "39,55"
		}, {
			"uri": "http://dbpedia.org/resource/Nikolai_Morozov_(figure_skater)",
			"label": "Nikolai Morozov",
			"seq": "3,17"
		}]
	},
	{
		"id": "8b08c0d0fc3d45e1936149c78c6637df",
		"question": "What is the common genere of Abhijit Kunte and Kasparov ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Abhijit_Kunte> <http://dbpedia.org/property/knownFor> ?uri. <http://dbpedia.org/resource/Virtual_Kasparov> <http://dbpedia.org/ontology/genre> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "@@@",
			"seq": "-1,-1"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genere",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Abhijit_Kunte",
			"label": "Abhijit Kunte",
			"seq": "29,41"
		}, {
			"uri": "http://dbpedia.org/resource/Virtual_Kasparov",
			"label": "kasparov",
			"seq": "47,54"
		}]
	},
	{
		"id": "239fef57d6664f4280caf0dafa7e1eb8",
		"question": "Which share holder of outlook is also the content license of the MSX Basics ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri. <http://dbpedia.org/resource/Outlook_on_the_web> <http://dbpedia.org/property/owner> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/license",
			"label": "license",
			"seq": "50,56"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "share holder",
			"seq": "6,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/MSX_BASIC",
			"label": "MSX Basics",
			"seq": "65,74"
		}, {
			"uri": "http://dbpedia.org/resource/Outlook_on_the_web",
			"label": "outlook",
			"seq": "22,28"
		}]
	},
	{
		"id": "3f943b9b68fe43c7a7363ff39f9f3074",
		"question": "On how many different grounds were seasons chaired by Ronaldo held?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Ronaldo> . ?x <http://dbpedia.org/ontology/ground> ?uri  . }",
		"sparql_id": "105",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/chairman",
			"label": "chaired",
			"seq": "43,49"
		}, {
			"uri": "http://dbpedia.org/ontology/ground",
			"label": "grounds",
			"seq": "22,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ronaldo",
			"label": "ronaldo",
			"seq": "54,60"
		}]
	},
	{
		"id": "62fc3395a7ce4c27ba5bfb82e020dab6",
		"question": "Which source country of SamurAbsheron channel is the birth place of Anar Salmanov ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Samur\u2013Absheron_channel> <http://dbpedia.org/ontology/sourceCountry> ?uri. <http://dbpedia.org/resource/Anar_Salmanov> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "country source",
			"seq": "6,19"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "birth place",
			"seq": "53,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Samur\u2013Absheron_channel",
			"label": "SamurAbsheron",
			"seq": "24,44"
		}, {
			"uri": "http://dbpedia.org/resource/Anar_Salmanov",
			"label": "Anar Salmanov",
			"seq": "68,80"
		}]
	},
	{
		"id": "380224a93b1e441994c4b9785881aa6c",
		"question": "Where was the battle fought where 2nd Foreign Infantry Regiment participated  ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/2nd_Foreign_Infantry_Regiment> <http://dbpedia.org/ontology/battle> ?x . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "303",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "battle",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "@@@",
			"seq": "-1,-1"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "battle",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2nd_Foreign_Infantry_Regiment",
			"label": "2nd Foreign Infantry Regiment",
			"seq": "34,62"
		}]
	},
	{
		"id": "df8a83a06ca941c3b6f30667a64bc305",
		"question": "What is the operator of SR class 3Sub ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/SR_class_3Sub> <http://dbpedia.org/ontology/operator> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operator",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/SR_class_3Sub",
			"label": "SR class 3Sub",
			"seq": "24,36"
		}]
	},
	{
		"id": "8f8139c45fc142a1af369ddcaed646f3",
		"question": "Which band's  former member are Kevin Jonas and Joe Jonas?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Kevin_Jonas> . ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Joe_Jonas>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "308",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerBandMember",
			"label": "former member",
			"seq": "14,26"
		}, {
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "former member",
			"seq": "14,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "7,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kevin_Jonas",
			"label": "kevin jonas",
			"seq": "32,42"
		}, {
			"uri": "http://dbpedia.org/resource/Joe_Jonas",
			"label": "Joe Jonas",
			"seq": "38,46"
		}]
	},
	{
		"id": "502ef78b55df4f73beb3f5df73483a51",
		"question": "Did Timm Gunn guest in Sunrise (HIMYM)?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Sunrise_(How_I_Met_Your_Mother)> <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Tim_Gunn> }",
		"sparql_id": "152",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/guests",
			"label": "guest",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sunrise_(How_I_Met_Your_Mother)",
			"label": "Sunrise (HIMYM)",
			"seq": "23,37"
		}, {
			"uri": "http://dbpedia.org/resource/Tim_Gunn",
			"label": "Timm Gunn",
			"seq": "4,12"
		}]
	},
	{
		"id": "a649a19bfcbc4f2e962d2199f8e9598d",
		"question": "Name the tenants of O.co Coliseum ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/O.co_Coliseum> <http://dbpedia.org/ontology/tenant> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenants",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/O.co_Coliseum",
			"label": "O.co Coliseum",
			"seq": "20,32"
		}]
	},
	{
		"id": "30e697b1548c4671bb748f26a165543c",
		"question": "which politician is currently ruling over Rishikesh?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rishikesh> <http://dbpedia.org/ontology/leaderName> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "politician",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rishikesh",
			"label": "Rishikesh",
			"seq": "42,50"
		}]
	},
	{
		"id": "7c56af394fc64b84a9f5e244bb068831",
		"question": "Is north america one of the destinations of airtours airways?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Airtours_International_Airways> <http://dbpedia.org/ontology/destination> <http://dbpedia.org/resource/North_America> }",
		"sparql_id": "152",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/destination",
			"label": "destinations",
			"seq": "28,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Airtours_International_Airways",
			"label": "airtours airways",
			"seq": "44,59"
		}, {
			"uri": "http://dbpedia.org/resource/North_America",
			"label": "north america",
			"seq": "3,15"
		}]
	},
	{
		"id": "d3695db03a5e45ae8906a2527508e7c5",
		"question": "Who have done their PhDs under a National Medal of Science winner?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/National_Medal_of_Science> . ?uri <http://dbpedia.org/property/doctoralAdvisor> ?x  . }",
		"sparql_id": "6",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prizes",
			"label": "winner",
			"seq": "59,64"
		}, {
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "PhDs under",
			"seq": "20,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Medal_of_Science",
			"label": "National Medal of Science",
			"seq": "33,54"
		}]
	},
	{
		"id": "e1b83f5a76aa411aa260424b3255ce89",
		"question": "Who is the common manager of Aston Villa 2000-02 season and aldo the manager of Middlesbrough F.C. season 2009-10",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2000\u201301_Aston_Villa_F.C._season> <http://dbpedia.org/property/name> ?uri. <http://dbpedia.org/resource/2009\u201310_Middlesbrough_F.C._season> <http://dbpedia.org/ontology/manager> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/name",
			"label": "Who",
			"seq": "0,2"
		}, {
			"uri": "http://dbpedia.org/ontology/manager",
			"label": "manager",
			"seq": "18,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2000\u201301_Aston_Villa_F.C._season",
			"label": "Aston Villa 2000-02 season",
			"seq": "29,54"
		}, {
			"uri": "http://dbpedia.org/resource/2009\u201310_Middlesbrough_F.C._season",
			"label": "Middlesbrough F.C. season 2009-10",
			"seq": "49,68"
		}]
	},
	{
		"id": "8b3daf3912ea4686a1b8ee5d2d9918df",
		"question": "Name the mascot of the military branch of William Harper.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/William_Harper_(Rhodesian_politician)> <http://dbpedia.org/ontology/militaryBranch> ?x . ?x <http://dbpedia.org/property/mascot> ?uri  . }",
		"sparql_id": "3",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military branch",
			"seq": "23,37"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Harper_(Rhodesian_politician)",
			"label": "William Harper",
			"seq": "42,55"
		}]
	},
	{
		"id": "ce216d620d154f13814dd2f6b967c292",
		"question": "How many tenats have been there, of the constructions of PCL constructures?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/builder> <http://dbpedia.org/resource/PCL_Construction> . ?x <http://dbpedia.org/ontology/tenant> ?uri  . }",
		"sparql_id": "105",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "constructions",
			"seq": "40,52"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenats",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PCL_Construction",
			"label": "PCL constructures",
			"seq": "57,73"
		}]
	},
	{
		"id": "f97937b4cc484a1f82a31b1d65d0041c",
		"question": "Was Kevin Jonas a part of Jonas brothers?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jonas_Brothers> <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Kevin_Jonas> }",
		"sparql_id": "151",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerBandMember",
			"label": "part of",
			"seq": "18,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jonas_Brothers",
			"label": "Jonas brothers",
			"seq": "26,39"
		}, {
			"uri": "http://dbpedia.org/resource/Kevin_Jonas",
			"label": "Kevin Jonas",
			"seq": "4,14"
		}]
	},
	{
		"id": "d8d0571b353e4b028d618c08d2643923",
		"question": "What was the book that lead to Sagan's Cosmos, about?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Cosmos_(Carl_Sagan_book)> . ?x <http://dbpedia.org/property/subject> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "lead to",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/property/subject",
			"label": "about",
			"seq": "47,51"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "book",
			"seq": "13,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cosmos_(Carl_Sagan_book)",
			"label": "Sagan's Cosmos",
			"seq": "31,44"
		}]
	},
	{
		"id": "3d5d25adde2b46dda7d5bc780106d764",
		"question": "Which kind of conventions are held in Rosemont, Illinois?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Rosemont,_Illinois> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Convention>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "held in",
			"seq": "30,36"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "kind of",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Convention",
			"label": "conventions",
			"seq": "14,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rosemont,_Illinois",
			"label": "rosemont, illinois",
			"seq": "38,55"
		}]
	},
	{
		"id": "42d9e558edd840a0a310036f7f9bb9b2",
		"question": "What are the type of Greenup County High School?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Greenup_County_High_School> <http://dbpedia.org/property/type> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/type",
			"label": "type",
			"seq": "13,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Greenup_County_High_School",
			"label": "Greenup County High School",
			"seq": "21,46"
		}]
	},
	{
		"id": "082ecdc0056f4f3192e3b13e46d0ee0c",
		"question": "List the teams for which Bobby Hoppe played ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bobby_Hoppe> <http://dbpedia.org/property/pastteams> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastteams",
			"label": "teams",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bobby_Hoppe",
			"label": "Bobby Hoppe",
			"seq": "25,35"
		}]
	},
	{
		"id": "d93543518a8d4a69b6f540f4be499a28",
		"question": "What are some famous works of the writer of The Second Coming?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Second_Coming_(TV_serial)> <http://dbpedia.org/property/writer> ?x . ?x <http://dbpedia.org/property/notableworks> ?uri  . }",
		"sparql_id": "3",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "famous works",
			"seq": "14,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Second_Coming_(TV_serial)",
			"label": "The Second Coming",
			"seq": "44,60"
		}]
	},
	{
		"id": "e7c8927b5bec41c6a09ea2319c24e65f",
		"question": "How many books have been penned by Miguel de Cervantes?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Miguel_de_Cervantes>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "401",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "penned",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miguel_de_Cervantes",
			"label": "Miguel de Cervantes",
			"seq": "35,53"
		}]
	},
	{
		"id": "be29caba2b2b43a385df47982c5421d3",
		"question": "Which labels signs up progressive rock bands?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Progressive_rock> . ?x <http://dbpedia.org/ontology/recordLabel> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/genre",
			"label": "signs",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "labels",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "bands",
			"seq": "39,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Progressive_rock",
			"label": "progressive rock",
			"seq": "22,37"
		}]
	},
	{
		"id": "9a7523469c8c45b58ec65ed56af6e306",
		"question": "What are the schools whose city is Reading, Berkshire?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Reading,_Berkshire> } ",
		"sparql_id": "1",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "city",
			"seq": "27,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Reading,_Berkshire",
			"label": "Reading, Berkshire",
			"seq": "35,52"
		}]
	},
	{
		"id": "efe2cdcf9bb3460e9f13067772d9e62f",
		"question": "Which magazine's editor is married to Crystal Harris?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Crystal_Harris> . ?uri <http://dbpedia.org/property/editor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
		"sparql_id": "306",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "married",
			"seq": "27,33"
		}, {
			"uri": "http://dbpedia.org/property/editor",
			"label": "editor",
			"seq": "17,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Magazine",
			"label": "magazine's",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Crystal_Harris",
			"label": "Crystal Harris",
			"seq": "38,51"
		}]
	},
	{
		"id": "d4f1cee8ab32498faaf9d3d2190380c1",
		"question": "Does the west thurrock come under Essex county?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/West_Thurrock> <http://dbpedia.org/ontology/ceremonialCounty> <http://dbpedia.org/resource/Essex> }",
		"sparql_id": "152",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ceremonialCounty",
			"label": "county",
			"seq": "40,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/West_Thurrock",
			"label": "west thurrock",
			"seq": "9,21"
		}, {
			"uri": "http://dbpedia.org/resource/Essex",
			"label": "essex",
			"seq": "34,38"
		}]
	},
	{
		"id": "70448495be244ebea4746e370eb19f5c",
		"question": "How many people have headed organizations headquartered at Niederkirchnerstrae?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Niederkirchnerstra\u00dfe> . ?x <http://dbpedia.org/ontology/leader> ?uri  . }",
		"sparql_id": "105",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/headquarter",
			"label": "headquartered",
			"seq": "42,54"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "headed",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Niederkirchnerstra\u00dfe",
			"label": "Niederkirchnerstrae",
			"seq": "59,77"
		}]
	},
	{
		"id": "93ca4dc34b5e4bf7ba90d0ae55f7d50c",
		"question": "In which television shows have Steven Moffat served as an executive producer?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Steven_Moffat>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "58,75"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television shows",
			"seq": "9,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steven_Moffat",
			"label": "steven moffat",
			"seq": "31,43"
		}]
	},
	{
		"id": "d8150b46a8714ed9b7ede5b606aa2638",
		"question": "Which shareholder of Dagenham wind turbines is also the parent company of the Ford Falcon Cobra?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Falcon_Cobra> <http://dbpedia.org/ontology/parentCompany> ?uri. <http://dbpedia.org/resource/Dagenham_wind_turbines> <http://dbpedia.org/property/owner> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "company parent",
			"seq": "56,69"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "shareholder",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Falcon_Cobra",
			"label": "falcon cobra ford",
			"seq": "78,94"
		}, {
			"uri": "http://dbpedia.org/resource/Dagenham_wind_turbines",
			"label": "turbines dagenham wind",
			"seq": "21,42"
		}]
	},
	{
		"id": "09b0e80486e44ea2b1cbca4f69c89923",
		"question": "What are the airlines whose hub is San Francisco International Airport?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/San_Francisco_International_Airport>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "301",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hub",
			"seq": "28,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Francisco_International_Airport",
			"label": "international francisco airport san",
			"seq": "35,69"
		}]
	},
	{
		"id": "8c9f73ffe06247fa8fefae66915c41bb",
		"question": "Where can I find things run by the maritime museum of San Diego?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Maritime_Museum_of_San_Diego> . ?x <http://dbpedia.org/property/location> ?uri  . }",
		"sparql_id": "5",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "run by",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "of",
			"seq": "51,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maritime_Museum_of_San_Diego",
			"label": "maritime museum of San Diego",
			"seq": "35,62"
		}]
	},
	{
		"id": "d4b1587fce7046aabe7c9717457c7894",
		"question": "What is the local authority of the Trinity School, Brentwood and place of birth of the Sarah Walker (badminton) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri. <http://dbpedia.org/resource/Sarah_Walker_(badminton)> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/localAuthority",
			"label": "authority local",
			"seq": "12,26"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place of birth",
			"seq": "65,78"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Trinity_School,_Brentwood",
			"label": "brentwood trinity school,",
			"seq": "35,59"
		}, {
			"uri": "http://dbpedia.org/resource/Sarah_Walker_(badminton)",
			"label": "(badminton) walker sarah",
			"seq": "87,110"
		}]
	},
	{
		"id": "fb1bfcc7943943b892d6d22690b2ef48",
		"question": "How many services does 21Vianet provide?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/21Vianet> <http://dbpedia.org/property/services> ?uri  . }",
		"sparql_id": "102",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/21Vianet",
			"label": "21vianet",
			"seq": "23,30"
		}]
	},
	{
		"id": "3f7a7a7d95104fcb8c6ebe00786a990b",
		"question": "Which planet was discovered by Johann Gottfried and Urbain Le Verrier ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Johann_Gottfried_Galle> . ?uri <http://dbpedia.org/ontology/discoverer> <http://dbpedia.org/resource/Urbain_Le_Verrier>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Planet>}",
		"sparql_id": "308",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/discoverer",
			"label": "discovered by",
			"seq": "17,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Planet",
			"label": "planet",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Johann_Gottfried_Galle",
			"label": "Johann Gottfried",
			"seq": "31,46"
		}, {
			"uri": "http://dbpedia.org/resource/Urbain_Le_Verrier",
			"label": "Urbain Le Verrier",
			"seq": "52,68"
		}]
	},
	{
		"id": "ee04ea91a583412db4d05a9929dcc4dc",
		"question": "where did the office holder died  who is successor to Elmer Burkett ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Elmer_Burkett> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "41,49"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "died",
			"seq": "28,31"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "14,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elmer_Burkett",
			"label": "burkett elmer",
			"seq": "54,66"
		}]
	},
	{
		"id": "5c171d57abb14180b3f6dc48e55c4bbf",
		"question": "Name the team for which Hensley Meulens played, whihc was also the debut team od Steve Ontiveros ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steve_Ontiveros_(infielder)> <http://dbpedia.org/property/debutteam> ?uri. <http://dbpedia.org/resource/Hensley_Meulens> <http://dbpedia.org/ontology/team> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut team",
			"seq": "67,76"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steve_Ontiveros_(infielder)",
			"label": "ontiveros steve",
			"seq": "81,95"
		}, {
			"uri": "http://dbpedia.org/resource/Hensley_Meulens",
			"label": "meulens hensley",
			"seq": "24,38"
		}]
	},
	{
		"id": "f3110585cbc94fc69f9f61aeb1c3555f",
		"question": "List the actors of  Lucy Sullivan Is Getting Married?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lucy_Sullivan_Is_Getting_Married> <http://dbpedia.org/property/starring> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "actors of",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lucy_Sullivan_Is_Getting_Married",
			"label": "Lucy Sullivan Is Getting Married",
			"seq": "20,51"
		}]
	},
	{
		"id": "54e823bdc8d44ed7a0a40c77e29c361d",
		"question": "Name the island with archipelago as Society Islands and has the largest city named Faaa ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Faaa> . ?uri <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/Society_Islands>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island>}",
		"sparql_id": "308",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "64,75"
		}, {
			"uri": "http://dbpedia.org/property/archipelago",
			"label": "archipelago",
			"seq": "21,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Island",
			"label": "island",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Faaa",
			"label": "faaa",
			"seq": "83,86"
		}, {
			"uri": "http://dbpedia.org/resource/Society_Islands",
			"label": "society islands",
			"seq": "36,50"
		}]
	},
	{
		"id": "3f53ed3c088c4ede9a3582e26303ee83",
		"question": "Who started at the pole position in both 1997 canadian grand prix and the 94 spanish one?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri. <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri . }",
		"sparql_id": "15",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/poleDriver",
			"label": "pole position",
			"seq": "19,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1997_Canadian_Grand_Prix",
			"label": "1997 canadian grand prix",
			"seq": "41,64"
		}, {
			"uri": "http://dbpedia.org/resource/1994_Spanish_Grand_Prix",
			"label": "94 spanish one",
			"seq": "74,87"
		}]
	},
	{
		"id": "32ab0f92ca6444c5a2877e23fc76303c",
		"question": "Who appointed the governor under whom Richard Winn served?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Richard_Winn> <http://dbpedia.org/ontology/governor> ?x . ?x <http://dbpedia.org/property/appointer> ?uri  . }",
		"sparql_id": "3",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governor",
			"label": "governor",
			"seq": "18,25"
		}, {
			"uri": "http://dbpedia.org/property/appointer",
			"label": "appointed",
			"seq": "4,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Richard_Winn",
			"label": "richard winn",
			"seq": "38,49"
		}]
	},
	{
		"id": "83248eda73fd4609ac3a9359b62a9a2c",
		"question": "What company involved in the development of Sherlock did Arthur Levinson work for?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arthur_D._Levinson> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Sherlock_(software)> <http://dbpedia.org/ontology/developer> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "work for",
			"seq": "73,80"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "development",
			"seq": "29,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arthur_D._Levinson",
			"label": "levinson arthur",
			"seq": "57,71"
		}, {
			"uri": "http://dbpedia.org/resource/Sherlock_(software)",
			"label": "sherlock",
			"seq": "44,51"
		}]
	},
	{
		"id": "94d9288c52b54642bdac4aba4fedcc04",
		"question": "Which tenants of the Master Card center is also th draft team of Sam Carrick ",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri. <http://dbpedia.org/resource/Sam_Carrick> <http://dbpedia.org/property/draftTeam> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/tenants",
			"label": "tenants",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "draft team",
			"seq": "51,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/MasterCard_Centre",
			"label": "Master Card center",
			"seq": "21,38"
		}, {
			"uri": "http://dbpedia.org/resource/Sam_Carrick",
			"label": "Sam Carrick",
			"seq": "65,75"
		}]
	},
	{
		"id": "5e4463b5e91147819fab19c1eb738a8b",
		"question": "Who produced the TV shows for Fremantle Media?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/company> <http://dbpedia.org/resource/FremantleMedia> . ?x <http://dbpedia.org/ontology/producer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "Who",
			"seq": "0,2"
		}, {
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "produced",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "TV shows",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/FremantleMedia",
			"label": "fremantle media",
			"seq": "30,44"
		}]
	},
	{
		"id": "2a11aeb11ce248cfaf63be2b6701fe9a",
		"question": "What is the style of architecture of South Loop Printing House District ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Loop_Printing_House_District> <http://dbpedia.org/ontology/architecturalStyle> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architecturalStyle",
			"label": "style of architecture",
			"seq": "12,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Loop_Printing_House_District",
			"label": "South Loop Printing House District",
			"seq": "37,70"
		}]
	},
	{
		"id": "d101acb6da7a464cbdec88d18d5b855e",
		"question": "Whose provides the service of  Outlook and also products  such as Visual Studio?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Outlook.com> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Microsoft_Visual_Studio>  . }",
		"sparql_id": "8",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "service",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "products",
			"seq": "48,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Outlook.com",
			"label": "outlook",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/resource/Microsoft_Visual_Studio",
			"label": "visual studio",
			"seq": "66,78"
		}]
	},
	{
		"id": "a2f446250f114e05ad19763cc9c8a1a6",
		"question": "Is Ombla originate in Croatia?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ombla> <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Croatia> }",
		"sparql_id": "152",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceMountain",
			"label": "originate",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ombla",
			"label": "ombla",
			"seq": "3,7"
		}, {
			"uri": "http://dbpedia.org/resource/Croatia",
			"label": "croatia",
			"seq": "22,28"
		}]
	},
	{
		"id": "873c3fe1ec484dcfbb114320042f298d",
		"question": "What is the nationality of Newin Chidchob ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Newin_Chidchob> <http://dbpedia.org/property/nationality> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationality",
			"label": "nationality",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Newin_Chidchob",
			"label": "chidchob newin",
			"seq": "27,40"
		}]
	},
	{
		"id": "d509a97d616741b69ea3d084e0a7b737",
		"question": "In which team did Dave Bing and Ron Reed started their basketball career?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dave_Bing> <http://dbpedia.org/property/draftTeam> ?uri. <http://dbpedia.org/resource/Ron_Reed> <http://dbpedia.org/property/draftTeam> ?uri . }",
		"sparql_id": "15",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "team",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "team",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dave_Bing",
			"label": "dave bing",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/resource/Ron_Reed",
			"label": "reed ron",
			"seq": "32,39"
		}]
	},
	{
		"id": "418b062f88884aff8095211e8c44cbed",
		"question": "Was Ganymede discovered by Galileo Galilei?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ganymede_(moon)> <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Galileo_Galilei> }",
		"sparql_id": "152",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/discoverer",
			"label": "discovered",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ganymede_(moon)",
			"label": "ganymede",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/resource/Galileo_Galilei",
			"label": "galileo galilei",
			"seq": "27,41"
		}]
	},
	{
		"id": "cbddb4a494514d32ae94fd66fdde0269",
		"question": "List some musicians associated with famous guitar players?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
		"sparql_id": "5",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableInstruments",
			"label": "list",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "musicians associated",
			"seq": "10,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Guitar",
			"label": "guitar",
			"seq": "43,48"
		}]
	},
	{
		"id": "339f9ccfb682456ab0f1e7f580a2d27e",
		"question": "What are the awards won by the producer of Elizabeth: The Golden Age?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Elizabeth:_The_Golden_Age_(soundtrack)> <http://dbpedia.org/property/producer> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "producer",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elizabeth:_The_Golden_Age_(soundtrack)",
			"label": "Elizabeth: The Golden Age",
			"seq": "43,67"
		}]
	},
	{
		"id": "1be4e465a7ac4a6c893e6b1fc1aef01a",
		"question": "With what company is the service OneDrive associated?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/OneDrive>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "service",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/OneDrive",
			"label": "onedrive",
			"seq": "33,40"
		}]
	},
	{
		"id": "a969284fc29d4b659e9088088a2c49f2",
		"question": "Name the university whose affiliations's foundation place is Washington, D.C.?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Washington,_D.C.> . ?uri <http://dbpedia.org/property/affiliations> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "306",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "foundation place",
			"seq": "41,56"
		}, {
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliations's",
			"seq": "26,39"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Washington,_D.C.",
			"label": "washington, d.c.",
			"seq": "61,76"
		}]
	},
	{
		"id": "7aff0ab2a7b741839c3df90771be6add",
		"question": "Name presidents of the schools which have queen noor of Jordan as one of them ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Queen_Noor_of_Jordan> . ?x <http://dbpedia.org/property/president> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "311",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "presidents",
			"seq": "5,14"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "presidents",
			"seq": "5,14"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Queen_Noor_of_Jordan",
			"label": "queen noor of Jordan",
			"seq": "42,61"
		}]
	},
	{
		"id": "312435fad0194831a80fe3346c9a683b",
		"question": "Who appointed the governor under which Robert Witherspoon worked?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Robert_Witherspoon> <http://dbpedia.org/ontology/governor> ?x . ?x <http://dbpedia.org/property/appointer> ?uri  . }",
		"sparql_id": "3",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governor",
			"label": "governor",
			"seq": "18,25"
		}, {
			"uri": "http://dbpedia.org/property/appointer",
			"label": "appointed",
			"seq": "4,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Witherspoon",
			"label": "witherspoon robert",
			"seq": "39,56"
		}]
	},
	{
		"id": "f76953f003c2433d837966593c777c75",
		"question": "Who is the producer of the song which is the previous work of He's a Liar ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/He's_a_Liar> <http://dbpedia.org/ontology/previousWork> ?x . ?x <http://dbpedia.org/ontology/producer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>}",
		"sparql_id": "303",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/previousWork",
			"label": "previous work",
			"seq": "45,57"
		}, {
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "11,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Song",
			"label": "song",
			"seq": "27,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/He's_a_Liar",
			"label": "He's a Liar",
			"seq": "62,72"
		}]
	},
	{
		"id": "6ac000fc0bb7458f8556f603ed42e4b3",
		"question": "List the base currency of the country whose anthem is Oj, svijetla majska zoro.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/anthem> <http://dbpedia.org/resource/Oj,_svijetla_majska_zoro> . ?x <http://dbpedia.org/property/currency> ?uri  . }",
		"sparql_id": "5",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/anthem",
			"label": "anthem",
			"seq": "44,49"
		}, {
			"uri": "http://dbpedia.org/property/currency",
			"label": "currency",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oj,_svijetla_majska_zoro",
			"label": "Oj, svijetla majska zoro",
			"seq": "54,77"
		}]
	},
	{
		"id": "48584c830439478e9272821ca6fac246",
		"question": "Who gave the voice for Allen Walker ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allen_Walker> <http://dbpedia.org/ontology/voice> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/voice",
			"label": "voice",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Allen_Walker",
			"label": "walker allen",
			"seq": "23,34"
		}]
	},
	{
		"id": "78435963a0b241ecbd9b7ab9e4916acc",
		"question": "Who is associated to Publius Servilius Vatia Isauricus  and Marcus Calpurnius Bibulus?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Publius_Servilius_Vatia_Isauricus_(consul_48_BC)> . ?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . }",
		"sparql_id": "7",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associate",
			"label": "associated",
			"seq": "7,16"
		}, {
			"uri": "http://dbpedia.org/ontology/associate",
			"label": "associated",
			"seq": "7,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Publius_Servilius_Vatia_Isauricus_(consul_48_BC)",
			"label": "servilius isauricus publius vatia",
			"seq": "21,53"
		}, {
			"uri": "http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus",
			"label": "calpurnius bibulus marcus",
			"seq": "60,84"
		}]
	},
	{
		"id": "81218ea48e2f44a1bef8c118ae5b965a",
		"question": "Which country has given citizenship to both saima chowdhury and edmund john?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saima_Chowdhury> <http://dbpedia.org/ontology/citizenship> ?uri. <http://dbpedia.org/resource/Edmund_John> <http://dbpedia.org/ontology/citizenship> ?uri . }",
		"sparql_id": "15",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "citizenship",
			"seq": "24,34"
		}, {
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "citizenship",
			"seq": "24,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saima_Chowdhury",
			"label": "chowdhury saima",
			"seq": "44,58"
		}, {
			"uri": "http://dbpedia.org/resource/Edmund_John",
			"label": "edmund john",
			"seq": "64,74"
		}]
	},
	{
		"id": "5df6285e711048a5aa9d59ee7bbc7886",
		"question": "Who is the person that first ascented the Cathedral Peak and Mount Hoffmann?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cathedral_Peak_(California)> <http://dbpedia.org/ontology/firstAscentPerson> ?uri. <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> ?uri . }",
		"sparql_id": "15",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "person that first ascented",
			"seq": "11,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cathedral_Peak_(California)",
			"label": "cathedral peak",
			"seq": "42,55"
		}, {
			"uri": "http://dbpedia.org/resource/Mount_Hoffmann",
			"label": "hoffmann mount",
			"seq": "61,74"
		}]
	},
	{
		"id": "ae5afe36b84a4b65b6e52062c8c1d079",
		"question": "What university campuses are situated in Indiana?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Indiana>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "301",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "campuses",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "5,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indiana",
			"label": "indiana",
			"seq": "41,47"
		}]
	},
	{
		"id": "ef9db1b8f7de4e319db223cee9531bb4",
		"question": "Where is the swedish covenant hospital?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Swedish_Covenant_Hospital> <http://dbpedia.org/ontology/location> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "Where",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Swedish_Covenant_Hospital",
			"label": "hospital covenant swedish",
			"seq": "13,37"
		}]
	},
	{
		"id": "a6ff1c4c6e0f4b519d1f50c706af5469",
		"question": "Which composer of Girl from the North Country is the subsequent work of the Moondog Matinee?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Girl_from_the_North_Country> <http://dbpedia.org/ontology/composer> ?uri. <http://dbpedia.org/resource/Moondog_Matinee> <http://dbpedia.org/ontology/subsequentWork> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composer",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "53,67"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Girl_from_the_North_Country",
			"label": "Girl from the North Country",
			"seq": "18,44"
		}, {
			"uri": "http://dbpedia.org/resource/Moondog_Matinee",
			"label": "moondog matinee",
			"seq": "76,90"
		}]
	},
	{
		"id": "b38170945c5d442e80799fe9d203be22",
		"question": "What is the television show whose vocals are performed by  April Stewart and Mona Marshall?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/April_Stewart> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/voices",
			"label": "vocals",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/property/voices",
			"label": "vocals",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/April_Stewart",
			"label": "stewart april",
			"seq": "59,71"
		}, {
			"uri": "http://dbpedia.org/resource/Mona_Marshall",
			"label": "marshall mona",
			"seq": "77,89"
		}]
	},
	{
		"id": "401fed151be7413abf38efaa54396fce",
		"question": "Name the members of  boards of Freedom of the City and Trinity House?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Freedom_of_the_City> . ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Trinity_House> . }",
		"sparql_id": "7",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/board",
			"label": "boards",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/ontology/board",
			"label": "boards",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Freedom_of_the_City",
			"label": "Freedom of the City",
			"seq": "31,49"
		}, {
			"uri": "http://dbpedia.org/resource/Trinity_House",
			"label": "trinity house",
			"seq": "55,67"
		}]
	},
	{
		"id": "55fad74c2c62469581f58e7bbe60da52",
		"question": "Was Reza Amrollahi born in Iran?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Reza_Amrollahi> <http://dbpedia.org/property/birthplace> <http://dbpedia.org/resource/Iran> }",
		"sparql_id": "152",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthplace",
			"label": "born",
			"seq": "19,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Reza_Amrollahi",
			"label": "amrollahi reza",
			"seq": "4,17"
		}, {
			"uri": "http://dbpedia.org/resource/Iran",
			"label": "iran",
			"seq": "27,30"
		}]
	},
	{
		"id": "34d6402839924ecbbffe213ce8966124",
		"question": "Which title of Zaman Shah Durrani is also the nationality of Salahuddin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Zaman_Shah_Durrani> <http://dbpedia.org/property/title> ?uri. <http://dbpedia.org/resource/Salahuddin_Rabbani> <http://dbpedia.org/ontology/nationality> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/title",
			"label": "title",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "46,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zaman_Shah_Durrani",
			"label": "durrani zaman shah",
			"seq": "15,32"
		}, {
			"uri": "http://dbpedia.org/resource/Salahuddin_Rabbani",
			"label": "salahuddin",
			"seq": "61,70"
		}]
	},
	{
		"id": "94a86fc843af4093900744147451118e",
		"question": "In which war did Roh Tae Woo and Lee Leffingwell fight?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roh_Tae-woo> <http://dbpedia.org/ontology/battle> ?uri. <http://dbpedia.org/resource/Lee_Leffingwell> <http://dbpedia.org/ontology/battle> ?uri . }",
		"sparql_id": "15",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "war",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "war",
			"seq": "9,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Roh_Tae-woo",
			"label": "woo tae roh",
			"seq": "17,27"
		}, {
			"uri": "http://dbpedia.org/resource/Lee_Leffingwell",
			"label": "leffingwell lee",
			"seq": "33,47"
		}]
	},
	{
		"id": "fa13e164104b419f82179aeed15b6117",
		"question": "list  the producer of the movies in which Rosemarie DeWitt in the star cast?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Rosemarie_DeWitt> . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "star",
			"seq": "66,69"
		}, {
			"uri": "http://dbpedia.org/property/producer",
			"label": "producer",
			"seq": "10,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "movies",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rosemarie_DeWitt",
			"label": "rosemarie dewitt",
			"seq": "42,57"
		}]
	},
	{
		"id": "8bdd1143f4044694980167f57d2f1ebd",
		"question": "What can be cooked out of things belonging to the order Sapindales?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Sapindales> . ?uri <http://dbpedia.org/ontology/ingredient> ?x  . }",
		"sparql_id": "6",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/order",
			"label": "order",
			"seq": "50,54"
		}, {
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "things",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sapindales",
			"label": "sapindales",
			"seq": "56,65"
		}]
	},
	{
		"id": "938bb65e3ede442c84c63fc27fb7b4ea",
		"question": "How many  TV shows were made by someone who was associated with Lewis Hamilton?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Lewis_Hamilton> . ?uri <http://dbpedia.org/property/creator> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "406",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated",
			"seq": "48,57"
		}, {
			"uri": "http://dbpedia.org/property/creator",
			"label": "made",
			"seq": "24,27"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "TV shows",
			"seq": "10,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lewis_Hamilton",
			"label": "hamilton lewis",
			"seq": "64,77"
		}]
	},
	{
		"id": "fb471cb9a15f4e8a84b6741cf2b2850c",
		"question": "What is the city whose mayor is Giorgos Kaminis?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mayor> <http://dbpedia.org/resource/Giorgos_Kaminis>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>}",
		"sparql_id": "301",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mayor",
			"label": "mayor",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/ontology/AdministrativeRegion",
			"label": "city",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Giorgos_Kaminis",
			"label": "kaminis giorgos",
			"seq": "32,46"
		}]
	},
	{
		"id": "d87c7466bde24cb3a5fcc03dc0c210fe",
		"question": "Name the alma mater of Michael hahn ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Hahn> <http://dbpedia.org/ontology/almaMater> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Hahn",
			"label": "michael hahn",
			"seq": "23,34"
		}]
	},
	{
		"id": "7c654505500d49bd835cc07799940fb1",
		"question": "How many party leaders are there whose parties are headquartered in Berlin?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Berlin> . ?x <http://dbpedia.org/ontology/leader> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
		"sparql_id": "405",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/headquarter",
			"label": "headquartered",
			"seq": "51,63"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leaders",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Politician",
			"label": "party leaders",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Berlin",
			"label": "berlin",
			"seq": "68,73"
		}]
	},
	{
		"id": "556d585ed3d04cff978e0f6c86b73d8d",
		"question": "How many total religions are followed by people whose hometown is somewhere in India?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/India> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "hometown",
			"seq": "54,61"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "religions",
			"seq": "15,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/India",
			"label": "india",
			"seq": "79,83"
		}]
	},
	{
		"id": "1df652b299e84ef4a467b353d91a9eff",
		"question": "Who are the cast members of The Simpsons Ride?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Simpsons_Ride> <http://dbpedia.org/property/starring> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "cast members",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Simpsons_Ride",
			"label": "The Simpsons Ride",
			"seq": "28,44"
		}]
	},
	{
		"id": "ebbd40c6a3ad4a8697e03dc804ff0b4f",
		"question": "Which american football team  has stadium as O.co Coliseum?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/O.co_Coliseum>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
		"sparql_id": "301",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "Which",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballTeam",
			"label": "american football team",
			"seq": "6,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/O.co_Coliseum",
			"label": "coliseum o.co",
			"seq": "45,57"
		}]
	},
	{
		"id": "6d1d440ec5414694a662782baff67759",
		"question": "What woman acted in the mating habits of earthbound humans and is often associated with Mams taylor?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Mating_Habits_of_the_Earthbound_Human> <http://dbpedia.org/property/starring> ?uri. <http://dbpedia.org/resource/Mams_Taylor> <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri . }",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "acted",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated",
			"seq": "72,81"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Mating_Habits_of_the_Earthbound_Human",
			"label": "the mating habits of earthbound humans",
			"seq": "20,57"
		}, {
			"uri": "http://dbpedia.org/resource/Mams_Taylor",
			"label": "taylor mams",
			"seq": "88,98"
		}]
	},
	{
		"id": "5e3b1b3d67c14e79a69346483e72f30e",
		"question": "List the products of Playboy Enterprises?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Playboy_Enterprises> <http://dbpedia.org/property/products> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "products",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Playboy_Enterprises",
			"label": "enterprises playboy",
			"seq": "21,39"
		}]
	},
	{
		"id": "0e1747e68f354dd482d80063d88e8466",
		"question": "Did Gwo Ka originate in Western Africa?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Gwo_ka> <http://dbpedia.org/property/stylisticOrigins> <http://dbpedia.org/resource/West_Africa> }",
		"sparql_id": "152",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/stylisticOrigins",
			"label": "originate",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gwo_ka",
			"label": "gwo ka",
			"seq": "4,9"
		}, {
			"uri": "http://dbpedia.org/resource/West_Africa",
			"label": "Western Africa",
			"seq": "24,37"
		}]
	},
	{
		"id": "7a11e9f4385d422fb3bd4fd737dbb307",
		"question": "What are some artists on the show whose opening theme is Send It On?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Send_It_On_(Disney's_Friends_for_Change_song)> . ?x <http://dbpedia.org/property/artist> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opening theme",
			"seq": "40,52"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "artists",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "29,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Send_It_On_(Disney's_Friends_for_Change_song)",
			"label": "Send It On",
			"seq": "57,66"
		}]
	},
	{
		"id": "487fb2a215ba44abb1cd73b0c0c37fda",
		"question": "Which company has a product named Visual Studio and One Drive as service ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/OneDrive> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Microsoft_Visual_Studio>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "service",
			"seq": "65,71"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "product",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/OneDrive",
			"label": "drive one",
			"seq": "52,60"
		}, {
			"uri": "http://dbpedia.org/resource/Microsoft_Visual_Studio",
			"label": "visual studio",
			"seq": "34,46"
		}]
	},
	{
		"id": "449ad6621b0e4991bd93d146a64becab",
		"question": "Give me the total number of commander of the military conflicts whose commander is Roundhead (Wyandot).",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/commander> <http://dbpedia.org/resource/Roundhead_(Wyandot)> . ?x <http://dbpedia.org/ontology/commander> ?uri }",
		"sparql_id": "111",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/commander",
			"label": "commander",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "28,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Roundhead_(Wyandot)",
			"label": "Roundhead (Wyandot)",
			"seq": "83,101"
		}]
	},
	{
		"id": "cff039a6ae4f4238b311e705c5b4614b",
		"question": "Who is the player who plays for the team that has the Michigan Stadium?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/stadium> <http://dbpedia.org/resource/Michigan_Stadium> . ?uri <http://dbpedia.org/property/currentteam> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "306",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/stadium",
			"label": "stadium",
			"seq": "63,69"
		}, {
			"uri": "http://dbpedia.org/property/currentteam",
			"label": "team",
			"seq": "36,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "player",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michigan_Stadium",
			"label": "michigan stadium",
			"seq": "54,69"
		}]
	},
	{
		"id": "8bb7bae6734a4a6492c283e11e8db101",
		"question": "Which country's leader is David Johnston?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/David_Johnston>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leader",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country's",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Johnston",
			"label": "johnston david",
			"seq": "26,39"
		}]
	},
	{
		"id": "22220c46c35d4bf18d79a51b59159884",
		"question": "How many factions have fought in wars where Francois Marie Le Marchand de Lignery was involved?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Fran\u00e7ois-Marie_Le_Marchand_de_Lignery> <http://dbpedia.org/ontology/battle> ?x . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "403",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "fought",
			"seq": "23,28"
		}, {
			"uri": "http://dbpedia.org/property/combatant",
			"label": "wars",
			"seq": "33,36"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "marchand",
			"seq": "62,69"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fran\u00e7ois-Marie_Le_Marchand_de_Lignery",
			"label": "Francois Marie Le Marchand de Lignery",
			"seq": "44,80"
		}]
	},
	{
		"id": "fb9fef1a345e41a8a89924438d199ab6",
		"question": "Who is the leader of the town where the Myntdu river originates?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Myntdu_River> <http://dbpedia.org/ontology/origin> ?x . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Town>}",
		"sparql_id": "303",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "originates",
			"seq": "53,62"
		}, {
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "leader",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Town",
			"label": "town",
			"seq": "25,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Myntdu_River",
			"label": "myntdu river",
			"seq": "40,51"
		}]
	},
	{
		"id": "f6f6f72678964b8d94d2af776d9f76bb",
		"question": "List the movies whose editors are born in London.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/London> . ?uri <http://dbpedia.org/ontology/editing> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "born",
			"seq": "34,37"
		}, {
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "editors",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "movies",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/London",
			"label": "London",
			"seq": "42,47"
		}]
	},
	{
		"id": "413efd91c7ba4afcbd998432bd8c5531",
		"question": "What is the incumbent of the Al Gore presidential campaign, 2000 and also the president of the Ann Lewis ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Al_Gore_presidential_campaign,_2000> <http://dbpedia.org/ontology/incumbent> ?uri. <http://dbpedia.org/resource/Ann_Lewis> <http://dbpedia.org/ontology/president> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/incumbent",
			"label": "incumbent",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "37,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Al_Gore_presidential_campaign,_2000",
			"label": "Al Gore presidential campaign, 2000",
			"seq": "29,63"
		}, {
			"uri": "http://dbpedia.org/resource/Ann_Lewis",
			"label": "lewis ann",
			"seq": "95,103"
		}]
	},
	{
		"id": "f20340cfdedd4821a148e2baf7bbc531",
		"question": "Which royal person married the successor of Darius I?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Darius_I> . ?uri <http://dbpedia.org/property/spouse> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "306",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "successor",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/property/spouse",
			"label": "married",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "royal person",
			"seq": "6,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Darius_I",
			"label": "Darius I",
			"seq": "44,51"
		}]
	},
	{
		"id": "553a9cedaec54b4f8160ba21fec81957",
		"question": "What is the region of the Kim Sawchuk which is also served by the Airtours International Airways ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kim_Sawchuk> <http://dbpedia.org/property/region> ?uri. <http://dbpedia.org/resource/Airtours_International_Airways> <http://dbpedia.org/property/destinations> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/region",
			"label": "region",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "served by",
			"seq": "52,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kim_Sawchuk",
			"label": "sawchuk kim",
			"seq": "26,36"
		}, {
			"uri": "http://dbpedia.org/resource/Airtours_International_Airways",
			"label": "international airtours airways",
			"seq": "66,95"
		}]
	},
	{
		"id": "30e7fe4d37d4480d8bcd9e85057504ab",
		"question": "Where was Antonio Giannini born?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Antonio_Giannini> <http://dbpedia.org/ontology/birthPlace> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "born",
			"seq": "27,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Antonio_Giannini",
			"label": "giannini antonio",
			"seq": "10,25"
		}]
	},
	{
		"id": "b1eb16707621406e83de3269573e6703",
		"question": "Where was David Scherman trained ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Scherman> <http://dbpedia.org/ontology/training> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/training",
			"label": "trained",
			"seq": "25,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Scherman",
			"label": "scherman david",
			"seq": "10,23"
		}]
	},
	{
		"id": "53e6885f679049b3912f392f6b6d80c3",
		"question": "Which company offer service of Outlook.com and OneDrive?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Outlook.com> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/OneDrive> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "307",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "service",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "service",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Outlook.com",
			"label": "outlook.com",
			"seq": "31,41"
		}, {
			"uri": "http://dbpedia.org/resource/OneDrive",
			"label": "onedrive",
			"seq": "47,54"
		}]
	},
	{
		"id": "b7ac1b81508e4f6081ad0dc4b5b009f5",
		"question": "What is the province of Rouen Business School ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rouen_Business_School> <http://dbpedia.org/property/province> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/province",
			"label": "province",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rouen_Business_School",
			"label": "business school rouen",
			"seq": "24,44"
		}]
	},
	{
		"id": "3b974c045b2e4beb9b59e0a8b37717cc",
		"question": "What religions do politicians in the Korean Minjoo Party follow?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Minjoo_Party_of_Korea> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "51,55"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "5,13"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "politicians",
			"seq": "18,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Minjoo_Party_of_Korea",
			"label": "Korean Minjoo Party",
			"seq": "37,55"
		}]
	},
	{
		"id": "6c1e8f0fd26d46a99e74e077585e78c5",
		"question": "Give me the total number of employer of the engineers whose one of the employer is McDonnell Aircraft ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/McDonnell_Aircraft> . ?x <http://dbpedia.org/ontology/employer> ?uri }",
		"sparql_id": "111",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "employer",
			"seq": "28,35"
		}, {
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "employer",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/McDonnell_Aircraft",
			"label": "mcdonnell aircraft",
			"seq": "83,100"
		}]
	},
	{
		"id": "120b4c5d72884ab7bed686704a78e112",
		"question": "What were the major actions taken by the politicians living in Gales Ferry, Connecticut?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Gales_Ferry,_Connecticut> . ?x <http://dbpedia.org/ontology/battle> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "living in",
			"seq": "53,61"
		}, {
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "@@@",
			"seq": "-1,-1"
		}, {
			"uri": "http://dbpedia.org/ontology/Politician",
			"label": "politicians",
			"seq": "41,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gales_Ferry,_Connecticut",
			"label": "connecticut ferry, gales",
			"seq": "63,86"
		}]
	},
	{
		"id": "e9800af29b274e64b6e1d8fe78b11a40",
		"question": "Where was Live in Detroit, MI recorded ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded",
			"seq": "30,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Live_in_Detroit,_MI",
			"label": "Live in Detroit, MI",
			"seq": "10,28"
		}]
	},
	{
		"id": "5c2a0fdd797b4369b317ef7541f9dc35",
		"question": "who all have been a manager of english under twenty one football team?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team> } ",
		"sparql_id": "1",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/managerclubs",
			"label": "manager",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England_national_under-21_football_team",
			"label": "english under twenty one football team",
			"seq": "31,68"
		}]
	},
	{
		"id": "e3f84d4ea2bf4837a4250a5cce509c30",
		"question": "Name the sea with Helsinki as one of the shore city and is also an outflow for Danish straits?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Helsinki> . ?uri <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Danish_straits>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "308",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "city",
			"seq": "47,50"
		}, {
			"uri": "http://dbpedia.org/property/outflow",
			"label": "outflow",
			"seq": "67,73"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "9,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Helsinki",
			"label": "helsinki",
			"seq": "18,25"
		}, {
			"uri": "http://dbpedia.org/resource/Danish_straits",
			"label": "straits danish",
			"seq": "79,92"
		}]
	},
	{
		"id": "357edf2393e94d8c9218db99a838a080",
		"question": "What awards have been won by the executive producer of Timmy Time ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Timmy_Time> <http://dbpedia.org/ontology/executiveProducer> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "33,50"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Timmy_Time",
			"label": "timmy time",
			"seq": "55,64"
		}]
	},
	{
		"id": "37a0e0437d3549d1ab607f3bcc29d49b",
		"question": "What is the district of Fort Heath radar station ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fort_Heath_radar_station> <http://dbpedia.org/property/district> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/district",
			"label": "district",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fort_Heath_radar_station",
			"label": "station radar heath fort",
			"seq": "24,47"
		}]
	},
	{
		"id": "d704a94fd1fb40aa80e96962ef8ad7f2",
		"question": "What is the common nickname given both to Harding academy and Lyons township high school?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Harding_Academy_(Memphis)> <http://dbpedia.org/property/nickname> ?uri. <http://dbpedia.org/resource/Lyons_Township_High_School> <http://dbpedia.org/property/nickname> ?uri . }",
		"sparql_id": "15",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "19,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harding_Academy_(Memphis)",
			"label": "harding academy",
			"seq": "42,56"
		}, {
			"uri": "http://dbpedia.org/resource/Lyons_Township_High_School",
			"label": "township school lyons high",
			"seq": "62,87"
		}]
	},
	{
		"id": "3ca24dd2487c4192af7eabf87b4a30f5",
		"question": "Count all those who've played for the youth club which owns the Rosario, Santa Fe stadium.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Rosario,_Santa_Fe> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/ground",
			"label": "stadium",
			"seq": "82,88"
		}, {
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youth club",
			"seq": "38,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rosario,_Santa_Fe",
			"label": "Rosario, Santa Fe",
			"seq": "64,80"
		}]
	},
	{
		"id": "4ee83040646043bab75bab4d3b19e105",
		"question": "What are some families of mammals in the animal kingdom?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> . ?x <http://dbpedia.org/ontology/family> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/kingdom",
			"label": "kingdom",
			"seq": "48,54"
		}, {
			"uri": "http://dbpedia.org/ontology/family",
			"label": "families",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Mammal",
			"label": "mammals",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Animal",
			"label": "animal",
			"seq": "41,46"
		}]
	},
	{
		"id": "1dd15e0e5e684a168e1ded727d0942ed",
		"question": "What is the profession of the Chris Myers (New Jersey) which is the governing body of Oahu Railway and Land Company ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chris_Myers_(New_Jersey)> <http://dbpedia.org/ontology/profession> ?uri. <http://dbpedia.org/resource/Oahu_Railway_and_Land_Company> <http://dbpedia.org/property/governingBody> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "profession",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governing body",
			"seq": "68,81"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chris_Myers_(New_Jersey)",
			"label": "jersey) myers chris (new",
			"seq": "30,53"
		}, {
			"uri": "http://dbpedia.org/resource/Oahu_Railway_and_Land_Company",
			"label": "Oahu Railway and Land Company",
			"seq": "86,114"
		}]
	},
	{
		"id": "9633e3f24eb54f34b01ee6d1c08f943b",
		"question": "Count all the different purposes followed by the different NGOs.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Non-governmental_organization> . ?x <http://dbpedia.org/property/purpose> ?uri  . }",
		"sparql_id": "105",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/type",
			"label": "Count",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/property/purpose",
			"label": "purposes",
			"seq": "24,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Non-governmental_organization",
			"label": "NGOs",
			"seq": "59,62"
		}]
	},
	{
		"id": "0e1f9caa3e1941c08f8685a375af037d",
		"question": "Which television show's developer is Brian Graden and voices to the character is by Isaac Hayes?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Brian_Graden> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "developer",
			"seq": "24,32"
		}, {
			"uri": "http://dbpedia.org/property/voices",
			"label": "voices",
			"seq": "54,59"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show's",
			"seq": "6,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brian_Graden",
			"label": "graden brian",
			"seq": "37,48"
		}, {
			"uri": "http://dbpedia.org/resource/Isaac_Hayes",
			"label": "isaac hayes",
			"seq": "84,94"
		}]
	},
	{
		"id": "62a255d7774446fca4a570b227bc463e",
		"question": "How many things are crossed over by bridges which can carry cars?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
		"sparql_id": "105",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/carries",
			"label": "carry",
			"seq": "54,58"
		}, {
			"uri": "http://dbpedia.org/property/crosses",
			"label": "crossed",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Motor_vehicle",
			"label": "cars",
			"seq": "60,63"
		}]
	},
	{
		"id": "6e5ca1c3866c4d40803a16e1119672a6",
		"question": "Did Steve Sampson manage a club of Santa Clara university",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Steve_Sampson> <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/Santa_Clara_University> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/managerClub",
			"label": "manage a club",
			"seq": "18,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steve_Sampson",
			"label": "sampson steve",
			"seq": "4,16"
		}, {
			"uri": "http://dbpedia.org/resource/Santa_Clara_University",
			"label": "university santa clara",
			"seq": "35,56"
		}]
	},
	{
		"id": "60a97365c85d48f790174e2e468ec6e0",
		"question": "What newspapers's owners is Schibsted",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/owners> <http://dbpedia.org/resource/Schibsted>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
		"sparql_id": "301",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owners",
			"label": "owners",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Newspaper",
			"label": "newspapers's",
			"seq": "5,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Schibsted",
			"label": "schibsted",
			"seq": "28,36"
		}]
	},
	{
		"id": "eef1fbca5e44495eb158ddc399496b52",
		"question": "Which arena of WPC Dynamo Moscow is death location of Tigran Petrosian >",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WPC_Dynamo_Moscow> <http://dbpedia.org/property/arena> ?uri. <http://dbpedia.org/resource/Tigran_Petrosian> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/arena",
			"label": "arena",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "death location",
			"seq": "36,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WPC_Dynamo_Moscow",
			"label": "moscow dynamo wpc",
			"seq": "15,31"
		}, {
			"uri": "http://dbpedia.org/resource/Tigran_Petrosian",
			"label": "petrosian tigran",
			"seq": "54,69"
		}]
	},
	{
		"id": "b7d34b18a1a7492986c025ca171504e3",
		"question": "List the name of the soccer clubs whose chairman is Joan Laporta.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Joan_Laporta> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/chairman",
			"label": "chairman",
			"seq": "40,47"
		}, {
			"uri": "http://dbpedia.org/property/name",
			"label": "name",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClub",
			"label": "soccer clubs",
			"seq": "21,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joan_Laporta",
			"label": "Joan Laporta",
			"seq": "52,63"
		}]
	},
	{
		"id": "8a436b4d6a9c4452a7cdb52c1a8fb54e",
		"question": "List all the layouts of the automobile whose one of the layout is four-wheel-drive layout ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/layout> <http://dbpedia.org/resource/Front-engine,_four-wheel-drive_layout> . ?x <http://dbpedia.org/ontology/layout> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "311",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/layout",
			"label": "layout",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/layout",
			"label": "layout",
			"seq": "56,61"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "automobile",
			"seq": "28,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Front-engine,_four-wheel-drive_layout",
			"label": "four-wheel-drive layout",
			"seq": "66,88"
		}]
	},
	{
		"id": "d1e59f4659f1447daf1f03518db7111e",
		"question": "In which time zone is Pong Pha?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pong_Pha> <http://dbpedia.org/ontology/timeZone> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/timeZone",
			"label": "zone time",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pong_Pha",
			"label": "pong pha",
			"seq": "22,29"
		}]
	},
	{
		"id": "36826b2b0cc1469b91526bbfeeaa3d35",
		"question": "What is the alma mater of the Angela Trusty and Charles Ayres?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Angela_Trusty> <http://dbpedia.org/ontology/almaMater> ?uri. <http://dbpedia.org/resource/Charles_Ayres> <http://dbpedia.org/ontology/almaMater> ?uri . }",
		"sparql_id": "15",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Angela_Trusty",
			"label": "trusty angela",
			"seq": "30,42"
		}, {
			"uri": "http://dbpedia.org/resource/Charles_Ayres",
			"label": "charles ayres",
			"seq": "48,60"
		}]
	},
	{
		"id": "c6f59ba390834c9cb144952a1bedf699",
		"question": "Which band had the members of The Conglomerate, and has made 'Before I let you go'?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Conglomerate_(American_group)> <http://dbpedia.org/property/pastMembers> ?uri. <http://dbpedia.org/resource/Before_I_Let_You_Go> <http://dbpedia.org/ontology/musicalArtist> ?uri} ",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "members",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/musicalArtist",
			"label": "band",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Conglomerate_(American_group)",
			"label": "The Conglomerate",
			"seq": "30,45"
		}, {
			"uri": "http://dbpedia.org/resource/Before_I_Let_You_Go",
			"label": "Before I let you go",
			"seq": "62,80"
		}]
	},
	{
		"id": "74d88ff455d1442eb2c7cf52c8f6bed4",
		"question": "What is the birth place of the cast of Lagnacha Dhumdhadaka?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Lagnacha_Dhumdhadaka> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
		"sparql_id": "3",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "cast",
			"seq": "31,34"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lagnacha_Dhumdhadaka",
			"label": "dhumdhadaka lagnacha",
			"seq": "39,58"
		}]
	},
	{
		"id": "6f88aee8549b4f49983ccc544c1cac61",
		"question": "How many rivers start in an English speaking country?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/English_language> . ?uri <http://dbpedia.org/ontology/sourceCountry> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "406",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/officialLanguage",
			"label": "speaking",
			"seq": "36,43"
		}, {
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "start",
			"seq": "16,20"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/English_language",
			"label": "english",
			"seq": "28,34"
		}]
	},
	{
		"id": "175315957baa44d4803c095b646ee477",
		"question": "What is the television show whose theme music composer's home town is El Sobrante, California?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/El_Sobrante,_California> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "57,65"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composer's",
			"seq": "46,55"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/El_Sobrante,_California",
			"label": "El Sobrante, California",
			"seq": "70,92"
		}]
	},
	{
		"id": "a12c261c27154991801e5701a39bdc5b",
		"question": "What  is the Nickname of Daniel O'Regan ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Daniel_O'Regan> <http://dbpedia.org/property/nickname> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Daniel_O'Regan",
			"label": "o'regan daniel",
			"seq": "25,38"
		}]
	},
	{
		"id": "83982663a6f04e249b296b7d3bee0c46",
		"question": "Where are Aureus and Solidus used as currency?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Aureus> . ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Solidus_(coin)> . }",
		"sparql_id": "7",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currency",
			"seq": "37,44"
		}, {
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currency",
			"seq": "37,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Aureus",
			"label": "aureus",
			"seq": "10,15"
		}, {
			"uri": "http://dbpedia.org/resource/Solidus_(coin)",
			"label": "solidus",
			"seq": "21,27"
		}]
	},
	{
		"id": "ec38c30a73c44774b95944ad398e3e8b",
		"question": "Music for what was made by someone who died of a cardiovascular disease?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathCause> <http://dbpedia.org/resource/Cardiovascular_disease> . ?uri <http://dbpedia.org/property/music> ?x  . }",
		"sparql_id": "6",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "died of",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cardiovascular_disease",
			"label": "cardiovascular disease",
			"seq": "49,70"
		}]
	},
	{
		"id": "dc3644ed1dfc4da882751c8ba8661e2a",
		"question": "Is the chestnut white bellied rat a mammal?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Chestnut_white-bellied_rat> <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Mammal> }",
		"sparql_id": "151",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/class",
			"label": "a",
			"seq": "31,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chestnut_white-bellied_rat",
			"label": "chestnut bellied white rat",
			"seq": "7,32"
		}, {
			"uri": "http://dbpedia.org/resource/Mammal",
			"label": "mammal",
			"seq": "36,41"
		}]
	},
	{
		"id": "ba52d02c389e44feaf5d0a833e155c0e",
		"question": "Was Tim Gunn a guest on The Broken Code?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Broken_Code> <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Tim_Gunn> }",
		"sparql_id": "152",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/guests",
			"label": "guest",
			"seq": "15,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Broken_Code",
			"label": "broken code the",
			"seq": "24,38"
		}, {
			"uri": "http://dbpedia.org/resource/Tim_Gunn",
			"label": "gunn tim",
			"seq": "4,11"
		}]
	},
	{
		"id": "0d1b4492ca3a491c916bd0ceefdde54d",
		"question": "In how many nations can I find dishes made of Shallot?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Shallot> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "405",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "find",
			"seq": "26,29"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "nations",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "nations",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shallot",
			"label": "shallot",
			"seq": "46,52"
		}]
	},
	{
		"id": "6d6a489b56814dafafe173f865cf480d",
		"question": "Who are some american football players whose high school is Oktoc, Mississippi?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/Oktoc,_Mississippi>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "301",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/highSchool",
			"label": "school high",
			"seq": "45,55"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "american football players",
			"seq": "13,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oktoc,_Mississippi",
			"label": "mississippi oktoc,",
			"seq": "60,77"
		}]
	},
	{
		"id": "8b5986c0fa344ce8b5e1d878d471fe1c",
		"question": "What system is both a platform where Nord runs and also distributed The beauty inside?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nord_(video_game)> <http://dbpedia.org/ontology/computingPlatform> ?uri. <http://dbpedia.org/resource/The_Beauty_Inside> <http://dbpedia.org/ontology/distributor> ?uri . }",
		"sparql_id": "16",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "platform",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributed",
			"seq": "56,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nord_(video_game)",
			"label": "nord",
			"seq": "37,40"
		}, {
			"uri": "http://dbpedia.org/resource/The_Beauty_Inside",
			"label": "The beauty inside",
			"seq": "68,84"
		}]
	},
	{
		"id": "622f827a327f450d9f7674c67abce591",
		"question": "Is Tirana the largest city of Albania?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Albania> <http://dbpedia.org/property/largestCity> <http://dbpedia.org/resource/Tirana> }",
		"sparql_id": "151",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/largestCity",
			"label": "largest city",
			"seq": "14,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Albania",
			"label": "albania",
			"seq": "30,36"
		}, {
			"uri": "http://dbpedia.org/resource/Tirana",
			"label": "tirana",
			"seq": "3,8"
		}]
	},
	{
		"id": "cc5a0469264f4b9db2f762d99fac320f",
		"question": "what are some common games played at both Fr Agnel Multipurpose School and Vishwajyot High School?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fr._Agnel_Multipurpose_School_and_Junior_College> <http://dbpedia.org/ontology/sport> ?uri. <http://dbpedia.org/resource/Vishwajyot_High_School> <http://dbpedia.org/ontology/sport> ?uri . }",
		"sparql_id": "15",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "games",
			"seq": "21,25"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "games",
			"seq": "21,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fr._Agnel_Multipurpose_School_and_Junior_College",
			"label": "Fr Agnel Multipurpose School",
			"seq": "42,69"
		}, {
			"uri": "http://dbpedia.org/resource/Vishwajyot_High_School",
			"label": "vishwajyot school high",
			"seq": "75,96"
		}]
	},
	{
		"id": "98df0f1a194d4bb1861607e4d2a1477a",
		"question": "Who were all the people in office when bob hawke was the PM?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Bob_Hawke> } ",
		"sparql_id": "1",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "PM",
			"seq": "57,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bob_Hawke",
			"label": "hawke bob",
			"seq": "39,47"
		}]
	},
	{
		"id": "129e928aa6144eaba586e4379ae9f973",
		"question": "Name some shows whose company is owned by the CBS Corporation?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/CBS_Corporation> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owned",
			"seq": "33,37"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "10,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CBS_Corporation",
			"label": "CBS Corporation",
			"seq": "46,60"
		}]
	},
	{
		"id": "38c688a1da544a7fb79c1a239732903f",
		"question": "Which sports are played at institues in Taguig?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Taguig> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "in",
			"seq": "27,28"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/EducationalInstitution",
			"label": "institues",
			"seq": "27,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Taguig",
			"label": "taguig",
			"seq": "40,45"
		}]
	},
	{
		"id": "47e1ecb9aed24329aa182ac22dd61027",
		"question": "Joe Hahn is the member of what band?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Joe_Hahn>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "301",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "member",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "31,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joe_Hahn",
			"label": "hahn joe",
			"seq": "0,7"
		}]
	},
	{
		"id": "7bbd4a94e58e4bd2b5c13beb56280925",
		"question": "Name the television show whose distributor is Comedy central and  the character voice is given by Isaac hayes ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Comedy_Central> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributor",
			"seq": "31,41"
		}, {
			"uri": "http://dbpedia.org/property/voices",
			"label": "voice",
			"seq": "80,84"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Comedy_Central",
			"label": "central comedy",
			"seq": "46,59"
		}, {
			"uri": "http://dbpedia.org/resource/Isaac_Hayes",
			"label": "isaac hayes",
			"seq": "98,108"
		}]
	},
	{
		"id": "be6db808f6ae400989a772e77e8e9ff1",
		"question": "Raymond Johansen is the mayor of what city?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Raymond_Johansen>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "mayor",
			"seq": "24,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Raymond_Johansen",
			"label": "johansen raymond",
			"seq": "0,15"
		}]
	},
	{
		"id": "f919a579f278404ea6751583426857cd",
		"question": "What is the nation of the speedway league where Ikaros Smederna played?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ikaros_Smederna> <http://dbpedia.org/ontology/league> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SpeedwayLeague>}",
		"sparql_id": "303",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/league",
			"label": "league",
			"seq": "35,40"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "nation",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/SpeedwayLeague",
			"label": "speedway league",
			"seq": "26,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ikaros_Smederna",
			"label": "smederna ikaros",
			"seq": "48,62"
		}]
	},
	{
		"id": "714196c75ed547948e2bd73be5cd2cc2",
		"question": "What are the kind of games one can play on windows?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Microsoft_Windows> . ?x <http://dbpedia.org/ontology/genre> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "605",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "on",
			"seq": "27,28"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "one",
			"seq": "27,29"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "21,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Windows",
			"label": "windows",
			"seq": "43,49"
		}]
	},
	{
		"id": "87fb8fce27b84f93b8bce8c5f37fd3f3",
		"question": "Count the number of sports played by schools which play hockey ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/sport> <http://dbpedia.org/resource/Hockey> . ?x <http://dbpedia.org/ontology/sport> ?uri }",
		"sparql_id": "111",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hockey",
			"label": "hockey",
			"seq": "56,61"
		}]
	},
	{
		"id": "25a932470707489bb49238d7d424b9a9",
		"question": "Who holds stock in the railway lines ending in Washington DC?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Union_Station_(Washington,_D.C.)> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayLine>}",
		"sparql_id": "305",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "ending",
			"seq": "37,42"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "holds stock",
			"seq": "4,14"
		}, {
			"uri": "http://dbpedia.org/ontology/RailwayLine",
			"label": "railway lines",
			"seq": "23,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Union_Station_(Washington,_D.C.)",
			"label": "washington",
			"seq": "47,56"
		}]
	},
	{
		"id": "bbcc0bde9178475b83167718e3f7f63c",
		"question": "Where is Temenos Group founded ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Temenos_Group> <http://dbpedia.org/property/foundation> ?uri } ",
		"sparql_id": "2",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Temenos_Group",
			"label": "temenos group",
			"seq": "9,21"
		}]
	},
	{
		"id": "d08d5583e3724547baa6711c074b4e4c",
		"question": "What was the language of the single which came before To Know Him Is to Love Him?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/To_Know_Him_Is_to_Love_Him> <http://dbpedia.org/ontology/previousWork> ?x . ?x <http://dbpedia.org/property/language> ?uri  . }",
		"sparql_id": "3",
		"checked": "true",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/previousWork",
			"label": "before",
			"seq": "47,52"
		}, {
			"uri": "http://dbpedia.org/property/language",
			"label": "language",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/To_Know_Him_Is_to_Love_Him",
			"label": "To Know Him Is to Love Him",
			"seq": "54,79"
		}]
	},
	{
		"id": "b144d19ed17845e3be65c933a80b56a5",
		"question": "Where was the narrator of Spain on the Road Again born?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Spain..._on_the_Road_Again> <http://dbpedia.org/ontology/narrator> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/narrator",
			"label": "narrator",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Spain..._on_the_Road_Again",
			"label": "spain again road the",
			"seq": "10,29"
		}]
	},
	{
		"id": "99e4d849107646e78dc70715e92b6f25",
		"question": "What is the common school of Chris Marve and Neria Douglass?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chris_Marve> <http://dbpedia.org/ontology/school> ?uri. <http://dbpedia.org/resource/Neria_Douglass> <http://dbpedia.org/ontology/almaMater> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/school",
			"label": "school",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "marve",
			"seq": "35,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chris_Marve",
			"label": "marve chris",
			"seq": "29,39"
		}, {
			"uri": "http://dbpedia.org/resource/Neria_Douglass",
			"label": "douglass neria",
			"seq": "45,58"
		}]
	},
	{
		"id": "31da90b739024aa79457f4f8a2e5e432",
		"question": "In which areas are the radio stations of Monticello, Maine available too?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Monticello,_Maine> . ?x <http://dbpedia.org/property/area> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "in",
			"seq": "0,1"
		}, {
			"uri": "http://dbpedia.org/property/area",
			"label": "areas",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/RadioStation",
			"label": "stations",
			"seq": "29,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Monticello,_Maine",
			"label": "monticello, maine",
			"seq": "41,57"
		}]
	},
	{
		"id": "30d274c7ebc944d6ac4e29e01c552fbb",
		"question": "What relegious affiliation of Josiah Idowu-Fearon was canonized by john of Damasucs ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_of_Damascus> <http://dbpedia.org/ontology/canonizedBy> ?uri. <http://dbpedia.org/resource/Josiah_Idowu-Fearon> <http://dbpedia.org/ontology/religion> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/canonizedBy",
			"label": "canonized by",
			"seq": "54,65"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "relegious",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_of_Damascus",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Josiah_Idowu-Fearon",
			"label": "idowu-fearon josiah",
			"seq": "30,48"
		}]
	},
	{
		"id": "584cc0fdb95040f19cc8ee83fa1c62bb",
		"question": "Name the TV show whose composer is Judy Hart Angelo and company as Paramount Television ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Judy_Hart_Angelo> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composer",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "56,62"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Judy_Hart_Angelo",
			"label": "angelo judy hart",
			"seq": "35,50"
		}, {
			"uri": "http://dbpedia.org/resource/Paramount_Television",
			"label": "television paramount",
			"seq": "67,86"
		}]
	},
	{
		"id": "8bcd288b39ee436f92f8e71b129048af",
		"question": "Rivers from which countries flow into the Caspian?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Caspian_Sea> . ?x <http://dbpedia.org/ontology/sourceCountry> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "rivers",
			"seq": "0,5"
		}, {
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "countries",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "0,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Caspian_Sea",
			"label": "caspian",
			"seq": "42,48"
		}]
	},
	{
		"id": "ebdbaf92c7bf4d16bf1e0624908a684f",
		"question": "Name the military unit whose garrison is Arlington County, Virginia and command structure is United States Department of Defense?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> . ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/garrison",
			"label": "garrison",
			"seq": "29,36"
		}, {
			"uri": "http://dbpedia.org/ontology/commandStructure",
			"label": "structure command",
			"seq": "72,88"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "military unit",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arlington_County,_Virginia",
			"label": "arlington virginia county,",
			"seq": "41,66"
		}, {
			"uri": "http://dbpedia.org/resource/United_States_Department_of_Defense",
			"label": "department defense united states",
			"seq": "93,124"
		}]
	},
	{
		"id": "6cda75748c1440b1a5c1a4d4f6d2810d",
		"question": "Where does the successor of Thongsuk Samdaengpan reside?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Thongsuk_Samdaengpan> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/location> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "15,23"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "thongsuk",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thongsuk_Samdaengpan",
			"label": "samdaengpan thongsuk",
			"seq": "28,47"
		}]
	},
	{
		"id": "d30b2d9672204e8ba6c45d14bee2bdb1",
		"question": "what are some devices made by asus?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Asus>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/InformationAppliance",
			"label": "some",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Asus",
			"label": "asus",
			"seq": "30,33"
		}]
	},
	{
		"id": "3da7b4f9f9174d63901356cf058dd0a6",
		"question": "Count the number of people who graduated from universities affiliated with the NCAA.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/athletics> <http://dbpedia.org/resource/National_Collegiate_Athletic_Association> . ?uri <http://dbpedia.org/property/education> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/athletics",
			"label": "the",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "graduated",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Collegiate_Athletic_Association",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "452897c147984666bc0750d8e1981a80",
		"question": "Is Queen Latifah associated with Afrika Baby Bam?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Afrika_Baby_Bam> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Queen_Latifah> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated",
			"seq": "17,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Afrika_Baby_Bam",
			"label": "afrika baby bam",
			"seq": "33,47"
		}, {
			"uri": "http://dbpedia.org/resource/Queen_Latifah",
			"label": "latifah queen",
			"seq": "3,15"
		}]
	},
	{
		"id": "058b1ad027e8461f8bdc3cbe71af5877",
		"question": "Count all that was built by a company whose leader is Kazuo Hirai?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Kazuo_Hirai> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "whose",
			"seq": "38,42"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "leader",
			"seq": "44,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kazuo_Hirai",
			"label": "kazuo hirai",
			"seq": "54,64"
		}]
	},
	{
		"id": "fee7a4bf34654f22a3e70e7544af3f20",
		"question": "Name the sports played by PATTS College of Aeronautics?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/athletics",
			"label": "aeronautics",
			"seq": "43,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PATTS_College_of_Aeronautics",
			"label": "aeronautics college patts",
			"seq": "26,50"
		}]
	},
	{
		"id": "af9721be263d4f1183dd36c6263b988a",
		"question": "Name the tenant of Ever bank field which has also has player named Dan Shamash ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dan_Shamash> <http://dbpedia.org/ontology/team> ?uri. <http://dbpedia.org/resource/EverBank_Field> <http://dbpedia.org/ontology/tenant> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "tenant",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenant",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dan_Shamash",
			"label": "shamash",
			"seq": "71,77"
		}, {
			"uri": "http://dbpedia.org/resource/EverBank_Field",
			"label": "field ever bank",
			"seq": "19,33"
		}]
	},
	{
		"id": "9fa439841abd475690547f59b821490f",
		"question": "Which country did the prime minister belong to who was served by Thanong Bidaya ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Thanong_Bidaya> <http://dbpedia.org/property/primeminister> ?x . ?x <http://dbpedia.org/ontology/nationality> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "minister prime",
			"seq": "22,35"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "country",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thanong_Bidaya",
			"label": "thanong bidaya",
			"seq": "65,78"
		}]
	},
	{
		"id": "40d8dc6cc6a44008b90476173e0fcbe3",
		"question": "What is the largest city in the country where the San Marcos River originates?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/San_Marcos_River> <http://dbpedia.org/ontology/sourceMountain> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceMountain",
			"label": "country",
			"seq": "32,38"
		}, {
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "32,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Marcos_River",
			"label": "marcos river san",
			"seq": "50,65"
		}]
	},
	{
		"id": "0d89f5d0f59b44e8a5353d50205fefa4",
		"question": "Give a list of all the labels that have jazz fusion artists signed up with them?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Jazz_fusion> . ?x <http://dbpedia.org/ontology/recordLabel> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "signed",
			"seq": "60,65"
		}, {
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "labels",
			"seq": "23,28"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "artists",
			"seq": "52,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jazz_fusion",
			"label": "fusion jazz",
			"seq": "40,50"
		}]
	},
	{
		"id": "49e05cb4c7b944b687a0c3d8d1766fc5",
		"question": "Name the major shrine of Bogumilus?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bogumilus> <http://dbpedia.org/ontology/majorShrine> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrine major",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bogumilus",
			"label": "bogumilus",
			"seq": "25,33"
		}]
	},
	{
		"id": "a0d691169c504035af1d90fd31a2014a",
		"question": "Name the office holder whose predecessor is  Henry E. Catto, Jr. and won Screen Actors Guild Life Achievement Award?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Henry_E._Catto,_Jr.> . ?uri <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Screen_Actors_Guild_Life_Achievement_Award>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "29,39"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "110,114"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henry_E._Catto,_Jr.",
			"label": "catto, henry",
			"seq": "45,56"
		}, {
			"uri": "http://dbpedia.org/resource/Screen_Actors_Guild_Life_Achievement_Award",
			"label": "achievement screen actors",
			"seq": "73,97"
		}]
	},
	{
		"id": "c57100a716d5441bb8cc6a588c54982b",
		"question": "Which holy places did consider Pope Gregory I as a saint?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pope_Gregory_I> <http://dbpedia.org/property/veneratedIn> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "saint",
			"seq": "51,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pope_Gregory_I",
			"label": "gregory pope",
			"seq": "31,42"
		}]
	},
	{
		"id": "148cdeb62654466ba6820ef343817fdb",
		"question": "List the religion of people in the Cambodian human rights party?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/otherParty> <http://dbpedia.org/resource/Human_Rights_Party_(Cambodia)> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/otherParty",
			"label": "party the",
			"seq": "5,13"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Human_Rights_Party_(Cambodia)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "37f49d990d204f4c83aa133bab321be3",
		"question": "In which teams have league members of the Czech Extraliga played previously?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/Czech_Extraliga> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "league",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Czech_Extraliga",
			"label": "extraliga czech",
			"seq": "42,56"
		}]
	},
	{
		"id": "f1e12faf9fbc416a9f4c648088eb0ce4",
		"question": "Count the wars in which people awarded with the Croix de guerre fought.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Croix_de_guerre_1939\u20131945_(France)> . ?x <http://dbpedia.org/property/battles> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "wars",
			"seq": "10,13"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "the",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "count",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Croix_de_guerre_1939\u20131945_(France)",
			"label": "guerre croix",
			"seq": "48,59"
		}]
	},
	{
		"id": "fdfee7b9d0c14c7eb2865ce63f009f2d",
		"question": "For which clubs do the players of Azam F.C. play for?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Azam_F.C.> <http://dbpedia.org/property/name> ?x . ?x <http://dbpedia.org/ontology/team> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/name",
			"label": "azam",
			"seq": "34,37"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "the",
			"seq": "19,21"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerPlayer",
			"label": "players",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Azam_F.C.",
			"label": "f.c. azam",
			"seq": "34,42"
		}]
	},
	{
		"id": "e24e471cc44e4ea99d44a35f6932aa9b",
		"question": "Which location of  INKAS is also the location of  T.I. Ahmadiyya Senior High School, Kumasi ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/INKAS> <http://dbpedia.org/property/locations> ?uri. <http://dbpedia.org/resource/T.I._Ahmadiyya_Senior_High_School,_Kumasi> <http://dbpedia.org/ontology/denomination> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locations",
			"label": "location",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/denomination",
			"label": "location",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/INKAS",
			"label": "inkas",
			"seq": "19,23"
		}, {
			"uri": "http://dbpedia.org/resource/T.I._Ahmadiyya_Senior_High_School,_Kumasi",
			"label": "ahmadiyya school, senior kumasi",
			"seq": "55,85"
		}]
	},
	{
		"id": "fc62fafe2c5c436cb7695e5a91beb9ed",
		"question": "Who are buried in  Rome and Mausoleum of Augustus?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome> . ?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Mausoleum_of_Augustus> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "buried",
			"seq": "8,13"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "buried",
			"seq": "8,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rome",
			"label": "rome",
			"seq": "19,22"
		}, {
			"uri": "http://dbpedia.org/resource/Mausoleum_of_Augustus",
			"label": "mausoleum augustus of",
			"seq": "28,48"
		}]
	},
	{
		"id": "4243b354b7954e75ad5981538c61dfa1",
		"question": "How many battles have involved commanders of 1st Free French Division?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/1st_Free_French_Division> <http://dbpedia.org/property/notableCommanders> ?x . ?x <http://dbpedia.org/property/battles> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableCommanders",
			"label": "commanders",
			"seq": "31,40"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "battles",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1st_Free_French_Division",
			"label": "division french free 1st",
			"seq": "45,68"
		}]
	},
	{
		"id": "172bb4fd523c408cb8cfc0bd46db1031",
		"question": "Count the number of cities on the Mediterranean Sea?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Mediterranean_Sea> <http://dbpedia.org/property/cities> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mediterranean_Sea",
			"label": "mediterranean",
			"seq": "34,46"
		}]
	},
	{
		"id": "0e83db3bc85c4c33bbc49dafc2825eb4",
		"question": "Name a  river with source country as Zambia and source location as Ikelenge  District?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Ikelenge_District>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "country source",
			"seq": "19,32"
		}, {
			"uri": "http://dbpedia.org/property/sourceLocation",
			"label": "location source",
			"seq": "19,33"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "8,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zambia",
			"label": "zambia",
			"seq": "37,42"
		}, {
			"uri": "http://dbpedia.org/resource/Ikelenge_District",
			"label": "ikelenge district",
			"seq": "67,83"
		}]
	},
	{
		"id": "7f65c4ab542e475aa78b39ba487c66d2",
		"question": "Which researchers received fellowship from Royal Society?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Royal_Society>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "received",
			"seq": "18,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "society",
			"seq": "49,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_Society",
			"label": "society royal",
			"seq": "43,55"
		}]
	},
	{
		"id": "e166d5d43fdf4091b8a0c9a5482c75c5",
		"question": "acer nigrum is used in making what?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Acer_nigrum> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "nigrum",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Acer_nigrum",
			"label": "nigrum acer",
			"seq": "0,10"
		}]
	},
	{
		"id": "89b2ce4827404f8bbd451c6143340f72",
		"question": "what are some famous people out of the Filipinos?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/stateOfOrigin> <http://dbpedia.org/resource/Filipinos> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "filipinos",
			"seq": "39,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Filipinos",
			"label": "filipinos",
			"seq": "39,47"
		}]
	},
	{
		"id": "da9c6ff456104d10945b6af22f54ca27",
		"question": "Who is the office holder with deputies as Neil Brown and Andrew Peacock?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Neil_Brown_(Australian_politician)> . ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Andrew_Peacock> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deputy",
			"label": "deputies",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/property/deputy",
			"label": "deputies",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "11,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neil_Brown_(Australian_politician)",
			"label": "brown neil",
			"seq": "42,51"
		}, {
			"uri": "http://dbpedia.org/resource/Andrew_Peacock",
			"label": "peacock andrew",
			"seq": "57,70"
		}]
	},
	{
		"id": "629c24823cdd4a4793f7696489607700",
		"question": "Which executive producer of Into the Dalek also produced Wizards vs Aliens ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Into_the_Dalek> <http://dbpedia.org/property/executiveProducer> ?uri. <http://dbpedia.org/resource/Wizards_vs_Aliens> <http://dbpedia.org/ontology/producer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/executiveProducer",
			"label": "executive producer",
			"seq": "6,23"
		}, {
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "16,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Into_the_Dalek",
			"label": "dalek into the",
			"seq": "28,41"
		}, {
			"uri": "http://dbpedia.org/resource/Wizards_vs_Aliens",
			"label": "wizards aliens",
			"seq": "57,70"
		}]
	},
	{
		"id": "c5bb228043054a8ea67035887fd84db8",
		"question": "Who appointed the successor of Charles Pinckney ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Charles_Pinckney_(governor)> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/appointer> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/property/appointer",
			"label": "appointed",
			"seq": "4,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_Pinckney_(governor)",
			"label": "pinckney charles",
			"seq": "31,46"
		}]
	},
	{
		"id": "dff1afb3640745f382d04cc81eeff9e1",
		"question": "Where did they debut their careers , those who have played for US men's national soccer team?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/United_States_men's_national_soccer_team> . ?x <http://dbpedia.org/property/debutteam> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "national team",
			"seq": "72,84"
		}, {
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut team",
			"seq": "15,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_men's_national_soccer_team",
			"label": "national soccer men's team",
			"seq": "66,91"
		}]
	},
	{
		"id": "139da48f4c4e4d1e91d23b6890ef6f4f",
		"question": "To whom was Tessa Dahl born to?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tessa_Dahl> <http://dbpedia.org/ontology/parent> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "born",
			"seq": "23,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tessa_Dahl",
			"label": "tessa dahl",
			"seq": "12,21"
		}]
	},
	{
		"id": "ea289b0161b2405ca5ec1de91100eab1",
		"question": "EU Broadcasting Union is the owner of the distributor of what?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/European_Broadcasting_Union> . ?uri <http://dbpedia.org/ontology/distributor> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributor",
			"seq": "42,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/European_Broadcasting_Union",
			"label": "broadcasting",
			"seq": "3,14"
		}]
	},
	{
		"id": "38646a24ca5a41c2b44a07158a6d5483",
		"question": "Was Jack Ryan a nominee of US Senate?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jack_Ryan_(politician)> <http://dbpedia.org/ontology/nominee> <http://dbpedia.org/resource/United_States_Senate> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nominee",
			"label": "nominee",
			"seq": "16,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jack_Ryan_(politician)",
			"label": "ryan jack",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/resource/United_States_Senate",
			"label": "senate",
			"seq": "30,35"
		}]
	},
	{
		"id": "a0423af0bfd24f718c7e57062d36a615",
		"question": "Count the number of religions followed by the alumini of Ananda College.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Ananda_College> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "number",
			"seq": "10,15"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "20,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ananda_College",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ebe64596063a43719e1b6479a9d09d94",
		"question": "Which city located on Mediterranean Sea is also the stadium of Panionios G.S.S. season ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2014\u201315_Panionios_G.S.S._season> <http://dbpedia.org/property/stadium> ?uri. <http://dbpedia.org/resource/Mediterranean_Sea> <http://dbpedia.org/property/cities> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/stadium",
			"label": "stadium",
			"seq": "52,58"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "city",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2014\u201315_Panionios_G.S.S._season",
			"label": "panionios season g.s.s.",
			"seq": "63,85"
		}, {
			"uri": "http://dbpedia.org/resource/Mediterranean_Sea",
			"label": "mediterranean",
			"seq": "22,34"
		}]
	},
	{
		"id": "7b9c6c00806d42ef9ece1689ddac88c8",
		"question": "What is the river whose source is Cowombat  Flat and has it's mouth located in Murray Mouth?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Cowombat_Flat> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Murray_Mouth>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/source",
			"label": "source",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river mouth",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cowombat_Flat",
			"label": "cowombat flat",
			"seq": "34,46"
		}, {
			"uri": "http://dbpedia.org/resource/Murray_Mouth",
			"label": "murray mouth",
			"seq": "62,73"
		}]
	},
	{
		"id": "c4acb6859ef2400a8989bd05cdf3f766",
		"question": "What is the broadcast area of WBCQ (SW) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WBCQ_(SW)> <http://dbpedia.org/property/area> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/area",
			"label": "area",
			"seq": "22,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WBCQ_(SW)",
			"label": "wbcq (sw)",
			"seq": "30,38"
		}]
	},
	{
		"id": "43659f479aa14b2aa8703e06d7a71405",
		"question": "Who were in the youth clubs that were in season of 2015 Argentine Primera Division?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/season> <http://dbpedia.org/resource/2015_Argentine_Primera_Divisi\u00f3n> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/season",
			"label": "season",
			"seq": "41,46"
		}, {
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youth clubs",
			"seq": "16,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2015_Argentine_Primera_Divisi\u00f3n",
			"label": "argentine primera",
			"seq": "56,72"
		}]
	},
	{
		"id": "df05400e047e44529cb00216e3ca4203",
		"question": "List the cities which share the same water body as that of Florida ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Florida> . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BodyOfWater>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/BodyOfWater",
			"label": "water body of",
			"seq": "37,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Florida",
			"label": "florida",
			"seq": "59,65"
		}]
	},
	{
		"id": "dc045b68c18349d693ff758050108ee5",
		"question": "God Defend New Zealand is the national anthem of which country?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nationalAnthem> <http://dbpedia.org/resource/God_Defend_New_Zealand> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalAnthem",
			"label": "national anthem",
			"seq": "30,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/God_Defend_New_Zealand",
			"label": "zealand defend",
			"seq": "4,17"
		}]
	},
	{
		"id": "ce7341ebdfa44c9b8066a65553c210b4",
		"question": "What is the name of the movie whose director of photography was Jordan Cronenweth and music composer was Vangelis?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Vangelis>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cinematography",
			"label": "photography",
			"seq": "48,58"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer music",
			"seq": "86,99"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "17,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jordan_Cronenweth",
			"label": "cronenweth jordan",
			"seq": "64,80"
		}, {
			"uri": "http://dbpedia.org/resource/Vangelis",
			"label": "vangelis",
			"seq": "105,112"
		}]
	},
	{
		"id": "515d73dc046545aa893eb5a29754ae6d",
		"question": "From how many coutries do companies come, which are headquartered in the Klang Valley?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Klang_Valley> . ?x <http://dbpedia.org/property/country> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquartered",
			"seq": "52,64"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "coutries",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "coutries",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Klang_Valley",
			"label": "valley klang",
			"seq": "73,84"
		}]
	},
	{
		"id": "4d0d78713fc845a3ac7f51b309934ca1",
		"question": "Who founded the sister stations of Discovery Communications?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/Discovery_Communications> . ?x <http://dbpedia.org/property/founder> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterNames",
			"label": "sister",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/property/founder",
			"label": "founded",
			"seq": "4,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Discovery_Communications",
			"label": "communications discovery",
			"seq": "35,58"
		}]
	},
	{
		"id": "05c054d50e42453aaea8ea3da8ce6afa",
		"question": "What are the notable works of the person who produced Queer as Folk?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Queer_as_Folk_(UK_TV_series)> <http://dbpedia.org/ontology/producer> ?x . ?x <http://dbpedia.org/property/notableworks> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "produced",
			"seq": "45,52"
		}, {
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "notable works",
			"seq": "13,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Queer_as_Folk_(UK_TV_series)",
			"label": "queer folk",
			"seq": "54,63"
		}]
	},
	{
		"id": "f90fbf38ccac4a54915b9f68886b7257",
		"question": "What are the border of High Desert (Oregon)?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/High_Desert_(Oregon)> <http://dbpedia.org/ontology/border> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/border",
			"label": "border",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/High_Desert_(Oregon)",
			"label": "(oregon) desert high",
			"seq": "23,42"
		}]
	},
	{
		"id": "0305f6c0414b4f0cba825e2346e0b8a0",
		"question": "What all is owned by a company one of whose division is Paramount Domestic Television?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Paramount_Domestic_Television> . ?uri <http://dbpedia.org/property/company> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/division",
			"label": "division",
			"seq": "44,51"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paramount_Domestic_Television",
			"label": "television paramount domestic",
			"seq": "56,84"
		}]
	},
	{
		"id": "5714a0b607134b3494e96af29ff7888b",
		"question": " Which musical band produced the subsequent work of City of New Orleans ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/City_of_New_Orleans_(song)> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/ontology/musicalBand> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "33,47"
		}, {
			"uri": "http://dbpedia.org/ontology/musicalBand",
			"label": "musical band",
			"seq": "7,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/City_of_New_Orleans_(song)",
			"label": "orleans city new",
			"seq": "52,67"
		}]
	},
	{
		"id": "37e79131355440699c0b9efeb17ecc4a",
		"question": "Which parent organization of Get TV also owns the Galleria ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri. <http://dbpedia.org/resource/The_Galleria> <http://dbpedia.org/ontology/owner> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentOrganisation",
			"label": "organization",
			"seq": "13,24"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owns",
			"seq": "41,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/GetTV",
			"label": "get tv",
			"seq": "29,34"
		}, {
			"uri": "http://dbpedia.org/resource/The_Galleria",
			"label": "galleria the",
			"seq": "46,57"
		}]
	},
	{
		"id": "d527decfd5df49a9852e46439a6e38ec",
		"question": "Which artist of Madagascar: Operation Penguin is also the writer of He's a Pirate ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Madagascar:_Operation_Penguin> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/He's_a_Pirate> <http://dbpedia.org/property/writer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "58,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Madagascar:_Operation_Penguin",
			"label": "madagascar: operation penguin",
			"seq": "16,44"
		}, {
			"uri": "http://dbpedia.org/resource/He's_a_Pirate",
			"label": "pirate he's",
			"seq": "68,78"
		}]
	},
	{
		"id": "789d45349934476b8ebaf084f1161fc0",
		"question": "Where did Goran Cengic die?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goran_\u010cengi\u0107> <http://dbpedia.org/property/deathPlace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "die",
			"seq": "23,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Goran_\u010cengi\u0107",
			"label": "goran",
			"seq": "10,14"
		}]
	},
	{
		"id": "39173d997c5d410fab182a0ea5ca6a78",
		"question": "The authors of Zhorstoke nebo was influenced by whom ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Zhorstoke_nebo> <http://dbpedia.org/ontology/author> ?x . ?x <http://dbpedia.org/ontology/influencedBy> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "authors",
			"seq": "4,10"
		}, {
			"uri": "http://dbpedia.org/ontology/influencedBy",
			"label": "influenced",
			"seq": "34,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zhorstoke_nebo",
			"label": "zhorstoke nebo",
			"seq": "15,28"
		}]
	},
	{
		"id": "1bdfe333c33d4a9b93c68aff83578281",
		"question": "Name the basketball team which is coached by Louis Dunbar and has president as Jeff Munn ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Louis_Dunbar> . ?uri <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Jeff_Munn>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballTeam>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coach",
			"label": "coached",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "66,74"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballTeam",
			"label": "basketball team",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Louis_Dunbar",
			"label": "dunbar louis",
			"seq": "45,56"
		}, {
			"uri": "http://dbpedia.org/resource/Jeff_Munn",
			"label": "munn jeff",
			"seq": "79,87"
		}]
	},
	{
		"id": "c6237ded5fec4e6e88b97e8bf24b84c8",
		"question": "Who all have rented the stadium whose architect is Populous?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/architect> <http://dbpedia.org/resource/Populous_(company)> . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "rented",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "24,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Populous_(company)",
			"label": "populous",
			"seq": "51,58"
		}]
	},
	{
		"id": "fca07533e88d461686cd3a1827d8d790",
		"question": "Which body governs over the place made by the chumash people?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/architect> <http://dbpedia.org/resource/Chumash_people> . ?x <http://dbpedia.org/ontology/governingBody> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architect",
			"label": "which",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/governingBody",
			"label": "governs",
			"seq": "11,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "place",
			"seq": "28,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chumash_people",
			"label": "chumash people",
			"seq": "46,59"
		}]
	},
	{
		"id": "a79197506cc946a797bee8f7882d90f0",
		"question": "Which hometown of pavel Moroz is also the palace of birthplace of Helena of Moscow ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pavel_Moroz> <http://dbpedia.org/property/hometown> ?uri. <http://dbpedia.org/resource/Helena_of_Moscow> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hometown",
			"label": "hometown",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birthplace",
			"seq": "52,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pavel_Moroz",
			"label": "pavel moroz",
			"seq": "18,28"
		}, {
			"uri": "http://dbpedia.org/resource/Helena_of_Moscow",
			"label": "moscow helena",
			"seq": "66,78"
		}]
	},
	{
		"id": "e54d1194593e4fabba95e42efed756c9",
		"question": "Which TV show developed by J. Michael Stracznski has artist as Christopher Franke ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> . ?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "53,58"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christopher_Franke",
			"label": "christopher franke",
			"seq": "63,80"
		}, {
			"uri": "http://dbpedia.org/resource/J._Michael_Straczynski",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d20a76100844447baaac326f589861ce",
		"question": "Name the largest city in the county where there is a Cy-Fair High School.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Cy-Fair_High_School> <http://dbpedia.org/ontology/county> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/county",
			"label": "county",
			"seq": "29,34"
		}, {
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cy-Fair_High_School",
			"label": "cy-fair",
			"seq": "53,59"
		}]
	},
	{
		"id": "dec00419f40040aab1c69746a1a93469",
		"question": "What are the academic interests of the past members of Senser?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Senser> <http://dbpedia.org/property/pastMembers> ?x . ?x <http://dbpedia.org/property/mainInterests> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "members past",
			"seq": "39,50"
		}, {
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "interests",
			"seq": "22,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Senser",
			"label": "senser",
			"seq": "55,60"
		}]
	},
	{
		"id": "f84aac1f48e348e8964388d29ed6a82b",
		"question": "Name the common associate band of Blayse and Teddy Riley ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blayse> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associate band",
			"seq": "16,29"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associate band",
			"seq": "16,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blayse",
			"label": "blayse",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/resource/Teddy_Riley",
			"label": "teddy riley",
			"seq": "45,55"
		}]
	},
	{
		"id": "60347895278a411187b6aaafce98462e",
		"question": "Who is the performer of album which has the song \"To Where You Are\" ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/To_Where_You_Are> <http://dbpedia.org/ontology/album> ?x . ?x <http://dbpedia.org/ontology/artist> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/album",
			"label": "album",
			"seq": "24,28"
		}, {
			"uri": "http://dbpedia.org/ontology/artist",
			"label": "is",
			"seq": "4,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/To_Where_You_Are",
			"label": "where",
			"seq": "53,57"
		}]
	},
	{
		"id": "d97aad57df5d45eb95490446fc978a61",
		"question": "Does the merlin express have a hub at the cibano international airport?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Merlin_Express> <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Cibao_International_Airport> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hubAirport",
			"label": "airport hub",
			"seq": "31,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Merlin_Express",
			"label": "express merlin",
			"seq": "9,22"
		}, {
			"uri": "http://dbpedia.org/resource/Cibao_International_Airport",
			"label": "international airport",
			"seq": "49,69"
		}]
	},
	{
		"id": "c6aec20e26bf401b81d1b6aa04ae91a5",
		"question": "How many people live in Wilton, Connecticut?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Wilton,_Connecticut>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "in",
			"seq": "21,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wilton,_Connecticut",
			"label": "connecticut wilton,",
			"seq": "24,42"
		}]
	},
	{
		"id": "859ca6438ab1484a8e5317f11e6d7dba",
		"question": "For how many different teams have Ontarians been drafted ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Ontario> . ?x <http://dbpedia.org/ontology/draftTeam> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "different",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/draftTeam",
			"label": "drafted",
			"seq": "49,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ontario",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "10c87cc916094a9a81664a0eed9decea",
		"question": "Which Fox  show is presented by Ryan Seacrest?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest> . ?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/presenter",
			"label": "presented",
			"seq": "19,27"
		}, {
			"uri": "http://dbpedia.org/property/channel",
			"label": "ryan",
			"seq": "32,35"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show is",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ryan_Seacrest",
			"label": "seacrest ryan",
			"seq": "32,44"
		}, {
			"uri": "http://dbpedia.org/resource/Fox_Broadcasting_Company",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "21dcb126b1924db68d44a389f565f443",
		"question": "How many rivers are crossed by different Box Girder bridges?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/design> <http://dbpedia.org/resource/Box_girder_bridge> . ?x <http://dbpedia.org/property/crosses> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/design",
			"label": "bridges",
			"seq": "52,58"
		}, {
			"uri": "http://dbpedia.org/property/crosses",
			"label": "crossed",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Box_girder_bridge",
			"label": "girder",
			"seq": "45,50"
		}]
	},
	{
		"id": "1184156dad9a478ba5e2c3590f20096e",
		"question": "What is the alma mater of the actors of The God Who Wasn't There ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_God_Who_Wasn't_There> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "there",
			"seq": "59,63"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_God_Who_Wasn't_There",
			"label": "wasn't there",
			"seq": "52,63"
		}]
	},
	{
		"id": "3b7070ada99b44be80d9025524919a86",
		"question": "What railway lines go through the stations maintained by Western Australian Public Transport Authority?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/Public_Transport_Authority_(Western_Australia)> . ?x <http://dbpedia.org/ontology/servingRailwayLine> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Station>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningOrganisation",
			"label": "stations",
			"seq": "34,41"
		}, {
			"uri": "http://dbpedia.org/ontology/servingRailwayLine",
			"label": "railway",
			"seq": "5,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Station",
			"label": "stations",
			"seq": "34,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Public_Transport_Authority_(Western_Australia)",
			"label": "transport authority",
			"seq": "83,101"
		}]
	},
	{
		"id": "6829110a0f8c4c0297649f7ae290e6b3",
		"question": "Which label released the movie written by Thomas Meehan?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Thomas_Meehan_(writer)> . ?x <http://dbpedia.org/property/label> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "which",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thomas_Meehan_(writer)",
			"label": "thomas meehan",
			"seq": "42,54"
		}]
	},
	{
		"id": "8b5f83f82fb945f68ec39bf2ee49c270",
		"question": "What is the leader name of the settlements whose governing body is Municipal council?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/governingBody> <http://dbpedia.org/resource/Municipal_council> . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governingBody",
			"label": "governing body",
			"seq": "49,62"
		}, {
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "leader name",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Settlement",
			"label": "settlements",
			"seq": "31,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Municipal_council",
			"label": "municipal council",
			"seq": "67,83"
		}]
	},
	{
		"id": "624847b205bc4cfdb3fc6d5a3bb94089",
		"question": "What is the major shrine of Jacques-Dsir Laval ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jacques-D\u00e9sir\u00e9_Laval> <http://dbpedia.org/ontology/majorShrine> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrine major",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jacques-D\u00e9sir\u00e9_Laval",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7cd11e37116b4218a85d96fc128b3c02",
		"question": "List places that are associated to cities in the state of Mecklenburg-Vorpommern.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/federalState> <http://dbpedia.org/resource/Mecklenburg-Vorpommern> . ?uri <http://dbpedia.org/property/cities> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/federalState",
			"label": "state",
			"seq": "49,53"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "35,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mecklenburg-Vorpommern",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d07c4caf5e9b42379ae12c0f145c97dc",
		"question": "What sporting goods companies are located in Herzogenaurach?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Herzogenaurach> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "34,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Herzogenaurach",
			"label": "herzogenaurach",
			"seq": "45,58"
		}]
	},
	{
		"id": "973af98c92e24d1793c45d8c0ed3e83b",
		"question": "Count the number of actors in Lucy Sullivan Is Getting Married.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Lucy_Sullivan_Is_Getting_Married> <http://dbpedia.org/property/starring> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "getting",
			"seq": "47,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lucy_Sullivan_Is_Getting_Married",
			"label": "sullivan getting",
			"seq": "35,50"
		}]
	},
	{
		"id": "c98f57f9e1cc479eb0dcea4abd33d23a",
		"question": "What genre of games are made by Blizzard Entertainment studios?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Blizzard_Entertainment> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "made",
			"seq": "24,27"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "genre",
			"seq": "5,9"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blizzard_Entertainment",
			"label": "entertainment blizzard",
			"seq": "32,53"
		}]
	},
	{
		"id": "27ac3a28ee1145f3b6b5a1b7fd89b595",
		"question": "Which predecessor of Alexander Downer was deputy to Neil Brown ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Alexander_Downer> . ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Neil_Brown_(Australian_politician)>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/property/deputy",
			"label": "deputy",
			"seq": "42,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alexander_Downer",
			"label": "alexander downer",
			"seq": "21,36"
		}, {
			"uri": "http://dbpedia.org/resource/Neil_Brown_(Australian_politician)",
			"label": "brown neil",
			"seq": "52,61"
		}]
	},
	{
		"id": "0975db6bce494a3ca9713353d0589ad3",
		"question": "Who built the stadium which was rented by Costa Rica national football team?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/tenants> <http://dbpedia.org/resource/Costa_Rica_national_football_team> . ?x <http://dbpedia.org/ontology/builder> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/tenants",
			"label": "team",
			"seq": "71,74"
		}, {
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "built",
			"seq": "4,8"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Costa_Rica_national_football_team",
			"label": "national football costa",
			"seq": "42,64"
		}]
	},
	{
		"id": "802bb417e72d4d8a9cb37d8136a0ae07",
		"question": "Which sports are played in the alma mater of Amitava Datta?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Amitava_Datta> <http://dbpedia.org/property/almaMater> ?x . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "31,40"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Amitava_Datta",
			"label": "amitava datta",
			"seq": "45,57"
		}]
	},
	{
		"id": "8c42485e42e641b297c1b7b9bc431f71",
		"question": "To which series does the character of Londo Mollari belong?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Londo_Mollari> <http://dbpedia.org/ontology/series> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Londo_Mollari",
			"label": "mollari londo",
			"seq": "38,50"
		}]
	},
	{
		"id": "eeeeba8f2afb457886b8942434d292ac",
		"question": "Count all the scientologists.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Scientology>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "count",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Scientology",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "484f28f611e648b4b388f6cf98d964bb",
		"question": "Rashid Behbudov State Song Theatre and Baku Puppet Theatre can be found in which country?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rashid_Behbudov_State_Song_Theatre> <http://dbpedia.org/ontology/locationCountry> ?uri. <http://dbpedia.org/resource/Baku_Puppet_Theatre> <http://dbpedia.org/ontology/locationCountry> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCountry",
			"label": "country",
			"seq": "81,87"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCountry",
			"label": "country",
			"seq": "81,87"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rashid_Behbudov_State_Song_Theatre",
			"label": "behbudov theatre rashid state",
			"seq": "0,28"
		}, {
			"uri": "http://dbpedia.org/resource/Baku_Puppet_Theatre",
			"label": "theatre puppet baku",
			"seq": "27,45"
		}]
	},
	{
		"id": "b5dca27ca03b43638ef8c6dddbd21693",
		"question": "What is the birthplace of Liudmila Privivkova and Qadir Huseynov ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liudmila_Privivkova> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/Qadir_Huseynov> <http://dbpedia.org/ontology/birthPlace> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birthplace",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birthplace",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Liudmila_Privivkova",
			"label": "privivkova liudmila",
			"seq": "26,44"
		}, {
			"uri": "http://dbpedia.org/resource/Qadir_Huseynov",
			"label": "huseynov qadir",
			"seq": "50,63"
		}]
	},
	{
		"id": "8bd9695f7e1442e2a222a9db2e5934f0",
		"question": "What is the predecessor of the automobile which is the related of Cadillac Fleetwood?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Cadillac_Fleetwood> <http://dbpedia.org/property/related> ?x . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/related",
			"label": "related",
			"seq": "55,61"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "automobile",
			"seq": "31,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cadillac_Fleetwood",
			"label": "fleetwood cadillac",
			"seq": "66,83"
		}]
	},
	{
		"id": "573991970f0e4f4c84b043e20bedf9ef",
		"question": "How many genres of games can I find on the commodore CDTV?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Commodore_CDTV> . ?x <http://dbpedia.org/ontology/genre> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "commodore",
			"seq": "43,51"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genres",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Commodore_CDTV",
			"label": "commodore cdtv",
			"seq": "43,56"
		}]
	},
	{
		"id": "8e4a97eb98a546acb53208b55d2b191a",
		"question": "List the cast member of the movies whose producer is Mark Johnson.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Mark_Johnson_(producer)> . ?x <http://dbpedia.org/ontology/starring> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "41,48"
		}, {
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "mark",
			"seq": "53,56"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "21,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mark_Johnson_(producer)",
			"label": "producer",
			"seq": "41,48"
		}]
	},
	{
		"id": "588353d070ef46ebab76b15f479bafda",
		"question": "Under which archipelago does Canary Islands fall?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/Canary_Islands> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/archipelago",
			"label": "archipelago",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canary_Islands",
			"label": "islands canary",
			"seq": "29,42"
		}]
	},
	{
		"id": "229566aad8594cd09f94da93dbe723fb",
		"question": "In how many  territories were the wars fought where Fusil Gras Mile 1874 were used?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Fusil_Gras_mle_1874> <http://dbpedia.org/ontology/usedInWar> ?x . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/usedInWar",
			"label": "used",
			"seq": "78,81"
		}, {
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "territories",
			"seq": "13,23"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "mile",
			"seq": "63,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fusil_Gras_mle_1874",
			"label": "fusil gras 1874",
			"seq": "52,66"
		}]
	},
	{
		"id": "c2b204dc4fa14f0fa3e64b8a5e79c362",
		"question": "What is the craft of the Ralph Flanders which is also the profession of  Claiborne Pell ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ralph_Flanders> <http://dbpedia.org/property/occupation> ?uri. <http://dbpedia.org/resource/Claiborne_Pell> <http://dbpedia.org/ontology/profession> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/occupation",
			"label": "claiborne",
			"seq": "73,81"
		}, {
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "profession",
			"seq": "58,67"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ralph_Flanders",
			"label": "flanders ralph",
			"seq": "25,38"
		}, {
			"uri": "http://dbpedia.org/resource/Claiborne_Pell",
			"label": "claiborne pell",
			"seq": "73,86"
		}]
	},
	{
		"id": "c69b4dff5f2c416d9a4d119548801193",
		"question": "Who are the politicians whose death place is Ontario?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Ontario>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "place death",
			"seq": "30,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Politician",
			"label": "politicians",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ontario",
			"label": "ontario",
			"seq": "45,51"
		}]
	},
	{
		"id": "60c286ef4d054f78a11a86763d47290b",
		"question": "Does the US route 281 have a junction at San Antonio?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/U.S._Route_281> <http://dbpedia.org/property/junction> <http://dbpedia.org/resource/San_Antonio> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/junction",
			"label": "junction",
			"seq": "29,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/U.S._Route_281",
			"label": "route 281",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/resource/San_Antonio",
			"label": "antonio san",
			"seq": "41,51"
		}]
	},
	{
		"id": "7b8f4f86aea64af6bca2e94f317956c2",
		"question": "Where do the CNN employees typically graduate from?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/CNN> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "employees",
			"seq": "17,25"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "graduate",
			"seq": "37,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CNN",
			"label": "cnn",
			"seq": "13,15"
		}]
	},
	{
		"id": "3de0478033a3450e981f4086b2f53e3e",
		"question": "Who has stock in the railway lines managed by Norfolk Southern Railway?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/system> <http://dbpedia.org/resource/Norfolk_Southern_Railway> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayLine>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/system",
			"label": "the",
			"seq": "17,19"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "southern",
			"seq": "54,61"
		}, {
			"uri": "http://dbpedia.org/ontology/RailwayLine",
			"label": "railway",
			"seq": "21,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Norfolk_Southern_Railway",
			"label": "southern railway norfolk",
			"seq": "21,44"
		}]
	},
	{
		"id": "5cf13a5c4a1849c6afb4b1a429c18893",
		"question": "Name the company whose one of the product is Pixar Image Computer and has one of the key person as Edwin Catmull?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Pixar_Image_Computer> . ?uri <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Edwin_Catmull>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/product",
			"label": "product",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "person key",
			"seq": "85,94"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pixar_Image_Computer",
			"label": "computer pixar image",
			"seq": "45,64"
		}, {
			"uri": "http://dbpedia.org/resource/Edwin_Catmull",
			"label": "catmull edwin",
			"seq": "99,111"
		}]
	},
	{
		"id": "9f7022f5c92b4603a66efc8ad9c62d35",
		"question": "Who has official residences at Beverly Hills and Colts Neck Township ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Beverly_Hills,_California> . ?uri <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Colts_Neck_Township,_New_Jersey> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residences",
			"seq": "17,26"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residences",
			"seq": "17,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Beverly_Hills,_California",
			"label": "beverly hills",
			"seq": "31,43"
		}, {
			"uri": "http://dbpedia.org/resource/Colts_Neck_Township,_New_Jersey",
			"label": "township colts neck",
			"seq": "49,67"
		}]
	},
	{
		"id": "a33350d8ce8d449a9ce52f0ca2451234",
		"question": "Give me a count of royalties buried in Rome ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "buried",
			"seq": "29,34"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "royalties",
			"seq": "19,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rome",
			"label": "rome",
			"seq": "39,42"
		}]
	},
	{
		"id": "eb58dda4372c4a6596673f32df5a1ef4",
		"question": "What is the route junction of Rhode Island Route 15 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rhode_Island_Route_15> <http://dbpedia.org/ontology/routeJunction> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeJunction",
			"label": "junction route",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rhode_Island_Route_15",
			"label": "island route rhode",
			"seq": "12,29"
		}]
	},
	{
		"id": "7231e19892bf4ed6bc48ad9493d50db8",
		"question": "Which executive producer of the ultimate merger is also an important person at Trump Productions?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Ultimate_Merger> <http://dbpedia.org/ontology/executiveProducer> ?uri. <http://dbpedia.org/resource/Trump_Productions> <http://dbpedia.org/ontology/keyPerson> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "6,23"
		}, {
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "person",
			"seq": "69,74"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Ultimate_Merger",
			"label": "ultimate merger",
			"seq": "32,46"
		}, {
			"uri": "http://dbpedia.org/resource/Trump_Productions",
			"label": "productions",
			"seq": "85,95"
		}]
	},
	{
		"id": "bc0e9473e03d40289b81d23a7aad7340",
		"question": "Is KOMC-FM the sister station of KOMC (AM)?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/KOMC_(AM)> <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/KOMC-FM> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sisterStation",
			"label": "station sister",
			"seq": "15,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/KOMC_(AM)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/KOMC-FM",
			"label": "komc-fm",
			"seq": "3,9"
		}]
	},
	{
		"id": "89044eb32d9442b1b3b0e8dab3d7a99d",
		"question": "Do the asiana airlines fly  to Jeju airport?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Asiana_Airlines> <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Jeju_International_Airport> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/targetAirport",
			"label": "airport",
			"seq": "36,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Asiana_Airlines",
			"label": "airlines asiana",
			"seq": "7,21"
		}, {
			"uri": "http://dbpedia.org/resource/Jeju_International_Airport",
			"label": "airport jeju",
			"seq": "31,42"
		}]
	},
	{
		"id": "001fa9f758104896b853528c748e25f6",
		"question": "Which awards are presented by Swedish Academy?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Swedish_Academy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/presenter",
			"label": "presented",
			"seq": "17,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Award",
			"label": "awards",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Swedish_Academy",
			"label": "swedish academy",
			"seq": "30,44"
		}]
	},
	{
		"id": "569c03444cd642899588bdbe6cf9351c",
		"question": "List the awards won by the fashion designer which have been recognized by Tennessee State Museum ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Tennessee_State_Museum> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FashionDesigner>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/FashionDesigner",
			"label": "designer fashion",
			"seq": "27,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tennessee_State_Museum",
			"label": "tennessee museum state",
			"seq": "74,95"
		}]
	},
	{
		"id": "c937de2356174723a6ec3e5563b02fa8",
		"question": "Which motion picture stories were edited by Ishir Honda?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Ishir\u014d_Honda>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "were",
			"seq": "29,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "which",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ishir\u014d_Honda",
			"label": "ishir honda",
			"seq": "44,54"
		}]
	},
	{
		"id": "938480f17cdc4fbfaa215a3e4217843d",
		"question": "What is the location of death of the skier who was the bronze medalist of Alpine skiing at the 1964 Winter Olympics  Men's slalom ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Alpine_skiing_at_the_1964_Winter_Olympics_\u2013_Men's_slalom> <http://dbpedia.org/ontology/bronzeMedalist> ?x . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Skier>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bronzeMedalist",
			"label": "medalist bronze",
			"seq": "55,69"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "death",
			"seq": "24,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Skier",
			"label": "skier",
			"seq": "37,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alpine_skiing_at_the_1964_Winter_Olympics_\u2013_Men's_slalom",
			"label": "olympics winter slalom skiing alpine",
			"seq": "74,109"
		}]
	},
	{
		"id": "745acda3a54043fab3bafce782bae4f9",
		"question": "Where all does the sister station of virgin radio play?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/Virgin_Radio> . ?x <http://dbpedia.org/property/location> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sisterStation",
			"label": "station sister",
			"seq": "19,32"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "station",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Virgin_Radio",
			"label": "virgin radio",
			"seq": "37,48"
		}]
	},
	{
		"id": "549f424393e345c0b173231ac5954fd1",
		"question": "What is the affiliation of tani University ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/\u014ctani_University> <http://dbpedia.org/property/affiliation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliation",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/\u014ctani_University",
			"label": "university tani",
			"seq": "27,41"
		}]
	},
	{
		"id": "2069abd16c734d1f8e9758bea35da77d",
		"question": "Which rivers originate from Dowra?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Dowra> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceMountain",
			"label": "originate",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dowra",
			"label": "dowra",
			"seq": "28,32"
		}]
	},
	{
		"id": "4d1bbe0ed05744749e253c143259609c",
		"question": "Who was the architect of the stadium currently run by the Pittsburgh Pirates?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/operator> <http://dbpedia.org/resource/Pittsburgh_Pirates> . ?x <http://dbpedia.org/property/architect> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operator",
			"label": "pirates",
			"seq": "69,75"
		}, {
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "29,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pittsburgh_Pirates",
			"label": "pittsburgh pirates",
			"seq": "58,75"
		}]
	},
	{
		"id": "876df0eecd7c4e78a79daa9a1e7b3343",
		"question": "How many TV shows have been created by Simon Fuller ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "created",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "simon",
			"seq": "39,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Simon_Fuller",
			"label": "fuller simon",
			"seq": "39,50"
		}]
	},
	{
		"id": "0d2597c2a2f94822a3951967fe2e3a7e",
		"question": "What is the record label of the Next Thing and also the  label of the The Producers (2005 film)?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Next_Thing> <http://dbpedia.org/ontology/recordLabel> ?uri. <http://dbpedia.org/resource/The_Producers_(2005_film)> <http://dbpedia.org/property/label> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "record label",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Next_Thing",
			"label": "thing next",
			"seq": "32,41"
		}, {
			"uri": "http://dbpedia.org/resource/The_Producers_(2005_film)",
			"label": "producers film) (2005 the",
			"seq": "8,32"
		}]
	},
	{
		"id": "4d489bcad0334bd58b83cdeedbd1c5ec",
		"question": "Did Henry Ford design the Model C?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ford_Model_C> <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/Henry_Ford> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designCompany",
			"label": "design",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Model_C",
			"label": "model ford",
			"seq": "10,19"
		}, {
			"uri": "http://dbpedia.org/resource/Henry_Ford",
			"label": "henry ford",
			"seq": "4,13"
		}]
	},
	{
		"id": "49df02ead3be433689a0ab015de139c9",
		"question": "How many people are known for Dragons' Den?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Dragons'_Den_(UK_TV_series)>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "20,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dragons'_Den_(UK_TV_series)",
			"label": "dragons' den",
			"seq": "30,41"
		}]
	},
	{
		"id": "09b0466736b646098262ca3fce5092aa",
		"question": "WHich region of the Providence Chapel, Charlwood is also the region of the Joseph Case High School",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Providence_Chapel,_Charlwood> <http://dbpedia.org/property/style> ?uri. <http://dbpedia.org/resource/Joseph_Case_High_School> <http://dbpedia.org/ontology/region> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/style",
			"label": "the",
			"seq": "16,18"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "region",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Providence_Chapel,_Charlwood",
			"label": "providence charlwood chapel,",
			"seq": "20,47"
		}, {
			"uri": "http://dbpedia.org/resource/Joseph_Case_High_School",
			"label": "school joseph high case",
			"seq": "75,97"
		}]
	},
	{
		"id": "2cc0b2ad617642aaace9eab113615942",
		"question": "Name the scientist whose supervisor was John Robert Woodyard and has won Norbert Wiener Award for Social and Professional Responsibility?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/John_Robert_Woodyard> . ?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Norbert_Wiener_Award_for_Social_and_Professional_Responsibility>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "supervisor",
			"seq": "25,34"
		}, {
			"uri": "http://dbpedia.org/property/prizes",
			"label": "professional",
			"seq": "109,120"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Robert_Woodyard",
			"label": "woodyard robert",
			"seq": "45,59"
		}, {
			"uri": "http://dbpedia.org/resource/Norbert_Wiener_Award_for_Social_and_Professional_Responsibility",
			"label": "responsibility professional norbert wiener social",
			"seq": "73,121"
		}]
	},
	{
		"id": "5091ad9fb7954f7b90ab7da686543728",
		"question": "Which branch of american military have both George Siebels jr and Leroy Collins served?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_G._Siebels,_Jr.> <http://dbpedia.org/property/branch> ?uri. <http://dbpedia.org/resource/LeRoy_Collins> <http://dbpedia.org/property/branch> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "315",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "military",
			"seq": "25,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_G._Siebels,_Jr.",
			"label": "siebels george",
			"seq": "44,57"
		}, {
			"uri": "http://dbpedia.org/resource/LeRoy_Collins",
			"label": "collins leroy",
			"seq": "66,78"
		}]
	},
	{
		"id": "c4d7c24ab2a34c4ea2ff5945ba35ef69",
		"question": "What are some relatives of armymen who died in Germany?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Germany> . ?x <http://dbpedia.org/ontology/relation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "relatives",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryPerson",
			"label": "armymen",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Germany",
			"label": "germany",
			"seq": "47,53"
		}]
	},
	{
		"id": "c33e201bd83f4ba38d3aabb00cec0f07",
		"question": "What is the award presented by Downtown Athletic Club and Yale Club NYCity?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Downtown_Athletic_Club> . ?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Yale_Club_of_New_York_City> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/presenter",
			"label": "presented",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/property/presenter",
			"label": "presented",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Award",
			"label": "award",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Downtown_Athletic_Club",
			"label": "downtown athletic club",
			"seq": "31,52"
		}, {
			"uri": "http://dbpedia.org/resource/Yale_Club_of_New_York_City",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9d8981bec314421cbc7ab5fa19b35a8b",
		"question": "List the  primeministers of Victor Hope, 2nd Marquess of Linlithgow ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Victor_Hope,_2nd_Marquess_of_Linlithgow> <http://dbpedia.org/property/primeminister> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "primeministers",
			"seq": "10,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Victor_Hope,_2nd_Marquess_of_Linlithgow",
			"label": "linlithgow marquess victor",
			"seq": "28,53"
		}]
	},
	{
		"id": "6bd921a06e6e42a39a5c041bfb20eb9e",
		"question": "What is the college of the basketball player who lives in Ashton Historic district?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Ashton_Historic_District> . ?x <http://dbpedia.org/property/college> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "player",
			"seq": "38,43"
		}, {
			"uri": "http://dbpedia.org/property/college",
			"label": "college",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballPlayer",
			"label": "basketball",
			"seq": "27,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ashton_Historic_District",
			"label": "historic district ashton",
			"seq": "58,81"
		}]
	},
	{
		"id": "489c3ac08b304bbaae50df383689eebe",
		"question": "Greater Napanee is the home town of what people?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Greater_Napanee>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "41,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Greater_Napanee",
			"label": "napanee greater",
			"seq": "0,14"
		}]
	},
	{
		"id": "df2e76ce3304460b96e4bc1004ba31ff",
		"question": "In which state is the Channel district?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Channel_District> <http://dbpedia.org/ontology/state> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/state",
			"label": "state",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Channel_District",
			"label": "district channel",
			"seq": "22,37"
		}]
	},
	{
		"id": "72e904a0c1464fa49e6a57b90d012b10",
		"question": "Name the religious affiliation of Vagif Aliyev ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vagif_Aliyev> <http://dbpedia.org/ontology/religion> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religious",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vagif_Aliyev",
			"label": "aliyev vagif",
			"seq": "34,45"
		}]
	},
	{
		"id": "2a6c65a45e7249bebfda9d7ab36715ad",
		"question": "Name the company founded in US and provides OneDrive as service ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/OneDrive> . ?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/United_States>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "service",
			"seq": "56,62"
		}, {
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/OneDrive",
			"label": "onedrive",
			"seq": "44,51"
		}, {
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0994c57e0c4a42daaa38f1d36dbb7e24",
		"question": "In which branch of the government does James L. McConaughy belong?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/James_L._McConaughy> <http://dbpedia.org/ontology/governor> ?x . ?x <http://dbpedia.org/property/branch> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governor",
			"label": "government",
			"seq": "23,32"
		}, {
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_L._McConaughy",
			"label": "mcconaughy james",
			"seq": "39,54"
		}]
	},
	{
		"id": "e4ff3218dca54f6e816707115b42aea9",
		"question": "Count the number of characters of the play whose one of the character is Catwoman ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/characters> <http://dbpedia.org/resource/Catwoman> . ?x <http://dbpedia.org/property/characters> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/characters",
			"label": "characters",
			"seq": "20,29"
		}, {
			"uri": "http://dbpedia.org/property/characters",
			"label": "characters",
			"seq": "20,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Catwoman",
			"label": "catwoman",
			"seq": "73,80"
		}]
	},
	{
		"id": "a216ea53e375474aa3d2a23273a88807",
		"question": "what cities are located on the sides of mediterranean sea?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mediterranean_Sea> <http://dbpedia.org/property/cities> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mediterranean_Sea",
			"label": "mediterranean",
			"seq": "40,52"
		}]
	},
	{
		"id": "6abd056cf07347d29aaf81047e0d6975",
		"question": "Is Bacillus belong to the domain Bacteria?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Bacillus> <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/domain",
			"label": "domain",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bacillus",
			"label": "bacillus",
			"seq": "3,10"
		}, {
			"uri": "http://dbpedia.org/resource/Bacteria",
			"label": "bacteria",
			"seq": "33,40"
		}]
	},
	{
		"id": "2ffbfa007109419280e603e3a3512ac9",
		"question": "How many currencies are in used in places where people speak French?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/French_language> . ?x <http://dbpedia.org/ontology/currency> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Currency>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/officialLanguage",
			"label": "places",
			"seq": "35,40"
		}, {
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currencies",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Currency",
			"label": "currencies",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/French_language",
			"label": "french",
			"seq": "61,66"
		}]
	},
	{
		"id": "6701db8180aa493ba901a225bd9a6ff2",
		"question": "What political party has governed both in Baraily,MP and Jowai?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Baraily> <http://dbpedia.org/ontology/leaderName> ?uri. <http://dbpedia.org/resource/Jowai> <http://dbpedia.org/ontology/leaderName> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "governed",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "governed",
			"seq": "25,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Baraily",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Jowai",
			"label": "jowai",
			"seq": "57,61"
		}]
	},
	{
		"id": "5ff2409a01034c5ba98c340602657d3b",
		"question": "Which officers fought in the war of Siege of Fort Recovery?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Siege_of_Fort_Recovery>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "the",
			"seq": "25,27"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "officers",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Siege_of_Fort_Recovery",
			"label": "recovery",
			"seq": "50,57"
		}]
	},
	{
		"id": "92bd8bf1ae994d77a70ff9745c6690be",
		"question": "How many writers speak a language belonging to the Germanic kind of languages?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Germanic_languages> . ?uri <http://dbpedia.org/property/language> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/languageFamily",
			"label": "language",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/property/language",
			"label": "language",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writers",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Germanic_languages",
			"label": "languages germanic",
			"seq": "51,68"
		}]
	},
	{
		"id": "4eba9f2aaa744ba699fd23239145e64b",
		"question": "Was Duanne Allman known to play the Les Paul?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Duane_Allman> <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Gibson_Les_Paul> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableInstruments",
			"label": "allman",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Duane_Allman",
			"label": "allman",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/resource/Gibson_Les_Paul",
			"label": "paul les",
			"seq": "36,43"
		}]
	},
	{
		"id": "aaab23649cce43d6957cdd09c3a4ea47",
		"question": "For which other teams do members of tanzanian national football team play?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Tanzania_national_football_team> . ?x <http://dbpedia.org/ontology/team> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "national team",
			"seq": "16,28"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "16,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tanzania_national_football_team",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d501cb9ebb8445839dc4079bffe5f377",
		"question": "Who are the major stockholders of the bank which is the company of Bloomberg Markets ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Bloomberg_Markets> <http://dbpedia.org/property/company> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "56,62"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "bloomberg",
			"seq": "67,75"
		}, {
			"uri": "http://dbpedia.org/ontology/Bank",
			"label": "bank",
			"seq": "38,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bloomberg_Markets",
			"label": "bloomberg markets",
			"seq": "67,83"
		}]
	},
	{
		"id": "640f3316ba4b47ec9f5efa399249afdb",
		"question": "How many maintainers are there of the bridges that can carry motor vehicles over them?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/carries",
			"label": "carry",
			"seq": "55,59"
		}, {
			"uri": "http://dbpedia.org/ontology/maintainedBy",
			"label": "maintainers",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Motor_vehicle",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "3e8fa86f90ba41089a2aea279c13c9f3",
		"question": "What race of Linda Hogan is the state of origin of the Holmes Colbert ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Hogan> <http://dbpedia.org/property/ethnicity> ?uri. <http://dbpedia.org/resource/Holmes_Colbert> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/ethnicity",
			"label": "the",
			"seq": "28,30"
		}, {
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "origin state",
			"seq": "32,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Linda_Hogan",
			"label": "linda hogan",
			"seq": "13,23"
		}, {
			"uri": "http://dbpedia.org/resource/Holmes_Colbert",
			"label": "colbert holmes",
			"seq": "55,68"
		}]
	},
	{
		"id": "b83ff0ecbd954891879ab98e725eb333",
		"question": "What is Jon Speelman famous for?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/field",
			"label": "speelman",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jon_Speelman",
			"label": "speelman jon",
			"seq": "8,19"
		}]
	},
	{
		"id": "7bb0d99556694daa97224e6cdb0d61f4",
		"question": "What is the name of the artist which worked on the subsequent work of Ella Loves Cole ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ella_Loves_Cole> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/property/artist> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "37,51"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "24,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ella_Loves_Cole",
			"label": "loves ella cole",
			"seq": "70,84"
		}]
	},
	{
		"id": "1d3e8d528a354735aa5fdffc086c9530",
		"question": "What are the television shows whose network is Prime Time Entertainment Network?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Prime_Time_Entertainment_Network>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/network",
			"label": "network",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Prime_Time_Entertainment_Network",
			"label": "entertainment network prime time",
			"seq": "36,67"
		}]
	},
	{
		"id": "659915fe8d864b808a9a514f5b3ff35d",
		"question": "What is the place of birth of the stars of Auto Shankar ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Auto_Shankar_(film)> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "stars",
			"seq": "34,38"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "place birth",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Auto_Shankar_(film)",
			"label": "shankar auto",
			"seq": "43,54"
		}]
	},
	{
		"id": "5b90785deb8a4411aaa78d29aa3731e5",
		"question": "In which state can I find Burr Truss styled bridges?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/style> <http://dbpedia.org/resource/Burr_Truss> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/style",
			"label": "styled",
			"seq": "37,42"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "state",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridges",
			"seq": "44,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Burr_Truss",
			"label": "truss burr",
			"seq": "26,35"
		}]
	},
	{
		"id": "c1149b9f20bf470fad0154de4f2e72b7",
		"question": "tonle sap flows into which river?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Tonl\u00e9_Sap> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/rightTributary",
			"label": "river",
			"seq": "27,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tonl\u00e9_Sap",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6229161c4acd41e5ba294a148a25abfb",
		"question": "What city is the residence of Cheryl Teigs?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cheryl_Tiegs> <http://dbpedia.org/ontology/residence> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residence",
			"seq": "17,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cheryl_Tiegs",
			"label": "cheryl",
			"seq": "30,35"
		}]
	},
	{
		"id": "f0f45ed050d342e9bfdffc12670f1bfc",
		"question": "List some teammates of Ndonga Mianga?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/currentMember> <http://dbpedia.org/resource/Ndonga_Mianga> . ?x <http://dbpedia.org/property/name> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currentMember",
			"label": "teammates",
			"seq": "10,18"
		}, {
			"uri": "http://dbpedia.org/property/name",
			"label": "some",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ndonga_Mianga",
			"label": "ndonga mianga",
			"seq": "23,35"
		}]
	},
	{
		"id": "3922223c92bd4c62a2b341fe8c73879c",
		"question": "Give me a count of everything under the archipelago, where Papeete is the biggest town.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Papeete> . ?uri <http://dbpedia.org/property/archipelago> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "biggest",
			"seq": "74,80"
		}, {
			"uri": "http://dbpedia.org/property/archipelago",
			"label": "archipelago,",
			"seq": "40,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Papeete",
			"label": "papeete",
			"seq": "59,65"
		}]
	},
	{
		"id": "a622cb449bde410c8c3e8c5c11a18ebb",
		"question": "Name the nearest city to  Lake Victoria?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lake_Victoria> <http://dbpedia.org/ontology/nearestCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "nearest city",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lake_Victoria",
			"label": "victoria lake",
			"seq": "26,38"
		}]
	},
	{
		"id": "416fe4e82425427cb42f2d36b6e64527",
		"question": "Name the constituency of Domenico Modugno ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Domenico_Modugno> <http://dbpedia.org/property/constituency> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Domenico_Modugno",
			"label": "domenico modugno",
			"seq": "25,40"
		}]
	},
	{
		"id": "c77dbf978c4e46a490287a6c82caa7f3",
		"question": "What awards did the founder of Grameen Bank win?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Grameen_Bank> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founder",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Grameen_Bank",
			"label": "grameen bank",
			"seq": "31,42"
		}]
	},
	{
		"id": "f86ad7519a244286acaa2a1bf42446cf",
		"question": "Where is Benjamin Franklin Terry buried, and US Route 59 has a junction?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Benjamin_Franklin_Terry> <http://dbpedia.org/property/placeofburial> ?uri. <http://dbpedia.org/resource/U.S._Route_59_in_Texas> <http://dbpedia.org/property/junction> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeofburial",
			"label": "buried,",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/property/junction",
			"label": "junction",
			"seq": "63,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Benjamin_Franklin_Terry",
			"label": "franklin benjamin terry",
			"seq": "9,31"
		}, {
			"uri": "http://dbpedia.org/resource/U.S._Route_59_in_Texas",
			"label": "route",
			"seq": "48,52"
		}]
	},
	{
		"id": "d50f2ea2f8f0440c87444bcf085f6899",
		"question": "Where were the doctoral students of James Langer born?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/James_S._Langer> <http://dbpedia.org/ontology/doctoralStudent> ?x . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralStudent",
			"label": "doctoral",
			"seq": "15,22"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "langer",
			"seq": "42,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_S._Langer",
			"label": "langer james",
			"seq": "36,47"
		}]
	},
	{
		"id": "e6f3d395b66f485cb8901bfbcb1c4c0c",
		"question": "Was A foreign policy on freedom covered by John Trumbull?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/A_Foreign_Policy_of_Freedom> <http://dbpedia.org/property/coverArtist> <http://dbpedia.org/resource/John_Trumbull> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coverArtist",
			"label": "covered",
			"seq": "32,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A_Foreign_Policy_of_Freedom",
			"label": "freedom foreign policy",
			"seq": "6,27"
		}, {
			"uri": "http://dbpedia.org/resource/John_Trumbull",
			"label": "trumbull john",
			"seq": "43,55"
		}]
	},
	{
		"id": "2cb981d2ba4a480c9a1e0f51b6478f22",
		"question": "Who is the writer of the singles whose producer is Peter-John Vettese?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Peter-John_Vettese> . ?x <http://dbpedia.org/ontology/writer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "producer",
			"seq": "39,46"
		}, {
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "writer",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Single",
			"label": "singles",
			"seq": "25,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peter-John_Vettese",
			"label": "peter-john vettese",
			"seq": "51,68"
		}]
	},
	{
		"id": "9650115540914f179ceb06bf8beef981",
		"question": "What company's leader is Edwin Catmull?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Edwin_Catmull>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "leader",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company's",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edwin_Catmull",
			"label": "catmull edwin",
			"seq": "25,37"
		}]
	},
	{
		"id": "47255156e21340db90b083e6f65946bd",
		"question": "Eric roth wrote how many screenplays?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Eric_Roth>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screenplays",
			"seq": "25,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eric_Roth",
			"label": "roth eric",
			"seq": "0,8"
		}]
	},
	{
		"id": "df00f7dce8864849b265e3d1128d8dd8",
		"question": "What is the common race of the Martin Molony and race of the Coneygree ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Molony> <http://dbpedia.org/ontology/race> ?uri. <http://dbpedia.org/resource/Coneygree> <http://dbpedia.org/property/race> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/race",
			"label": "race",
			"seq": "19,22"
		}, {
			"uri": "http://dbpedia.org/property/race",
			"label": "race",
			"seq": "19,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Martin_Molony",
			"label": "molony martin",
			"seq": "31,43"
		}, {
			"uri": "http://dbpedia.org/resource/Coneygree",
			"label": "coneygree",
			"seq": "61,69"
		}]
	},
	{
		"id": "4b257aeff6b340ebb07ca27538749ed4",
		"question": "What are some companies which are founded in Dallas Jurisdiction?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Dallas> . ?uri <http://dbpedia.org/ontology/foundationPlace> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "founded",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dallas",
			"label": "dallas",
			"seq": "45,50"
		}]
	},
	{
		"id": "538b8fc2d6e54c939c970590874a350e",
		"question": "How many have been awarded by the Royal Society?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Royal_Society>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "awarded",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_Society",
			"label": "society royal",
			"seq": "34,46"
		}]
	},
	{
		"id": "01710e1b53c94aaf85bd50e8344efefa",
		"question": "Which philosophy journal has compiler as Stephen Law ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/editor> <http://dbpedia.org/resource/Stephen_Law> . ?uri <http://dbpedia.org/property/discipline> <http://dbpedia.org/resource/Philosophy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editor",
			"label": "journal",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/property/discipline",
			"label": "compiler",
			"seq": "29,36"
		}, {
			"uri": "http://dbpedia.org/ontology/AcademicJournal",
			"label": "journal",
			"seq": "17,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stephen_Law",
			"label": "stephen law",
			"seq": "41,51"
		}, {
			"uri": "http://dbpedia.org/resource/Philosophy",
			"label": "philosophy",
			"seq": "6,15"
		}]
	},
	{
		"id": "a9e1cae212ba4c2699ddcc5aa1686c2e",
		"question": "Who are the opponents of Gervase Helwys?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gervase_Helwys> <http://dbpedia.org/ontology/opponent> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponents",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gervase_Helwys",
			"label": "gervase helwys",
			"seq": "25,38"
		}]
	},
	{
		"id": "2d7035345c0c4b94aa94c1b42ec57b41",
		"question": "Who is the starring of the movies such that music is by Raamlaxman?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Raamlaxman> . ?x <http://dbpedia.org/ontology/starring> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "44,48"
		}, {
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "starring",
			"seq": "11,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "20,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Raamlaxman",
			"label": "raamlaxman",
			"seq": "56,65"
		}]
	},
	{
		"id": "023818b03dce457481b4859b9adf89c5",
		"question": "In which country is there a political party whose leader is Jose Cha Cha Jimenez?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Jose_Cha_Cha_Jimenez> . ?x <http://dbpedia.org/property/international> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leader",
			"label": "leader",
			"seq": "50,55"
		}, {
			"uri": "http://dbpedia.org/property/international",
			"label": "political",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/PoliticalParty",
			"label": "political party",
			"seq": "28,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jose_Cha_Cha_Jimenez",
			"label": "jimenez jose cha",
			"seq": "60,75"
		}]
	},
	{
		"id": "bb9861a2275446428e974e73dd1e1b1b",
		"question": "Name the movies distributed by RKO Pictures and has music composer as Bernard Herrmann?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/RKO_Pictures> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Bernard_Herrmann>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "16,26"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer music",
			"seq": "52,65"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "name",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/RKO_Pictures",
			"label": "pictures",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/resource/Bernard_Herrmann",
			"label": "herrmann bernard",
			"seq": "70,85"
		}]
	},
	{
		"id": "7f75c46b604847b88c64d3d6fffa098b",
		"question": "What is the headquarters of the public transit system which is the section of Red Ahead ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Red_Ahead> <http://dbpedia.org/ontology/isPartOf> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PublicTransitSystem>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/isPartOf",
			"label": "section",
			"seq": "67,73"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/PublicTransitSystem",
			"label": "transit system public",
			"seq": "32,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Red_Ahead",
			"label": "ahead red",
			"seq": "78,86"
		}]
	},
	{
		"id": "aa123035cddf49b293de9bdddbd4fcf9",
		"question": "Which mascot of Celal Bayer university is also the nickname of kore Presbyterian Theological Seminar ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Korea_Presbyterian_Theological_Seminary> <http://dbpedia.org/property/nickname> ?uri. <http://dbpedia.org/resource/Celal_Bayar_University> <http://dbpedia.org/property/mascot> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "51,58"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Korea_Presbyterian_Theological_Seminary",
			"label": "presbyterian theological seminar",
			"seq": "68,99"
		}, {
			"uri": "http://dbpedia.org/resource/Celal_Bayar_University",
			"label": "university celal",
			"seq": "16,31"
		}]
	},
	{
		"id": "6a5afff8b79e41ab814b7600af7ca45a",
		"question": "Where is the head quarters of the owner of Hamline Avenue?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Hamline_Avenue_(Metro_Transit_station)> <http://dbpedia.org/ontology/owner> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owner",
			"seq": "34,38"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "quarters head",
			"seq": "13,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hamline_Avenue_(Metro_Transit_station)",
			"label": "hamline avenue",
			"seq": "43,56"
		}]
	},
	{
		"id": "f2e2e1b4a67049c092236c11cfbef795",
		"question": "Give me some series related to the one which had Yasmin Paige in them.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Yasmin_Paige> . ?uri <http://dbpedia.org/ontology/related> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "paige",
			"seq": "56,60"
		}, {
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "yasmin",
			"seq": "49,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Yasmin_Paige",
			"label": "yasmin paige",
			"seq": "49,60"
		}]
	},
	{
		"id": "32db83b5ad5b4e198ff2e7e7eee6f790",
		"question": "With whom is Heinz Kokott a relative to who also served Nazi Army?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heinz_Kokott> <http://dbpedia.org/ontology/relation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relative",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Heinz_Kokott",
			"label": "kokott heinz",
			"seq": "13,24"
		}]
	},
	{
		"id": "5dcd0eb818614883b22111575756bd54",
		"question": "Which magazine's publisher is Jann Wenner and founded by Ralph J. Gleason?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Jann_Wenner> . ?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Ralph_J._Gleason>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publisher",
			"seq": "17,25"
		}, {
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founded",
			"seq": "46,52"
		}, {
			"uri": "http://dbpedia.org/ontology/Magazine",
			"label": "magazine's",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jann_Wenner",
			"label": "wenner jann",
			"seq": "30,40"
		}, {
			"uri": "http://dbpedia.org/resource/Ralph_J._Gleason",
			"label": "gleason ralph",
			"seq": "57,69"
		}]
	},
	{
		"id": "838eaa04147b4081beae5daad514fb0c",
		"question": "Name the mountain whose range is Sierra Nevada (U.S.) and parent mountain peak is Nevado de Toluca?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mountainRange> <http://dbpedia.org/resource/Sierra_Nevada_(U.S.)> . ?uri <http://dbpedia.org/ontology/parentMountainPeak> <http://dbpedia.org/resource/Nevado_de_Toluca>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountain",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/parentMountainPeak",
			"label": "mountain",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Mountain",
			"label": "mountain",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sierra_Nevada_(U.S.)",
			"label": "sierra nevada (u.s.)",
			"seq": "33,52"
		}, {
			"uri": "http://dbpedia.org/resource/Nevado_de_Toluca",
			"label": "toluca nevado",
			"seq": "82,94"
		}]
	},
	{
		"id": "f3ad79c40d524db4b41288872c95ba91",
		"question": "Which television show's network  is BBC HD and is related to Doctor Who Confidential?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD> . ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Doctor_Who_Confidential>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network",
			"seq": "24,30"
		}, {
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "50,56"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC_HD",
			"label": "bbc hd",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/resource/Doctor_Who_Confidential",
			"label": "confidential doctor who",
			"seq": "61,83"
		}]
	},
	{
		"id": "0d1d38a04dff419b9fb358a190d55004",
		"question": "Who is the artist of Sings Kristofferson and also performed Milk Cow Blues atleast once?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sings_Kristofferson> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Milk_Cow_Blues> <http://dbpedia.org/ontology/artist> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/ontology/artist",
			"label": "artist",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sings_Kristofferson",
			"label": "kristofferson sings",
			"seq": "21,39"
		}, {
			"uri": "http://dbpedia.org/resource/Milk_Cow_Blues",
			"label": "blues milk cow",
			"seq": "60,73"
		}]
	},
	{
		"id": "07133019a5a74f7f83b418752c785bbf",
		"question": "What are the towns who have Thesaban system?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/settlementType> <http://dbpedia.org/resource/Thesaban>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Town>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/settlementType",
			"label": "system",
			"seq": "37,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Town",
			"label": "towns",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thesaban",
			"label": "thesaban",
			"seq": "28,35"
		}]
	},
	{
		"id": "6658f7d6a2f84f6db5f3da64b9953c8d",
		"question": "What is the life stance of the ethnic groups related to Micronesia ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Micronesia> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "45,51"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "related",
			"seq": "45,51"
		}, {
			"uri": "http://dbpedia.org/ontology/EthnicGroup",
			"label": "ethnic",
			"seq": "31,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Micronesia",
			"label": "micronesia",
			"seq": "56,65"
		}]
	},
	{
		"id": "73bbae8c251d41238b7dcf1aa0e155e4",
		"question": "What is the television show whose producer is Stephen E. Ambrose?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "producer",
			"seq": "34,41"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stephen_E._Ambrose",
			"label": "stephen ambrose",
			"seq": "46,60"
		}]
	},
	{
		"id": "d3ea98fc91814fd2b7993a9312f41010",
		"question": "List the newspapers whose headquarters's time zone is Central European Summer Time.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Central_European_Summer_Time> . ?uri <http://dbpedia.org/property/headquarters> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/timeZone",
			"label": "zone time",
			"seq": "41,49"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters's",
			"seq": "26,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Newspaper",
			"label": "newspapers",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Central_European_Summer_Time",
			"label": "european central summer",
			"seq": "54,76"
		}]
	},
	{
		"id": "53a9beca92384cdda4e74205f5800cb0",
		"question": "Which TV show's  opening theme is The Best of Both Worlds (song) and executive producer is Steven Peterman?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/The_Best_of_Both_Worlds_(song)> . ?uri <http://dbpedia.org/property/executiveProducer> <http://dbpedia.org/resource/Steven_Peterman>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opening theme",
			"seq": "17,29"
		}, {
			"uri": "http://dbpedia.org/property/executiveProducer",
			"label": "executive producer",
			"seq": "69,86"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "steven",
			"seq": "91,96"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Best_of_Both_Worlds_(song)",
			"label": "worlds (song) both best",
			"seq": "38,60"
		}, {
			"uri": "http://dbpedia.org/resource/Steven_Peterman",
			"label": "peterman steven",
			"seq": "91,105"
		}]
	},
	{
		"id": "b8eaafc1020c44c7b96f49241aafe8a4",
		"question": "What is the magazine which have been  founded by Ralph J. Gleason?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Ralph_J._Gleason>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founded",
			"seq": "38,44"
		}, {
			"uri": "http://dbpedia.org/ontology/Magazine",
			"label": "magazine",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ralph_J._Gleason",
			"label": "gleason ralph",
			"seq": "49,61"
		}]
	},
	{
		"id": "337774a6b5bc4fb4bdf86ecb5abf0a33",
		"question": "Paul Morphy compiled journals of which field?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/editor> <http://dbpedia.org/resource/Paul_Morphy> . ?x <http://dbpedia.org/property/discipline> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editor",
			"label": "morphy",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/property/discipline",
			"label": "compiled",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paul_Morphy",
			"label": "morphy paul",
			"seq": "0,10"
		}]
	},
	{
		"id": "bc35238acbbf4e1fa317ccc66299f892",
		"question": "Which river ends at  Thames Estuary and North Sea?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Thames_Estuary> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/North_Sea> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thames_Estuary",
			"label": "estuary thames",
			"seq": "21,34"
		}, {
			"uri": "http://dbpedia.org/resource/North_Sea",
			"label": "north sea",
			"seq": "40,48"
		}]
	},
	{
		"id": "3f84c71fa3754d4c8efa129eb69a81a7",
		"question": "Where was Ganefo hosted?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GANEFO> <http://dbpedia.org/property/hostCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hostCity",
			"label": "hosted",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/GANEFO",
			"label": "ganefo",
			"seq": "10,15"
		}]
	},
	{
		"id": "3480c793f4804929a97fe292acfa30a9",
		"question": "Count the number of sports team members  which have player named Matt Williams ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/name> <http://dbpedia.org/resource/Matt_Williams_(New_Zealand_footballer)> . ?x <http://dbpedia.org/property/name> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/name",
			"label": "named",
			"seq": "59,63"
		}, {
			"uri": "http://dbpedia.org/property/name",
			"label": "named",
			"seq": "59,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Matt_Williams_(New_Zealand_footballer)",
			"label": "williams",
			"seq": "70,77"
		}]
	},
	{
		"id": "ba1402357518422281e2d6df50cfbe2e",
		"question": "Name the office holder with predecessor as Samuel W. McCall and office in Massachusetts House of Representatives?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Samuel_W._McCall> . ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Massachusetts_House_of_Representatives>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "28,38"
		}, {
			"uri": "http://dbpedia.org/property/office",
			"label": "office",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Samuel_W._McCall",
			"label": "samuel mccall",
			"seq": "43,55"
		}, {
			"uri": "http://dbpedia.org/resource/Massachusetts_House_of_Representatives",
			"label": "representatives massachusetts",
			"seq": "74,102"
		}]
	},
	{
		"id": "da55afc0da0e4b36af66810a1bec956d",
		"question": "How many other awards have been given to people who have won the Golden Globe?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Golden_Globe_Award> . ?x <http://dbpedia.org/property/awards> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Award",
			"label": "awards",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Golden_Globe_Award",
			"label": "golden globe",
			"seq": "65,76"
		}]
	},
	{
		"id": "87ef3828c73b4021ab723efbb0b64525",
		"question": "Does Mr. Jim's Pizza operate in the pizza industry?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mr._Jim's_Pizza> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Pizza> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/industry",
			"label": "industry",
			"seq": "42,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mr._Jim's_Pizza",
			"label": "pizza jim's mr.",
			"seq": "5,19"
		}, {
			"uri": "http://dbpedia.org/resource/Pizza",
			"label": "pizza",
			"seq": "15,19"
		}]
	},
	{
		"id": "dba313f8b26847beb6c2826754d55507",
		"question": "List down the schools whose mascot's order is Even-toed ungulate?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Even-toed_ungulate> . ?uri <http://dbpedia.org/property/mascot> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/order",
			"label": "order",
			"seq": "37,41"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot's",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Even-toed_ungulate",
			"label": "even-toed ungulate",
			"seq": "46,63"
		}]
	},
	{
		"id": "5f7d68b6d7c24bd29b84f2fd7fa2d1c2",
		"question": "How many other field are there of the scientists whose one of the field is Mathematics ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Mathematics> . ?x <http://dbpedia.org/ontology/field> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/field",
			"label": "field",
			"seq": "15,19"
		}, {
			"uri": "http://dbpedia.org/ontology/field",
			"label": "field",
			"seq": "15,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mathematics",
			"label": "mathematics",
			"seq": "75,85"
		}]
	},
	{
		"id": "1b7152be06d645fd89cc99c2c1436c63",
		"question": "Who had  Joe Purcell and Winston Bryant as lieutenants ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Joe_Purcell> . ?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Winston_Bryant> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/lieutenant",
			"label": "lieutenants",
			"seq": "43,53"
		}, {
			"uri": "http://dbpedia.org/ontology/lieutenant",
			"label": "lieutenants",
			"seq": "43,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joe_Purcell",
			"label": "purcell joe",
			"seq": "9,19"
		}, {
			"uri": "http://dbpedia.org/resource/Winston_Bryant",
			"label": "winston bryant",
			"seq": "25,38"
		}]
	},
	{
		"id": "3cdc8e8ea823409f959acead754885e6",
		"question": "What company's founder is Jim Harris?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founder",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jim_Harris_(entrepreneur)",
			"label": "harris jim",
			"seq": "26,35"
		}]
	},
	{
		"id": "00a22ab72d9d4286a7d3d61c4d67c0b4",
		"question": "In which city is Corringham railway station located?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Corringham_railway_station> <http://dbpedia.org/property/borough> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/borough",
			"label": "corringham",
			"seq": "17,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Corringham_railway_station",
			"label": "corringham station railway",
			"seq": "17,42"
		}]
	},
	{
		"id": "4d935fb5d0694c4fbfba00b5d22705a2",
		"question": "Did stan lee narrate the incredible hulk tv show?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)> <http://dbpedia.org/ontology/narrator> <http://dbpedia.org/resource/Stan_Lee> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/narrator",
			"label": "narrate",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)",
			"label": "incredible hulk",
			"seq": "25,39"
		}, {
			"uri": "http://dbpedia.org/resource/Stan_Lee",
			"label": "stan lee",
			"seq": "4,11"
		}]
	},
	{
		"id": "596f2ecca2be42aea17eb2f3e2bbffd9",
		"question": "How many sports are played in organizations presided by Emanuel de Guzman?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Emanuel_de_Guzman> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sport>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "presided",
			"seq": "44,51"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Sport",
			"label": "sports",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Emanuel_de_Guzman",
			"label": "emanuel guzman",
			"seq": "56,69"
		}]
	},
	{
		"id": "fd3f2656075c476493d51a420c168054",
		"question": "Where do the sister stations of Al Khaleejiya 100.9 play?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/sisterStations> <http://dbpedia.org/resource/Al_Khaleejiya_100.9> . ?x <http://dbpedia.org/property/location> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterStations",
			"label": "stations sister",
			"seq": "13,27"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "stations",
			"seq": "20,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Al_Khaleejiya_100.9",
			"label": "khaleejiya 100.9",
			"seq": "35,50"
		}]
	},
	{
		"id": "74a2300b33df4ad6a44b4184c0c8642d",
		"question": "Which sports are played in schools affiliated with the Harvest Christian Center?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/religiousAffiliation> <http://dbpedia.org/resource/Harvest_Christian_Center> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religiousAffiliation",
			"label": "affiliated",
			"seq": "35,44"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harvest_Christian_Center",
			"label": "christian harvest center",
			"seq": "55,78"
		}]
	},
	{
		"id": "654b89b5de0945439a24d12e98348582",
		"question": "What is the religion of the person who is in the cast of Master's Sun> ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Master's_Sun> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "in",
			"seq": "42,43"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "religion",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Master's_Sun",
			"label": "master's",
			"seq": "57,64"
		}]
	},
	{
		"id": "4cb08818578d4dfaa26b1d3490c0610a",
		"question": "What is common between sports played at Fr Agnel School and Jr college, and the genre of Virtual Kasparov?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Virtual_Kasparov> <http://dbpedia.org/ontology/genre> ?uri. <http://dbpedia.org/resource/Fr._Agnel_Multipurpose_School_and_Junior_College> <http://dbpedia.org/ontology/sport> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genre",
			"seq": "80,84"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Virtual_Kasparov",
			"label": "kasparov virtual",
			"seq": "89,104"
		}, {
			"uri": "http://dbpedia.org/resource/Fr._Agnel_Multipurpose_School_and_Junior_College",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "efca0e0f9fd34c37abe132b6dec6b3eb",
		"question": "Who has official residences at Colts Neck Township and Beverly Hills?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Colts_Neck_Township,_New_Jersey> . ?uri <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Beverly_Hills,_California> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residences",
			"seq": "17,26"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residences",
			"seq": "17,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colts_Neck_Township,_New_Jersey",
			"label": "township colts neck",
			"seq": "31,49"
		}, {
			"uri": "http://dbpedia.org/resource/Beverly_Hills,_California",
			"label": "beverly hills",
			"seq": "55,67"
		}]
	},
	{
		"id": "9f609480ea4647028bd3694a224482f1",
		"question": "How many different genres of games are produced by Blizzard?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Blizzard_Entertainment> . ?x <http://dbpedia.org/property/genre> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "different",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "genres",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blizzard_Entertainment",
			"label": "blizzard",
			"seq": "51,58"
		}]
	},
	{
		"id": "a08bb500ab2240118a0e3c00ed317f0b",
		"question": "Name the river with source as Shannon Pot and its mouth is located in Limerick?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Shannon_Pot> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Limerick>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/source",
			"label": "source",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "mouth",
			"seq": "50,54"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shannon_Pot",
			"label": "shannon pot",
			"seq": "30,40"
		}, {
			"uri": "http://dbpedia.org/resource/Limerick",
			"label": "limerick",
			"seq": "70,77"
		}]
	},
	{
		"id": "304ccd0b380a4d59a9dfc01c77cf3ec1",
		"question": "Name the river flowing through Reading and source place as Gloucestershire ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Reading,_Berkshire> . ?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Gloucestershire>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/sourcePlace",
			"label": "source place",
			"seq": "43,54"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Reading,_Berkshire",
			"label": "reading",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/resource/Gloucestershire",
			"label": "gloucestershire",
			"seq": "59,73"
		}]
	},
	{
		"id": "ad3dd519fa5749e789a15373b17b25db",
		"question": "List the people who were born in Gelnhausen and graduated from Pepperdine University?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Gelnhausen> . ?uri <http://dbpedia.org/property/education> <http://dbpedia.org/resource/Pepperdine_University>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "graduated",
			"seq": "48,56"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "pepperdine",
			"seq": "63,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gelnhausen",
			"label": "gelnhausen",
			"seq": "33,42"
		}, {
			"uri": "http://dbpedia.org/resource/Pepperdine_University",
			"label": "university pepperdine",
			"seq": "63,83"
		}]
	},
	{
		"id": "1a77969a5597407fae22ede47cc281fc",
		"question": "What is the common licence of the Frontaccounting and nUbuntu?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frontaccounting> <http://dbpedia.org/ontology/license> ?uri. <http://dbpedia.org/resource/NUbuntu> <http://dbpedia.org/ontology/license> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/license",
			"label": "licence",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/license",
			"label": "licence",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frontaccounting",
			"label": "frontaccounting",
			"seq": "34,48"
		}, {
			"uri": "http://dbpedia.org/resource/NUbuntu",
			"label": "nubuntu",
			"seq": "54,60"
		}]
	},
	{
		"id": "cb0fc7a9c56e4298acc19aa91d3d4c8e",
		"question": "Which TV shows distributor is Broadcast syndication and developed by Brian Graden ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Brian_Graden> . ?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Broadcast_syndication>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "developed",
			"seq": "56,64"
		}, {
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributor",
			"seq": "15,25"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brian_Graden",
			"label": "graden brian",
			"seq": "69,80"
		}, {
			"uri": "http://dbpedia.org/resource/Broadcast_syndication",
			"label": "syndication broadcast",
			"seq": "30,50"
		}]
	},
	{
		"id": "56d56e554afa47df8316e2975165949d",
		"question": "Who was in conflicts of Fort Barrancas and Gadsden?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Fort_Barrancas> . ?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Fort_Gadsden> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "gadsden",
			"seq": "43,49"
		}, {
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "gadsden",
			"seq": "43,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fort_Barrancas",
			"label": "barrancas fort",
			"seq": "24,37"
		}, {
			"uri": "http://dbpedia.org/resource/Fort_Gadsden",
			"label": "gadsden fort",
			"seq": "24,35"
		}]
	},
	{
		"id": "ba2570473e36467c8a631f60944cd2bd",
		"question": "Which university was attended by both Richard H Immerman and Franklin W Olin?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Richard_H._Immerman> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Franklin_W._Olin> <http://dbpedia.org/property/education> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "attended",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "attended",
			"seq": "21,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Richard_H._Immerman",
			"label": "immerman richard",
			"seq": "38,53"
		}, {
			"uri": "http://dbpedia.org/resource/Franklin_W._Olin",
			"label": "franklin olin",
			"seq": "61,73"
		}]
	},
	{
		"id": "2a27443085d84446813f5a30b2152d6c",
		"question": "Name someone known for a project involved in the Occupation of Japan?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Occupation_of_Japan> . ?uri <http://dbpedia.org/property/knownFor> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "the",
			"seq": "45,47"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Occupation_of_Japan",
			"label": "occupation japan",
			"seq": "49,64"
		}]
	},
	{
		"id": "38c50543e2ca4c8ba2f11406ebb1f0c9",
		"question": "What are Monrow Carell Jr Children Hospital and Vanderbilt University Medical Center both affiliated with?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Monroe_Carell_Jr._Children's_Hospital_at_Vanderbilt> <http://dbpedia.org/property/affiliation> ?uri. <http://dbpedia.org/resource/Vanderbilt_University_Medical_Center> <http://dbpedia.org/property/affiliation> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliated",
			"seq": "90,99"
		}, {
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliated",
			"seq": "90,99"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Monroe_Carell_Jr._Children's_Hospital_at_Vanderbilt",
			"label": "vanderbilt hospital children",
			"seq": "26,53"
		}, {
			"uri": "http://dbpedia.org/resource/Vanderbilt_University_Medical_Center",
			"label": "vanderbilt university medical",
			"seq": "48,76"
		}]
	},
	{
		"id": "5dd1957c2b5c46c4bcb3c8d94b4df437",
		"question": "What are some cars which came before the ones on a GM B base?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/GM_B_platform> . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/automobilePlatform",
			"label": "before",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "before",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "some",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/GM_B_platform",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "74e0b2e3b6864179acc9fd874d6897eb",
		"question": "Name few companies founded in Texas?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Texas>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Texas",
			"label": "texas",
			"seq": "30,34"
		}]
	},
	{
		"id": "400f95dfb86547a18c1426b3fc417bb7",
		"question": "What is the awards given to the horse whose grandson is the famous Counterpoint?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Counterpoint_(horse)> <http://dbpedia.org/property/grandsire> ?x . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/grandsire",
			"label": "grandson",
			"seq": "44,51"
		}, {
			"uri": "http://dbpedia.org/ontology/honours",
			"label": "horse",
			"seq": "32,36"
		}, {
			"uri": "http://dbpedia.org/ontology/Horse",
			"label": "horse",
			"seq": "32,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Counterpoint_(horse)",
			"label": "counterpoint horse",
			"seq": "32,49"
		}]
	},
	{
		"id": "7da5440ab8834b4ca92805e80dd7b5a2",
		"question": "what kind of games can I find for PC 9800?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/PC-9800_Series> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "for",
			"seq": "30,32"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "games",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PC-9800_Series",
			"label": "9800 pc",
			"seq": "34,40"
		}]
	},
	{
		"id": "786455b1e7fa4fed9f46d49db488e88d",
		"question": "Count all the ethinic group who speaks language which belongs to Anglo-Frisian language family ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Anglo-Frisian_languages> . ?uri <http://dbpedia.org/property/languages> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/languageFamily",
			"label": "language",
			"seq": "39,46"
		}, {
			"uri": "http://dbpedia.org/property/languages",
			"label": "language",
			"seq": "39,46"
		}, {
			"uri": "http://dbpedia.org/ontology/EthnicGroup",
			"label": "ethinic",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anglo-Frisian_languages",
			"label": "anglo-frisian language",
			"seq": "39,60"
		}]
	},
	{
		"id": "bd739b63ea0e48d19bbd74153447ff73",
		"question": "Name all those whose spouses have performed with Tony Bennett?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Tony_Bennett> . ?uri <http://dbpedia.org/ontology/spouse> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "spouses",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "spouses",
			"seq": "21,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tony_Bennett",
			"label": "bennett tony",
			"seq": "49,60"
		}]
	},
	{
		"id": "ed4dd38195244983a340f07ca5d05529",
		"question": "Which office holder's governor is Charles Willing Byrd and has final resting place in North Bend, Ohio?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/governor> <http://dbpedia.org/resource/Charles_Willing_Byrd> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/North_Bend,_Ohio>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governor",
			"label": "governor",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "resting place",
			"seq": "69,81"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_Willing_Byrd",
			"label": "willing charles",
			"seq": "34,48"
		}, {
			"uri": "http://dbpedia.org/resource/North_Bend,_Ohio",
			"label": "north bend, ohio",
			"seq": "86,101"
		}]
	},
	{
		"id": "7881083538c54de4a888d1e28df7238c",
		"question": "What are the books written by the the person who made the Novelas ejemplares?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Novelas_ejemplares> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "books",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "who",
			"seq": "45,47"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Novelas_ejemplares",
			"label": "ejemplares novelas",
			"seq": "58,75"
		}]
	},
	{
		"id": "815d064630b3451baa5acb5bedd5e7ad",
		"question": "Whos a famous relative of anne spielberg?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Anne_Spielberg>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relative",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anne_Spielberg",
			"label": "spielberg anne",
			"seq": "26,39"
		}]
	},
	{
		"id": "ace6e364c8cc4f1fb0813dc404b6fae6",
		"question": "Name the TV show whose network is NBC and is the subsequent work of Fraiser ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/NBC> . ?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Frasier>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent",
			"seq": "49,58"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/NBC",
			"label": "nbc",
			"seq": "34,36"
		}, {
			"uri": "http://dbpedia.org/resource/Frasier",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9177e0691e8c4848a5237a226aed23d4",
		"question": "Does chicago own the washington station on the CTA Blue Line?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Washington_station_(CTA_Blue_Line)> <http://dbpedia.org/property/owned> <http://dbpedia.org/resource/Chicago> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owned",
			"label": "own",
			"seq": "13,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Washington_station_(CTA_Blue_Line)",
			"label": "washington station line blue",
			"seq": "21,48"
		}, {
			"uri": "http://dbpedia.org/resource/Chicago",
			"label": "chicago",
			"seq": "5,11"
		}]
	},
	{
		"id": "0ffd6b150c7046af82a01f9b29dbddd6",
		"question": "Give the distinct number of other party of the people which have one of the party as Janata Party ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/otherParty> <http://dbpedia.org/resource/Janata_Party> . ?x <http://dbpedia.org/ontology/otherParty> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/otherParty",
			"label": "party",
			"seq": "34,38"
		}, {
			"uri": "http://dbpedia.org/ontology/otherParty",
			"label": "party",
			"seq": "34,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Janata_Party",
			"label": "janata party",
			"seq": "34,45"
		}]
	},
	{
		"id": "966ba5310c7049799db0464434010003",
		"question": "What is the company of Ford Theatre ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Theatre> <http://dbpedia.org/property/company> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Theatre",
			"label": "theatre ford",
			"seq": "23,34"
		}]
	},
	{
		"id": "f77569069e6d41b692071d0350ab2d1d",
		"question": "List the director of The Adventures of mimi ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Mimi_(video)> <http://dbpedia.org/property/director> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/director",
			"label": "director",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Adventures_of_Mimi_(video)",
			"label": "adventures mimi",
			"seq": "25,39"
		}]
	},
	{
		"id": "4212ec5b2f564dd58eaf9a18be59d709",
		"question": "Count the units garrisoned at Arlington County, Virginia.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/garrison",
			"label": "garrisoned",
			"seq": "16,25"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "units",
			"seq": "10,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arlington_County,_Virginia",
			"label": "arlington",
			"seq": "30,38"
		}]
	},
	{
		"id": "3aaf4525a6d24e27be8fe037d5ba28c2",
		"question": "Where is the grave of Ivan III of Russia ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ivan_III_of_Russia> <http://dbpedia.org/property/placeOfBurial> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "russia",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ivan_III_of_Russia",
			"label": "russia ivan iii of",
			"seq": "19,36"
		}]
	},
	{
		"id": "b6d929ad2217419984a923785b1dcac2",
		"question": "Which company founded by Fusajiro Yamauchi gives service as Nintendo Network?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fusajiro_Yamauchi> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Nintendo_Network>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "founded",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "service",
			"seq": "49,55"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fusajiro_Yamauchi",
			"label": "yamauchi fusajiro",
			"seq": "25,41"
		}, {
			"uri": "http://dbpedia.org/resource/Nintendo_Network",
			"label": "nintendo network",
			"seq": "60,75"
		}]
	},
	{
		"id": "ef594c21024c4ec599be2c7e49e10c09",
		"question": "Who designed the bridge in Oddamavadi?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Oddamavadi> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "oddamavadi",
			"seq": "27,36"
		}, {
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridge",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oddamavadi",
			"label": "oddamavadi",
			"seq": "27,36"
		}]
	},
	{
		"id": "e65f96b6ccf54d99ac963173043c60f4",
		"question": "List all the co-founders of the non for profit which have founding member as David pressman ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/David_Pressman> . ?x <http://dbpedia.org/ontology/foundedBy> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Non-ProfitOrganisation>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "co-founders",
			"seq": "13,23"
		}, {
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "co-founders",
			"seq": "13,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Non-ProfitOrganisation",
			"label": "profit",
			"seq": "40,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Pressman",
			"label": "pressman david",
			"seq": "77,90"
		}]
	},
	{
		"id": "33bedb8ae5c1409fb0ba92d69816a355",
		"question": "Name the products of Den norske Bank ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Den_norske_Bank> <http://dbpedia.org/property/products> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "products",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Den_norske_Bank",
			"label": "norske bank den",
			"seq": "21,35"
		}]
	},
	{
		"id": "b541f708c7fd48ad8eb1c5c9489444e1",
		"question": "how many companies are located in a spanish speaking region?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Spanish_language> . ?uri <http://dbpedia.org/ontology/location> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/language",
			"label": "located",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "region",
			"seq": "53,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Spanish_language",
			"label": "spanish",
			"seq": "36,42"
		}]
	},
	{
		"id": "88f9b624d17b45edb9e1ec11cdb1db22",
		"question": "What are some US citizens famous for?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "what",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "for",
			"seq": "33,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "246e38b975c94fdbbbe94ec51f1540eb",
		"question": "Which genre of books are published by Random House?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Random_House> . ?x <http://dbpedia.org/property/subject> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/publisher",
			"label": "published",
			"seq": "25,33"
		}, {
			"uri": "http://dbpedia.org/property/subject",
			"label": "published",
			"seq": "25,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "15,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Random_House",
			"label": "random house",
			"seq": "38,49"
		}]
	},
	{
		"id": "c919ac2e708f41ee93b91d3731428939",
		"question": "Name the office holder whose child is Lori Black and predecessor is Henry E. Catto Jr ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Henry_E._Catto,_Jr.>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "child",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "53,63"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lori_Black",
			"label": "black lori",
			"seq": "38,47"
		}, {
			"uri": "http://dbpedia.org/resource/Henry_E._Catto,_Jr.",
			"label": "henry catto",
			"seq": "68,78"
		}]
	},
	{
		"id": "279ba468ad7c402ea5b91c6b11a7dd1c",
		"question": "How many golf players are there in Arizona State Sun Devils ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/Arizona_State_Sun_Devils>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/college",
			"label": "golf",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/ontology/GolfPlayer",
			"label": "players",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arizona_State_Sun_Devils",
			"label": "arizona devils state sun",
			"seq": "35,58"
		}]
	},
	{
		"id": "5e356a23a8734f9d987c09850314cf36",
		"question": "Which rivers start in Wyoming?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/Wyoming> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceRegion",
			"label": "rivers",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wyoming",
			"label": "wyoming",
			"seq": "22,28"
		}]
	},
	{
		"id": "95c977845c1d40f387b0a56de11b73b7",
		"question": "What is the common profession of William Luther Hill and Claiborne Pell?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri. <http://dbpedia.org/resource/Claiborne_Pell> <http://dbpedia.org/ontology/profession> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "profession",
			"seq": "19,28"
		}, {
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "profession",
			"seq": "19,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Luther_Hill",
			"label": "william luther hill",
			"seq": "33,51"
		}, {
			"uri": "http://dbpedia.org/resource/Claiborne_Pell",
			"label": "claiborne pell",
			"seq": "57,70"
		}]
	},
	{
		"id": "9c030631b627435492811c991fff3fe5",
		"question": "Name the movie whose director is Ridley Scott and it's music composer is Vangelis?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Ridley_Scott> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Vangelis>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/director",
			"label": "director",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer music",
			"seq": "55,68"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "ridley",
			"seq": "33,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ridley_Scott",
			"label": "ridley scott",
			"seq": "33,44"
		}, {
			"uri": "http://dbpedia.org/resource/Vangelis",
			"label": "vangelis",
			"seq": "73,80"
		}]
	},
	{
		"id": "c5ddb0c77d054690b00ec818448e108c",
		"question": "What country is Jeffrey Werleman from, which also has the American Mediterranean Sea?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jeffrey_Werleman> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/American_Mediterranean_Sea> <http://dbpedia.org/ontology/country> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "54,56"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jeffrey_Werleman",
			"label": "werleman jeffrey",
			"seq": "16,31"
		}, {
			"uri": "http://dbpedia.org/resource/American_Mediterranean_Sea",
			"label": "mediterranean american",
			"seq": "58,79"
		}]
	},
	{
		"id": "a785e76da4ec49cea487642d65c77144",
		"question": "The Prime minister who worked in the Khmer Issarak follows which religion?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Khmer_Issarak> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PrimeMinister>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "issarak",
			"seq": "43,49"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "65,72"
		}, {
			"uri": "http://dbpedia.org/ontology/PrimeMinister",
			"label": "minister prime",
			"seq": "4,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Khmer_Issarak",
			"label": "issarak khmer",
			"seq": "37,49"
		}]
	},
	{
		"id": "0cec5868cc27426382d0ebfcbf2272bf",
		"question": "Who coached the marquet golden eagels during 2013",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2013\u201314_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/ontology/coach> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coach",
			"label": "coached",
			"seq": "4,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2013\u201314_Marquette_Golden_Eagles_men's_basketball_team",
			"label": "marquet golden",
			"seq": "16,29"
		}]
	},
	{
		"id": "25b560314df748389e244a17213dbb52",
		"question": "Who is the musical artist worked for labels Celluloid Records and Victor Entertainment?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records> . ?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Victor_Entertainment> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "labels",
			"seq": "37,42"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "labels",
			"seq": "37,42"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical artist",
			"seq": "11,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Celluloid_Records",
			"label": "celluloid records",
			"seq": "44,60"
		}, {
			"uri": "http://dbpedia.org/resource/Victor_Entertainment",
			"label": "entertainment victor",
			"seq": "66,85"
		}]
	},
	{
		"id": "abbf6d791be14816875ef172d71668dd",
		"question": "Is Tea the main ingredient of Lahpet?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Lahpet> <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Tea> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainIngredient",
			"label": "ingredient main",
			"seq": "11,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lahpet",
			"label": "lahpet",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/resource/Tea",
			"label": "tea",
			"seq": "3,5"
		}]
	},
	{
		"id": "f659b3e1ce264120a3d7649054b18001",
		"question": "Which tenant of New Sanno Hotel is the military branch of the Gary Holder-Winfield ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/ontology/tenant> ?uri. <http://dbpedia.org/resource/Gary_Holder-Winfield> <http://dbpedia.org/ontology/militaryBranch> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenant",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military branch",
			"seq": "39,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_Sanno_Hotel",
			"label": "sanno hotel new",
			"seq": "16,30"
		}, {
			"uri": "http://dbpedia.org/resource/Gary_Holder-Winfield",
			"label": "holder-winfield gary",
			"seq": "62,81"
		}]
	},
	{
		"id": "2110869943d4431c80ed60a4598d5f4a",
		"question": "How many destinations are covered by the airlines which also serves Europe ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Europe> . ?x <http://dbpedia.org/property/destinations> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/destinations",
			"label": "destinations",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "destinations",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Europe",
			"label": "europe",
			"seq": "68,73"
		}]
	},
	{
		"id": "7025f720c0ff41419cef7e20b14a8d8d",
		"question": "How many famous people are born in Long Island?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Long_Island>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "people",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Long_Island",
			"label": "island long",
			"seq": "35,45"
		}]
	},
	{
		"id": "25b1049cd35247ecb0c2f42335ca48a1",
		"question": "List the other members of the team where Jason Hayne currently plays?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/currentMember> <http://dbpedia.org/resource/Jason_Hayne> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OrganisationMember>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currentMember",
			"label": "currently",
			"seq": "53,61"
		}, {
			"uri": "http://dbpedia.org/property/name",
			"label": "team",
			"seq": "30,33"
		}, {
			"uri": "http://dbpedia.org/ontology/OrganisationMember",
			"label": "members",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jason_Hayne",
			"label": "jason hayne",
			"seq": "41,51"
		}]
	},
	{
		"id": "466de8f3348242efa607641fbb8cfd7f",
		"question": "Whose academic advisor works at the St George's Hospital?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/workInstitutions> <http://dbpedia.org/resource/St_George's_Hospital> . ?uri <http://dbpedia.org/ontology/academicAdvisor> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/workInstitutions",
			"label": "works",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/ontology/academicAdvisor",
			"label": "academic advisor",
			"seq": "6,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/St_George's_Hospital",
			"label": "hospital george's",
			"seq": "39,55"
		}]
	},
	{
		"id": "cc49d89995894cb9af4efa08186ac9b7",
		"question": "List the home stadiums of the teams in the Russian Premier League?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/2011\u201312_Russian_Premier_League> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "league",
			"seq": "59,64"
		}, {
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "stadiums",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2011\u201312_Russian_Premier_League",
			"label": "russian premier league",
			"seq": "43,64"
		}]
	},
	{
		"id": "6979c92554e94d2f9801bdd2da60d29e",
		"question": "What are the countries for which History of Trier principal to?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/History_of_Trier>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "principal",
			"seq": "50,58"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "countries",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/History_of_Trier",
			"label": "history trier",
			"seq": "33,45"
		}]
	},
	{
		"id": "28fb6009d3174bf0a9761f1dc0d93da9",
		"question": "In which country is there a dam on the Awash river?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/river> <http://dbpedia.org/resource/Awash_River> . ?x <http://dbpedia.org/property/country> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Dam>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/river",
			"label": "river",
			"seq": "45,49"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "country",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Dam",
			"label": "dam",
			"seq": "28,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Awash_River",
			"label": "river awash",
			"seq": "39,49"
		}]
	},
	{
		"id": "f068beeb6bd0423cb18dd641ec14bc2f",
		"question": "List the newspapers whose offices are situated in 1211 Avenue of the Americas?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/1211_Avenue_of_the_Americas>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/headquarter",
			"label": "are",
			"seq": "34,36"
		}, {
			"uri": "http://dbpedia.org/ontology/Newspaper",
			"label": "newspapers",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1211_Avenue_of_the_Americas",
			"label": "americas avenue",
			"seq": "55,69"
		}]
	},
	{
		"id": "c782fe8362e4411692072d564ba4fedb",
		"question": "What are the movies whose cinematographer is Gregg Toland?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Gregg_Toland>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cinematography",
			"label": "cinematographer",
			"seq": "26,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "42,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gregg_Toland",
			"label": "toland gregg",
			"seq": "45,56"
		}]
	},
	{
		"id": "6bb6210d9cac47ddaa5e12e8869fdcd5",
		"question": "Who is the person who are on the board of Freedom of the City?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Freedom_of_the_City>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/board",
			"label": "board",
			"seq": "33,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Freedom_of_the_City",
			"label": "freedom city the",
			"seq": "7,22"
		}]
	},
	{
		"id": "e9433939da964198814e9dcd3e3cdc47",
		"question": "Name the sitcoms whose network's owning company is Chris-Craft Industries?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Chris-Craft_Industries> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningCompany",
			"label": "company owning",
			"seq": "33,46"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network's",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "sitcoms",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chris-Craft_Industries",
			"label": "chris-craft industries",
			"seq": "51,72"
		}]
	},
	{
		"id": "dbc798f969d840c7b737048f657342d2",
		"question": "Which astronauts went on the Gemini 8 mission?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Gemini_8>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mission",
			"label": "mission",
			"seq": "38,44"
		}, {
			"uri": "http://dbpedia.org/ontology/Astronaut",
			"label": "astronauts",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gemini_8",
			"label": "gemini",
			"seq": "29,34"
		}]
	},
	{
		"id": "00da309171bc4424aad2bbb3071aee17",
		"question": "How many developers have games where I can hear Lightning McQueen?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Lightning_McQueen> <http://dbpedia.org/ontology/voice> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/voice",
			"label": "have",
			"seq": "20,23"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developers",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lightning_McQueen",
			"label": "lightning mcqueen",
			"seq": "48,64"
		}]
	},
	{
		"id": "b57a708ebd054204b4816ab7fb3e1c94",
		"question": "List the television shows whose Composers are associated with Strontium 90 ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Strontium_90_(band)> . ?uri <http://dbpedia.org/property/composer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated",
			"seq": "46,55"
		}, {
			"uri": "http://dbpedia.org/property/composer",
			"label": "composers",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Strontium_90_(band)",
			"label": "strontium",
			"seq": "62,70"
		}]
	},
	{
		"id": "8bba670b59bb421ca58a524a0c474e00",
		"question": "List the ingredient of Blodpalt ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blodpalt> <http://dbpedia.org/ontology/ingredient> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blodpalt",
			"label": "blodpalt",
			"seq": "23,30"
		}]
	},
	{
		"id": "115415a95f22482aa6e5441ccf0b6f31",
		"question": "Does Caroline Augusta Foley Rhys Davids study Buddhism?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Caroline_Augusta_Foley_Rhys_Davids> <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Buddhism> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/field",
			"label": "foley",
			"seq": "22,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Caroline_Augusta_Foley_Rhys_Davids",
			"label": "caroline augusta davids foley rhys",
			"seq": "5,38"
		}, {
			"uri": "http://dbpedia.org/resource/Buddhism",
			"label": "buddhism",
			"seq": "46,53"
		}]
	},
	{
		"id": "89689724b652439cbc83fd0be32e637c",
		"question": "Who is the performer of Bengali in Platforms ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bengali_in_Platforms> <http://dbpedia.org/ontology/artist> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/artist",
			"label": "is",
			"seq": "4,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bengali_in_Platforms",
			"label": "platforms bengali",
			"seq": "24,40"
		}]
	},
	{
		"id": "4d672dceaf7f4e9382ae34c3623f7b85",
		"question": "In how many other states do people live, whose languages are spoken in Nebraska?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Nebraska> <http://dbpedia.org/ontology/language> ?x . ?x <http://dbpedia.org/property/region> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/language",
			"label": "languages",
			"seq": "47,55"
		}, {
			"uri": "http://dbpedia.org/property/region",
			"label": "in",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nebraska",
			"label": "nebraska",
			"seq": "71,78"
		}]
	},
	{
		"id": "366d5c6e16434f55ad841357ad55f327",
		"question": "Who founded the city where First Church of Christ, Scientist is located?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist_(Pittsburgh)> <http://dbpedia.org/property/locationTown> ?x . ?x <http://dbpedia.org/ontology/founder> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationTown",
			"label": "located",
			"seq": "64,70"
		}, {
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founded",
			"seq": "4,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/First_Church_of_Christ,_Scientist_(Pittsburgh)",
			"label": "scientist christ, church first",
			"seq": "27,56"
		}]
	},
	{
		"id": "00b85c55b2d649c397d73d0e4d2895b8",
		"question": "Who is the owner of the bank where Thomas Secunda works ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Thomas_Secunda> <http://dbpedia.org/ontology/occupation> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "secunda",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Bank",
			"label": "bank",
			"seq": "24,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thomas_Secunda",
			"label": "secunda thomas",
			"seq": "35,48"
		}]
	},
	{
		"id": "6b6b25414e6d41a79396ddd1c583fe07",
		"question": "What are some fictional characters whose voice is in the peanuts movie?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/voice> <http://dbpedia.org/resource/The_Peanuts_Movie>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/voice",
			"label": "voice",
			"seq": "41,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Peanuts_Movie",
			"label": "peanuts movie the",
			"seq": "53,69"
		}]
	},
	{
		"id": "a5254aca3b244fa1a1736835088e92ea",
		"question": "What country had the title of 2001 Speedway Ekstraliga ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/2001_Speedway_Ekstraliga> <http://dbpedia.org/property/title> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/title",
			"label": "title",
			"seq": "21,25"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2001_Speedway_Ekstraliga",
			"label": "ekstraliga speedway 2001",
			"seq": "30,53"
		}]
	},
	{
		"id": "24e7a1c8ce674304a0400059c245e3d3",
		"question": "Name the team for which Cam Plante played for which were also the tenants of MasterCard center ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cam_Plante> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "played",
			"seq": "35,40"
		}, {
			"uri": "http://dbpedia.org/property/tenants",
			"label": "tenants",
			"seq": "66,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cam_Plante",
			"label": "plante",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/resource/MasterCard_Centre",
			"label": "mastercard",
			"seq": "77,86"
		}]
	},
	{
		"id": "9121c4fcd51b4533a93936728a6c01cf",
		"question": "What is the total number of other tenant of the stadia whose one of the tenant is Raptors 905?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Raptors_905> . ?x <http://dbpedia.org/ontology/tenant> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenant",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenant",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Raptors_905",
			"label": "raptors 905",
			"seq": "82,92"
		}]
	},
	{
		"id": "89ed257c1a244e339c0b5129de2cbce9",
		"question": "Where is Carmel Winery?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carmel_Winery> <http://dbpedia.org/property/locationCountry> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "winery",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carmel_Winery",
			"label": "winery carmel",
			"seq": "9,21"
		}]
	},
	{
		"id": "241bdbc0cd074cc2963509e47a0bc547",
		"question": "In how many places have Irishmen died?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Ireland> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "places",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "places",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Location",
			"label": "in",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ireland",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a7070d6a40cf48d4bf91099e23350ddf",
		"question": "List the stadium of the teams which uses Nea Smyrni  as one of the stadium ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/stadium> <http://dbpedia.org/resource/Nea_Smyrni_Stadium> . ?x <http://dbpedia.org/property/stadium> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/stadium",
			"label": "stadium",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/property/stadium",
			"label": "stadium",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nea_Smyrni_Stadium",
			"label": "stadium smyrni",
			"seq": "9,22"
		}]
	},
	{
		"id": "4df17f35aff7484b8f81fb0f1fafd50f",
		"question": "What awards have been awarded both to Ingmar bergman and James O'Brien?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ingmar_Bergman> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/James_F._O'Brien> <http://dbpedia.org/ontology/award> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ingmar_Bergman",
			"label": "bergman ingmar",
			"seq": "38,51"
		}, {
			"uri": "http://dbpedia.org/resource/James_F._O'Brien",
			"label": "o'brien james",
			"seq": "57,69"
		}]
	},
	{
		"id": "378830c0afdf4906b1f824f35f822318",
		"question": "List the colonel with branch as Militia ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Militia> . ?uri <http://dbpedia.org/property/rank> <http://dbpedia.org/resource/Colonel_(United_States)>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/property/rank",
			"label": "branch",
			"seq": "22,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Militia",
			"label": "militia",
			"seq": "32,38"
		}, {
			"uri": "http://dbpedia.org/resource/Colonel_(United_States)",
			"label": "colonel",
			"seq": "9,15"
		}]
	},
	{
		"id": "bc0a6b36790b465ea463c2ec3ead0fda",
		"question": "How many companies are located in Toronto ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Toronto>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "located",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto",
			"label": "toronto",
			"seq": "34,40"
		}]
	},
	{
		"id": "0ce4ccee1f484ba7b18881040f845d12",
		"question": "Name the chairman of the soccer club for which Mike Salmon currently plays?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Mike_Salmon> <http://dbpedia.org/property/currentclub> ?x . ?x <http://dbpedia.org/property/chairman> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "currently",
			"seq": "59,67"
		}, {
			"uri": "http://dbpedia.org/property/chairman",
			"label": "chairman",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClub",
			"label": "soccer club",
			"seq": "25,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mike_Salmon",
			"label": "salmon mike",
			"seq": "47,57"
		}]
	},
	{
		"id": "2c3ccc326827477db7ba435118944617",
		"question": "Who is a successor of Kingship whose parents were Julius Caesar?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Julius_Caesar> . ?x <http://dbpedia.org/ontology/successor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parents",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "parents",
			"seq": "37,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Julius_Caesar",
			"label": "julius caesar",
			"seq": "50,62"
		}]
	},
	{
		"id": "e6871a80517d4e3a993fc667347d30aa",
		"question": "Who wrote the musical based on Mary Poppins?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/basedOn> <http://dbpedia.org/resource/Mary_Poppins> . ?x <http://dbpedia.org/ontology/author> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/basedOn",
			"label": "based on",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "who",
			"seq": "0,2"
		}, {
			"uri": "http://dbpedia.org/ontology/Musical",
			"label": "musical",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mary_Poppins",
			"label": "poppins mary",
			"seq": "31,42"
		}]
	},
	{
		"id": "444ae098996b47649d2dbec98edd52a6",
		"question": "Which draft team of bob Macmillan is also the prospect team of Mikhail Pashnin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mikhail_Pashnin> <http://dbpedia.org/property/prospectTeam> ?uri. <http://dbpedia.org/resource/Bob_MacMillan> <http://dbpedia.org/property/draftTeam> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prospectTeam",
			"label": "prospect team",
			"seq": "12,24"
		}, {
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "draft team",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mikhail_Pashnin",
			"label": "pashnin mikhail",
			"seq": "63,77"
		}, {
			"uri": "http://dbpedia.org/resource/Bob_MacMillan",
			"label": "macmillan bob",
			"seq": "20,32"
		}]
	},
	{
		"id": "a60454067d7b4592bc6169e7a7d9a6cd",
		"question": "Which fields are covered by academic journals in the US?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/country> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/property/discipline> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/country",
			"label": "covered",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/property/discipline",
			"label": "in",
			"seq": "46,47"
		}, {
			"uri": "http://dbpedia.org/ontology/AcademicJournal",
			"label": "academic",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "198cb4233ecc4e64a23d2ce9e2c20cc9",
		"question": "What river ends in Indian Ocean and also starts somewhere in Zambia?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Indian_Ocean> . ?uri <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "5,9"
		}, {
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "ocean",
			"seq": "26,30"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indian_Ocean",
			"label": "indian ocean",
			"seq": "19,30"
		}, {
			"uri": "http://dbpedia.org/resource/Zambia",
			"label": "zambia",
			"seq": "61,66"
		}]
	},
	{
		"id": "7f2f6e1a38ab4f07be61d11e39732b54",
		"question": "Where do the people, famous for the Panathinaikos FC reside?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Panathinaikos_F.C.> . ?x <http://dbpedia.org/property/residence> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "for",
			"seq": "28,30"
		}, {
			"uri": "http://dbpedia.org/property/residence",
			"label": "reside",
			"seq": "53,58"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people,",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Panathinaikos_F.C.",
			"label": "panathinaikos",
			"seq": "36,48"
		}]
	},
	{
		"id": "6d4c25756b6346589f78aefa48a0d4ec",
		"question": "How many people have voiced characters sculpted by Clamp?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Clamp_(manga_artists)> . ?x <http://dbpedia.org/ontology/voice> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "characters",
			"seq": "28,37"
		}, {
			"uri": "http://dbpedia.org/ontology/voice",
			"label": "voiced",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Clamp_(manga_artists)",
			"label": "clamp",
			"seq": "51,55"
		}]
	},
	{
		"id": "a78468ab14af48d8a7e5c8649b7b7da6",
		"question": "To which company does Raymond Conner is critical to?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Raymond_Conner>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "does",
			"seq": "17,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Raymond_Conner",
			"label": "raymond conner",
			"seq": "22,35"
		}]
	},
	{
		"id": "04f9cbe07a5d4f17bf09a6c7eca5a2b4",
		"question": "What team has  players  born in Dominican Republic ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Dominican_Republic> . ?x <http://dbpedia.org/ontology/team> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "players",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dominican_Republic",
			"label": "dominican republic",
			"seq": "32,49"
		}]
	},
	{
		"id": "46ae412ded1647d0af1f52f6db1953d7",
		"question": "What is the death place of the Elbieta Czartoryska which is also place of birth of the Charles Journet",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/El\u017cbieta_Czartoryska_(1905\u20131989)> <http://dbpedia.org/property/deathPlace> ?uri. <http://dbpedia.org/resource/Charles_Journet> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "place",
			"seq": "18,22"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "place",
			"seq": "18,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/El\u017cbieta_Czartoryska_(1905\u20131989)",
			"label": "czartoryska",
			"seq": "39,49"
		}, {
			"uri": "http://dbpedia.org/resource/Charles_Journet",
			"label": "journet charles",
			"seq": "87,101"
		}]
	},
	{
		"id": "c352251c728144d3a1114a020b3abb11",
		"question": "What is the university attended by the baseball player who's known for Olin Corporation?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Olin_Corporation> . ?x <http://dbpedia.org/property/education> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "61,69"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "corporation",
			"seq": "76,86"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballPlayer",
			"label": "baseball player",
			"seq": "39,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Olin_Corporation",
			"label": "corporation olin",
			"seq": "71,86"
		}]
	},
	{
		"id": "be2d43507d27490580cef0ab4aca9355",
		"question": "In which country did Philippe tesnire and judson huss die?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philippe_Tesni\u00e8re> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/Judson_Huss> <http://dbpedia.org/property/placeOfDeath> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "country",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "country",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Philippe_Tesni\u00e8re",
			"label": "philippe",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/resource/Judson_Huss",
			"label": "judson huss",
			"seq": "42,52"
		}]
	},
	{
		"id": "ce1b21f49b74424fb4c6ab11cc56fedd",
		"question": "Which shows are voiced be US citizens?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/stateOfOrigin> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/voices> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "citizens",
			"seq": "29,36"
		}, {
			"uri": "http://dbpedia.org/property/voices",
			"label": "voiced",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9d8c57c836a840a28c591ca7d8a2de8d",
		"question": "Who has starred in the amusement park attractions where Jim Dooley was performing?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Jim_Dooley> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmusementParkAttraction>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "amusement",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "starred",
			"seq": "8,14"
		}, {
			"uri": "http://dbpedia.org/ontology/AmusementParkAttraction",
			"label": "attractions",
			"seq": "38,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jim_Dooley",
			"label": "dooley jim",
			"seq": "56,65"
		}]
	},
	{
		"id": "e56c54175e0941fd9afe385c983ce16a",
		"question": "Was Derg the anthem of Ethopia?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Derg> <http://dbpedia.org/ontology/anthem> <http://dbpedia.org/resource/Ethiopia> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/anthem",
			"label": "anthem",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Derg",
			"label": "derg",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/resource/Ethiopia",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "eaf2ccf4da0d4dd99bf39224e317dcf1",
		"question": "What cities does the river goes through, whose tributary is the little black river in Arkansas?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Little_Black_River_(Missouri_-_Arkansas)> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leftTributary",
			"label": "tributary",
			"seq": "47,55"
		}, {
			"uri": "http://dbpedia.org/ontology/city",
			"label": "cities",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "21,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Little_Black_River_(Missouri_-_Arkansas)",
			"label": "arkansas little",
			"seq": "64,78"
		}]
	},
	{
		"id": "ea7a3cc64bcc4334ad16e18130602c7f",
		"question": "what region is governed by Mario Olivero?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Mario_Oliverio> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leader",
			"label": "olivero",
			"seq": "33,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mario_Oliverio",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7dfa4ea0de86402fadf35b56230094d7",
		"question": "How many other characters are there of the plays which has a  characters name Joker (comics) ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/characters> <http://dbpedia.org/resource/Joker_(comics)> . ?x <http://dbpedia.org/property/characters> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/characters",
			"label": "characters",
			"seq": "15,24"
		}, {
			"uri": "http://dbpedia.org/property/characters",
			"label": "characters",
			"seq": "15,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joker_(comics)",
			"label": "(comics) joker",
			"seq": "78,91"
		}]
	},
	{
		"id": "b86a96a710634f0c85c57c051dbd247d",
		"question": "What is the Team Name  of St. Viator High School ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/St._Viator_High_School> <http://dbpedia.org/property/teamName> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/teamName",
			"label": "team name",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/St._Viator_High_School",
			"label": "viator school high st.",
			"seq": "26,47"
		}]
	},
	{
		"id": "1b0b90cd44a24c30a8e58ca7fe099d30",
		"question": "List the battles fought by  Ali Habib Mahmud ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battles",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ali_Habib_Mahmud",
			"label": "mahmud habib ali",
			"seq": "28,43"
		}]
	},
	{
		"id": "9bee0af78e8640ebb9e0835aab1fbf80",
		"question": "What is the label of the singles whose group is Outlawz ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Outlawz> . ?x <http://dbpedia.org/property/label> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalArtist",
			"label": "singles",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Single",
			"label": "singles",
			"seq": "25,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Outlawz",
			"label": "outlawz",
			"seq": "48,54"
		}]
	},
	{
		"id": "4a4e462a65d545da8ed589257c9a7b03",
		"question": "For how many other teams have the former players of Boston Bruins played?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Boston_Bruins> . ?x <http://dbpedia.org/property/playedFor> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "played",
			"seq": "66,71"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Boston_Bruins",
			"label": "bruins boston",
			"seq": "52,64"
		}]
	},
	{
		"id": "96454da162fa47f48d85f23ed72f4933",
		"question": "Count the different origins of members of the Vitis Vinifera species.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> . ?x <http://dbpedia.org/ontology/origin> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/species",
			"label": "species.",
			"seq": "61,68"
		}, {
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "origins",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "species.",
			"seq": "61,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vitis_vinifera",
			"label": "vinifera vitis",
			"seq": "46,59"
		}]
	},
	{
		"id": "1aee4c637a91415f9d690c4c5315ded9",
		"question": "Who is the author of Karakuri Dji Ultimo ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Karakuri_D\u00f4ji_Ultimo> <http://dbpedia.org/ontology/author> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "author",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Karakuri_D\u00f4ji_Ultimo",
			"label": "karakuri ultimo",
			"seq": "21,35"
		}]
	},
	{
		"id": "f0517726b79e40179b9458dd79aa9218",
		"question": "List the destinations of the airlines which also serves Mediterranean  Sea ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Mediterranean_Sea> . ?x <http://dbpedia.org/property/destinations> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/destinations",
			"label": "destinations",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "destinations",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "29,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mediterranean_Sea",
			"label": "mediterranean",
			"seq": "56,68"
		}]
	},
	{
		"id": "ca07f5bdb8504d5eb9f7042cf60590a6",
		"question": "Was the  2d Command and Control Squadron barracked in Colorado?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/2d_Command_and_Control_Squadron> <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Colorado> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/garrison",
			"label": "in",
			"seq": "51,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2d_Command_and_Control_Squadron",
			"label": "squadron control command",
			"seq": "12,35"
		}, {
			"uri": "http://dbpedia.org/resource/Colorado",
			"label": "colorado",
			"seq": "54,61"
		}]
	},
	{
		"id": "4c039e3d1eab4b4e906e046cc3096bbc",
		"question": "Where do the airlines garrisoned at Manchester airport fly to?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Manchester_Airport> . ?x <http://dbpedia.org/property/destinations> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/headquarter",
			"label": "where",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "garrisoned",
			"seq": "22,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Manchester_Airport",
			"label": "manchester airport",
			"seq": "36,53"
		}]
	},
	{
		"id": "5600cf1071264310a057ac57ba802779",
		"question": "Name the members of youth clubs which have Camp Nou as their homeground.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Camp_Nou> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/ground",
			"label": "homeground.",
			"seq": "61,71"
		}, {
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youth clubs",
			"seq": "20,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Camp_Nou",
			"label": "camp nou",
			"seq": "43,50"
		}]
	},
	{
		"id": "a813050ed3c340158c9e4c5fbb61fb8f",
		"question": "Who is the founder of Hohenau, Paraguay?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hohenau,_Paraguay> <http://dbpedia.org/ontology/founder> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founder",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hohenau,_Paraguay",
			"label": "paraguay hohenau,",
			"seq": "22,38"
		}]
	},
	{
		"id": "09ec259ff20c48b09885b7efccb5acd0",
		"question": "List the show related to the which was followed by Doctor Who Extra?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Doctor_Who_Extra> . ?uri <http://dbpedia.org/ontology/related> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "extra",
			"seq": "62,66"
		}, {
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Doctor_Who_Extra",
			"label": "doctor extra",
			"seq": "51,62"
		}]
	},
	{
		"id": "76d7c51e723d48af9852d33633d70572",
		"question": "Count the number teams which have  former ice hockey players which also included American Hockey League ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/American_Hockey_League> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former",
			"seq": "35,40"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former",
			"seq": "35,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Hockey_League",
			"label": "american league hockey",
			"seq": "46,67"
		}]
	},
	{
		"id": "d0946844e189450aadee011b3a6e2ac5",
		"question": "What is the largest city of the country which hosted the 1951 Asian Games?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/1951_Asian_Games> <http://dbpedia.org/property/hostCity> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hostCity",
			"label": "city",
			"seq": "20,23"
		}, {
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "32,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1951_Asian_Games",
			"label": "games asian 1951",
			"seq": "57,72"
		}]
	},
	{
		"id": "02bb53dca86a4babb87a656db5452944",
		"question": "Who gives the license of WXXV-DT2 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WXXV-DT2> <http://dbpedia.org/property/licensee> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/licensee",
			"label": "license",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WXXV-DT2",
			"label": "wxxv-dt2",
			"seq": "25,32"
		}]
	},
	{
		"id": "03e2743086c3467287d376e6e7e01dea",
		"question": "What is the result of the GazaIsrael conflict is also  the  place of the Qaqun?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gaza\u2013Israel_conflict> <http://dbpedia.org/property/result> ?uri. <http://dbpedia.org/resource/Qaqun> <http://dbpedia.org/property/place> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/result",
			"label": "result",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/property/place",
			"label": "place",
			"seq": "60,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gaza\u2013Israel_conflict",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Qaqun",
			"label": "qaqun",
			"seq": "73,77"
		}]
	},
	{
		"id": "7a22387ad6c34f20a9681b0d18d27390",
		"question": "Members of how many political parties have died in Delhi?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Delhi> . ?x <http://dbpedia.org/property/party> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "delhi",
			"seq": "51,55"
		}, {
			"uri": "http://dbpedia.org/property/party",
			"label": "parties",
			"seq": "30,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Delhi",
			"label": "delhi",
			"seq": "51,55"
		}]
	},
	{
		"id": "80727b167d9247f4a7228327aa7d521a",
		"question": "To how many places does the airlines fly, whose head office is located at the Gatwick Airport?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Gatwick_Airport> . ?x <http://dbpedia.org/property/destinations> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/headquarter",
			"label": "head",
			"seq": "48,51"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "does",
			"seq": "19,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gatwick_Airport",
			"label": "gatwick airport",
			"seq": "78,92"
		}]
	},
	{
		"id": "fb1cfb6030934cd2843217941b60cbe7",
		"question": "Which political figures were awarded Screen Actors Guild Life Achievement Award?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Screen_Actors_Guild_Life_Achievement_Award>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "29,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Screen_Actors_Guild_Life_Achievement_Award",
			"label": "achievement screen actors guild award",
			"seq": "29,65"
		}]
	},
	{
		"id": "ff50d4217d0d43c69bb66a163247c4f1",
		"question": "Where are the movies directed by Faisal Aman Khan recorded?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Faisal_Aman_Khan> . ?x <http://dbpedia.org/property/recorded> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "directed",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/property/recorded",
			"label": "recorded",
			"seq": "50,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Faisal_Aman_Khan",
			"label": "faisal khan aman",
			"seq": "33,48"
		}]
	},
	{
		"id": "6665d7d8a4f34fc1953ceda037ad3451",
		"question": "Where do current famous NatGeo photographers live?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/National_Geographic_(magazine)> . ?x <http://dbpedia.org/ontology/residence> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Photographer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "where",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "current",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Photographer",
			"label": "photographers",
			"seq": "31,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Geographic_(magazine)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0e7a98d81f2644ccad9cf21e77378c3b",
		"question": "How many awards have been given to Italians?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Italy> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "have",
			"seq": "16,19"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Italy",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "91feed339fa040e486755c343500f7d1",
		"question": "How many different layouts do cars designed by Oliver Boulay have?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Olivier_Boulay> . ?x <http://dbpedia.org/ontology/layout> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/ontology/layout",
			"label": "layouts",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Olivier_Boulay",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "576ea9f202d7463cb793f77628511e97",
		"question": "Is Hyundai Lavita assembled in Malaysia?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Malaysia> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/assembly",
			"label": "assembled",
			"seq": "18,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hyundai_Lavita",
			"label": "hyundai lavita",
			"seq": "3,16"
		}, {
			"uri": "http://dbpedia.org/resource/Malaysia",
			"label": "malaysia",
			"seq": "31,38"
		}]
	},
	{
		"id": "f018611c46d2443ca03755ae47d1568b",
		"question": "How many other Guests are there of the television episodes whose Guests is Brian d'Arcy James ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Brian_d'Arcy_James> . ?x <http://dbpedia.org/property/guests> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/guests",
			"label": "guests",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/property/guests",
			"label": "guests",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brian_d'Arcy_James",
			"label": "d'arcy james brian",
			"seq": "75,92"
		}]
	},
	{
		"id": "d7b3b5d412234a01aa50b7d8d3365a20",
		"question": "What awards have the narrator of the Cries and Whispers won?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Cries_and_Whispers> <http://dbpedia.org/ontology/narrator> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/narrator",
			"label": "narrator",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cries_and_Whispers",
			"label": "whispers cries",
			"seq": "37,50"
		}]
	},
	{
		"id": "b3a55c2d774b4ae5b6890b7ae5cf5d5e",
		"question": "Name the software which has been developed by John Fanning ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/John_Fanning_(businessman)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "developed",
			"seq": "33,41"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Fanning_(businessman)",
			"label": "fanning john",
			"seq": "46,57"
		}]
	},
	{
		"id": "2b59ba028c34416390816c7c18f84230",
		"question": "What are the cities located on the sea into which the Aegean Sea flows?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/outflow",
			"label": "flows",
			"seq": "65,69"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Aegean_Sea",
			"label": "aegean sea",
			"seq": "35,44"
		}]
	},
	{
		"id": "cf7aca2e48a445299efbf5664c867e8e",
		"question": "List the shrines of the saint whose one of the shrine is Ponza ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/majorShrine> <http://dbpedia.org/resource/Pozna\u0144> . ?x <http://dbpedia.org/ontology/majorShrine> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Saint>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrine",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrine",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Saint",
			"label": "saint",
			"seq": "24,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pozna\u0144",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9056e4b74f654d5ea69fefdc6992e717",
		"question": "Whichi  burial place of the Henri, Duke of Rohan is also the birth place of Michel Frutschi ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> <http://dbpedia.org/ontology/placeOfBurial> ?uri. <http://dbpedia.org/resource/Michel_Frutschi> <http://dbpedia.org/property/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/placeOfBurial",
			"label": "burial place",
			"seq": "8,19"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "place",
			"seq": "15,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henri,_Duke_of_Rohan",
			"label": "henri, rohan duke",
			"seq": "28,44"
		}, {
			"uri": "http://dbpedia.org/resource/Michel_Frutschi",
			"label": "frutschi michel",
			"seq": "76,90"
		}]
	},
	{
		"id": "1422749d46f24fb7bf292b5370dcae01",
		"question": "Who is the former partner of the pupil of Dalilah Sappenfield?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Dalilah_Sappenfield> . ?x <http://dbpedia.org/ontology/formerPartner> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coach",
			"label": "dalilah",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/ontology/formerPartner",
			"label": "partner former",
			"seq": "11,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dalilah_Sappenfield",
			"label": "sappenfield dalilah",
			"seq": "42,60"
		}]
	},
	{
		"id": "44bacf63913b413c97f15d7f4de91547",
		"question": "Who died due to Morphine ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/deathCause> <http://dbpedia.org/resource/Morphine>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "due",
			"seq": "9,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Morphine",
			"label": "morphine",
			"seq": "16,23"
		}]
	},
	{
		"id": "784fa60a6196464d8a6c45f97733c61f",
		"question": "How many mammals are in the Chordate phylum?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/phylum> <http://dbpedia.org/resource/Chordate>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/phylum",
			"label": "phylum",
			"seq": "37,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Mammal",
			"label": "mammals",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chordate",
			"label": "chordate",
			"seq": "28,35"
		}]
	},
	{
		"id": "8f2af1e74b9f40ac84e66b6aea4f3770",
		"question": "How many people were opponents of the ones buried in the tower of London?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Tower_of_London> . ?x <http://dbpedia.org/ontology/opponent> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingPlace",
			"label": "people",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponents",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tower_of_London",
			"label": "london tower",
			"seq": "57,68"
		}]
	},
	{
		"id": "dbf6b1fd3ef142aa8fa7dadd70dcd502",
		"question": "Name the common university of the Cardinal and Jim Wylie?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stanford_Cardinal> <http://dbpedia.org/ontology/university> ?uri. <http://dbpedia.org/resource/Jim_Wylie> <http://dbpedia.org/ontology/university> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/university",
			"label": "university",
			"seq": "16,25"
		}, {
			"uri": "http://dbpedia.org/ontology/university",
			"label": "university",
			"seq": "16,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stanford_Cardinal",
			"label": "cardinal",
			"seq": "34,41"
		}, {
			"uri": "http://dbpedia.org/resource/Jim_Wylie",
			"label": "wylie jim",
			"seq": "47,55"
		}]
	},
	{
		"id": "ac98a0220f7340f187466f3e2d99aab4",
		"question": "Name the species of Southwest African lion ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Southwest_African_lion> <http://dbpedia.org/ontology/species> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/species",
			"label": "species",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Southwest_African_lion",
			"label": "southwest african lion",
			"seq": "20,41"
		}]
	},
	{
		"id": "abc719a6e7a1435ba3b1472897a5249c",
		"question": "In which country did the planes designed by Ursula Hanle originate?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Ursula_H\u00e4nle> . ?x <http://dbpedia.org/property/nationalOrigin> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Aircraft>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "32,39"
		}, {
			"uri": "http://dbpedia.org/property/nationalOrigin",
			"label": "originate",
			"seq": "57,65"
		}, {
			"uri": "http://dbpedia.org/ontology/Aircraft",
			"label": "originate",
			"seq": "57,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ursula_H\u00e4nle",
			"label": "ursula",
			"seq": "44,49"
		}]
	},
	{
		"id": "b1760c005bc747f78ec34be2a730e01b",
		"question": "List the pole drivers in the grand prixes where Williams Grand Prix Engineering was a first team?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/firstTeam> <http://dbpedia.org/resource/Williams_Grand_Prix_Engineering> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstTeam",
			"label": "first team",
			"seq": "86,95"
		}, {
			"uri": "http://dbpedia.org/ontology/poleDriver",
			"label": "drivers",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/GrandPrix",
			"label": "grand",
			"seq": "29,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Williams_Grand_Prix_Engineering",
			"label": "engineering williams grand",
			"seq": "29,54"
		}]
	},
	{
		"id": "e8328bd8391f448d93a1ea6a456e32dd",
		"question": "From how many different institutes have the members of Judge Advocate General's Corps graduated?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Judge_Advocate_General's_Corps,_United_States_Army> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryRank",
			"label": "many",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "members",
			"seq": "44,50"
		}, {
			"uri": "http://dbpedia.org/ontology/EducationalInstitution",
			"label": "institutes",
			"seq": "24,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Judge_Advocate_General's_Corps,_United_States_Army",
			"label": "general's advocate",
			"seq": "61,78"
		}]
	},
	{
		"id": "d06c3f86937f45449b1e81e9448f48ed",
		"question": "Which newspaper owned by Schibsted is published in Swedish ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language> . ?uri <http://dbpedia.org/property/owners> <http://dbpedia.org/resource/Schibsted>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/language",
			"label": "owned",
			"seq": "16,20"
		}, {
			"uri": "http://dbpedia.org/property/owners",
			"label": "owned",
			"seq": "16,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Newspaper",
			"label": "newspaper",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Swedish_language",
			"label": "swedish",
			"seq": "51,57"
		}, {
			"uri": "http://dbpedia.org/resource/Schibsted",
			"label": "schibsted",
			"seq": "25,33"
		}]
	},
	{
		"id": "f2abcff9c290486ab8f1affd60f412f8",
		"question": "In how many different places have ehtics philosophers died?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Ethics> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "different",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "places",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "22,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ethics",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c7bac34e1c854968971d32c09b321bf0",
		"question": "What political ideology of the Palang Dharma Party is relegion of Inthakin?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Palang_Dharma_Party> <http://dbpedia.org/ontology/ideology> ?uri. <http://dbpedia.org/resource/Inthakin> <http://dbpedia.org/ontology/type> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ideology",
			"label": "ideology",
			"seq": "15,22"
		}, {
			"uri": "http://dbpedia.org/ontology/type",
			"label": "the",
			"seq": "27,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Palang_Dharma_Party",
			"label": "palang dharma party",
			"seq": "31,49"
		}, {
			"uri": "http://dbpedia.org/resource/Inthakin",
			"label": "inthakin",
			"seq": "66,73"
		}]
	},
	{
		"id": "34130d2812d84c70bdaaf30ade9a2204",
		"question": "Where did Fort Lauderdale Strikers season of 16 take place?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ground",
			"label": "season",
			"seq": "35,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season",
			"label": "lauderdale strikers season",
			"seq": "15,40"
		}]
	},
	{
		"id": "a65384e0c6d64302868aa3c04c47d3e9",
		"question": "What are some relatives of the people who fought in Operation Barbarossa?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Operation_Barbarossa> . ?x <http://dbpedia.org/ontology/relation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "the",
			"seq": "27,29"
		}, {
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "operation",
			"seq": "52,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Operation_Barbarossa",
			"label": "barbarossa operation",
			"seq": "52,71"
		}]
	},
	{
		"id": "8b97d14dcaf24e5ebfbcdd6c33b5225b",
		"question": "What are the other key people of the non-profit organisations whose one of the  key person is Joe Green ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Joe_Green_(entrepreneur)> . ?x <http://dbpedia.org/property/keyPeople> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Non-ProfitOrganisation>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people key",
			"seq": "19,28"
		}, {
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people key",
			"seq": "19,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Non-ProfitOrganisation",
			"label": "organisations",
			"seq": "48,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joe_Green_(entrepreneur)",
			"label": "green",
			"seq": "98,102"
		}]
	},
	{
		"id": "9c45e57bd6df436a804a484269f51d51",
		"question": "Is Mike Babcock the head coach of Toronto Maple Leafs?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Toronto_Maple_Leafs> <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Mike_Babcock> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headCoach",
			"label": "coach head",
			"seq": "20,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto_Maple_Leafs",
			"label": "toronto maple leafs",
			"seq": "34,52"
		}, {
			"uri": "http://dbpedia.org/resource/Mike_Babcock",
			"label": "babcock mike",
			"seq": "3,14"
		}]
	},
	{
		"id": "902aa5708f8b44108380a95c01c45686",
		"question": "What writers have nationality as Statelessness?  ",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nationality> <http://dbpedia.org/resource/Statelessness>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationality",
			"label": "nationality",
			"seq": "18,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writers",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Statelessness",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4fa56e45fedf4969b8ccfc846a78dc9a",
		"question": "Who is the leader of United States House of Representatives elections, 1788 and 1789 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789> <http://dbpedia.org/property/leader> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leader",
			"label": "leader",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789",
			"label": "representatives elections, united states house",
			"seq": "21,66"
		}]
	},
	{
		"id": "9b7b9393ba92438d807402980092a498",
		"question": "Where is the king buried whose predecessor was Iyasu II?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Iyasu_II> . ?x <http://dbpedia.org/property/placeOfBurial> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "31,41"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "buried",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Monarch",
			"label": "predecessor",
			"seq": "31,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Iyasu_II",
			"label": "iyasu",
			"seq": "47,51"
		}]
	},
	{
		"id": "0f64ebf1ec944faa999a799ae051e373",
		"question": "Is Audie Murphy buried in the Arlington national cementery?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Audie_Murphy> <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Arlington_National_Cemetery> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeofburial",
			"label": "buried",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Audie_Murphy",
			"label": "murphy audie",
			"seq": "3,14"
		}, {
			"uri": "http://dbpedia.org/resource/Arlington_National_Cemetery",
			"label": "arlington national",
			"seq": "30,47"
		}]
	},
	{
		"id": "82880466af6a4a07bb1bcd89ed90af00",
		"question": "What honours did Reigh Count receive?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Reigh_Count> <http://dbpedia.org/ontology/honours> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/honours",
			"label": "honours",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Reigh_Count",
			"label": "reigh count",
			"seq": "17,27"
		}]
	},
	{
		"id": "9fcaa73b3dca47a9a3bf12a42abe54b7",
		"question": "How many people have written stuff broadcasted on the Tokyo Broadcasting System?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/Tokyo_Broadcasting_System> . ?x <http://dbpedia.org/property/writer> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/network",
			"label": "tokyo",
			"seq": "54,58"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tokyo_Broadcasting_System",
			"label": "broadcasting",
			"seq": "60,71"
		}]
	},
	{
		"id": "ee1bccf6ccb7409e82df8306828de0c8",
		"question": "List the awards received of the person whose child is Daine Disney Miller?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Diane_Disney_Miller> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "child",
			"seq": "45,49"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Diane_Disney_Miller",
			"label": "miller disney",
			"seq": "60,72"
		}]
	},
	{
		"id": "609a310df5854bada8e182bcc9f2fee9",
		"question": "How many more teams have rented the stadium used by Raptors 905?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Raptors_905> <http://dbpedia.org/property/arena> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/arena",
			"label": "rented",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "teams",
			"seq": "14,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "36,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Raptors_905",
			"label": "raptors 905",
			"seq": "52,62"
		}]
	},
	{
		"id": "331ab7e173c740318ed2adfa0f08046b",
		"question": "Give me a count of musicians who play an instrument developed by George Beauchamp ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/George_Beauchamp> . ?uri <http://dbpedia.org/ontology/instrument> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "developed",
			"seq": "52,60"
		}, {
			"uri": "http://dbpedia.org/ontology/instrument",
			"label": "instrument",
			"seq": "41,50"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musicians",
			"seq": "19,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_Beauchamp",
			"label": "beauchamp george",
			"seq": "65,80"
		}]
	},
	{
		"id": "5ac4dc8f112e464796c31164eb0f3a64",
		"question": "What is the place of birth of Lauren Briggs ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lauren_Briggs> <http://dbpedia.org/property/placeOfBirth> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lauren_Briggs",
			"label": "lauren briggs",
			"seq": "30,42"
		}]
	},
	{
		"id": "d4ed4754c8194ab69b712750149fdd7a",
		"question": "Does the St lawrence river start in Kingston, Ontario?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Saint_Lawrence_River> <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Kingston,_Ontario> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceMountain",
			"label": "ontario",
			"seq": "46,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saint_Lawrence_River",
			"label": "lawrence river",
			"seq": "12,25"
		}, {
			"uri": "http://dbpedia.org/resource/Kingston,_Ontario",
			"label": "kingston, ontario",
			"seq": "36,52"
		}]
	},
	{
		"id": "3fe7d243d8064aadbe198b10a38cf9b4",
		"question": "Give me an estimate of the number of manufacturers whose products are managed by MTR?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/MTR> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "products",
			"seq": "57,64"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufacturers",
			"seq": "37,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/MTR",
			"label": "mtr",
			"seq": "81,83"
		}]
	},
	{
		"id": "50815a2e5ca14118b958db770c868c1e",
		"question": "Who is the fictional character whose relative is Vestigial Peter?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Vestigial_Peter>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relative",
			"seq": "37,44"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "11,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vestigial_Peter",
			"label": "vestigial peter",
			"seq": "49,63"
		}]
	},
	{
		"id": "6283e026a6f54433921efa5494260bc8",
		"question": "What are a few molluscas whose family is Buccinidae?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mollusca>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "family",
			"seq": "31,36"
		}, {
			"uri": "http://dbpedia.org/ontology/Mollusca",
			"label": "molluscas",
			"seq": "15,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Buccinidae",
			"label": "buccinidae",
			"seq": "41,50"
		}]
	},
	{
		"id": "4082e390c8294b71804e3c6b5b3f249c",
		"question": "What is the agency name of the Ministry of Information and Communication Technology (Thailand) and distribution region  of the Channel 9 MCOT HD ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ministry_of_Information_and_Communication_Technology_(Thailand)> <http://dbpedia.org/property/agencyName> ?uri. <http://dbpedia.org/resource/Channel_9_MCOT_HD> <http://dbpedia.org/property/city> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/agencyName",
			"label": "agency name",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/property/city",
			"label": "ministry",
			"seq": "31,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ministry_of_Information_and_Communication_Technology_(Thailand)",
			"label": "communication information technology (thailand)",
			"seq": "43,89"
		}, {
			"uri": "http://dbpedia.org/resource/Channel_9_MCOT_HD",
			"label": "channel mcot",
			"seq": "127,138"
		}]
	},
	{
		"id": "f976333c9df44935b5cb741fdfd342ea",
		"question": "What type of government is elected in Kumta?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/ontology/governmentType> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governmentType",
			"label": "government type",
			"seq": "5,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kumta",
			"label": "kumta",
			"seq": "38,42"
		}]
	},
	{
		"id": "51504ea36f364007a53aea8d7060e17d",
		"question": "What company developed Mac OS 9 and also brought Tiny Tower to the market?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mac_OS_9> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/Tiny_Tower> <http://dbpedia.org/property/distributor> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "tower",
			"seq": "54,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mac_OS_9",
			"label": "mac os",
			"seq": "23,28"
		}, {
			"uri": "http://dbpedia.org/resource/Tiny_Tower",
			"label": "tower tiny",
			"seq": "49,58"
		}]
	},
	{
		"id": "3bdef03debd5421ab0cd7f4a3758b46b",
		"question": "Which currency is primarily used by the company which is the distributing label of VDE-Gallo Records?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/VDE-Gallo_Records> <http://dbpedia.org/ontology/distributingLabel> ?x . ?x <http://dbpedia.org/property/currency> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributingLabel",
			"label": "distributing label",
			"seq": "61,78"
		}, {
			"uri": "http://dbpedia.org/property/currency",
			"label": "currency",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "distributing",
			"seq": "61,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/VDE-Gallo_Records",
			"label": "vde-gallo records",
			"seq": "83,99"
		}]
	},
	{
		"id": "13fc91a5ba564ac6aaa2be0d37c03aa1",
		"question": "Who all have been in bands which have recorded their work in the Electric Lady Studios?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/Electric_Lady_Studios> . ?uri <http://dbpedia.org/property/associatedActs> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded",
			"seq": "38,45"
		}, {
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "studios",
			"seq": "79,85"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "been",
			"seq": "13,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Electric_Lady_Studios",
			"label": "electric studios lady",
			"seq": "65,85"
		}]
	},
	{
		"id": "30f39069de5b4672a6f01513ae7e3491",
		"question": "What is the label of things produced by the band If?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/If_(band)> . ?x <http://dbpedia.org/property/label> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "things",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/If_(band)",
			"label": "band if",
			"seq": "44,50"
		}]
	},
	{
		"id": "7509db63f63840548107d56cc97f5a0f",
		"question": "What is the television show whose subsequent work is Crusade (TV series) and developed by  J. Michael Straczynski?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Crusade_(TV_series)> . ?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "34,48"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "77,85"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Crusade_(TV_series)",
			"label": "series) crusade",
			"seq": "53,67"
		}, {
			"uri": "http://dbpedia.org/resource/J._Michael_Straczynski",
			"label": "straczynski michael",
			"seq": "94,112"
		}]
	},
	{
		"id": "ff87b9ebc25a4997a01aed4bac145920",
		"question": "What people were born in Ridgewood, New Jersey?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Ridgewood,_New_Jersey>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "people",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ridgewood,_New_Jersey",
			"label": "ridgewood, jersey",
			"seq": "25,41"
		}]
	},
	{
		"id": "40d57e64ea22448ab4a194129f2793ae",
		"question": "Which content license of the MSX BASIC is also the profession of the Laura K. Ipsen ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri. <http://dbpedia.org/resource/Laura_K._Ipsen> <http://dbpedia.org/ontology/occupation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/license",
			"label": "license",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "profession",
			"seq": "51,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/MSX_BASIC",
			"label": "basic msx",
			"seq": "29,37"
		}, {
			"uri": "http://dbpedia.org/resource/Laura_K._Ipsen",
			"label": "laura ipsen",
			"seq": "69,79"
		}]
	},
	{
		"id": "8b84e189a1384ad4bf36163f27e3acac",
		"question": "What is the company to which Fusajiro Yamauchi proprietor to ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fusajiro_Yamauchi>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "company",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fusajiro_Yamauchi",
			"label": "yamauchi fusajiro",
			"seq": "29,45"
		}]
	},
	{
		"id": "41dea095bc384feb9fb2f59597e2457d",
		"question": "Who is the performer of the album whose subsequent work is Willie Nelson and Family ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Willie_Nelson_and_Family> . ?x <http://dbpedia.org/ontology/artist> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "40,54"
		}, {
			"uri": "http://dbpedia.org/ontology/artist",
			"label": "is",
			"seq": "4,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Willie_Nelson_and_Family",
			"label": "willie nelson family and",
			"seq": "59,82"
		}]
	},
	{
		"id": "509e179ae21a44d68ac494defe1b32e7",
		"question": "Name the debut team of Dan Otero ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dan_Otero> <http://dbpedia.org/ontology/debutTeam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debut team",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dan_Otero",
			"label": "otero dan",
			"seq": "23,31"
		}]
	},
	{
		"id": "54e96a6a9d9749f6878cac13550c192a",
		"question": "What is the POD of the successor of Pmare I ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/P\u014dmare_I> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "8,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/P\u014dmare_I",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d15ac9a40bb143a0a3da0de817e8d832",
		"question": "Who is the producer of Captain EO ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Captain_EO> <http://dbpedia.org/property/producer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "producer",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Captain_EO",
			"label": "captain eo",
			"seq": "23,32"
		}]
	},
	{
		"id": "f2e72675e3df4f1abe9deb7b7779f904",
		"question": "List all the home stadium of the soccer clubs which has one of the home stadium as Nairobi ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/homeStadium> <http://dbpedia.org/resource/Nairobi> . ?x <http://dbpedia.org/property/homeStadium> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/homeStadium",
			"label": "stadium",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/property/homeStadium",
			"label": "stadium",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClub",
			"label": "soccer",
			"seq": "33,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nairobi",
			"label": "nairobi",
			"seq": "83,89"
		}]
	},
	{
		"id": "d0847ee1f87a43a88507df1216bc342b",
		"question": "How many utopian and dystopian fiction books are there?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Utopian_and_dystopian_fiction>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/literaryGenre",
			"label": "there",
			"seq": "49,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Utopian_and_dystopian_fiction",
			"label": "dystopian utopian fiction and",
			"seq": "9,37"
		}]
	},
	{
		"id": "0645d71c51664c7f98ef83d258d24c5d",
		"question": "Which college of Luke List (golfer) is the alma mater of K. Terry Dornbush",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Luke_List_(golfer)> <http://dbpedia.org/property/college> ?uri. <http://dbpedia.org/resource/K._Terry_Dornbush> <http://dbpedia.org/property/almaMater> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/college",
			"label": "college",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "43,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Luke_List_(golfer)",
			"label": "(golfer) luke list",
			"seq": "17,34"
		}, {
			"uri": "http://dbpedia.org/resource/K._Terry_Dornbush",
			"label": "dornbush terry",
			"seq": "60,73"
		}]
	},
	{
		"id": "593a45b09e04430e9687b99f34b3e709",
		"question": "What are the academic interest of Philip Novak?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philip_Novak> <http://dbpedia.org/property/mainInterests> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "interest",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Philip_Novak",
			"label": "philip novak",
			"seq": "34,45"
		}]
	},
	{
		"id": "74a5cff93ee946babd0e69d98b975931",
		"question": "Does the Westchester Avenue fall under the Bronx?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Westchester_Avenue> <http://dbpedia.org/property/counties> <http://dbpedia.org/resource/The_Bronx> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/counties",
			"label": "does",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Westchester_Avenue",
			"label": "westchester avenue",
			"seq": "9,26"
		}, {
			"uri": "http://dbpedia.org/resource/The_Bronx",
			"label": "bronx the",
			"seq": "5,13"
		}]
	},
	{
		"id": "526b1249debc4893af724c324a24726e",
		"question": "Count the total number of software whose programming language is C++ and operating system is Microsoft Windows?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/C++> . ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "programming language",
			"seq": "41,60"
		}, {
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating system",
			"seq": "73,88"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/C++",
			"label": "c++",
			"seq": "65,67"
		}, {
			"uri": "http://dbpedia.org/resource/Microsoft_Windows",
			"label": "microsoft windows",
			"seq": "93,109"
		}]
	},
	{
		"id": "e91c453536f24b228292c56b81ead42b",
		"question": "How many albums were released under the Victor Entertainment label?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Victor_Entertainment>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "61,65"
		}, {
			"uri": "http://dbpedia.org/ontology/Album",
			"label": "albums",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Victor_Entertainment",
			"label": "entertainment victor",
			"seq": "40,59"
		}]
	},
	{
		"id": "7dc5e7a5b436490481cc92fa93bd288f",
		"question": "Does NOAAS Davidson (S 331) have a homeport in Seattle?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/NOAAS_Davidson_(S_331)> <http://dbpedia.org/ontology/homeport> <http://dbpedia.org/resource/Seattle> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/homeport",
			"label": "homeport",
			"seq": "35,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/NOAAS_Davidson_(S_331)",
			"label": "davidson noaas 331)",
			"seq": "5,23"
		}, {
			"uri": "http://dbpedia.org/resource/Seattle",
			"label": "seattle",
			"seq": "47,53"
		}]
	},
	{
		"id": "e81ec239e24b4394ad486b4fcfb77f8b",
		"question": "Which serving railway line of the Daund Junction railway station was also the place where 99 (2009 film) was recorded ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri. <http://dbpedia.org/resource/99_(2009_film)> <http://dbpedia.org/property/recorded> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/servingRailwayLine",
			"label": "serving railway",
			"seq": "6,20"
		}, {
			"uri": "http://dbpedia.org/property/recorded",
			"label": "recorded",
			"seq": "109,116"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Daund_Junction_railway_station",
			"label": "junction station railway daund",
			"seq": "14,43"
		}, {
			"uri": "http://dbpedia.org/resource/99_(2009_film)",
			"label": "film) (2009 99",
			"seq": "90,103"
		}]
	},
	{
		"id": "2c3d0f285c6140879c32fc68bf2d2cfb",
		"question": "Which parties have their members live in the PM House, Colombo?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Prime_Minister's_House_(Colombo)> . ?uri <http://dbpedia.org/ontology/leader> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "parties",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "members",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/ontology/PoliticalParty",
			"label": "parties",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Prime_Minister's_House_(Colombo)",
			"label": "colombo",
			"seq": "55,61"
		}]
	},
	{
		"id": "6daa5758ac314e80929ed6583575c5f8",
		"question": "Which office holder's resting place is Alta Mesa Memorial park and has adrian A. Basora as successor ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora> . ?uri <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Alta_Mesa_Memorial_Park>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "91,99"
		}, {
			"uri": "http://dbpedia.org/property/restingPlace",
			"label": "resting place",
			"seq": "22,34"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Adrian_A._Basora",
			"label": "basora adrian",
			"seq": "71,83"
		}, {
			"uri": "http://dbpedia.org/resource/Alta_Mesa_Memorial_Park",
			"label": "memorial",
			"seq": "49,56"
		}]
	},
	{
		"id": "22420b9ce00545229aecd57813393a38",
		"question": "Name the movie written by Monty Python and distributed by Cinema International Corporation ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributed",
			"seq": "43,53"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "cinema",
			"seq": "58,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cinema_International_Corporation",
			"label": "international corporation cinema",
			"seq": "58,89"
		}, {
			"uri": "http://dbpedia.org/resource/Monty_Python",
			"label": "python monty",
			"seq": "26,37"
		}]
	},
	{
		"id": "18cc0cb6c446411aba19e87c3d2cef99",
		"question": "Which governor of Charles Willing byrd fought the battle of Siege of Fort Recovery ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Siege_of_Fort_Recovery> . ?uri <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Charles_Willing_Byrd>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "battle",
			"seq": "50,55"
		}, {
			"uri": "http://dbpedia.org/property/governor",
			"label": "governor",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Siege_of_Fort_Recovery",
			"label": "recovery siege",
			"seq": "60,73"
		}, {
			"uri": "http://dbpedia.org/resource/Charles_Willing_Byrd",
			"label": "willing charles byrd",
			"seq": "18,37"
		}]
	},
	{
		"id": "a1a2b9381ed049a882c87648db96c438",
		"question": "On what subject does WTJC-LP air?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WTJC-LP> <http://dbpedia.org/property/format> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/format",
			"label": "what",
			"seq": "3,6"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WTJC-LP",
			"label": "wtjc-lp",
			"seq": "21,27"
		}]
	},
	{
		"id": "86346cf018e9417da21aae023485460f",
		"question": "Which company owns Evraz ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Evraz> <http://dbpedia.org/ontology/owningCompany> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningCompany",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Evraz",
			"label": "evraz",
			"seq": "19,23"
		}]
	},
	{
		"id": "3c5ec517b1a14c2bbccc65ce6c1db5c7",
		"question": "Who is the leader of Panki block ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Panki_block> <http://dbpedia.org/ontology/leaderName> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "leader",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Panki_block",
			"label": "panki block",
			"seq": "21,31"
		}]
	},
	{
		"id": "d0a9f37f03c64ca2a96a688f3ac12798",
		"question": "Which parent company of  Edsel was the first team of the 1967 Mexican Grand Prix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edsel> <http://dbpedia.org/property/parent> ?uri. <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/parent",
			"label": "parent",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/firstTeam",
			"label": "first team",
			"seq": "39,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edsel",
			"label": "edsel",
			"seq": "25,29"
		}, {
			"uri": "http://dbpedia.org/resource/1967_Mexican_Grand_Prix",
			"label": "mexican grand prix 1967",
			"seq": "57,79"
		}]
	},
	{
		"id": "2de2ea8f7f994e38898f57b6b90b2088",
		"question": "Name the company whose products's predecessor is Boeing Vertol CH-46 Sea Knight?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Boeing_Vertol_CH-46_Sea_Knight> . ?uri <http://dbpedia.org/property/products> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "34,44"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "products's",
			"seq": "23,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Boeing_Vertol_CH-46_Sea_Knight",
			"label": "vertol knight boeing ch-46",
			"seq": "49,74"
		}]
	},
	{
		"id": "c1231c9ac8174bc4bb544853d3faf6ca",
		"question": "Name the species of Liger ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liger> <http://dbpedia.org/ontology/species> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/species",
			"label": "species",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Liger",
			"label": "liger",
			"seq": "20,24"
		}]
	},
	{
		"id": "7282c5f557974ec99165996f0b27200a",
		"question": "Which fictional character's relative is Clan McDuck and belongs to American Pekin duck ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck> . ?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relative",
			"seq": "28,35"
		}, {
			"uri": "http://dbpedia.org/ontology/species",
			"label": "pekin",
			"seq": "76,80"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Clan_McDuck",
			"label": "mcduck clan",
			"seq": "40,50"
		}, {
			"uri": "http://dbpedia.org/resource/American_Pekin_duck",
			"label": "american",
			"seq": "67,74"
		}]
	},
	{
		"id": "9b04388b468a4460a8e15aacaadf7853",
		"question": "Is michelangelo the painter of The Persian Boy?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Persian_Boy> <http://dbpedia.org/ontology/illustrator> <http://dbpedia.org/resource/Michelangelo> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/illustrator",
			"label": "michelangelo",
			"seq": "3,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Persian_Boy",
			"label": "persian",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/resource/Michelangelo",
			"label": "michelangelo",
			"seq": "3,14"
		}]
	},
	{
		"id": "1fddb6aae1e34017a5ef49ecfbd2f3bb",
		"question": "Name the line of the Vadodara Junction railway station which is also the  hub airport of the Pawan Hans?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/property/line> ?uri. <http://dbpedia.org/resource/Pawan_Hans> <http://dbpedia.org/ontology/hubAirport> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/line",
			"label": "line",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/ontology/hubAirport",
			"label": "airport hub",
			"seq": "74,84"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vadodara_Junction_railway_station",
			"label": "vadodara junction station railway",
			"seq": "21,53"
		}, {
			"uri": "http://dbpedia.org/resource/Pawan_Hans",
			"label": "pawan hans",
			"seq": "93,102"
		}]
	},
	{
		"id": "a043a59e39a94f1b804acd94a58801e2",
		"question": "Which television shows has sound format as 5.1 surround?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/format> <http://dbpedia.org/resource/5.1_surround_sound>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/format",
			"label": "format",
			"seq": "33,38"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/5.1_surround_sound",
			"label": "surround sound 5.1",
			"seq": "27,44"
		}]
	},
	{
		"id": "62461469fd01444f88e0d4d08359db98",
		"question": "Which boarder country of Korean Peninsula was the state of Sodagreen ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Korean_Peninsula> <http://dbpedia.org/ontology/border> ?uri. <http://dbpedia.org/resource/Sodagreen> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/border",
			"label": "boarder",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Korean_Peninsula",
			"label": "peninsula korean",
			"seq": "25,40"
		}, {
			"uri": "http://dbpedia.org/resource/Sodagreen",
			"label": "sodagreen",
			"seq": "59,67"
		}]
	},
	{
		"id": "7f6ce18d38014a87a073ee8285106c60",
		"question": "Where is the capital of Kelsey Creek located?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Kelsey_Creek> <http://dbpedia.org/ontology/region> ?x . ?x <http://dbpedia.org/ontology/countySeat> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/region",
			"label": "where",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/countySeat",
			"label": "located",
			"seq": "37,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kelsey_Creek",
			"label": "kelsey creek",
			"seq": "24,35"
		}]
	},
	{
		"id": "652f41e8f5324124af1f9e41d9127e5d",
		"question": "Name the TV show whose opening theme is Gary Portnoy and the subsequent work is Frasier?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Gary_Portnoy> . ?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Frasier>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opening theme",
			"seq": "23,35"
		}, {
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "61,75"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gary_Portnoy",
			"label": "portnoy gary",
			"seq": "40,51"
		}, {
			"uri": "http://dbpedia.org/resource/Frasier",
			"label": "frasier",
			"seq": "80,86"
		}]
	},
	{
		"id": "2a427a404ec84210b9342358d5cb81a4",
		"question": "Which president was served by someone whose lieutenant is Lewis Stuyvesant Chanler?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/lieutenant> <http://dbpedia.org/resource/Lewis_Stuyvesant_Chanler> . ?x <http://dbpedia.org/ontology/president> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/lieutenant",
			"label": "lieutenant",
			"seq": "44,53"
		}, {
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lewis_Stuyvesant_Chanler",
			"label": "stuyvesant chanler",
			"seq": "64,81"
		}]
	},
	{
		"id": "b9d3a2fe75124f64855ddc9e0f97e76d",
		"question": "What does the famous relative of Levon Ashotovich Grigorian do for a living?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Levon_Ashotovich_Grigorian> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relative",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "relative",
			"seq": "21,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Levon_Ashotovich_Grigorian",
			"label": "ashotovich grigorian levon",
			"seq": "33,58"
		}]
	},
	{
		"id": "14657aede6af4c84b339a412d713119b",
		"question": "Whose county seats are Mediolanum and History of Trier?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Mediolanum> . ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/History_of_Trier> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "seats",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "seats",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mediolanum",
			"label": "mediolanum",
			"seq": "23,32"
		}, {
			"uri": "http://dbpedia.org/resource/History_of_Trier",
			"label": "history trier",
			"seq": "38,50"
		}]
	},
	{
		"id": "55a0f9a155d248a4b36850165c830f0b",
		"question": "How many movies did Joel Schumacher direct?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Joel_Schumacher>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "direct",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "did",
			"seq": "16,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joel_Schumacher",
			"label": "schumacher joel",
			"seq": "20,34"
		}]
	},
	{
		"id": "3f0c5c6e16f44478976a62d32ee3a123",
		"question": "How many games are played at universities in Metro Manilla?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/state> <http://dbpedia.org/resource/Metro_Manila> . ?x <http://dbpedia.org/property/athletics> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/state",
			"label": "at",
			"seq": "26,27"
		}, {
			"uri": "http://dbpedia.org/property/athletics",
			"label": "games",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Metro_Manila",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a100cb0681104c81aeaeb99a2e615d66",
		"question": "Who is the owner of Saumarez ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saumarez_(horse)> <http://dbpedia.org/ontology/owner> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owner",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saumarez_(horse)",
			"label": "saumarez",
			"seq": "20,27"
		}]
	},
	{
		"id": "35616e0b45534d1ba5aa8c3514527462",
		"question": "Is Compaq a software company?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Compaq> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Software> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/industry",
			"label": "is",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Compaq",
			"label": "compaq",
			"seq": "3,8"
		}, {
			"uri": "http://dbpedia.org/resource/Software",
			"label": "software",
			"seq": "12,19"
		}]
	},
	{
		"id": "039208f28c41401297caeb292230c23f",
		"question": "Name the president served by a lieutenant who succeeded Bob C Riley.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Bob_C._Riley> . ?uri <http://dbpedia.org/ontology/lieutenant> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "president",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/lieutenant",
			"label": "lieutenant",
			"seq": "31,40"
		}, {
			"uri": "http://dbpedia.org/ontology/President",
			"label": "president",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bob_C._Riley",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9ea90a365f7c4673a2ae7ecd250d290b",
		"question": "What automobile engine's successor is BMW M40",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/BMW_M40>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AutomobileEngine>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "25,33"
		}, {
			"uri": "http://dbpedia.org/ontology/AutomobileEngine",
			"label": "automobile",
			"seq": "5,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BMW_M40",
			"label": "m40 bmw",
			"seq": "38,44"
		}]
	},
	{
		"id": "e30c5fcc3147441587dae1c295b22f19",
		"question": "Which shareholder of Naval Air facility Adak is also the operator of New Sanno Hotel ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/property/operator> ?uri. <http://dbpedia.org/resource/Naval_Air_Facility_Adak> <http://dbpedia.org/property/owner> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operator",
			"label": "operator",
			"seq": "57,64"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "new",
			"seq": "69,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_Sanno_Hotel",
			"label": "sanno hotel",
			"seq": "73,83"
		}, {
			"uri": "http://dbpedia.org/resource/Naval_Air_Facility_Adak",
			"label": "facility naval adak",
			"seq": "21,39"
		}]
	},
	{
		"id": "12381d3b6b434094988269dcdc1e8a46",
		"question": "How many owners are there of things located in Alabama?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Alabama> . ?x <http://dbpedia.org/ontology/owner> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "located",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owners",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alabama",
			"label": "alabama",
			"seq": "47,53"
		}]
	},
	{
		"id": "b6fb2de828a94638a57cdb650825441c",
		"question": "Where is Oskar Blues located ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oskar_Blues_Brewery> <http://dbpedia.org/property/location> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "21,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oskar_Blues_Brewery",
			"label": "oskar blues",
			"seq": "9,19"
		}]
	},
	{
		"id": "3cd2c8b70c7849889e3c298974187aed",
		"question": "Was the FIS Alpine World Ski Championship of 1950 held in Colorado?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/FIS_Alpine_World_Ski_Championships_1950> <http://dbpedia.org/property/hostCity> <http://dbpedia.org/resource/Colorado> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hostCity",
			"label": "ski",
			"seq": "25,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/FIS_Alpine_World_Ski_Championships_1950",
			"label": "championship alpine world",
			"seq": "12,36"
		}, {
			"uri": "http://dbpedia.org/resource/Colorado",
			"label": "colorado",
			"seq": "58,65"
		}]
	},
	{
		"id": "6b60ad1e840246a7a1e76df64a37be03",
		"question": "What are the outflow of the lakes which also has one of the outflow as Congo River ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Congo_River> . ?x <http://dbpedia.org/ontology/outflow> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/outflow",
			"label": "outflow",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/outflow",
			"label": "outflow",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Congo_River",
			"label": "river congo",
			"seq": "71,81"
		}]
	},
	{
		"id": "06865b556f72412591e45e2b25e27d31",
		"question": "List the science fiction shows broadcasted on BBC HD ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Science_fiction> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/genre",
			"label": "science",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "fiction",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "25,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Science_fiction",
			"label": "science fiction",
			"seq": "9,23"
		}, {
			"uri": "http://dbpedia.org/resource/BBC_HD",
			"label": "bbc hd",
			"seq": "46,51"
		}]
	},
	{
		"id": "1c39ad9fe6534d5ab15c4cdca5526643",
		"question": "Which key person of Clinton Foundation is also the president of Jim Sasser ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/property/keyPeople> ?uri. <http://dbpedia.org/resource/Jim_Sasser> <http://dbpedia.org/ontology/president> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "key",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "51,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Clinton_Foundation",
			"label": "foundation clinton",
			"seq": "20,37"
		}, {
			"uri": "http://dbpedia.org/resource/Jim_Sasser",
			"label": "sasser jim",
			"seq": "64,73"
		}]
	},
	{
		"id": "8f4dcf2dc41047969a71b87fbfef4cc4",
		"question": "What is the division of the companies who make Runes of Magic?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Runes_of_Magic> . ?x <http://dbpedia.org/ontology/division> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "runes",
			"seq": "47,51"
		}, {
			"uri": "http://dbpedia.org/ontology/division",
			"label": "division",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "28,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Runes_of_Magic",
			"label": "runes magic",
			"seq": "47,57"
		}]
	},
	{
		"id": "258d0ae4aaa94829ab2720cff3ef031c",
		"question": "What is the basketball team whose President's college is Brockport Golden Eagles?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/college> <http://dbpedia.org/resource/Brockport_Golden_Eagles> . ?uri <http://dbpedia.org/property/president> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballTeam>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/college",
			"label": "college",
			"seq": "46,52"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president's",
			"seq": "34,44"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballTeam",
			"label": "basketball team",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brockport_Golden_Eagles",
			"label": "brockport golden eagles",
			"seq": "57,79"
		}]
	},
	{
		"id": "bc77c3a5c2aa48beb648fd70de67488e",
		"question": "What common teams do Ramiro Pea and Bruce Bochy share?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ramiro_Pe\u00f1a> <http://dbpedia.org/ontology/team> ?uri. <http://dbpedia.org/resource/Bruce_Bochy> <http://dbpedia.org/ontology/team> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "teams",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "teams",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ramiro_Pe\u00f1a",
			"label": "ramiro",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/resource/Bruce_Bochy",
			"label": "bruce bochy",
			"seq": "36,46"
		}]
	},
	{
		"id": "491b0f3480c14c608b26e8e745514b9a",
		"question": "In which sitcom did Jeff Conaway acted and had TNT as its network ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/TNT_(TV_channel)> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jeff_Conaway>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/network",
			"label": "network",
			"seq": "58,64"
		}, {
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "in",
			"seq": "0,1"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "sitcom",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/TNT_(TV_channel)",
			"label": "tnt",
			"seq": "47,49"
		}, {
			"uri": "http://dbpedia.org/resource/Jeff_Conaway",
			"label": "conaway jeff",
			"seq": "20,31"
		}]
	},
	{
		"id": "891f155dd9e14cdcac38afc45e4a869e",
		"question": "How many cities are around the sea into which the aegean sea flows?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/outflow",
			"label": "flows",
			"seq": "61,65"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "31,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Aegean_Sea",
			"label": "aegean sea",
			"seq": "31,40"
		}]
	},
	{
		"id": "323011153fec4b5ca0658605fdf7ff6e",
		"question": "How many buildings are located in the jurisdiction of John Tory?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/John_Tory> . ?uri <http://dbpedia.org/property/location> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "are",
			"seq": "19,21"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Building",
			"label": "buildings",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Tory",
			"label": "tory john",
			"seq": "54,62"
		}]
	},
	{
		"id": "d988b1b86f7d4f20bb3fc106bb997062",
		"question": "Which railway line goes through the stations which are a part of the North Caucasus railway?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/North_Caucasus_Railway> . ?x <http://dbpedia.org/ontology/servingRailwayLine> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Station>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/type",
			"label": "the",
			"seq": "32,34"
		}, {
			"uri": "http://dbpedia.org/ontology/servingRailwayLine",
			"label": "railway",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Station",
			"label": "stations",
			"seq": "36,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North_Caucasus_Railway",
			"label": "caucasus railway north",
			"seq": "6,27"
		}]
	},
	{
		"id": "59ee66fc1eb648ff9ca0e751825f1de1",
		"question": "Whose doctoral student is etienne bieler\\xc9tienne_Bi\\xe9ler",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/\u00c9tienne_Bi\u00e9ler> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralStudent",
			"label": "doctoral student",
			"seq": "6,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/\u00c9tienne_Bi\u00e9ler",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0200198676244b77993641150454251c",
		"question": "What are some bands originating in London?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/London>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "some",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "bands",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/London",
			"label": "london",
			"seq": "35,40"
		}]
	},
	{
		"id": "cf3c2cbbbde94259a9b3d4194d90ac28",
		"question": "what awards have been giving to Muhammad Yunus?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Muhammad_Yunus> <http://dbpedia.org/ontology/award> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Muhammad_Yunus",
			"label": "muhammad yunus",
			"seq": "32,45"
		}]
	},
	{
		"id": "f93b26eb3cf04a5e8664ae62dd6b5dfb",
		"question": "List the successor of successor of Hayden, Stone & Co.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Hayden,_Stone_&_Co.> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/successor> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hayden,_Stone_&_Co.",
			"label": "hayden, stone co.",
			"seq": "35,51"
		}]
	},
	{
		"id": "4d2907c9a4124f3097f04807bcef9d19",
		"question": "What are some video games whose music is composed by an employ of the company Creatures?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Creatures_(company)> . ?uri <http://dbpedia.org/property/composer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "company",
			"seq": "70,76"
		}, {
			"uri": "http://dbpedia.org/property/composer",
			"label": "composed",
			"seq": "41,48"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "video",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Creatures_(company)",
			"label": "creatures company",
			"seq": "70,86"
		}]
	},
	{
		"id": "900ef117ddb54ad0b9686cde649bc3d0",
		"question": "Who are the people which ITV(TV network) has employed?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/ITV_(TV_network)>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "employed",
			"seq": "45,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/ITV_(TV_network)",
			"label": "network)",
			"seq": "32,39"
		}]
	},
	{
		"id": "c949eeb67a4c448589588ee0e2862b8d",
		"question": "Which televion show's theme music was given by Ron Grainer and is broadcasted by BBC HD ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "theme music",
			"seq": "22,32"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "grainer",
			"seq": "51,57"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "televion",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ron_Grainer",
			"label": "grainer ron",
			"seq": "47,57"
		}, {
			"uri": "http://dbpedia.org/resource/BBC_HD",
			"label": "bbc hd",
			"seq": "81,86"
		}]
	},
	{
		"id": "c251f7bc65ec4dc9a1b5611b34395b65",
		"question": "What team did J P Paris was former team of Bert McCaffrey play for?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/J._P._Paris\u00e9> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/Bert_McCaffrey> <http://dbpedia.org/ontology/formerTeam> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "play for",
			"seq": "28,35"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former team",
			"seq": "5,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/J._P._Paris\u00e9",
			"label": "paris",
			"seq": "18,22"
		}, {
			"uri": "http://dbpedia.org/resource/Bert_McCaffrey",
			"label": "mccaffrey bert",
			"seq": "43,56"
		}]
	},
	{
		"id": "1303bcf1aff546deb0445accfefd890d",
		"question": "How many teams have LA kings players in them currently?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Los_Angeles_Kings> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "teams",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Los_Angeles_Kings",
			"label": "kings",
			"seq": "23,27"
		}]
	},
	{
		"id": "7d7c76e45ef64f46920bd1841c5aab92",
		"question": "List the opponents of the relatives of Thomas Helwys?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Thomas_Helwys> . ?x <http://dbpedia.org/ontology/opponent> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponents",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "opponents",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thomas_Helwys",
			"label": "thomas helwys",
			"seq": "39,51"
		}]
	},
	{
		"id": "5bc08a17c2874dc7b7711f0329ab4fb2",
		"question": "Who is the coach of England national under-21 football team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/England_national_under-21_football_team> <http://dbpedia.org/property/coach> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coach",
			"label": "coach",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England_national_under-21_football_team",
			"label": "under-21 national football england team",
			"seq": "20,58"
		}]
	},
	{
		"id": "bafd650bf447413fa5e2c8f3f6435da8",
		"question": "Name an airline with hub airports as Los Angeles International Airport and San Francisco International Airport?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Los_Angeles_International_Airport> . ?uri <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/San_Francisco_International_Airport>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hubAirport",
			"label": "airport",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hub",
			"seq": "21,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airline",
			"seq": "8,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Los_Angeles_International_Airport",
			"label": "international angeles airport",
			"seq": "25,53"
		}, {
			"uri": "http://dbpedia.org/resource/San_Francisco_International_Airport",
			"label": "international francisco airport",
			"seq": "25,55"
		}]
	},
	{
		"id": "249843fe379e4bc29f4510be1e62d055",
		"question": "What is the region of Tom Perriello ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tom_Perriello> <http://dbpedia.org/ontology/region> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/region",
			"label": "region",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tom_Perriello",
			"label": "perriello tom",
			"seq": "22,34"
		}]
	},
	{
		"id": "b8477c9f0ba248149197ed898ea97d36",
		"question": "What is the label of the album whose previous work is Waterfall?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Waterfall_(album)> . ?x <http://dbpedia.org/property/label> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/previousWork",
			"label": "previous work",
			"seq": "37,49"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Album",
			"label": "album",
			"seq": "25,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Waterfall_(album)",
			"label": "waterfall album",
			"seq": "25,39"
		}]
	},
	{
		"id": "96c4bef12a134fb8bb1ac835d064c51a",
		"question": "What are some other great things by the person who produced Queer as Folk?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Queer_as_Folk_(UK_TV_series)> <http://dbpedia.org/ontology/producer> ?x . ?x <http://dbpedia.org/property/notableworks> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "produced",
			"seq": "51,58"
		}, {
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "other",
			"seq": "14,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "40,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Queer_as_Folk_(UK_TV_series)",
			"label": "queer folk",
			"seq": "60,69"
		}]
	},
	{
		"id": "56f16d1174db4f37b05d59f669705539",
		"question": "Where is the assembly of Plymouth Savoy, and where Special 26 was recorded?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Plymouth_Savoy> <http://dbpedia.org/ontology/assembly> ?uri. <http://dbpedia.org/resource/Special_26> <http://dbpedia.org/property/recorded> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/assembly",
			"label": "assembly",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/property/recorded",
			"label": "recorded",
			"seq": "66,73"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Plymouth_Savoy",
			"label": "plymouth",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/resource/Special_26",
			"label": "special 26",
			"seq": "51,60"
		}]
	},
	{
		"id": "50ecdb7b02db481399e126e0658583d5",
		"question": "Who owns the railway line which goes through the Newark Station?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Newark_station_(Delaware)> <http://dbpedia.org/property/line> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/line",
			"label": "line",
			"seq": "21,24"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owns",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Newark_station_(Delaware)",
			"label": "station newark",
			"seq": "49,62"
		}]
	},
	{
		"id": "188d75500ece496ca5e4f31ef1d853e0",
		"question": "Which relative of George Madison was the leader of United States House of Representatives elections, 1788 and 1789 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_Madison> <http://dbpedia.org/ontology/relation> ?uri. <http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789> <http://dbpedia.org/property/leader> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relative",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/leader",
			"label": "leader",
			"seq": "41,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_Madison",
			"label": "madison george",
			"seq": "18,31"
		}, {
			"uri": "http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789",
			"label": "representatives elections,",
			"seq": "74,99"
		}]
	},
	{
		"id": "85d67513bd1b4291a9c48017ba2c6f30",
		"question": "What is the branch of the politicians whose governor is Bill Clements?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/governor> <http://dbpedia.org/resource/Bill_Clements> . ?x <http://dbpedia.org/property/branch> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governor",
			"label": "governor",
			"seq": "44,51"
		}, {
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Politician",
			"label": "politicians",
			"seq": "26,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bill_Clements",
			"label": "clements bill",
			"seq": "56,68"
		}]
	},
	{
		"id": "78629f144207411aaaf8e5d9dd60022e",
		"question": "Is National Archaeological Museum (Florence) the museum of Chimera of Arezzo?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Chimera_of_Arezzo> <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/National_Archaeological_Museum_(Florence)> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/museum",
			"label": "museum",
			"seq": "27,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chimera_of_Arezzo",
			"label": "chimera arezzo",
			"seq": "59,72"
		}, {
			"uri": "http://dbpedia.org/resource/National_Archaeological_Museum_(Florence)",
			"label": "archaeological (florence) national museum",
			"seq": "3,43"
		}]
	},
	{
		"id": "390b74bcdbcb43668fa738a6a5ae5bc9",
		"question": "Who are the associate musical artists of Dalma Kovcs ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dalma_Kov\u00e1cs> <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associate musical",
			"seq": "12,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dalma_Kov\u00e1cs",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e2894724dd3947e481b68dd558dced13",
		"question": "Whichd officer's final resting place is North Bend, ohio and belongs to Indiana Territory branch ",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/North_Bend,_Ohio> . ?uri <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Indiana_Territory>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "resting place",
			"seq": "23,35"
		}, {
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "90,95"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North_Bend,_Ohio",
			"label": "north bend, ohio",
			"seq": "40,55"
		}, {
			"uri": "http://dbpedia.org/resource/Indiana_Territory",
			"label": "territory indiana",
			"seq": "72,88"
		}]
	},
	{
		"id": "7a064f0bfba14e8da7581b3b362b0a37",
		"question": "Name the profession of Oamr D Conger for which Jack Ryan was also nominated ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ryan_(politician)> <http://dbpedia.org/ontology/nominee> ?uri. <http://dbpedia.org/resource/Omar_D._Conger> <http://dbpedia.org/property/order> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nominee",
			"label": "nominated",
			"seq": "66,74"
		}, {
			"uri": "http://dbpedia.org/property/order",
			"label": "conger",
			"seq": "30,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jack_Ryan_(politician)",
			"label": "ryan jack",
			"seq": "47,55"
		}, {
			"uri": "http://dbpedia.org/resource/Omar_D._Conger",
			"label": "conger",
			"seq": "30,35"
		}]
	},
	{
		"id": "b2ca768fe1b54426a2d0413c0f7c42f0",
		"question": "What is the series of the book which is a subsequent work of Blade Runner 2: The Edge of Human ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Blade_Runner_2:_The_Edge_of_Human> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/ontology/series> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "42,56"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "book",
			"seq": "26,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blade_Runner_2:_The_Edge_of_Human",
			"label": "runner human blade edge",
			"seq": "61,83"
		}]
	},
	{
		"id": "cb70f9c4ab6e46b9bb6781e259febc55",
		"question": "Does the Vadodara Railway station lie at the end of the Mathura Vadodara route?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mathura\u2013Vadodara_Section> <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Vadodara_Junction_railway_station> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "route end",
			"seq": "45,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mathura\u2013Vadodara_Section",
			"label": "vadodara mathura",
			"seq": "9,24"
		}, {
			"uri": "http://dbpedia.org/resource/Vadodara_Junction_railway_station",
			"label": "vadodara station railway",
			"seq": "9,32"
		}]
	},
	{
		"id": "4ec3f228ceb342d1b160cd91a06ac835",
		"question": "President of Ghana is the leader title of which country?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/leaderTitle> <http://dbpedia.org/resource/President_of_Ghana>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderTitle",
			"label": "leader title",
			"seq": "26,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "48,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/President_of_Ghana",
			"label": "president ghana",
			"seq": "0,14"
		}]
	},
	{
		"id": "462864a5cac04f65bde1144083b52815",
		"question": "Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Fort_Stephenson> <http://dbpedia.org/ontology/commander> ?uri. <http://dbpedia.org/resource/Battle_of_the_Thames> <http://dbpedia.org/ontology/commander> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Battle_of_Fort_Stephenson",
			"label": "stephenson battle fort",
			"seq": "64,85"
		}, {
			"uri": "http://dbpedia.org/resource/Battle_of_the_Thames",
			"label": "thames battle",
			"seq": "64,76"
		}]
	},
	{
		"id": "2fd09016a75d42d4b3601fc9712d3ae5",
		"question": "In which city are buildings by Solon Spencer Beman found?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Solon_Spencer_Beman> . ?x <http://dbpedia.org/property/locationTown> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architect",
			"label": "are",
			"seq": "14,16"
		}, {
			"uri": "http://dbpedia.org/property/locationTown",
			"label": "city",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Building",
			"label": "buildings",
			"seq": "18,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Solon_Spencer_Beman",
			"label": "spencer solon beman",
			"seq": "31,49"
		}]
	},
	{
		"id": "1df69aaf84db4e6ebf8479f68c52d2fe",
		"question": "Name the scientist who was the winner of Royal Society award and had Georg Meissner as his doctoral advisor ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Royal_Society> . ?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prizes",
			"label": "his",
			"seq": "87,89"
		}, {
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "doctoral advisor",
			"seq": "91,106"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_Society",
			"label": "society royal",
			"seq": "41,53"
		}, {
			"uri": "http://dbpedia.org/resource/Georg_Meissner",
			"label": "meissner georg",
			"seq": "69,82"
		}]
	},
	{
		"id": "28908ee4e3754d90b904645e4f1156b2",
		"question": "What is the commander of Battle of Brownstown ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Brownstown> <http://dbpedia.org/ontology/commander> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Battle_of_Brownstown",
			"label": "brownstown battle of",
			"seq": "22,41"
		}]
	},
	{
		"id": "d5e7fe8c8df14e7884592ea07357f9fa",
		"question": "What religion's politicians are in the Malaysian Chinese association?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Malaysian_Chinese_Association> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/party",
			"label": "are",
			"seq": "28,30"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion's",
			"seq": "5,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Politician",
			"label": "politicians",
			"seq": "16,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Malaysian_Chinese_Association",
			"label": "association malaysian chinese",
			"seq": "39,67"
		}]
	},
	{
		"id": "1b089c7e3c454ff898540e7d20d840c6",
		"question": "How many religions are practiced by diplomats?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Diplomacy> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "religions",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "religions",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Diplomacy",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d7d071a722434a7282752c8442ba5572",
		"question": "Who developed the programming languages designed by Rob Pike?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/designer> <http://dbpedia.org/resource/Rob_Pike> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProgrammingLanguage>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designer",
			"label": "designed",
			"seq": "40,47"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/ontology/ProgrammingLanguage",
			"label": "programming",
			"seq": "18,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rob_Pike",
			"label": "pike rob",
			"seq": "52,59"
		}]
	},
	{
		"id": "1894061d4693487abbac158ae035218c",
		"question": "List down the prime ministers of Peter Thorneycroft ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peter_Thorneycroft> <http://dbpedia.org/ontology/primeMinister> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "ministers",
			"seq": "20,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peter_Thorneycroft",
			"label": "thorneycroft peter",
			"seq": "33,50"
		}]
	},
	{
		"id": "fa79374cc5624b72992b576863b1b839",
		"question": "What are the non-fiction topics in the books whose authors is Terry Pratchett?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Terry_Pratchett> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "authors",
			"seq": "51,57"
		}, {
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "non-fiction",
			"seq": "13,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "39,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Terry_Pratchett",
			"label": "pratchett terry",
			"seq": "62,76"
		}]
	},
	{
		"id": "b7c61495bc5c42969a8ec600aea66096",
		"question": "Where is the senator from whose successor was James belford?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/James_B._Belford> . ?x <http://dbpedia.org/ontology/region> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "from",
			"seq": "21,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Senator",
			"label": "senator",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_B._Belford",
			"label": "belford james",
			"seq": "46,58"
		}]
	},
	{
		"id": "dd4fd682874b4c23bf5f60ebc119a98d",
		"question": "List the newspapers which has headquarters in Stockholm?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Stockholm>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "30,41"
		}, {
			"uri": "http://dbpedia.org/ontology/Newspaper",
			"label": "newspapers",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stockholm",
			"label": "stockholm",
			"seq": "46,54"
		}]
	},
	{
		"id": "d4dde19bfcd949abbdde426e8ebfb8d9",
		"question": "Which president of Lance Adams-Schneider had nickname Daniel O'Regan ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lance_Adams-Schneider> <http://dbpedia.org/property/president> ?uri. <http://dbpedia.org/resource/Daniel_O'Regan> <http://dbpedia.org/property/nickname> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "45,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lance_Adams-Schneider",
			"label": "adams-schneider lance",
			"seq": "19,39"
		}, {
			"uri": "http://dbpedia.org/resource/Daniel_O'Regan",
			"label": "o'regan daniel",
			"seq": "54,67"
		}]
	},
	{
		"id": "a1df4f7d07df497f8e7ddbd6643a6ea2",
		"question": "List the software using C++ as programming language and licence is Software as a service?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/C++> . ?uri <http://dbpedia.org/ontology/license> <http://dbpedia.org/resource/Software_as_a_service>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "programming language",
			"seq": "31,50"
		}, {
			"uri": "http://dbpedia.org/ontology/license",
			"label": "licence",
			"seq": "56,62"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/C++",
			"label": "c++",
			"seq": "24,26"
		}, {
			"uri": "http://dbpedia.org/resource/Software_as_a_service",
			"label": "software service",
			"seq": "9,24"
		}]
	},
	{
		"id": "f9d991647aae449285e9d5867ea64911",
		"question": "list some companies founded by Jim Harris.",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "founded by",
			"seq": "20,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jim_Harris_(entrepreneur)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "eb46e7dfdd9244a1b5455ccdf1a5abb6",
		"question": "What has been founded in the state that Denton county, Texas is a part of?\u00a0",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/part> <http://dbpedia.org/resource/Denton_County,_Texas> . ?uri <http://dbpedia.org/ontology/foundationPlace> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/part",
			"label": "part",
			"seq": "66,69"
		}, {
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Denton_County,_Texas",
			"label": "county, denton texas",
			"seq": "40,59"
		}]
	},
	{
		"id": "a22e77732ec340b89b2da8d21bc2d89a",
		"question": "Which countries militaries fought the SFOR battle?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/SFOR> . ?x <http://dbpedia.org/ontology/battle> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battle",
			"seq": "43,48"
		}, {
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "battle",
			"seq": "43,48"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryPerson",
			"label": "militaries",
			"seq": "16,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/SFOR",
			"label": "sfor",
			"seq": "38,41"
		}]
	},
	{
		"id": "068c624211d44e12aee8f503946a20b0",
		"question": "What is the awards won by the producer of From the Life of the Marionettes ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/From_the_Life_of_the_Marionettes> <http://dbpedia.org/ontology/producer> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/From_the_Life_of_the_Marionettes",
			"label": "marionettes life from",
			"seq": "42,62"
		}]
	},
	{
		"id": "29d041b6917e47cbbcc098c7a848a397",
		"question": "How many ",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/team",
			"label": "many",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chicago_Bulls",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "2d5d4a8626d54ff58754ce28b3036910",
		"question": "How many writers worked on the album Main Course?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Main_Course> . ?x <http://dbpedia.org/property/writer> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/album",
			"label": "album",
			"seq": "31,35"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "writers",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Main_Course",
			"label": "course main",
			"seq": "37,47"
		}]
	},
	{
		"id": "1bbfeeb6913d4de6a7e96c9a64ec101f",
		"question": "Count the number of shows whose creators are Jerry Seinfeld and Larry David?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Jerry_Seinfeld> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Larry_David>} ",
		"sparql_id": "107",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "creators",
			"seq": "32,39"
		}, {
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "creators",
			"seq": "32,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerry_Seinfeld",
			"label": "seinfeld jerry",
			"seq": "45,58"
		}, {
			"uri": "http://dbpedia.org/resource/Larry_David",
			"label": "larry david",
			"seq": "64,74"
		}]
	},
	{
		"id": "60f31d985aed488e9d589db655e932ad",
		"question": "Name the airlines which have a hub in airport in SF?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/San_Francisco> . ?uri <http://dbpedia.org/property/hubs> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cityServed",
			"label": "airlines",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hub",
			"seq": "31,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Francisco",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "162e1b03aabf4dec9809ad4bd74fbbde",
		"question": "What is the television show whose company is Playtone and written by Erik Jendresen?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/Playtone> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/company",
			"label": "company",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "58,64"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Playtone",
			"label": "playtone",
			"seq": "45,52"
		}, {
			"uri": "http://dbpedia.org/resource/Erik_Jendresen",
			"label": "jendresen erik",
			"seq": "69,82"
		}]
	},
	{
		"id": "c8c8394ec36c4c9eb2ab8e1fb8c14441",
		"question": "Which office holder allegiance is Colony of Virginia and was has a wife named Dolley Madison ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Dolley_Madison> . ?uri <http://dbpedia.org/property/allegiance> <http://dbpedia.org/resource/Colony_of_Virginia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "office",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "20,29"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "6,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dolley_Madison",
			"label": "madison dolley",
			"seq": "78,91"
		}, {
			"uri": "http://dbpedia.org/resource/Colony_of_Virginia",
			"label": "virginia colony",
			"seq": "34,48"
		}]
	},
	{
		"id": "50af4130157947afa9979e302f6247f8",
		"question": "How many broadcast area of the television stations exists whose broadcast area is Rodrigues ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/broadcastArea> <http://dbpedia.org/resource/Rodrigues> . ?x <http://dbpedia.org/property/broadcastArea> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/broadcastArea",
			"label": "broadcast",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/property/broadcastArea",
			"label": "broadcast",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rodrigues",
			"label": "rodrigues",
			"seq": "82,90"
		}]
	},
	{
		"id": "b955cb31b2e74d689d1313c1238b9510",
		"question": "What is the religion of the ethnic group to which the relatives of Waxiang people belong?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Waxiang_people> <http://dbpedia.org/property/related> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/related",
			"label": "relatives",
			"seq": "54,62"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/EthnicGroup",
			"label": "ethnic group",
			"seq": "28,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Waxiang_people",
			"label": "waxiang people",
			"seq": "67,80"
		}]
	},
	{
		"id": "6635a5b9155b48f792eef26dfc0df7d4",
		"question": "Which wine region of Bogdanua is the mouth country of Upper Neretva ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bogdanu\u0161a> <http://dbpedia.org/ontology/wineRegion> ?uri. <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/mouthCountry> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "region wine",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/ontology/mouthCountry",
			"label": "country mouth",
			"seq": "37,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bogdanu\u0161a",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Upper_Neretva",
			"label": "neretva upper",
			"seq": "54,66"
		}]
	},
	{
		"id": "990ab53fdb8b485cbcd019106a15fdf2",
		"question": "Under whom did Charles Drummond Ellis do his PhD?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Charles_Drummond_Ellis> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralStudent",
			"label": "charles",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_Drummond_Ellis",
			"label": "drummond charles ellis",
			"seq": "15,36"
		}]
	},
	{
		"id": "d43e1ffd1be04f37bd53e99b819bcd08",
		"question": "Which company is the parent company of Chevrolet Spark ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chevrolet_Spark> <http://dbpedia.org/property/parentCompany> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/parentCompany",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chevrolet_Spark",
			"label": "chevrolet spark",
			"seq": "39,53"
		}]
	},
	{
		"id": "985720996060414598cdbaa9aaacff57",
		"question": "Which associat of Martin Pugh is also married to Alana Stewert ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Pugh> <http://dbpedia.org/property/associatedActs> ?uri. <http://dbpedia.org/resource/Alana_Stewart> <http://dbpedia.org/ontology/spouse> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "associat",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "pugh",
			"seq": "25,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Martin_Pugh",
			"label": "martin pugh",
			"seq": "18,28"
		}, {
			"uri": "http://dbpedia.org/resource/Alana_Stewart",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6506ce80b6da4014a695dd37684fd858",
		"question": "Which stadium's operator works in the Pepsi Center?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Pepsi_Center> . ?uri <http://dbpedia.org/ontology/operator> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "operator",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operator",
			"seq": "16,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pepsi_Center",
			"label": "center pepsi",
			"seq": "38,49"
		}]
	},
	{
		"id": "498184a91d854ed990f032d429a05ca2",
		"question": "What is the drafted team of the people expected to join toronto marlies?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/prospectTeam> <http://dbpedia.org/resource/Toronto_Marlies> . ?x <http://dbpedia.org/property/draftTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/prospectTeam",
			"label": "team",
			"seq": "20,23"
		}, {
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "drafted",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto_Marlies",
			"label": "toronto marlies",
			"seq": "56,70"
		}]
	},
	{
		"id": "0a162d878e5549cd8ae6dc4f7072b4f6",
		"question": "What city in the US was Alfred Phillips born in, and is the resting place of William Smith?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_H._Smith_(Connecticut)> <http://dbpedia.org/ontology/restingPlace> ?uri. <http://dbpedia.org/resource/Alfred_N._Phillips> <http://dbpedia.org/property/birthPlace> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "60,72"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "place",
			"seq": "68,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_H._Smith_(Connecticut)",
			"label": "william smith",
			"seq": "77,89"
		}, {
			"uri": "http://dbpedia.org/resource/Alfred_N._Phillips",
			"label": "phillips alfred",
			"seq": "24,38"
		}]
	},
	{
		"id": "84c03af6b5c245db868cbc950af922c2",
		"question": "Who is the prime minister of Michael Jeffery who is also the minister of Williuam Deane ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Jeffery> <http://dbpedia.org/property/primeminister> ?uri. <http://dbpedia.org/resource/William_Deane> <http://dbpedia.org/ontology/primeMinister> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "minister",
			"seq": "17,24"
		}, {
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "minister",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Jeffery",
			"label": "michael jeffery",
			"seq": "29,43"
		}, {
			"uri": "http://dbpedia.org/resource/William_Deane",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f5a63f5184f9424c9270d397df5f2af4",
		"question": "Who appointed the governor under whom Richard Winn works?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/lieutenant> <http://dbpedia.org/resource/Richard_Winn> . ?x <http://dbpedia.org/property/appointer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Governor>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/lieutenant",
			"label": "winn",
			"seq": "46,49"
		}, {
			"uri": "http://dbpedia.org/property/appointer",
			"label": "appointed",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Governor",
			"label": "governor",
			"seq": "18,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Richard_Winn",
			"label": "richard winn",
			"seq": "38,49"
		}]
	},
	{
		"id": "52c67daa68c74c3aba9e745ba14b242c",
		"question": "Whose deputy is Neil Brown?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Neil_Brown_(Australian_politician)>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deputy",
			"label": "deputy",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neil_Brown_(Australian_politician)",
			"label": "brown neil",
			"seq": "16,25"
		}]
	},
	{
		"id": "2ae88829677d41d4aea8ccfc94157dc9",
		"question": "Who founded the Not on our Watch NGO?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Not_on_Our_Watch_(organization)> <http://dbpedia.org/ontology/foundedBy> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "founded",
			"seq": "4,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Not_on_Our_Watch_(organization)",
			"label": "watch",
			"seq": "27,31"
		}]
	},
	{
		"id": "689d2f8f512742b78ba168d386e52220",
		"question": "Who first ascented a mountain of Mount Hoffmann ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "ascented",
			"seq": "10,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mount_Hoffmann",
			"label": "hoffmann",
			"seq": "39,46"
		}]
	},
	{
		"id": "8d253335f3354509a31f7348a91ae3e5",
		"question": "List the broadcast area of the TV stations which also serves in Agalga ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/broadcastArea> <http://dbpedia.org/resource/Agal\u00e9ga> . ?x <http://dbpedia.org/property/broadcastArea> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/broadcastArea",
			"label": "broadcast area",
			"seq": "9,22"
		}, {
			"uri": "http://dbpedia.org/property/broadcastArea",
			"label": "broadcast area",
			"seq": "9,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Agal\u00e9ga",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "61660d3107614a2d8f76e7dfac844a7b",
		"question": "Which operating system provider of LG Optimus Vu is also the employer of Manu Cornet ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/LG_Optimus_Vu> <http://dbpedia.org/ontology/operatingSystem> ?uri. <http://dbpedia.org/resource/Manu_Cornet> <http://dbpedia.org/property/employer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating system",
			"seq": "6,21"
		}, {
			"uri": "http://dbpedia.org/property/employer",
			"label": "employer",
			"seq": "61,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/LG_Optimus_Vu",
			"label": "optimus",
			"seq": "38,44"
		}, {
			"uri": "http://dbpedia.org/resource/Manu_Cornet",
			"label": "cornet manu",
			"seq": "73,83"
		}]
	},
	{
		"id": "67ecca468f0c460ab67ebee020cb7268",
		"question": "Which company owns the manufacturer of the Edsel Ranger?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Edsel_Ranger> . ?x <http://dbpedia.org/property/parent> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "owns",
			"seq": "14,17"
		}, {
			"uri": "http://dbpedia.org/property/parent",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edsel_Ranger",
			"label": "ranger edsel",
			"seq": "43,54"
		}]
	},
	{
		"id": "db326f887c6646c28e21a7483a238e7b",
		"question": "Which are the major hubs of airline which operates the Menora Tunnel?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Menora_Tunnel> <http://dbpedia.org/property/operator> ?x . ?x <http://dbpedia.org/property/hubs> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operator",
			"label": "operates",
			"seq": "42,49"
		}, {
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hubs",
			"seq": "20,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airline",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Menora_Tunnel",
			"label": "tunnel menora",
			"seq": "55,67"
		}]
	},
	{
		"id": "ec18ccd4be91486aa5253f7a802da354",
		"question": "Name a scientist whose official residence is Cape Town and also won a gold medal at the Royal Astronomical Society ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society> . ?uri <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Cape_Town>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prizes",
			"label": "is",
			"seq": "13,14"
		}, {
			"uri": "http://dbpedia.org/property/residence",
			"label": "residence",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "7,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society",
			"label": "astronomical society",
			"seq": "94,113"
		}, {
			"uri": "http://dbpedia.org/resource/Cape_Town",
			"label": "town cape",
			"seq": "45,53"
		}]
	},
	{
		"id": "0b3d0e13d8b3401a856b23b0fc75529c",
		"question": "What is the military conflict whose commanders are John McEwen and Phm Vn ng?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/John_McEwen> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Ph\u1ea1m_V\u0103n_\u0110\u1ed3ng> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "36,45"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "36,45"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "military conflict",
			"seq": "12,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_McEwen",
			"label": "mcewen john",
			"seq": "51,61"
		}, {
			"uri": "http://dbpedia.org/resource/Ph\u1ea1m_V\u0103n_\u0110\u1ed3ng",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1b8c3dffd3644c3bbd459adb51ae437e",
		"question": "In which countries have models hanged themselves?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide_by_hanging> . ?x <http://dbpedia.org/property/citizenship> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Model>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathCause",
			"label": "have",
			"seq": "19,22"
		}, {
			"uri": "http://dbpedia.org/property/citizenship",
			"label": "in",
			"seq": "0,1"
		}, {
			"uri": "http://dbpedia.org/ontology/Model",
			"label": "models",
			"seq": "24,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Suicide_by_hanging",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "8a41604d7495428fa67cccf0d3789635",
		"question": "Bridges over what can carry vehicles?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/property/crosses> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/carries",
			"label": "carry",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/property/crosses",
			"label": "bridges",
			"seq": "0,6"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridges",
			"seq": "0,6"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Motor_vehicle",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c5e369b698d4499a92beac8371b73491",
		"question": "In how many countries do the rivers start which end at the Caspian Sea?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Caspian_Sea> . ?x <http://dbpedia.org/ontology/sourceCountry> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "rivers",
			"seq": "29,34"
		}, {
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "countries",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "countries",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Caspian_Sea",
			"label": "caspian sea",
			"seq": "59,69"
		}]
	},
	{
		"id": "b39e52f81f1a4c8db50b35e3a82ebb1d",
		"question": "What was founded by Congress of Industrial Organizations ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Congress_of_Industrial_Organizations> <http://dbpedia.org/property/founded> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founded",
			"label": "founded",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Congress_of_Industrial_Organizations",
			"label": "organizations industrial congress",
			"seq": "20,52"
		}]
	},
	{
		"id": "be5e96ca6b8e4b3cbda144341ad8892e",
		"question": "Who are the former partners of the figure skaters whose performance have been choreographed by Catarina Lindgren in the past?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/formerChoreographer> <http://dbpedia.org/resource/Catarina_Lindgren> . ?x <http://dbpedia.org/ontology/formerPartner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FigureSkater>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerChoreographer",
			"label": "choreographed",
			"seq": "78,90"
		}, {
			"uri": "http://dbpedia.org/ontology/formerPartner",
			"label": "partners",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/ontology/FigureSkater",
			"label": "figure",
			"seq": "35,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Catarina_Lindgren",
			"label": "lindgren catarina",
			"seq": "95,111"
		}]
	},
	{
		"id": "e9207f57106645a098206a135438489b",
		"question": "Which holy things canonized John of Damascus?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_of_Damascus> <http://dbpedia.org/ontology/canonizedBy> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/canonizedBy",
			"label": "canonized",
			"seq": "18,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_of_Damascus",
			"label": "damascus john",
			"seq": "28,40"
		}]
	},
	{
		"id": "aa3079fefe4f4e10a2d8ca21b1b91900",
		"question": "Count the number of schools which are in a city governed by the West Berkshire Council?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/West_Berkshire_Council> . ?uri <http://dbpedia.org/property/city> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "are",
			"seq": "34,36"
		}, {
			"uri": "http://dbpedia.org/property/city",
			"label": "city",
			"seq": "43,46"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/West_Berkshire_Council",
			"label": "berkshire council west",
			"seq": "64,85"
		}]
	},
	{
		"id": "61ea6ede582149b797b26eb6e7d81466",
		"question": "Did Hank Williams Jr. make Early in the Morning and Late at Night?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Early_in_the_Morning_and_Late_at_Night> <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Hank_Williams_Jr.> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalArtist",
			"label": "williams",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Early_in_the_Morning_and_Late_at_Night",
			"label": "morning night early late the",
			"seq": "27,54"
		}, {
			"uri": "http://dbpedia.org/resource/Hank_Williams_Jr.",
			"label": "williams hank jr.",
			"seq": "4,20"
		}]
	},
	{
		"id": "d278080949bc4004b75ff345c547a211",
		"question": "Is Pixar Canada a subsidiary of Pixar?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Pixar> <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Pixar_Canada> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsidiary",
			"label": "subsidiary",
			"seq": "18,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pixar",
			"label": "pixar",
			"seq": "3,7"
		}, {
			"uri": "http://dbpedia.org/resource/Pixar_Canada",
			"label": "canada pixar",
			"seq": "3,14"
		}]
	},
	{
		"id": "090a2f17823f4673b945c4a938226989",
		"question": "List some leaders of regions in the Indian Standard Time Zone?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Indian_Standard_Time> . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/timeZone",
			"label": "zone time",
			"seq": "52,60"
		}, {
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "leaders",
			"seq": "10,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "leaders",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indian_Standard_Time",
			"label": "standard indian time",
			"seq": "36,55"
		}]
	},
	{
		"id": "e65c0a467ab640ffaacbfe397559a139",
		"question": "List the spanish football player in the NYC FC ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/New_York_City_FC> . ?uri <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Spain_national_football_team>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "nyc",
			"seq": "40,42"
		}, {
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "football",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York_City_FC",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Spain_national_football_team",
			"label": "football",
			"seq": "17,24"
		}]
	},
	{
		"id": "390c756eecd94acfb6335abcaa91832a",
		"question": "Who is the person whose child performed with Tony Bennett?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Tony_Bennett> . ?uri <http://dbpedia.org/ontology/child> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "child",
			"seq": "24,28"
		}, {
			"uri": "http://dbpedia.org/ontology/child",
			"label": "child",
			"seq": "24,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tony_Bennett",
			"label": "bennett tony",
			"seq": "45,56"
		}]
	},
	{
		"id": "4c95fa0cb00b42b29b9f111561804b5b",
		"question": "Name the rivers originating from an English speaking nation?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/English_language> . ?uri <http://dbpedia.org/ontology/sourceCountry> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/officialLanguage",
			"label": "originating",
			"seq": "16,26"
		}, {
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "originating",
			"seq": "16,26"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/English_language",
			"label": "english",
			"seq": "36,42"
		}]
	},
	{
		"id": "afaeb0eb33ff41d5be722b4859f82618",
		"question": "Which TV show is related to The Sarah Jane Adventures and theme music is composed by  Ron Grainer?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "73,80"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Sarah_Jane_Adventures",
			"label": "adventures sarah",
			"seq": "32,47"
		}, {
			"uri": "http://dbpedia.org/resource/Ron_Grainer",
			"label": "grainer ron",
			"seq": "86,96"
		}]
	},
	{
		"id": "47315c1388d2459d9fa1ecc1723ffcf6",
		"question": "List the notable work of David Isaacs (writer)?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Isaacs_(writer)> <http://dbpedia.org/ontology/notableWork> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "notable work",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Isaacs_(writer)",
			"label": "(writer) isaacs david",
			"seq": "25,45"
		}]
	},
	{
		"id": "f6b72115e52e4c26983c7be44e8e1df8",
		"question": "Who was in military unit which played the role of Air interdiction?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/role> <http://dbpedia.org/resource/Air_interdiction> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/role",
			"label": "role",
			"seq": "42,45"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military unit",
			"seq": "11,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Air_interdiction",
			"label": "interdiction",
			"seq": "54,65"
		}]
	},
	{
		"id": "f860781f868d4a7f9f59ad56d60e1021",
		"question": "Which cities were in the TV Show which came after The Ultimate Fighter: Brazil 2?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Ultimate_Fighter:_Brazil_2> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/property/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "were",
			"seq": "13,16"
		}, {
			"uri": "http://dbpedia.org/property/city",
			"label": "cities",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "28,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Ultimate_Fighter:_Brazil_2",
			"label": "ultimate fighter: brazil",
			"seq": "54,77"
		}]
	},
	{
		"id": "2bf7c4d882ac4bdca78ac99d19625b3b",
		"question": "Tirana is the largest city of which country?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Tirana>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "14,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "36,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tirana",
			"label": "tirana",
			"seq": "0,5"
		}]
	},
	{
		"id": "b9e8a704d52448cfa0def79568e79d2a",
		"question": "List the movies whose music composer is often associated with Jon and Vangelis.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Jon_and_Vangelis> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "associated",
			"seq": "46,55"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer music",
			"seq": "22,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "1,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jon_and_Vangelis",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "85765cfbd20546b2a65b2cfc5e50cf3e",
		"question": "How many teams have used the stadium which hosted the WCW mayhem?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/WCW_Mayhem> <http://dbpedia.org/property/venue> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/venue",
			"label": "used",
			"seq": "20,23"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "teams",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "29,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WCW_Mayhem",
			"label": "mayhem wcw",
			"seq": "54,63"
		}]
	},
	{
		"id": "2f4493990eff40b794e67500a851e312",
		"question": "Marika Gombitov makes songs in which languages?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Marika_Gombitov\u00e1> . ?x <http://dbpedia.org/property/language> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "marika",
			"seq": "0,5"
		}, {
			"uri": "http://dbpedia.org/property/language",
			"label": "languages",
			"seq": "37,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marika_Gombitov\u00e1",
			"label": "gombitov marika",
			"seq": "0,14"
		}]
	},
	{
		"id": "7db0553af6fd43c3b91d8767f3add3f3",
		"question": "What is the area of the broadcast network which has the affiliation with 9TV?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/9TV> <http://dbpedia.org/property/affiliation> ?x . ?x <http://dbpedia.org/property/area> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliation",
			"seq": "56,66"
		}, {
			"uri": "http://dbpedia.org/property/area",
			"label": "area",
			"seq": "12,15"
		}, {
			"uri": "http://dbpedia.org/ontology/BroadcastNetwork",
			"label": "broadcast network",
			"seq": "24,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/9TV",
			"label": "9tv",
			"seq": "73,75"
		}]
	},
	{
		"id": "7aa2e062f4ea473f830cf8f1a72fded6",
		"question": "Was the Army Air Corps honored for the battle of Iraq?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Army_Air_Corps_(United_Kingdom)> <http://dbpedia.org/property/battleHonours> <http://dbpedia.org/resource/Iraq> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battleHonours",
			"label": "battle",
			"seq": "39,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Army_Air_Corps_(United_Kingdom)",
			"label": "corps army",
			"seq": "8,17"
		}, {
			"uri": "http://dbpedia.org/resource/Iraq",
			"label": "iraq",
			"seq": "49,52"
		}]
	},
	{
		"id": "5a928e7eda774ef6911803e52d2461d5",
		"question": "What is the debut team of the american football player who studied in North Fort Myers High School?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/highschool> <http://dbpedia.org/resource/North_Fort_Myers_High_School> . ?x <http://dbpedia.org/property/debutteam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/highschool",
			"label": "school high",
			"seq": "87,97"
		}, {
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut team",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football american player",
			"seq": "30,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North_Fort_Myers_High_School",
			"label": "school north myers",
			"seq": "70,87"
		}]
	},
	{
		"id": "f297c53e8f6b4b54abee32483ecdf9a2",
		"question": "How many people have played for a club whose coach is Fred Hoiberg?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Fred_Hoiberg> . ?uri <http://dbpedia.org/property/team> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coach",
			"label": "coach",
			"seq": "45,49"
		}, {
			"uri": "http://dbpedia.org/property/team",
			"label": "a",
			"seq": "5,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fred_Hoiberg",
			"label": "hoiberg fred",
			"seq": "54,65"
		}]
	},
	{
		"id": "dfd73dbae7ae491793de86126bdb9de2",
		"question": "What is the mascot of the handball teams in the Turkish Handball Super League?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Turkish_Handball_Super_League> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HandballTeam>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/league",
			"label": "league",
			"seq": "71,76"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/HandballTeam",
			"label": "handball",
			"seq": "26,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Turkish_Handball_Super_League",
			"label": "handball turkish league super",
			"seq": "26,54"
		}]
	},
	{
		"id": "ff2c4d6fe5ce44f99d580e8a58235a3f",
		"question": "Name the TV show distributed by Broadcast Syndication and is broadcasted by comedy central ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Broadcast_syndication> . ?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributed",
			"seq": "17,27"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "central",
			"seq": "83,89"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Broadcast_syndication",
			"label": "syndication",
			"seq": "42,52"
		}, {
			"uri": "http://dbpedia.org/resource/Comedy_Central",
			"label": "central comedy",
			"seq": "76,89"
		}]
	},
	{
		"id": "f7e7d5fe2f2f43e7b214ca25b7e066a8",
		"question": "How many relatives are there of people fought in the Battle of the Bulge?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Battle_of_the_Bulge> . ?x <http://dbpedia.org/ontology/relation> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battle",
			"seq": "53,58"
		}, {
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Battle_of_the_Bulge",
			"label": "battle bulge",
			"seq": "53,64"
		}]
	},
	{
		"id": "3a2ddeb21c3746fb92dbf66a6c0bc86e",
		"question": "Is Truth prevails the national motto of Czechoslovakia?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Czechoslovakia> <http://dbpedia.org/property/nationalMotto> <http://dbpedia.org/resource/Truth_prevails> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalMotto",
			"label": "national motto",
			"seq": "22,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Czechoslovakia",
			"label": "czechoslovakia",
			"seq": "40,53"
		}, {
			"uri": "http://dbpedia.org/resource/Truth_prevails",
			"label": "prevails truth",
			"seq": "3,16"
		}]
	},
	{
		"id": "16115d9103a74efaa5fcb54f18cbde0e",
		"question": "What band made The trial and One of these days song?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Trial_(song)> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/One_of_These_Days_(instrumental)> <http://dbpedia.org/ontology/musicalArtist> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "what",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/musicalArtist",
			"label": "trial",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Trial_(song)",
			"label": "trial song",
			"seq": "19,28"
		}, {
			"uri": "http://dbpedia.org/resource/One_of_These_Days_(instrumental)",
			"label": "these days",
			"seq": "36,45"
		}]
	},
	{
		"id": "3a948631dd8441caa4bea0a1acc65d97",
		"question": "What is Bob Adams (American football) known for?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bob_Adams_(American_football)> <http://dbpedia.org/property/knownFor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "38,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bob_Adams_(American_football)",
			"label": "football) (american adams bob",
			"seq": "8,36"
		}]
	},
	{
		"id": "6fc805721dc8491585c10f0f2e2592d1",
		"question": "Who was the bronze medalist of Swimming at the 2008 Summer Olympics  Men's 400 metre individual medley ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Swimming_at_the_2008_Summer_Olympics_\u2013_Men's_400_metre_individual_medley> <http://dbpedia.org/ontology/bronzeMedalist> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bronzeMedalist",
			"label": "medalist bronze",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Swimming_at_the_2008_Summer_Olympics_\u2013_Men's_400_metre_individual_medley",
			"label": "individual swimming olympics summer medley",
			"seq": "31,72"
		}]
	},
	{
		"id": "08ebfe3921a342c3affe388dd2aea32c",
		"question": "Which football players have Newell's Old Boys as youthclub?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/Newell's_Old_Boys> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youthclub",
			"seq": "49,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Newell's_Old_Boys",
			"label": "newell's boys old",
			"seq": "28,44"
		}]
	},
	{
		"id": "a858757ca891436e99cb9089f22a2dca",
		"question": "Which country's people work in the Birdman enterprises?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Birdman_Enterprises> . ?x <http://dbpedia.org/property/nationality> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engineer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "in",
			"seq": "28,29"
		}, {
			"uri": "http://dbpedia.org/property/nationality",
			"label": "country's",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Engineer",
			"label": "enterprises",
			"seq": "43,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Birdman_Enterprises",
			"label": "enterprises birdman",
			"seq": "35,53"
		}]
	},
	{
		"id": "c177520ccb0d4c55bc8fbdfc3bbb7506",
		"question": "List the sports associated with Mariveles, Bataan?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Mariveles,_Bataan> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "with",
			"seq": "27,30"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mariveles,_Bataan",
			"label": "mariveles, bataan",
			"seq": "32,48"
		}]
	},
	{
		"id": "b187393e6ede44b6997e10e532b27a42",
		"question": "Which team of Dan Shamash is also the debutant team of John Estes ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Estes> <http://dbpedia.org/ontology/debutTeam> ?uri. <http://dbpedia.org/resource/Dan_Shamash> <http://dbpedia.org/ontology/team> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debutant",
			"seq": "38,45"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Estes",
			"label": "estes john",
			"seq": "55,64"
		}, {
			"uri": "http://dbpedia.org/resource/Dan_Shamash",
			"label": "shamash dan",
			"seq": "14,24"
		}]
	},
	{
		"id": "8c5594e6c01f4f09988e31939b1c2799",
		"question": "Who is the tenant of the home stadium of Toronto Phantoms?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Toronto_Phantoms> <http://dbpedia.org/property/arena> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/arena",
			"label": "tenant",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenant",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "30,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto_Phantoms",
			"label": "phantoms toronto",
			"seq": "41,56"
		}]
	},
	{
		"id": "6d42f2fa938d4141bd635759b1e81402",
		"question": "Does the little colorado river flow in the Grand Canyon?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Little_Colorado_River> <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Grand_Canyon> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthMountain",
			"label": "colorado",
			"seq": "16,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Little_Colorado_River",
			"label": "colorado little river",
			"seq": "9,29"
		}, {
			"uri": "http://dbpedia.org/resource/Grand_Canyon",
			"label": "canyon grand",
			"seq": "43,54"
		}]
	},
	{
		"id": "90db48b330cc476e9694d1e7e62d38bd",
		"question": "Which educational institution of Jack Mcgregor is also the alma mater of Donn barber ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?uri. <http://dbpedia.org/resource/Donn_Barber> <http://dbpedia.org/ontology/education> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/education",
			"label": "educational",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/ontology/education",
			"label": "educational",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jack_McGregor",
			"label": "mcgregor jack",
			"seq": "33,45"
		}, {
			"uri": "http://dbpedia.org/resource/Donn_Barber",
			"label": "barber donn",
			"seq": "73,83"
		}]
	},
	{
		"id": "827cb970029b44e580c1a44fcc272eb2",
		"question": "How many religions are followed by the people in the Royal Thai Army?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Royal_Thai_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_Thai_Army",
			"label": "royal thai army",
			"seq": "53,67"
		}]
	},
	{
		"id": "c2998ab4051f4bef95ec8cda3eae919f",
		"question": "What company made facebook messenger and is the platform where Words of Gold can be played?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Words_of_Gold> <http://dbpedia.org/ontology/computingPlatform> ?uri. <http://dbpedia.org/resource/Facebook_Messenger> <http://dbpedia.org/property/developer> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "316",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "platform",
			"seq": "48,55"
		}, {
			"uri": "http://dbpedia.org/property/developer",
			"label": "messenger",
			"seq": "27,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Words_of_Gold",
			"label": "words gold of",
			"seq": "63,75"
		}, {
			"uri": "http://dbpedia.org/resource/Facebook_Messenger",
			"label": "messenger facebook",
			"seq": "18,35"
		}]
	},
	{
		"id": "d3faf37f41144547b64d5521b4e67d1c",
		"question": "What is the common party of the Manthena Venkata Raju and  B. Shiva Rao?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Manthena_Venkata_Raju> <http://dbpedia.org/ontology/party> ?uri. <http://dbpedia.org/resource/B._Shiva_Rao> <http://dbpedia.org/property/party> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "19,23"
		}, {
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Manthena_Venkata_Raju",
			"label": "manthena venkata raju",
			"seq": "32,52"
		}, {
			"uri": "http://dbpedia.org/resource/B._Shiva_Rao",
			"label": "shiva rao",
			"seq": "62,70"
		}]
	},
	{
		"id": "47d8d22a769c4d82a0f5e592f5fbdb24",
		"question": "In which cities can the beverage related to Barq's be found?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Barq's> <http://dbpedia.org/ontology/related> ?x . ?x <http://dbpedia.org/property/locationCity> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/property/locationCity",
			"label": "can",
			"seq": "16,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Barq's",
			"label": "barq's",
			"seq": "44,49"
		}]
	},
	{
		"id": "34200ced3ab544579326e2fc505d3bc8",
		"question": "In which city is  Arsenal Cider House ? located ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arsenal_Cider_House> <http://dbpedia.org/property/locationCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCity",
			"label": "located",
			"seq": "40,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arsenal_Cider_House",
			"label": "arsenal house cider",
			"seq": "18,36"
		}]
	},
	{
		"id": "43702440e850423dbdd82331dfc624be",
		"question": "From which state do the White Plum Asangas come?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/White_Plum_Asanga> . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "from",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "state",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/White_Plum_Asanga",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "78f031f16717475180bc9868531bd502",
		"question": "List the ceremonial county of East Tilbury ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ceremonialCounty",
			"label": "ceremonial county",
			"seq": "9,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/East_Tilbury",
			"label": "tilbury east",
			"seq": "30,41"
		}]
	},
	{
		"id": "6bb581d8ce694ddea69cd899f9f45e14",
		"question": "How many people are there who have relationship with Kennedy family?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Kennedy_family>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relationship",
			"seq": "35,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kennedy_family",
			"label": "kennedy family",
			"seq": "53,66"
		}]
	},
	{
		"id": "d841f35943ac4a9cad0f6e33ba3a8650",
		"question": "Which board game can be said as a mind based game?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Board_game> . ?uri <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Mind_sport> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "game",
			"seq": "12,15"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "game",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Board_game",
			"label": "board game",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/resource/Mind_sport",
			"label": "mind",
			"seq": "34,37"
		}]
	},
	{
		"id": "0f40d8629b94485292d2bdb7107b1da7",
		"question": "Was GM first aired in Albania?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/G\u00fcm\u00fc\u015f_(TV_series)> <http://dbpedia.org/property/firstAired> <http://dbpedia.org/resource/Albania> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstAired",
			"label": "first aired",
			"seq": "7,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/G\u00fcm\u00fc\u015f_(TV_series)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Albania",
			"label": "albania",
			"seq": "22,28"
		}]
	},
	{
		"id": "a851cba6c3fd4f91b75012d43e14ffe8",
		"question": "In which ice hockey league, did the team coached by Joel Quenneville win?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Joel_Quenneville> . ?uri <http://dbpedia.org/property/champion> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/IceHockeyLeague>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headCoach",
			"label": "coached",
			"seq": "41,47"
		}, {
			"uri": "http://dbpedia.org/property/champion",
			"label": "in",
			"seq": "0,1"
		}, {
			"uri": "http://dbpedia.org/ontology/IceHockeyLeague",
			"label": "hockey",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joel_Quenneville",
			"label": "quenneville joel",
			"seq": "52,67"
		}]
	},
	{
		"id": "4aa7041e78b14355a3150e15ab4c8cbb",
		"question": "What is the official residence of the Lula J. Davis which is also the death location of the John McTaggart (jockey) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lula_J._Davis> <http://dbpedia.org/ontology/residence> ?uri. <http://dbpedia.org/resource/John_McTaggart_(jockey)> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residence",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "death",
			"seq": "70,74"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lula_J._Davis",
			"label": "davis lula",
			"seq": "38,47"
		}, {
			"uri": "http://dbpedia.org/resource/John_McTaggart_(jockey)",
			"label": "mctaggart (jockey) john",
			"seq": "92,114"
		}]
	},
	{
		"id": "32ef05a6fd884fddae5d465551cf17e3",
		"question": "How many games have a publisher based in US?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/ontology/publisher> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "in",
			"seq": "38,39"
		}, {
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publisher",
			"seq": "22,30"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9af86fea79ba45b599a74bbd5341a401",
		"question": "How many fictional characters were humans?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Human>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/species",
			"label": "were",
			"seq": "30,33"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Human",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "72220051ada34ae48a21ec1e045f930f",
		"question": "Where was James H. Fields buried ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/James_H._Fields> <http://dbpedia.org/property/placeofburial> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeofburial",
			"label": "buried",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_H._Fields",
			"label": "fields james",
			"seq": "10,21"
		}]
	},
	{
		"id": "b1451c98780e446b815e9f342751cbb0",
		"question": "Is Julia Gillard a part of monarch of elizabeth 2?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Julia_Gillard> <http://dbpedia.org/property/monarch> <http://dbpedia.org/resource/Elizabeth_II> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/monarch",
			"label": "monarch",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Julia_Gillard",
			"label": "gillard julia",
			"seq": "3,15"
		}, {
			"uri": "http://dbpedia.org/resource/Elizabeth_II",
			"label": "elizabeth",
			"seq": "38,46"
		}]
	},
	{
		"id": "749558f932b9486b85df68d4eccfe5c0",
		"question": "Which cities come in the course of the river, into which Big Creek around Texas flows too?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Big_Creek_(Texas_Co._Missouri)> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/rightTributary",
			"label": "river,",
			"seq": "39,44"
		}, {
			"uri": "http://dbpedia.org/ontology/city",
			"label": "cities",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river,",
			"seq": "39,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Big_Creek_(Texas_Co._Missouri)",
			"label": "texas creek",
			"seq": "61,71"
		}]
	},
	{
		"id": "fa242acb93b743fea9e35fc94ee08a4e",
		"question": "Where are INKAS located which is also the state of origin for Jojo Chintoh ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jojo_Chintoh> <http://dbpedia.org/ontology/stateOfOrigin> ?uri. <http://dbpedia.org/resource/INKAS> <http://dbpedia.org/property/locations> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "origin state for",
			"seq": "42,57"
		}, {
			"uri": "http://dbpedia.org/property/locations",
			"label": "located",
			"seq": "16,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jojo_Chintoh",
			"label": "chintoh jojo",
			"seq": "62,73"
		}, {
			"uri": "http://dbpedia.org/resource/INKAS",
			"label": "inkas",
			"seq": "10,14"
		}]
	},
	{
		"id": "5cc36b5f5baf40ee961a155b20d24163",
		"question": "Who wrote the frost king?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Frost_King> <http://dbpedia.org/ontology/author> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "who",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Frost_King",
			"label": "frost king the",
			"seq": "10,23"
		}]
	},
	{
		"id": "1d01420e4fe94bcb98a919c43f297926",
		"question": "How many other key people are there of the non-profit organisations whose key people is Hillary Clinton ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Hillary_Clinton> . ?x <http://dbpedia.org/property/keyPeople> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hillary_Clinton",
			"label": "hillary clinton",
			"seq": "88,102"
		}]
	},
	{
		"id": "4553bf351e414e73a1faa2b005c17496",
		"question": "How many races have the horses bred by Jacques Van't Hart participated in?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/breeder> <http://dbpedia.org/resource/Jacques_Van't_Hart> . ?x <http://dbpedia.org/property/race> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/breeder",
			"label": "bred",
			"seq": "31,34"
		}, {
			"uri": "http://dbpedia.org/property/race",
			"label": "races",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jacques_Van't_Hart",
			"label": "jacques van't hart",
			"seq": "39,56"
		}]
	},
	{
		"id": "1f0f16883a764370b8cb9aae06e6d527",
		"question": "Who is the spouse of Daniel Gibson? ",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Daniel_Gibson>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "spouse",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Daniel_Gibson",
			"label": "daniel",
			"seq": "21,26"
		}]
	},
	{
		"id": "afc1eb64cfc24a95975afaf3b10c8429",
		"question": "Name the mouth country of Upper Neretva ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/mouthCountry> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthCountry",
			"label": "country mouth",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Upper_Neretva",
			"label": "neretva upper",
			"seq": "26,38"
		}]
	},
	{
		"id": "3edcbc0ae531477c808768239f89c922",
		"question": "In how many regions is English American spoken?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/English_Americans> <http://dbpedia.org/property/region> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/region",
			"label": "regions",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/English_Americans",
			"label": "american english",
			"seq": "23,38"
		}]
	},
	{
		"id": "3dfd41b5ba22435eb756a1d2034d0ce6",
		"question": "Who has been married to both Penny Lancaster and Alana Stewart?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Penny_Lancaster> <http://dbpedia.org/ontology/spouse> ?uri. <http://dbpedia.org/resource/Alana_Stewart> <http://dbpedia.org/ontology/spouse> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "penny",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "penny",
			"seq": "29,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Penny_Lancaster",
			"label": "lancaster penny",
			"seq": "29,43"
		}, {
			"uri": "http://dbpedia.org/resource/Alana_Stewart",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e1f667ae1cb6458ba9f14a1021e8c8b4",
		"question": "Which country does league of Nguendula Filipe belongs to?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Nguendula_Filipe> <http://dbpedia.org/ontology/league> ?x . ?x <http://dbpedia.org/property/country> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/league",
			"label": "league",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "country",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nguendula_Filipe",
			"label": "nguendula filipe",
			"seq": "29,44"
		}]
	},
	{
		"id": "5ffde5a7c874424cbd665253d618fcfe",
		"question": "Which party does Iqbal Singh and B Shiva Rao currently belong to?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Iqbal_Singh_(politician)> <http://dbpedia.org/property/party> ?uri. <http://dbpedia.org/resource/B._Shiva_Rao> <http://dbpedia.org/property/party> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Iqbal_Singh_(politician)",
			"label": "singh iqbal",
			"seq": "17,27"
		}, {
			"uri": "http://dbpedia.org/resource/B._Shiva_Rao",
			"label": "shiva rao",
			"seq": "35,43"
		}]
	},
	{
		"id": "20163596744342f4b6677a18dbc491d0",
		"question": "What is the largest city of the country to whom, the battle honours of 65th Regiment of Foot were given?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/65th_(2nd_Yorkshire,_North_Riding)_Regiment_of_Foot> <http://dbpedia.org/property/battleHonours> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battleHonours",
			"label": "honours battle",
			"seq": "53,66"
		}, {
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/65th_(2nd_Yorkshire,_North_Riding)_Regiment_of_Foot",
			"label": "regiment",
			"seq": "76,83"
		}]
	},
	{
		"id": "77480fbfae19475b9120f4a4bb9dd835",
		"question": "Name a show hosted by Brian Dunkleman and judged by Harry Connick, Jr.?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Brian_Dunkleman> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Harry_Connick,_Jr.>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/presenter",
			"label": "hosted",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/property/judges",
			"label": "judged",
			"seq": "42,47"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "7,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brian_Dunkleman",
			"label": "dunkleman brian",
			"seq": "22,36"
		}, {
			"uri": "http://dbpedia.org/resource/Harry_Connick,_Jr.",
			"label": "connick, harry jr.",
			"seq": "52,69"
		}]
	},
	{
		"id": "007bb942a6da4c3f987fba8dff86e26b",
		"question": "Is Ella Fitzgerald associated with Mickey Roker?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mickey_Roker> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Ella_Fitzgerald> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated",
			"seq": "19,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mickey_Roker",
			"label": "mickey roker",
			"seq": "35,46"
		}, {
			"uri": "http://dbpedia.org/resource/Ella_Fitzgerald",
			"label": "fitzgerald ella",
			"seq": "3,17"
		}]
	},
	{
		"id": "075580e801b242728cc06ad403056096",
		"question": "Name the notable work by Russell T Davis which is also the series of Doctor Who:Destiny of the Doctors ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/property/notableworks> ?uri. <http://dbpedia.org/resource/Doctor_Who:_Destiny_of_the_Doctors> <http://dbpedia.org/ontology/series> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "notable",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "59,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Russell_T_Davies",
			"label": "russell",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/resource/Doctor_Who:_Destiny_of_the_Doctors",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "461bef912cd34b3cbadf533925a20f87",
		"question": "Does Cascade Airways have a hub in Seattle?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Seattle> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hubAirport",
			"label": "hub",
			"seq": "28,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cascade_Airways",
			"label": "cascade airways",
			"seq": "5,19"
		}, {
			"uri": "http://dbpedia.org/resource/Seattle",
			"label": "seattle",
			"seq": "35,41"
		}]
	},
	{
		"id": "d795c9f16e8347cba7a4dd7b2a27de50",
		"question": "Who did their highschool from a school whose mascot was a fighting tiger?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Fighting_Tiger> . ?uri <http://dbpedia.org/ontology/highschool> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "45,50"
		}, {
			"uri": "http://dbpedia.org/ontology/highschool",
			"label": "highschool",
			"seq": "14,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fighting_Tiger",
			"label": "fighting tiger",
			"seq": "58,71"
		}]
	},
	{
		"id": "295460c32de746aa8bcc193aaee595c3",
		"question": "What are the school mascots in Blytheville school district?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/district> <http://dbpedia.org/resource/Blytheville_School_District> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/district",
			"label": "district",
			"seq": "50,57"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascots",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "school",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blytheville_School_District",
			"label": "blytheville district school",
			"seq": "13,39"
		}]
	},
	{
		"id": "e22121aed5034a2ebb9a8b79dda6a98d",
		"question": "What are some rivers over which there is a box girder bridge?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/design> <http://dbpedia.org/resource/Box_girder_bridge> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/design",
			"label": "girder",
			"seq": "47,52"
		}, {
			"uri": "http://dbpedia.org/property/crosses",
			"label": "rivers",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Box_girder_bridge",
			"label": "girder bridge box",
			"seq": "43,59"
		}]
	},
	{
		"id": "f4b98010a03e427385fe8ee2f13cffc8",
		"question": "How many services does the company who made Onedrive provide?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/service> <http://dbpedia.org/resource/OneDrive> . ?x <http://dbpedia.org/property/services> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/service",
			"label": "services",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/OneDrive",
			"label": "onedrive",
			"seq": "44,51"
		}]
	},
	{
		"id": "b087abc428724248b54e69d4f2519f9a",
		"question": "Name the movie written by Monty Python and has music composer as Geoffrey Burgon ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Monty_Python> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Geoffrey_Burgon>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer music",
			"seq": "47,60"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "name",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Monty_Python",
			"label": "python monty",
			"seq": "26,37"
		}, {
			"uri": "http://dbpedia.org/resource/Geoffrey_Burgon",
			"label": "geoffrey burgon",
			"seq": "65,79"
		}]
	},
	{
		"id": "05a75d41426e47feada1cd1a9d0f7dd2",
		"question": "Where did the Vitis Vinifera grapes originate?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> . ?x <http://dbpedia.org/ontology/origin> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/species",
			"label": "grapes",
			"seq": "29,34"
		}, {
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "originate",
			"seq": "36,44"
		}, {
			"uri": "http://dbpedia.org/ontology/Grape",
			"label": "grapes",
			"seq": "29,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vitis_vinifera",
			"label": "vinifera vitis",
			"seq": "14,27"
		}]
	},
	{
		"id": "8dc28cce9d654bfe8fbf70dc2b8673e9",
		"question": "Who is the leader of Hackweiser ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hackweiser> <http://dbpedia.org/property/leaderName> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "leader",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hackweiser",
			"label": "hackweiser",
			"seq": "21,30"
		}]
	},
	{
		"id": "99eede401e804ca88838398c7452d788",
		"question": "What sports are there at the universities affiliated to the National Capital Region Athletic Association?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/National_Capital_Region_Athletic_Association> . ?x <http://dbpedia.org/property/athletics> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "affiliated",
			"seq": "42,51"
		}, {
			"uri": "http://dbpedia.org/property/athletics",
			"label": "athletic",
			"seq": "84,91"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "29,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Capital_Region_Athletic_Association",
			"label": "association national athletic capital",
			"seq": "60,96"
		}]
	},
	{
		"id": "968a91762e304939ac276e8bffeeb104",
		"question": "What musician is often associated with Tiffany Villarreal and wrote Same Song?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Same_Song_(Digital_Underground_song)> <http://dbpedia.org/property/writer> ?uri. <http://dbpedia.org/resource/Tiffany_Villarreal> <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "wrote",
			"seq": "62,66"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated",
			"seq": "23,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Same_Song_(Digital_Underground_song)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Tiffany_Villarreal",
			"label": "villarreal tiffany",
			"seq": "39,56"
		}]
	},
	{
		"id": "bdab35771cbc423897c8ea4079e34696",
		"question": "Name the city served by Juhu Aerodrome ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juhu_Aerodrome> <http://dbpedia.org/property/cityServed> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cityServed",
			"label": "served city",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Juhu_Aerodrome",
			"label": "aerodrome juhu",
			"seq": "24,37"
		}]
	},
	{
		"id": "4e212b324a314ddb90f5c7d4b4f980a2",
		"question": "How many ships belong to states which has Unitary as government type ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/governmentType> <http://dbpedia.org/resource/Unitary_state> . ?uri <http://dbpedia.org/ontology/country> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Ship>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governmentType",
			"label": "government type",
			"seq": "53,67"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "unitary",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/ontology/Ship",
			"label": "ships",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Unitary_state",
			"label": "unitary",
			"seq": "42,48"
		}]
	},
	{
		"id": "8885d643a55646fcb84f0bdfdd1920ab",
		"question": "Name the university located in Indiana and has affiliations with Kaplan, Inc.?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "has",
			"seq": "43,45"
		}, {
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliations",
			"seq": "47,58"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indiana",
			"label": "indiana",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/resource/Kaplan,_Inc.",
			"label": "kaplan, inc.",
			"seq": "65,76"
		}]
	},
	{
		"id": "4e674cf3dbdb4a39a2fc15b0844576f1",
		"question": "What common team are Mikhail Pashnin and Robin Kovacs expected to play for?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mikhail_Pashnin> <http://dbpedia.org/property/prospectTeam> ?uri. <http://dbpedia.org/resource/Robin_Kovacs> <http://dbpedia.org/property/prospectTeam> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prospectTeam",
			"label": "team",
			"seq": "12,15"
		}, {
			"uri": "http://dbpedia.org/property/prospectTeam",
			"label": "team",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mikhail_Pashnin",
			"label": "pashnin mikhail",
			"seq": "21,35"
		}, {
			"uri": "http://dbpedia.org/resource/Robin_Kovacs",
			"label": "kovacs robin",
			"seq": "41,52"
		}]
	},
	{
		"id": "cc34045be9af41d2a638daad32507b44",
		"question": "Which races has the horse bred by Jacques Van't Hart participated in?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/breeder> <http://dbpedia.org/resource/Jacques_Van't_Hart> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/breeder",
			"label": "bred",
			"seq": "26,29"
		}, {
			"uri": "http://dbpedia.org/property/race",
			"label": "races",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Horse",
			"label": "horse",
			"seq": "20,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jacques_Van't_Hart",
			"label": "jacques van't hart",
			"seq": "34,51"
		}]
	},
	{
		"id": "216d2d9373974e00a989034dbc7b8fd4",
		"question": "What are the awards won by the spouse of Liv Ullmann ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Liv_Ullmann> <http://dbpedia.org/ontology/partner> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/partner",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Liv_Ullmann",
			"label": "ullmann liv",
			"seq": "41,51"
		}]
	},
	{
		"id": "dbf3f468b028435ead6f22d7094216f5",
		"question": "Which technological products were manufactured by Foxconn?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Foxconn>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
		"sparql_id": "601",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "34,45"
		}, {
			"uri": "http://dbpedia.org/ontology/InformationAppliance",
			"label": "manufactured",
			"seq": "34,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Foxconn",
			"label": "foxconn",
			"seq": "50,56"
		}]
	},
	{
		"id": "40679e799df0477cb3225b955fbf7290",
		"question": "Does Gibby Haynes play the saxophone?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Gibby_Haynes> <http://dbpedia.org/property/instrument> <http://dbpedia.org/resource/Saxophone> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/instrument",
			"label": "the",
			"seq": "23,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gibby_Haynes",
			"label": "haynes gibby",
			"seq": "5,16"
		}, {
			"uri": "http://dbpedia.org/resource/Saxophone",
			"label": "saxophone",
			"seq": "27,35"
		}]
	},
	{
		"id": "ce2de0ff47ec4745a8c1c17dbfe8758b",
		"question": "List the movies directed by Stanley Kubrick?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "directed",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "list",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stanley_Kubrick",
			"label": "stanley kubrick",
			"seq": "28,42"
		}]
	},
	{
		"id": "24f384f61c0d499a9e5553258d63a154",
		"question": "Things going to the mediterranean sea also go where?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Mediterranean_Sea> . ?x <http://dbpedia.org/ontology/destination> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/destinations",
			"label": "things",
			"seq": "0,5"
		}, {
			"uri": "http://dbpedia.org/ontology/destination",
			"label": "things",
			"seq": "0,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mediterranean_Sea",
			"label": "mediterranean sea",
			"seq": "20,36"
		}]
	},
	{
		"id": "c6faa5c6368d4328b6ff164344475881",
		"question": "How many first drivers have participated when Scuderia Ferrari was a first team?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/firstTeam> <http://dbpedia.org/resource/Scuderia_Ferrari> . ?x <http://dbpedia.org/ontology/firstDriver> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstTeam",
			"label": "first",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/firstDriver",
			"label": "drivers",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Scuderia_Ferrari",
			"label": "scuderia ferrari",
			"seq": "46,61"
		}]
	},
	{
		"id": "4afe90c0a2d24c9abb78be2dc41b3fa7",
		"question": "Was Tommy Tucker's Tooth animated by Walt Disney?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Tommy_Tucker's_Tooth> <http://dbpedia.org/ontology/animator> <http://dbpedia.org/resource/Walt_Disney> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/animator",
			"label": "animated",
			"seq": "25,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tommy_Tucker's_Tooth",
			"label": "tucker's tooth tommy",
			"seq": "4,23"
		}, {
			"uri": "http://dbpedia.org/resource/Walt_Disney",
			"label": "disney walt",
			"seq": "37,47"
		}]
	},
	{
		"id": "418dfe53e2ba43708a7884f5047d9093",
		"question": "What is the religious affiliation of Wickramabahu Central College (National School) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)> <http://dbpedia.org/property/religiousAffiliation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religiousAffiliation",
			"label": "affiliation religious",
			"seq": "12,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)",
			"label": "wickramabahu (national school) college central",
			"seq": "37,82"
		}]
	},
	{
		"id": "e20cde96361c4690974f7cd6b67e3241",
		"question": "What is the destinations of the airline whose headquarters is in Manchester?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Manchester> . ?x <http://dbpedia.org/property/destinations> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "46,57"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "destinations",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airline",
			"seq": "32,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Manchester",
			"label": "manchester",
			"seq": "65,74"
		}]
	},
	{
		"id": "4afbc166875f40419999fc2110b6ec04",
		"question": "Name all the bands which have members of QDT in them.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/QDT> <http://dbpedia.org/ontology/bandMember> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "members",
			"seq": "30,36"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "bands",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/QDT",
			"label": "qdt",
			"seq": "41,43"
		}]
	},
	{
		"id": "70e501f13ec0430ab83bbd1ab7d9768e",
		"question": "What is the allegiance of the Albert Kwesi Ocran and state of origin of the Jojo Chintoh ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Kwesi_Ocran> <http://dbpedia.org/property/allegiance> ?uri. <http://dbpedia.org/resource/Jojo_Chintoh> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "origin state",
			"seq": "53,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Albert_Kwesi_Ocran",
			"label": "albert ocran kwesi",
			"seq": "30,47"
		}, {
			"uri": "http://dbpedia.org/resource/Jojo_Chintoh",
			"label": "chintoh jojo",
			"seq": "76,87"
		}]
	},
	{
		"id": "927bed1a09eb4ccebe9ce52f962a6866",
		"question": "What appliance Sony made after the success of PlayStation 2?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Sony> . ?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/PlayStation_2>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "after",
			"seq": "25,29"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "success",
			"seq": "35,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony",
			"label": "sony",
			"seq": "15,18"
		}, {
			"uri": "http://dbpedia.org/resource/PlayStation_2",
			"label": "playstation",
			"seq": "46,56"
		}]
	},
	{
		"id": "cc91a60484e342e48d63ac373d934455",
		"question": "Which publisher of Stone Canoe is also the university for which Michael Powell plays for ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stone_Canoe> <http://dbpedia.org/ontology/publisher> ?uri. <http://dbpedia.org/resource/Michael_Powell_(lacrosse)> <http://dbpedia.org/ontology/team> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publisher",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "the",
			"seq": "39,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stone_Canoe",
			"label": "stone canoe",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/resource/Michael_Powell_(lacrosse)",
			"label": "michael powell",
			"seq": "64,77"
		}]
	},
	{
		"id": "2a8fe39c189643d9bc607d285c32bdbf",
		"question": "How many shows are made by the channel whose predecessor was the Comedy Channel?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/The_Comedy_Channel_(United_States)> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "45,55"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "whose",
			"seq": "39,43"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Comedy_Channel_(United_States)",
			"label": "channel comedy",
			"seq": "31,44"
		}]
	},
	{
		"id": "8c563a445be548dcbe86117be621f124",
		"question": "What are the movies directed by Joel Schumacher?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Joel_Schumacher>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "directed",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "joel",
			"seq": "32,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joel_Schumacher",
			"label": "schumacher joel",
			"seq": "32,46"
		}]
	},
	{
		"id": "3fd7c86ca6824a3dbc88fe313eb4e1a8",
		"question": "Who is owner of the soccer club which owns the Cobham Training Centre?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Cobham_Training_Centre>  <http://dbpedia.org/property/owner> ?x .  ?x <http://dbpedia.org/property/owner> ?uri . }",
		"sparql_id": "9",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "7,11"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "7,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cobham_Training_Centre",
			"label": "training cobham centre",
			"seq": "47,68"
		}]
	},
	{
		"id": "ce57cc92bd8645e186f8da0f9cf915de",
		"question": "What is the military rank of the commanders of Regiment of Mounted Grenadiers?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Regiment_of_Mounted_Grenadiers> <http://dbpedia.org/property/notableCommanders> ?x . ?x <http://dbpedia.org/ontology/militaryRank> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableCommanders",
			"label": "commanders",
			"seq": "33,42"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryRank",
			"label": "military rank",
			"seq": "12,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Regiment_of_Mounted_Grenadiers",
			"label": "grenadiers regiment mounted",
			"seq": "47,73"
		}]
	},
	{
		"id": "d31842ed59c74ddba76748ddc86819ad",
		"question": "How many wars took place in Israel?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Israel>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/place",
			"label": "place",
			"seq": "19,23"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "many",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Israel",
			"label": "israel",
			"seq": "28,33"
		}]
	},
	{
		"id": "b602d2ec54c940bfb3308e310fb48114",
		"question": "Where is Richard Stites located ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Richard_Stites> <http://dbpedia.org/ontology/birthPlace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "located",
			"seq": "24,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Richard_Stites",
			"label": "richard stites",
			"seq": "9,22"
		}]
	},
	{
		"id": "5a5552c654f843e2af53c66e80782253",
		"question": "Semani languages are spoken in which countries?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Semnani_languages>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/languages",
			"label": "languages",
			"seq": "7,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "countries",
			"seq": "37,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Semnani_languages",
			"label": "languages",
			"seq": "7,15"
		}]
	},
	{
		"id": "27bc2760a11844569f85ac7e66cd3be3",
		"question": "How many companies serve the Australian region?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/regionServed> <http://dbpedia.org/resource/Australia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "region serve",
			"seq": "19,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Australia",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c6d5d4c7a5fb417ba8654ec416c2d263",
		"question": "Who wrote The Times They Are a-Changin?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/ontology/musicBy> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicBy",
			"label": "they",
			"seq": "20,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)",
			"label": "a-changin times they are",
			"seq": "14,37"
		}]
	},
	{
		"id": "9c981beb9a30463aaf8b11f260183ccc",
		"question": "Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceMountain",
			"label": "mountain",
			"seq": "28,35"
		}, {
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "location mouth",
			"seq": "61,74"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Baikal_Mountains",
			"label": "mountains baikal",
			"seq": "40,55"
		}, {
			"uri": "http://dbpedia.org/resource/Arctic_Ocean",
			"label": "arctic ocean",
			"seq": "79,90"
		}]
	},
	{
		"id": "86746719f387413aaf461a7c70f4ef96",
		"question": "Who was the opponent of Robert Carr, 1st Earl of Somerset ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_Carr,_1st_Earl_of_Somerset> <http://dbpedia.org/ontology/opponent> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponent",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Carr,_1st_Earl_of_Somerset",
			"label": "somerset robert carr, earl",
			"seq": "24,49"
		}]
	},
	{
		"id": "709ea85fe41942d3a0f49a39541f93ee",
		"question": "Which organisation has superintendent as Lieutenant general (United States)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/superintendent> <http://dbpedia.org/resource/Lieutenant_general_(United_States)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/superintendent",
			"label": "superintendent",
			"seq": "23,36"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organisation",
			"seq": "6,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lieutenant_general_(United_States)",
			"label": "lieutenant states) general (united",
			"seq": "41,74"
		}]
	},
	{
		"id": "681e53e68393454b864693eaa0ee2eb7",
		"question": "Give me the total number of architect of the buildings whose one of the  architect was Louis D. Astorino?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/architect> <http://dbpedia.org/resource/Louis_D._Astorino> . ?x <http://dbpedia.org/property/architect> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "28,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Louis_D._Astorino",
			"label": "astorino louis",
			"seq": "87,100"
		}]
	},
	{
		"id": "72d5cb491ec94f14b8d9683a64782b9c",
		"question": "Where can i find companies which were started in Toronto?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Toronto> . ?x <http://dbpedia.org/property/locations> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "find",
			"seq": "12,15"
		}, {
			"uri": "http://dbpedia.org/property/locations",
			"label": "can",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "17,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto",
			"label": "toronto",
			"seq": "49,55"
		}]
	},
	{
		"id": "26e27f1518224881bd791e4d2ed313b6",
		"question": "List the leaders of the government agencies whose jurisdiction was German-occupied Europe.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/jurisdiction> <http://dbpedia.org/resource/German-occupied_Europe> . ?x <http://dbpedia.org/ontology/leader> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GovernmentAgency>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/jurisdiction",
			"label": "jurisdiction",
			"seq": "50,61"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leaders",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/GovernmentAgency",
			"label": "government",
			"seq": "24,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/German-occupied_Europe",
			"label": "german-occupied",
			"seq": "67,81"
		}]
	},
	{
		"id": "0f04a6c5f26342d9a5b0cf207019d29d",
		"question": "Which company released the software RenderMan?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/RenderMan_(software)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "released",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/RenderMan_(software)",
			"label": "renderman software",
			"seq": "27,44"
		}]
	},
	{
		"id": "ca43be7031db43e1bea3ea6da5eb0e12",
		"question": "What is the total number of awards whose presenter's headquarters is Beverly Hills, California?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Beverly_Hills,_California> . ?uri <http://dbpedia.org/ontology/presenter> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "53,64"
		}, {
			"uri": "http://dbpedia.org/ontology/presenter",
			"label": "presenter's",
			"seq": "41,51"
		}, {
			"uri": "http://dbpedia.org/ontology/Award",
			"label": "awards",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Beverly_Hills,_California",
			"label": "california beverly hills,",
			"seq": "69,93"
		}]
	},
	{
		"id": "99747a8bc83f452f85a46aab60a6b3e2",
		"question": "Which associate of Thomas bryan Martin is also the president of Carmichael ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomas_Bryan_Martin> <http://dbpedia.org/ontology/associate> ?uri. <http://dbpedia.org/resource/William_Carmichael_(diplomat)> <http://dbpedia.org/property/president> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associate",
			"label": "associate",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "51,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thomas_Bryan_Martin",
			"label": "thomas martin bryan",
			"seq": "19,37"
		}, {
			"uri": "http://dbpedia.org/resource/William_Carmichael_(diplomat)",
			"label": "carmichael",
			"seq": "64,73"
		}]
	},
	{
		"id": "537bdce8e8dd4a238a2dbb9059f5fe9f",
		"question": "What cities are nearer to Fuountain Lake Farm?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fountain_Lake_Farm> <http://dbpedia.org/property/nearestCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nearestCity",
			"label": "nearer",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fountain_Lake_Farm",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1d08293ffa5440beaad63cd2ffd708a8",
		"question": "Count the total number of launch site of the rockets which have been launched form Cape Canaveral Air Force Station ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station> . ?x <http://dbpedia.org/ontology/launchSite> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launched",
			"seq": "69,76"
		}, {
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launched",
			"seq": "69,76"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station",
			"label": "canaveral station force",
			"seq": "88,110"
		}]
	},
	{
		"id": "e6d36153fb7c4298a55e5ee6c0738c1d",
		"question": "How many shows are made by Larry David?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Larry_David>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "are",
			"seq": "15,17"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Larry_David",
			"label": "larry david",
			"seq": "27,37"
		}]
	},
	{
		"id": "e45dcefc54af4edbbb07b37331ca8f14",
		"question": "Name the home town of Cline Buckens ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/C\u00e9line_Buckens> <http://dbpedia.org/ontology/hometown> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/C\u00e9line_Buckens",
			"label": "buckens",
			"seq": "28,34"
		}]
	},
	{
		"id": "a4cea3abd1184b649cc7a5057169a76b",
		"question": "Was Cliff Burton in Metallica?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Metallica> <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Cliff_Burton> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "was",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Metallica",
			"label": "metallica",
			"seq": "20,28"
		}, {
			"uri": "http://dbpedia.org/resource/Cliff_Burton",
			"label": "burton cliff",
			"seq": "4,15"
		}]
	},
	{
		"id": "0b60b66059d842f79d0b4d9825973e79",
		"question": "What are the television shows whose network's sister station is BBC Two?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/BBC_Two> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sisterStation",
			"label": "station sister",
			"seq": "46,59"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network's",
			"seq": "36,44"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC_Two",
			"label": "two bbc",
			"seq": "38,44"
		}]
	},
	{
		"id": "33f63e6829ad4508bbe0d83cf298e9df",
		"question": "Tell me the name of the Prime Time Entertainment Network's TV show whose Artist is Christopher Franke ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/Prime_Time_Entertainment_Network>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "73,78"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network's",
			"seq": "49,57"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "62,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christopher_Franke",
			"label": "christopher franke",
			"seq": "83,100"
		}, {
			"uri": "http://dbpedia.org/resource/Prime_Time_Entertainment_Network",
			"label": "entertainment",
			"seq": "35,47"
		}]
	},
	{
		"id": "7e720d99f29d4758adc7c2bcbf7b69d7",
		"question": "Which TV show had a judge named Harry Connick, Jr. and was presented by Ryan Seacrest?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Harry_Connick,_Jr.> . ?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/judges",
			"label": "judge",
			"seq": "20,24"
		}, {
			"uri": "http://dbpedia.org/ontology/presenter",
			"label": "presented",
			"seq": "59,67"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harry_Connick,_Jr.",
			"label": "connick, harry jr.",
			"seq": "32,49"
		}, {
			"uri": "http://dbpedia.org/resource/Ryan_Seacrest",
			"label": "seacrest ryan",
			"seq": "72,84"
		}]
	},
	{
		"id": "d2b07c6181a64cf183b36bd37459e852",
		"question": "How many kinds of games can be played on the Amiga?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Amiga> . ?x <http://dbpedia.org/property/genre> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "games",
			"seq": "18,22"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "games",
			"seq": "18,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Amiga",
			"label": "amiga",
			"seq": "45,49"
		}]
	},
	{
		"id": "b8f31b0cece6487a95dd21301ce60003",
		"question": "Is Michael Schumacher the first driver of the 1994 grand prix?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/1994_Hungarian_Grand_Prix> <http://dbpedia.org/property/firstDriver> <http://dbpedia.org/resource/Michael_Schumacher> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstDriver",
			"label": "driver first",
			"seq": "26,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1994_Hungarian_Grand_Prix",
			"label": "grand prix 1994",
			"seq": "46,60"
		}, {
			"uri": "http://dbpedia.org/resource/Michael_Schumacher",
			"label": "schumacher michael",
			"seq": "3,20"
		}]
	},
	{
		"id": "5943549088b54cd687dab2cb1cd0bde2",
		"question": "By which companies is RENFE Class 333 designed?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/RENFE_Class_333> <http://dbpedia.org/ontology/designer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designer",
			"label": "designed",
			"seq": "38,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/RENFE_Class_333",
			"label": "renfe class 333",
			"seq": "22,36"
		}]
	},
	{
		"id": "3fb7e88b8f1943958246f70177f3e5dc",
		"question": "Who all have been a president of educational institutes in Paud?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Paud> . ?x <http://dbpedia.org/property/president> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "educational",
			"seq": "33,43"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "20,28"
		}, {
			"uri": "http://dbpedia.org/ontology/EducationalInstitution",
			"label": "educational",
			"seq": "33,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paud",
			"label": "paud",
			"seq": "59,62"
		}]
	},
	{
		"id": "b242da1bee49478487a9dd713cc010da",
		"question": "Does the asiana airlines fly into the Gimhae International Airport?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Asiana_Airlines> <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Gimhae_International_Airport> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/targetAirport",
			"label": "airport",
			"seq": "59,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Asiana_Airlines",
			"label": "airlines asiana",
			"seq": "9,23"
		}, {
			"uri": "http://dbpedia.org/resource/Gimhae_International_Airport",
			"label": "international airport gimhae",
			"seq": "38,65"
		}]
	},
	{
		"id": "432f4fcb54a449ca830d2bb1037a274a",
		"question": "Which governer of Winston Bryant is the president of Joseph Stiglitz ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri. <http://dbpedia.org/resource/Joseph_Stiglitz> <http://dbpedia.org/property/president> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governor",
			"label": "governer",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "40,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Winston_Bryant",
			"label": "winston bryant",
			"seq": "18,31"
		}, {
			"uri": "http://dbpedia.org/resource/Joseph_Stiglitz",
			"label": "stiglitz joseph",
			"seq": "53,67"
		}]
	},
	{
		"id": "d76def8ae04b49f6b1d126ba95c0e2cd",
		"question": "In which city is the distributor of Jeevan Mrityu located ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Jeevan_Mrityu> <http://dbpedia.org/property/distributor> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributor",
			"seq": "21,31"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "located",
			"seq": "50,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jeevan_Mrityu",
			"label": "mrityu jeevan",
			"seq": "36,48"
		}]
	},
	{
		"id": "601a17c1d3db4a76b3e597bf95a55f39",
		"question": "What is the state of the senator whose successor is Nathaniel P. Hill ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Nathaniel_P._Hill> . ?x <http://dbpedia.org/property/state> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "39,47"
		}, {
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Senator",
			"label": "senator",
			"seq": "25,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nathaniel_P._Hill",
			"label": "nathaniel hill",
			"seq": "52,65"
		}]
	},
	{
		"id": "b6db05781cdc46cb9c9a8c83a5ad5276",
		"question": "What is the alma mater of the James Still which is also the alma mater of Tom Maniatis?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/James_Still> <http://dbpedia.org/ontology/almaMater> ?uri. <http://dbpedia.org/resource/Tom_Maniatis> <http://dbpedia.org/property/almaMater> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater",
			"seq": "17,21"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater",
			"seq": "17,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_Still",
			"label": "still james",
			"seq": "30,40"
		}, {
			"uri": "http://dbpedia.org/resource/Tom_Maniatis",
			"label": "maniatis tom",
			"seq": "74,85"
		}]
	},
	{
		"id": "acbd41cd7e11412e8af8c45b2f8d29c6",
		"question": "Count the awards given to the recepients of the Becket fund for religious liberty.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Becket_Fund_for_Religious_Liberty> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "10,15"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Becket_Fund_for_Religious_Liberty",
			"label": "religious",
			"seq": "64,72"
		}]
	},
	{
		"id": "f602a0dfb487490098f078746235816a",
		"question": "What is the president whose lieutenants are Winston Bryant and Joe Purcell?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Winston_Bryant> . ?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Joe_Purcell> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/lieutenant",
			"label": "lieutenants",
			"seq": "28,38"
		}, {
			"uri": "http://dbpedia.org/ontology/lieutenant",
			"label": "lieutenants",
			"seq": "28,38"
		}, {
			"uri": "http://dbpedia.org/ontology/President",
			"label": "president",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Winston_Bryant",
			"label": "winston bryant",
			"seq": "44,57"
		}, {
			"uri": "http://dbpedia.org/resource/Joe_Purcell",
			"label": "purcell joe",
			"seq": "63,73"
		}]
	},
	{
		"id": "ecce3a142aae4853b61f92d76a787bfe",
		"question": "In all the grand prixes where the first team was Scuderia Ferrari, who all were the pole drivers?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/firstTeam> <http://dbpedia.org/resource/Scuderia_Ferrari> . ?x <http://dbpedia.org/property/poleDriver> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstTeam",
			"label": "first team",
			"seq": "34,43"
		}, {
			"uri": "http://dbpedia.org/property/poleDriver",
			"label": "drivers",
			"seq": "89,95"
		}, {
			"uri": "http://dbpedia.org/ontology/GrandPrix",
			"label": "grand",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Scuderia_Ferrari",
			"label": "scuderia",
			"seq": "49,56"
		}]
	},
	{
		"id": "f9931eecbd9646808d8468edd4b7cc74",
		"question": "What is the layout of the automobiles designed by Olivier Boulay?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Olivier_Boulay> . ?x <http://dbpedia.org/ontology/layout> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "38,45"
		}, {
			"uri": "http://dbpedia.org/ontology/layout",
			"label": "layout",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "automobiles",
			"seq": "26,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Olivier_Boulay",
			"label": "olivier boulay",
			"seq": "50,63"
		}]
	},
	{
		"id": "13059b538b8e43ff9915f2e14199673a",
		"question": "Who has written the mary poppins musical?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mary_Poppins_(musical)> <http://dbpedia.org/ontology/author> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "who",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mary_Poppins_(musical)",
			"label": "poppins musical mary",
			"seq": "20,39"
		}]
	},
	{
		"id": "3b73318138c443e789981e3e4d613dab",
		"question": "Cable stayed bridges have been used to cross over how many things?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/design> <http://dbpedia.org/resource/Cable-stayed_bridge> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/design",
			"label": "bridges",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/property/crosses",
			"label": "cross",
			"seq": "39,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cable-stayed_bridge",
			"label": "stayed",
			"seq": "6,11"
		}]
	},
	{
		"id": "5c175091321340c3bb110a48d78c7d74",
		"question": "Who maintains the stuff designed by the Brunei government?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Politics_of_Brunei> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "24,31"
		}, {
			"uri": "http://dbpedia.org/ontology/maintainedBy",
			"label": "maintains",
			"seq": "4,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Politics_of_Brunei",
			"label": "brunei",
			"seq": "40,45"
		}]
	},
	{
		"id": "d39b6d7deb914f70b8ca353696734df4",
		"question": "Name the common current team of the Avalon biddle and John mcGuinness ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Avalon_Biddle> <http://dbpedia.org/property/currentTeam> ?uri. <http://dbpedia.org/resource/John_McGuinness_(motorcycle_racer)> <http://dbpedia.org/property/currentTeam> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentTeam",
			"label": "current team",
			"seq": "16,27"
		}, {
			"uri": "http://dbpedia.org/property/currentTeam",
			"label": "current team",
			"seq": "16,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Avalon_Biddle",
			"label": "biddle avalon",
			"seq": "36,48"
		}, {
			"uri": "http://dbpedia.org/resource/John_McGuinness_(motorcycle_racer)",
			"label": "mcguinness",
			"seq": "59,68"
		}]
	},
	{
		"id": "1a62e676c8a44df4b06c37ad3e9e5061",
		"question": "List the origin of the weapons which were used in the American Revolutionary War.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/usedInWar> <http://dbpedia.org/resource/American_Revolutionary_War> . ?x <http://dbpedia.org/property/origin> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Weapon>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/usedInWar",
			"label": "used",
			"seq": "42,45"
		}, {
			"uri": "http://dbpedia.org/property/origin",
			"label": "origin",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Weapon",
			"label": "weapons",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Revolutionary_War",
			"label": "revolutionary american",
			"seq": "54,75"
		}]
	},
	{
		"id": "7e03672a7f204b4e97641dcfd07042af",
		"question": "To which military division does Clark Daniel Stearns belong?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Clark_Daniel_Stearns> <http://dbpedia.org/ontology/militaryBranch> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Clark_Daniel_Stearns",
			"label": "stearns daniel clark",
			"seq": "32,51"
		}]
	},
	{
		"id": "216172af192b4bbda827edcfaac62a26",
		"question": "In which race did Coneygree the racehorse and Fergie Sutherland the horse trainer participate?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fergie_Sutherland> <http://dbpedia.org/property/race> ?uri. <http://dbpedia.org/resource/Coneygree> <http://dbpedia.org/property/race> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/race",
			"label": "race",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/property/race",
			"label": "race",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fergie_Sutherland",
			"label": "sutherland fergie",
			"seq": "46,62"
		}, {
			"uri": "http://dbpedia.org/resource/Coneygree",
			"label": "coneygree",
			"seq": "18,26"
		}]
	},
	{
		"id": "86f33792c9fe4d8bab748d5b5d0d13e5",
		"question": "What are the resting places of the associates of John Betts a, Connecticut politician?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/John_Betts_(Connecticut_politician)> <http://dbpedia.org/ontology/associate> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associate",
			"label": "associates",
			"seq": "35,44"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Betts_(Connecticut_politician)",
			"label": "connecticut politician betts",
			"seq": "54,81"
		}]
	},
	{
		"id": "62d41f3590914838b15d806cdd5e887b",
		"question": "To which educational institutes is Samuel Isham associated to?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Samuel_Isham> <http://dbpedia.org/property/education> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "educational",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Samuel_Isham",
			"label": "samuel isham",
			"seq": "35,46"
		}]
	},
	{
		"id": "4d9cdb81e3394b4fab4a281827ca89fe",
		"question": "Give me a count of mammals whose family is Canidae?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Canidae>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "family",
			"seq": "33,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Mammal",
			"label": "mammals",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canidae",
			"label": "canidae",
			"seq": "43,49"
		}]
	},
	{
		"id": "b438f7d1e9084d009019042d4cae9c70",
		"question": "What sports can be played in Kharghar's schools",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Kharghar> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "in",
			"seq": "26,27"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "40,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kharghar",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0737179a939545608332c4f961a2373c",
		"question": "Name the origin of Henry Cluney ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Cluney> <http://dbpedia.org/property/origin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/origin",
			"label": "origin",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henry_Cluney",
			"label": "cluney henry",
			"seq": "19,30"
		}]
	},
	{
		"id": "bfa3a1b13bce417a9befe12eabeda20d",
		"question": "Which football team is in a city where A J Clark was a builder?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/builder> <http://dbpedia.org/resource/A._James_Clark> . ?uri <http://dbpedia.org/property/city> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "builder",
			"seq": "55,61"
		}, {
			"uri": "http://dbpedia.org/property/city",
			"label": "city",
			"seq": "28,31"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballTeam",
			"label": "football team",
			"seq": "6,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A._James_Clark",
			"label": "clark",
			"seq": "43,47"
		}]
	},
	{
		"id": "cffa17640f4e4456a5557b1ab1d65bdd",
		"question": "Who originally wrote the manga which was later illustrated by Tamon Ohta?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/illustrator> <http://dbpedia.org/resource/Tamon_Ohta> . ?x <http://dbpedia.org/property/author> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Manga>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/illustrator",
			"label": "illustrated",
			"seq": "47,57"
		}, {
			"uri": "http://dbpedia.org/property/author",
			"label": "later",
			"seq": "41,45"
		}, {
			"uri": "http://dbpedia.org/ontology/Manga",
			"label": "manga",
			"seq": "25,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tamon_Ohta",
			"label": "tamon ohta",
			"seq": "62,71"
		}]
	},
	{
		"id": "1d04a828ba6f427eac7fe74af1769003",
		"question": "What are the current music bands of Chester Bennington?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Chester_Bennington> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "current",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chester_Bennington",
			"label": "bennington chester",
			"seq": "36,53"
		}]
	},
	{
		"id": "6e7de39eb6f7486286b10b30a81637ab",
		"question": "For which team does Ramiro Pea play ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ramiro_Pe\u00f1a> <http://dbpedia.org/ontology/team> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "10,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ramiro_Pe\u00f1a",
			"label": "ramiro",
			"seq": "20,25"
		}]
	},
	{
		"id": "1cf9bbe76b1441ba8ad28dac3a1a50e8",
		"question": "How many shows is Russell Davies known for?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/property/notableworks> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "402",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "known",
			"seq": "33,37"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Russell_T_Davies",
			"label": "russell davies",
			"seq": "18,31"
		}]
	},
	{
		"id": "70ff6c1f39f74fbe9d2b6229a7b825c1",
		"question": "What is the leader of the government agency which is the military unit of Erich Kempka ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Erich_Kempka> <http://dbpedia.org/ontology/militaryUnit> ?x . ?x <http://dbpedia.org/ontology/leader> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military unit",
			"seq": "57,69"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leader",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erich_Kempka",
			"label": "kempka erich",
			"seq": "74,85"
		}]
	},
	{
		"id": "6d8299cbdb824323a42be4e46d7c60c3",
		"question": "Which offices were held by the politicians who held their allegiance to the union of american civil war?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/allegiance> <http://dbpedia.org/resource/Union_(American_Civil_War)> . ?x <http://dbpedia.org/property/office> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "58,67"
		}, {
			"uri": "http://dbpedia.org/property/office",
			"label": "offices",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "offices",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Union_(American_Civil_War)",
			"label": "american",
			"seq": "85,92"
		}]
	},
	{
		"id": "4034b4110a224b589124d0037cfd52c3",
		"question": "Which awards did the narrator of Oscar and Lucinda win?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Oscar_and_Lucinda_(film)> <http://dbpedia.org/ontology/narrator> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/narrator",
			"label": "narrator",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oscar_and_Lucinda_(film)",
			"label": "lucinda oscar",
			"seq": "33,45"
		}]
	},
	{
		"id": "222add5c80274f5b86e1221896e34865",
		"question": "Name the serving line of Daund Junction railway station?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/servingRailwayLine",
			"label": "serving railway line",
			"seq": "9,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Daund_Junction_railway_station",
			"label": "junction station railway daund",
			"seq": "25,54"
		}]
	},
	{
		"id": "80f74a9018ae47769a3c567eee3066b9",
		"question": "On what subjects was Broca's Brain written?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Broca's_Brain> <http://dbpedia.org/property/subject> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/subject",
			"label": "subjects",
			"seq": "8,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Broca's_Brain",
			"label": "broca's brain",
			"seq": "21,33"
		}]
	},
	{
		"id": "c9f88e12945544de9fc544118870c95e",
		"question": "Which purpose of the Maharashtra Chess Association is Abhijit kunte is also know for ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maharashtra_Chess_Association> <http://dbpedia.org/property/purpose> ?uri. <http://dbpedia.org/resource/Abhijit_Kunte> <http://dbpedia.org/property/knownFor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/purpose",
			"label": "purpose",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "know for",
			"seq": "76,83"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maharashtra_Chess_Association",
			"label": "maharashtra association chess",
			"seq": "21,49"
		}, {
			"uri": "http://dbpedia.org/resource/Abhijit_Kunte",
			"label": "abhijit kunte",
			"seq": "54,66"
		}]
	},
	{
		"id": "c228f0f4e7004f3d84822625c29a1e93",
		"question": "Which sitcom's company is Paramount Television and is located in Cheers Beacon hill ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television> . ?uri <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Cheers_Beacon_Hill>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "54,60"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "36,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paramount_Television",
			"label": "television paramount",
			"seq": "26,45"
		}, {
			"uri": "http://dbpedia.org/resource/Cheers_Beacon_Hill",
			"label": "cheers beacon hill",
			"seq": "65,82"
		}]
	},
	{
		"id": "553c08c614e943c5afc6b87973a5558b",
		"question": "Which leader of united states house representatives election was married to Dolley Madison ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789> <http://dbpedia.org/property/leader> ?uri. <http://dbpedia.org/resource/Dolley_Madison> <http://dbpedia.org/ontology/spouse> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leader",
			"label": "leader",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "house",
			"seq": "30,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789",
			"label": "representatives election united states house",
			"seq": "16,59"
		}, {
			"uri": "http://dbpedia.org/resource/Dolley_Madison",
			"label": "madison dolley",
			"seq": "76,89"
		}]
	},
	{
		"id": "d8a37738293349dca33bdc20e691151e",
		"question": "Name the TV shows owned by divisions of CBS?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/parent> <http://dbpedia.org/resource/CBS> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/parent",
			"label": "tv",
			"seq": "9,10"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "owned",
			"seq": "18,22"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "divisions",
			"seq": "27,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CBS",
			"label": "cbs",
			"seq": "40,42"
		}]
	},
	{
		"id": "d2f75ded680643ad862ef07d47d0df4d",
		"question": "Who was the president under whom, a governor participated in Shay's rebellion?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Shays'_Rebellion> . ?x <http://dbpedia.org/property/president> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Governor>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "the",
			"seq": "8,10"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Governor",
			"label": "governor",
			"seq": "36,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shays'_Rebellion",
			"label": "rebellion",
			"seq": "68,76"
		}]
	},
	{
		"id": "f109644380a448f0a102f3fd65f6cd48",
		"question": "What program is  presented by Brian Dunkleman and has artist as Simon Fuller?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Brian_Dunkleman> . ?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/presenter",
			"label": "presented",
			"seq": "17,25"
		}, {
			"uri": "http://dbpedia.org/property/creator",
			"label": "program",
			"seq": "5,11"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "simon",
			"seq": "64,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brian_Dunkleman",
			"label": "dunkleman brian",
			"seq": "30,44"
		}, {
			"uri": "http://dbpedia.org/resource/Simon_Fuller",
			"label": "fuller simon",
			"seq": "64,75"
		}]
	},
	{
		"id": "c8aee0b9dcfc4996bee3b2aaec26e95e",
		"question": "Is the charat district a district in peru?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Charat_District> <http://dbpedia.org/property/settlementType> <http://dbpedia.org/resource/Districts_of_Peru> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/settlementType",
			"label": "district",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charat_District",
			"label": "district charat",
			"seq": "7,21"
		}, {
			"uri": "http://dbpedia.org/resource/Districts_of_Peru",
			"label": "district peru",
			"seq": "14,26"
		}]
	},
	{
		"id": "403c3d0a80c9462f9baf9fbe7edcbff0",
		"question": "Who are the people who influenced the writers of Evenor ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Evenor_(collection)> <http://dbpedia.org/ontology/author> ?x . ?x <http://dbpedia.org/ontology/influenced> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "who",
			"seq": "0,2"
		}, {
			"uri": "http://dbpedia.org/ontology/influenced",
			"label": "influenced",
			"seq": "23,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Evenor_(collection)",
			"label": "evenor",
			"seq": "49,54"
		}]
	},
	{
		"id": "709cd39da1d043b3bd5f9c07c32b7664",
		"question": "What are some movies written by British writers?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/British_people> . ?uri <http://dbpedia.org/ontology/writer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "what",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "writers",
			"seq": "40,46"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "some",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/British_people",
			"label": "british",
			"seq": "32,38"
		}]
	},
	{
		"id": "8052e68b93484281a78f6b9bbf08ce39",
		"question": "How many different people own the Timeform award winners?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Timeform> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "award",
			"seq": "43,47"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "own",
			"seq": "26,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Timeform",
			"label": "timeform",
			"seq": "34,41"
		}]
	},
	{
		"id": "af13e3f9870d4324b50ac10156f815b4",
		"question": "List presidents of the school whose one of the president is Charles. Prince of Wales ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Charles,_Prince_of_Wales> . ?x <http://dbpedia.org/property/president> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "5,13"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "5,13"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "school",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles,_Prince_of_Wales",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "da229f76f78d4af7bc559dab6f9f3d00",
		"question": "What is the mascot of alma mater of John O Moseley?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/John_O._Moseley> <http://dbpedia.org/property/almaMater> ?x . ?x <http://dbpedia.org/property/mascot> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "22,31"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_O._Moseley",
			"label": "moseley john",
			"seq": "36,47"
		}]
	},
	{
		"id": "e00e1461078d4aacba00099390f97ced",
		"question": "Henry McDaniel's trained horses have won which awards?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Henry_McDaniel_(racehorse_trainer)> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/trainer",
			"label": "trained",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/ontology/honours",
			"label": "horses",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Horse",
			"label": "horses",
			"seq": "25,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henry_McDaniel_(racehorse_trainer)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9985f6fa134e4a0eb0cb51e125757840",
		"question": "What are the Languages of Zabbaleen ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Zabbaleen> <http://dbpedia.org/property/languages> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/languages",
			"label": "languages",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zabbaleen",
			"label": "zabbaleen",
			"seq": "26,34"
		}]
	},
	{
		"id": "498a45b06c174d1d87a2f97ad4d3cd8c",
		"question": "List down the important people of The Elders ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Elders_(organization)> <http://dbpedia.org/property/keyPeople> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people",
			"seq": "24,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Elders_(organization)",
			"label": "elders",
			"seq": "38,43"
		}]
	},
	{
		"id": "b41762bf722a4fa7a80d93b0759d28c6",
		"question": "Through which label did Mel Brooks produce his movie?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Mel_Brooks> . ?x <http://dbpedia.org/property/label> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "produce",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "14,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "mel",
			"seq": "24,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mel_Brooks",
			"label": "brooks mel",
			"seq": "24,33"
		}]
	},
	{
		"id": "58cce734a7f44455a0cf5a7d76f94bf2",
		"question": "How many scientists are known for the Manhatten Project?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Manhattan_Project>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "24,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientists",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Manhattan_Project",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4230209176f74a3380d70219147cb40e",
		"question": "Which broadcast area of Mauritius Broadcasting Corporation is also the nationality of Michael Medor ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mauritius_Broadcasting_Corporation> <http://dbpedia.org/property/broadcastArea> ?uri. <http://dbpedia.org/resource/Michael_Medor> <http://dbpedia.org/ontology/nationality> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/broadcastArea",
			"label": "broadcast",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "71,81"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mauritius_Broadcasting_Corporation",
			"label": "broadcasting corporation mauritius",
			"seq": "24,57"
		}, {
			"uri": "http://dbpedia.org/resource/Michael_Medor",
			"label": "michael medor",
			"seq": "86,98"
		}]
	},
	{
		"id": "2b868081fdbe405391ff35702728b9d0",
		"question": "Which political party of Chandra Shekhar is also the political party of Datl Satyanarayana Raju ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chandra_Shekhar> <http://dbpedia.org/ontology/otherParty> ?uri. <http://dbpedia.org/resource/Datla_Satyanarayana_Raju> <http://dbpedia.org/ontology/party> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/otherParty",
			"label": "party",
			"seq": "16,20"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "16,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chandra_Shekhar",
			"label": "shekhar chandra",
			"seq": "25,39"
		}, {
			"uri": "http://dbpedia.org/resource/Datla_Satyanarayana_Raju",
			"label": "satyanarayana raju datl",
			"seq": "72,94"
		}]
	},
	{
		"id": "772f236fcf8248868491ba2393667c59",
		"question": "How many people have been presenters for NBC shows?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/NBC> . ?x <http://dbpedia.org/property/presenter> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/channel",
			"label": "have",
			"seq": "16,19"
		}, {
			"uri": "http://dbpedia.org/property/presenter",
			"label": "presenters",
			"seq": "26,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "presenters",
			"seq": "26,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/NBC",
			"label": "nbc",
			"seq": "41,43"
		}]
	},
	{
		"id": "197329c3928340ed8151eeba459d4ce9",
		"question": "What river originates in Kingston Ontario?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Kingston,_Ontario>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceLocation",
			"label": "originates",
			"seq": "11,20"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kingston,_Ontario",
			"label": "kingston ontario",
			"seq": "25,40"
		}]
	},
	{
		"id": "8f3f49b511d24b11956f541a0bc155f5",
		"question": "What is the settlement whose neighboring municipalities is Lancy and mayor name is Esther Alder?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Lancy> . ?uri <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Esther_Alder>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/neighboringMunicipalities",
			"label": "municipalities neighboring",
			"seq": "29,54"
		}, {
			"uri": "http://dbpedia.org/ontology/mayor",
			"label": "mayor",
			"seq": "69,73"
		}, {
			"uri": "http://dbpedia.org/ontology/Settlement",
			"label": "settlement",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lancy",
			"label": "lancy",
			"seq": "59,63"
		}, {
			"uri": "http://dbpedia.org/resource/Esther_Alder",
			"label": "esther alder",
			"seq": "83,94"
		}]
	},
	{
		"id": "9d8915a4779f49148599be5ab27a571d",
		"question": "What is the television show whose executive producer is Douglas Netter?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Douglas_Netter>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "34,51"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Douglas_Netter",
			"label": "douglas netter",
			"seq": "56,69"
		}]
	},
	{
		"id": "e631c13576674e3a99d3ba6ec5186338",
		"question": "Whihc alma mater of angela Trusty is also the training center of David Scherman ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Scherman> <http://dbpedia.org/ontology/training> ?uri. <http://dbpedia.org/resource/Angela_Trusty> <http://dbpedia.org/ontology/almaMater> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/training",
			"label": "training",
			"seq": "46,53"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Scherman",
			"label": "scherman david",
			"seq": "65,78"
		}, {
			"uri": "http://dbpedia.org/resource/Angela_Trusty",
			"label": "trusty angela",
			"seq": "20,32"
		}]
	},
	{
		"id": "ead02f462db84844be242c56c4066037",
		"question": "How many producers have worked for FremantleMedia productions?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/company> <http://dbpedia.org/resource/FremantleMedia> . ?x <http://dbpedia.org/ontology/producer> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producers",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/FremantleMedia",
			"label": "fremantlemedia",
			"seq": "35,48"
		}]
	},
	{
		"id": "b9c7b8e256e64e948ef9b537af9aa574",
		"question": "Which successor of Philippine Ports Authority is the state of origin of Ruben J. Villote ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philippine_Ports_Authority> <http://dbpedia.org/ontology/successor> ?uri. <http://dbpedia.org/resource/Ruben_J._Villote> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "origin state",
			"seq": "53,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Philippine_Ports_Authority",
			"label": "philippine authority ports",
			"seq": "19,44"
		}, {
			"uri": "http://dbpedia.org/resource/Ruben_J._Villote",
			"label": "villote ruben",
			"seq": "72,84"
		}]
	},
	{
		"id": "ea6c7a88f9a643beb176f5c9e5c2a632",
		"question": "Who is the spouse of Willian Menalaus?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Menelaus> <http://dbpedia.org/ontology/spouse> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "spouse",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Menelaus",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "dafa96a08d1e4268be2cd01faa56f652",
		"question": "What television show is aired on channel Sirius XM Holdings?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/Sirius_XM_Holdings>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/channel",
			"label": "channel",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "5,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sirius_XM_Holdings",
			"label": "holdings sirius",
			"seq": "41,55"
		}]
	},
	{
		"id": "ea9a58014dfc4200ba7ad903db937419",
		"question": "Is Joe Schilling the trainer of Nick Diaz?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Nick_Diaz> <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Joe_Schilling> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/trainer",
			"label": "trainer",
			"seq": "21,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nick_Diaz",
			"label": "nick diaz",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/resource/Joe_Schilling",
			"label": "schilling joe",
			"seq": "3,15"
		}]
	},
	{
		"id": "e491eb48c1824d5b8ae4e30f80a67e90",
		"question": "Name the associate acts of  Martin Pugh?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Pugh> <http://dbpedia.org/property/associatedActs> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "associate acts",
			"seq": "9,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Martin_Pugh",
			"label": "martin pugh",
			"seq": "28,38"
		}]
	},
	{
		"id": "151691666bec45238d4879d05f239dd4",
		"question": "Which domain's journals did Willard Fiske edit?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/editor> <http://dbpedia.org/resource/Willard_Fiske> . ?x <http://dbpedia.org/property/discipline> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editor",
			"label": "edit",
			"seq": "42,45"
		}, {
			"uri": "http://dbpedia.org/property/discipline",
			"label": "fiske",
			"seq": "36,40"
		}, {
			"uri": "http://dbpedia.org/ontology/AcademicJournal",
			"label": "journals",
			"seq": "15,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Willard_Fiske",
			"label": "willard fiske",
			"seq": "28,40"
		}]
	},
	{
		"id": "d27aec4554814245aba1890efc687d41",
		"question": "Is James Hetfield a band member of Metallica?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Metallica> <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/James_Hetfield>  . }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "member band",
			"seq": "20,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Metallica",
			"label": "metallica",
			"seq": "35,43"
		}, {
			"uri": "http://dbpedia.org/resource/James_Hetfield",
			"label": "hetfield james",
			"seq": "3,16"
		}]
	},
	{
		"id": "8d0300b08e544d4a98727862063b751f",
		"question": "Which baseball team is managed by Bruce Bochy?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Bruce_Bochy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manager",
			"label": "managed",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballTeam",
			"label": "baseball team",
			"seq": "6,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bruce_Bochy",
			"label": "bruce bochy",
			"seq": "34,44"
		}]
	},
	{
		"id": "2a230169f9384e17b2a51ca0553f5fd4",
		"question": "Name the F1 racer with relative as Ralf Schumacher and has child named Mick Schumacher?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ralf_Schumacher> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Mick_Schumacher>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FormulaOneRacer>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relative",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/ontology/child",
			"label": "child",
			"seq": "59,63"
		}, {
			"uri": "http://dbpedia.org/ontology/FormulaOneRacer",
			"label": "racer",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ralf_Schumacher",
			"label": "schumacher",
			"seq": "40,49"
		}, {
			"uri": "http://dbpedia.org/resource/Mick_Schumacher",
			"label": "schumacher mick",
			"seq": "40,54"
		}]
	},
	{
		"id": "a0cdc0611f2c4b879e0205a8d1f477ba",
		"question": "Where is Hafthor Julius Bjornsson from?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hafth\u00f3r_J\u00fal\u00edus_Bj\u00f6rnsson> <http://dbpedia.org/ontology/stateOfOrigin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "hafthor",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hafth\u00f3r_J\u00fal\u00edus_Bj\u00f6rnsson",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f9b9f6eac29a4d1190ce28061725f806",
		"question": "How many islands belong to archipelagos located in the pacific?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Pacific_Ocean> . ?uri <http://dbpedia.org/property/archipelago> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "40,46"
		}, {
			"uri": "http://dbpedia.org/property/archipelago",
			"label": "archipelagos",
			"seq": "27,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Island",
			"label": "islands",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pacific_Ocean",
			"label": "pacific",
			"seq": "55,61"
		}]
	},
	{
		"id": "430faddac48e4969b0732a137f2dd260",
		"question": "How many other important things have been written by the creator of Stuart Alan Jones?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Stuart_Alan_Jones> <http://dbpedia.org/ontology/creator> ?x . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "creator",
			"seq": "57,63"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "other",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stuart_Alan_Jones",
			"label": "stuart jones alan",
			"seq": "68,84"
		}]
	},
	{
		"id": "744c835886844eeca2d45ce92e2d5c28",
		"question": "What is the person known for who is the movie director of Sleepy-Time Squirrel ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Sleepy-Time_Squirrel> <http://dbpedia.org/property/director> ?x . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/director",
			"label": "director",
			"seq": "46,53"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "19,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sleepy-Time_Squirrel",
			"label": "sleepy-time squirrel",
			"seq": "58,77"
		}]
	},
	{
		"id": "41e26ecabe2c4da4a506fd9fee06b197",
		"question": "What kind of music is produced at the record label founded by Andre Bourgeois?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Andr\u00e9_Bourgeois> . ?x <http://dbpedia.org/ontology/genre> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founded",
			"seq": "51,57"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "andre",
			"seq": "62,66"
		}, {
			"uri": "http://dbpedia.org/ontology/RecordLabel",
			"label": "record label",
			"seq": "38,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Andr\u00e9_Bourgeois",
			"label": "bourgeois",
			"seq": "68,76"
		}]
	},
	{
		"id": "34a0e332264149388873f74ac371829a",
		"question": "Which political party of Arunachal Pradesh Legislative Assembly election, 2014 was the leader of Rishikesh ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arunachal_Pradesh_Legislative_Assembly_election,_2014> <http://dbpedia.org/property/party> ?uri. <http://dbpedia.org/resource/Rishikesh> <http://dbpedia.org/ontology/leaderName> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "16,20"
		}, {
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "leader",
			"seq": "87,92"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arunachal_Pradesh_Legislative_Assembly_election,_2014",
			"label": "legislative election, arunachal assembly pradesh",
			"seq": "25,72"
		}, {
			"uri": "http://dbpedia.org/resource/Rishikesh",
			"label": "rishikesh",
			"seq": "97,105"
		}]
	},
	{
		"id": "482f01e78dbf4a2595e15e5c9ad32ab3",
		"question": "What shows used to air on the channel which was earlier known as \"The Comedy Central\"?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/The_Comedy_Channel_(United_States)> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "central\"",
			"seq": "77,84"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "earlier",
			"seq": "48,54"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Comedy_Channel_(United_States)",
			"label": "channel comedy",
			"seq": "30,43"
		}]
	},
	{
		"id": "96b03adc9d314bfa8a97e5d5d784a62e",
		"question": "What is the common battle fought by Stephen Urban and Ali Habib Mahmud ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stephen_Urban> <http://dbpedia.org/ontology/battle> ?uri. <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "battle",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "battle",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stephen_Urban",
			"label": "stephen urban",
			"seq": "36,48"
		}, {
			"uri": "http://dbpedia.org/resource/Ali_Habib_Mahmud",
			"label": "mahmud habib ali",
			"seq": "54,69"
		}]
	},
	{
		"id": "ecbda26b25fc4319a9c2f2b629abdd69",
		"question": "Who is the cover artist of Doctor Mirabilis (novel) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Doctor_Mirabilis_(novel)> <http://dbpedia.org/property/coverArtist> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coverArtist",
			"label": "artist cover",
			"seq": "11,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Doctor_Mirabilis_(novel)",
			"label": "mirabilis (novel) doctor",
			"seq": "27,50"
		}]
	},
	{
		"id": "5a09891ab68147329f938e2031e236a0",
		"question": "Where did Whitney Wistert debut?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Whitey_Wistert> <http://dbpedia.org/property/debutteam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut",
			"seq": "26,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Whitey_Wistert",
			"label": "wistert",
			"seq": "18,24"
		}]
	},
	{
		"id": "d0ef14f4b99740528d80da61bfe95c01",
		"question": "Does Kirk Hammett play the Gibson Flying V?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Kirk_Hammett> <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Gibson_Flying_V> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/instrument",
			"label": "gibson",
			"seq": "27,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kirk_Hammett",
			"label": "hammett kirk",
			"seq": "5,16"
		}, {
			"uri": "http://dbpedia.org/resource/Gibson_Flying_V",
			"label": "gibson flying",
			"seq": "27,39"
		}]
	},
	{
		"id": "d6d6f6e87c26462fb54e12d67e50ba61",
		"question": "Name the sport league of Hampton Roads Rhinos ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hampton_Roads_Rhinos> <http://dbpedia.org/property/league> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "league",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hampton_Roads_Rhinos",
			"label": "hampton rhinos roads",
			"seq": "25,44"
		}]
	},
	{
		"id": "55717a4e06d940f9a6e2d0fee2b4709d",
		"question": "What novels are belong to the genre of Utopian and dystopian fiction?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Utopian_and_dystopian_fiction> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/literaryGenre",
			"label": "genre",
			"seq": "30,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Utopian_and_dystopian_fiction",
			"label": "dystopian utopian fiction and",
			"seq": "39,67"
		}]
	},
	{
		"id": "e9566c930e254ae2893011a6acc92008",
		"question": "For all the senators who once studied in Sturm College of Law, give their burial place?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Sturm_College_of_Law> . ?x <http://dbpedia.org/property/restingplace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "their",
			"seq": "68,72"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "place",
			"seq": "81,85"
		}, {
			"uri": "http://dbpedia.org/ontology/Senator",
			"label": "senators",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sturm_College_of_Law",
			"label": "college sturm",
			"seq": "41,53"
		}]
	},
	{
		"id": "1e42c94409f64658a8d74bc8554ae63d",
		"question": "What is the programme format of WWTR ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WWTR> <http://dbpedia.org/ontology/programmeFormat> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/programmeFormat",
			"label": "programme format",
			"seq": "12,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WWTR",
			"label": "wwtr",
			"seq": "32,35"
		}]
	},
	{
		"id": "603c322f0c284704ba4d70f749b724b2",
		"question": "What is the home ground of the clubs managed by Ciao Zanardi?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Caio_Zanardi> . ?x <http://dbpedia.org/ontology/ground> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manager",
			"label": "managed",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/ontology/ground",
			"label": "ground",
			"seq": "17,22"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClubSeason",
			"label": "clubs",
			"seq": "31,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Caio_Zanardi",
			"label": "zanardi",
			"seq": "53,59"
		}]
	},
	{
		"id": "f78b3fe9e8724eb4810bdeed1a83e057",
		"question": "Which people are known for appearing on the television show Dragon's Den?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Dragons'_Den_(UK_TV_series)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "17,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "appearing",
			"seq": "27,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dragons'_Den_(UK_TV_series)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "8504746ca9ea4d50aeb241b91e816acc",
		"question": "How many railway lines go through the station maintained by Public transport authority of western australia?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/Public_Transport_Authority_(Western_Australia)> . ?x <http://dbpedia.org/ontology/servingRailwayLine> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayLine>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningOrganisation",
			"label": "station",
			"seq": "38,44"
		}, {
			"uri": "http://dbpedia.org/ontology/servingRailwayLine",
			"label": "railway",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/RailwayLine",
			"label": "railway",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Public_Transport_Authority_(Western_Australia)",
			"label": "transport authority australia western public",
			"seq": "60,103"
		}]
	},
	{
		"id": "f0185fa38b024eb1acf082b227049b42",
		"question": "Name the university of Alexandre Tichonov ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alexandre_Tichonov> <http://dbpedia.org/property/university> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/university",
			"label": "university",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alexandre_Tichonov",
			"label": "alexandre tichonov",
			"seq": "23,40"
		}]
	},
	{
		"id": "0ac2d94a73f64e1181b207736b31a127",
		"question": "What subjects does the subsequent work of The Dragons of Eden deals with  ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Dragons_of_Eden> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/property/subject> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent",
			"seq": "23,32"
		}, {
			"uri": "http://dbpedia.org/property/subject",
			"label": "subjects",
			"seq": "5,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Dragons_of_Eden",
			"label": "dragons eden",
			"seq": "46,57"
		}]
	},
	{
		"id": "a8d5e073c778486bb2d6db640cf49768",
		"question": "What  awards did the cast members of Gods of Egypt win?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Gods_of_Egypt_(film)> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "win",
			"seq": "51,53"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gods_of_Egypt_(film)",
			"label": "egypt gods of",
			"seq": "34,46"
		}]
	},
	{
		"id": "793d70e3bef54e1eaf081dc7e518ec08",
		"question": "Name the office of Richard Coke ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Richard_Coke> <http://dbpedia.org/property/office> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/office",
			"label": "office",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Richard_Coke",
			"label": "richard coke",
			"seq": "19,30"
		}]
	},
	{
		"id": "a20c86dfc1f64b2fb91429ef3c3c2445",
		"question": "Carl Sagan has penned books on how many matters?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Carl_Sagan> . ?x <http://dbpedia.org/property/subject> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "matters",
			"seq": "40,46"
		}, {
			"uri": "http://dbpedia.org/property/subject",
			"label": "has",
			"seq": "11,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carl_Sagan",
			"label": "sagan carl",
			"seq": "0,9"
		}]
	},
	{
		"id": "df37b7d93b35429b9671ea6a2a572b06",
		"question": "what are some units udner the US department of navy?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_the_Navy> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commandStructure",
			"label": "are",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Department_of_the_Navy",
			"label": "department",
			"seq": "33,42"
		}]
	},
	{
		"id": "64a7ff80505c4d709cd0b19106d1cf2d",
		"question": "Which allegiance of the John Kotelawala is also the  sovereign state of the Sanath Weerakoon ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Kotelawala> <http://dbpedia.org/property/allegiance> ?uri. <http://dbpedia.org/resource/Sanath_Weerakoon> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "john",
			"seq": "24,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Kotelawala",
			"label": "kotelawala john",
			"seq": "24,38"
		}, {
			"uri": "http://dbpedia.org/resource/Sanath_Weerakoon",
			"label": "weerakoon sanath",
			"seq": "76,91"
		}]
	},
	{
		"id": "9e5f22b859b14a329ce320977751c4ef",
		"question": "Which city's teams have been coached by Gary Kubaik?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Gary_Kubiak> . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coach",
			"label": "coached",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "city's",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gary_Kubiak",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "bfebc6df79f647e8b83b027420295a9d",
		"question": "What sport has made Eric Schiller famous, and has employed Craig Van Tibury?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Craig_Van_Tilbury> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Eric_Schiller> <http://dbpedia.org/ontology/knownFor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "craig",
			"seq": "59,63"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "sport",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Craig_Van_Tilbury",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Eric_Schiller",
			"label": "schiller eric",
			"seq": "20,32"
		}]
	},
	{
		"id": "80c709f991704001a1b7c97b46375fb5",
		"question": "Which part of the US political framework did Arthur Bagby and Thomas H hicks both serve?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arthur_P._Bagby> <http://dbpedia.org/property/order> ?uri. <http://dbpedia.org/resource/Thomas_Holliday_Hicks> <http://dbpedia.org/property/order> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/order",
			"label": "serve",
			"seq": "82,86"
		}, {
			"uri": "http://dbpedia.org/property/order",
			"label": "serve",
			"seq": "82,86"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arthur_P._Bagby",
			"label": "arthur bagby",
			"seq": "45,56"
		}, {
			"uri": "http://dbpedia.org/resource/Thomas_Holliday_Hicks",
			"label": "thomas hicks",
			"seq": "62,73"
		}]
	},
	{
		"id": "e9737da1b4f945b39ad2ed1d09ad062b",
		"question": "Who gave the voice to the characters sculpted by Clamp?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Clamp_(manga_artists)> . ?x <http://dbpedia.org/ontology/voice> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "to",
			"seq": "19,20"
		}, {
			"uri": "http://dbpedia.org/ontology/voice",
			"label": "voice",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "characters",
			"seq": "26,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Clamp_(manga_artists)",
			"label": "clamp",
			"seq": "49,53"
		}]
	},
	{
		"id": "2e12375aa47a42acaeab4fdba7d3890c",
		"question": "What is the country whose administrative centre is Hagta, Guam?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Hag\u00e5t\u00f1a,_Guam>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "hagta,",
			"seq": "51,56"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hag\u00e5t\u00f1a,_Guam",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "47eda5b35417485b88697d20e48839d0",
		"question": "What is the political party of the of Bengalis ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/ethnicity> <http://dbpedia.org/resource/Bengalis> . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ethnicity",
			"label": "bengalis",
			"seq": "38,45"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "22,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bengalis",
			"label": "bengalis",
			"seq": "38,45"
		}]
	},
	{
		"id": "53e6578861dc4630ad27012f1696ddcf",
		"question": "Which political party of kumta had affiliation with Indian general election, 2004 (Andhra Pradesh) ",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/property/governmentType> ?uri. <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governmentType",
			"label": "general",
			"seq": "59,65"
		}, {
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "affiliation",
			"seq": "35,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kumta",
			"label": "kumta",
			"seq": "25,29"
		}, {
			"uri": "http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)",
			"label": "election, pradesh) general (andhra",
			"seq": "59,92"
		}]
	},
	{
		"id": "7d1d3175ed2b434ab6460785837338f2",
		"question": "Was Writings and Drawings illustrated by Bob Dylan?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Writings_and_Drawings> <http://dbpedia.org/property/illustrator> <http://dbpedia.org/resource/Bob_Dylan> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/illustrator",
			"label": "illustrated",
			"seq": "26,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Writings_and_Drawings",
			"label": "writings drawings",
			"seq": "4,20"
		}, {
			"uri": "http://dbpedia.org/resource/Bob_Dylan",
			"label": "dylan bob",
			"seq": "41,49"
		}]
	},
	{
		"id": "69b624f3af604a859f19a2adc6ffb845",
		"question": "Which composer of Motorpsycho Nitemare has also composed The time are A-Changing ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?uri. <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/ontology/musicBy> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/composer",
			"label": "composer",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/musicBy",
			"label": "which",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Motorpsycho_Nitemare",
			"label": "motorpsycho nitemare",
			"seq": "18,37"
		}, {
			"uri": "http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "3423cef33b1146fe9432cb59652d6c94",
		"question": "How many major shrine are there, of the saints whose beatified by Pope Pius XI ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/beatifiedBy> <http://dbpedia.org/resource/Pope_Pius_XI> . ?x <http://dbpedia.org/ontology/majorShrine> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/beatifiedBy",
			"label": "beatified by",
			"seq": "53,64"
		}, {
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrine major",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pope_Pius_XI",
			"label": "pope pius xi",
			"seq": "66,77"
		}]
	},
	{
		"id": "9e935a3e2d31428c87992e9f8bca00bd",
		"question": "List the guest of the show The Other Side (The Outer Limits)?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Other_Side_(The_Outer_Limits)> <http://dbpedia.org/property/guests> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/guests",
			"label": "guest",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Other_Side_(The_Outer_Limits)",
			"label": "limits) outer other side (the",
			"seq": "31,59"
		}]
	},
	{
		"id": "9ae7378d981c4a9ca527a177a3042a8e",
		"question": "Who are the characters of Batman Live?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/characters",
			"label": "characters",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Batman_Live",
			"label": "batman live",
			"seq": "26,36"
		}]
	},
	{
		"id": "329c2825367b4e55a7788f13852af6e8",
		"question": "Who is buried at the place governed by National Park Service?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/National_Park_Service> . ?uri <http://dbpedia.org/property/restingplace> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governed",
			"seq": "27,34"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "place",
			"seq": "21,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Park_Service",
			"label": "national service park",
			"seq": "39,59"
		}]
	},
	{
		"id": "fef09ad090cf49e09d0a7cc2b6befc0c",
		"question": "Count all the things licensed as Software as a service.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/license> <http://dbpedia.org/resource/Software_as_a_service>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/license",
			"label": "licensed",
			"seq": "21,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Software_as_a_service",
			"label": "software",
			"seq": "33,40"
		}]
	},
	{
		"id": "be7a77cb153746509db12c6ab5f4b69f",
		"question": "What show  has theme music composer as Ron Grainer and at the same time  related to Class (2016 TV series)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer> . ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Class_(2016_TV_series)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composer theme music",
			"seq": "15,34"
		}, {
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "73,79"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ron_Grainer",
			"label": "grainer ron",
			"seq": "39,49"
		}, {
			"uri": "http://dbpedia.org/resource/Class_(2016_TV_series)",
			"label": "series) class (2016",
			"seq": "84,102"
		}]
	},
	{
		"id": "600d505ebfd1495fb2158a5b52fc4045",
		"question": "How many different kinds of games are published by Interplay Entertainment?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/property/genre> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "published",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "are",
			"seq": "34,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Interplay_Entertainment",
			"label": "entertainment interplay",
			"seq": "51,73"
		}]
	},
	{
		"id": "0651212fb47546e089477eecc4777e69",
		"question": "How many different kinds of softwares have been released under the GPL license?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/license> <http://dbpedia.org/resource/GNU_General_Public_License> . ?x <http://dbpedia.org/ontology/genre> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/license",
			"label": "license",
			"seq": "71,77"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "license",
			"seq": "71,77"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/GNU_General_Public_License",
			"label": "license",
			"seq": "71,77"
		}]
	},
	{
		"id": "d505d3763ec449168b961367ed3a424b",
		"question": "Who are the stars of the movies which are distributed by Artisan Entertainment ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Artisan_Entertainment> . ?x <http://dbpedia.org/ontology/starring> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "42,52"
		}, {
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "stars",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "18,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Artisan_Entertainment",
			"label": "entertainment artisan",
			"seq": "57,77"
		}]
	},
	{
		"id": "726523874a964323aa5d43c5af238c05",
		"question": "List the schools of the athlete with Balgowan as one of the school ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/school> <http://dbpedia.org/resource/Balgowan,_KwaZulu-Natal> . ?x <http://dbpedia.org/property/school> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/school",
			"label": "school",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/property/school",
			"label": "school",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "athlete",
			"seq": "24,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Balgowan,_KwaZulu-Natal",
			"label": "balgowan",
			"seq": "37,44"
		}]
	},
	{
		"id": "b60924d7dde34c5d914cafff9edd9023",
		"question": "What awards have been once awarded to Ingmar Bergman, and have employed the service of Laemmle Theatres?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ingmar_Bergman> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Laemmle_Theatres> <http://dbpedia.org/ontology/service> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/service",
			"label": "service",
			"seq": "76,82"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ingmar_Bergman",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Laemmle_Theatres",
			"label": "theatres laemmle",
			"seq": "87,102"
		}]
	},
	{
		"id": "53a85329c96443f8b76e32e8ee53d78c",
		"question": "Who produced wizards vs aliens?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wizards_vs_Aliens> <http://dbpedia.org/ontology/producer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "produced",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wizards_vs_Aliens",
			"label": "wizards aliens",
			"seq": "13,26"
		}]
	},
	{
		"id": "515670bd31cf40348dbbd059c8876662",
		"question": "Which team did Bill Murphy and Jean Segura play for?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bill_Murphy_(baseball)> <http://dbpedia.org/ontology/debutTeam> ?uri. <http://dbpedia.org/resource/Jean_Segura> <http://dbpedia.org/ontology/team> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "team",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bill_Murphy_(baseball)",
			"label": "murphy bill",
			"seq": "15,25"
		}, {
			"uri": "http://dbpedia.org/resource/Jean_Segura",
			"label": "segura jean",
			"seq": "31,41"
		}]
	},
	{
		"id": "fb00be1561c84ae488c92a78ab96340e",
		"question": "What is the draft team of Gene Conley ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gene_Conley> <http://dbpedia.org/property/draftTeam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "draft team",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gene_Conley",
			"label": "conley gene",
			"seq": "26,36"
		}]
	},
	{
		"id": "cfdba0daa427405b9b5b656f75e5a771",
		"question": "Which coach of Marquette Golden Eagles men's basketball team is also the head coach  of Virginia Tech Hokies men's basketball team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2014\u201315_Virginia_Tech_Hokies_men's_basketball_team> <http://dbpedia.org/property/headcoach> ?uri. <http://dbpedia.org/resource/2012\u201313_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/ontology/coach> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headcoach",
			"label": "coach",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/coach",
			"label": "coach",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2014\u201315_Virginia_Tech_Hokies_men's_basketball_team",
			"label": "basketball virginia hokies",
			"seq": "45,70"
		}, {
			"uri": "http://dbpedia.org/resource/2012\u201313_Marquette_Golden_Eagles_men's_basketball_team",
			"label": "basketball marquette golden eagles",
			"seq": "15,48"
		}]
	},
	{
		"id": "2f848ce8ed2a4a2da8c4b8c892a738aa",
		"question": "What location country of AH141 is also the nation of malaysia Junior hockey league ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/AH141> <http://dbpedia.org/ontology/county> ?uri. <http://dbpedia.org/resource/Malaysia_Junior_Hockey_League> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/county",
			"label": "country",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/AH141",
			"label": "ah141",
			"seq": "25,29"
		}, {
			"uri": "http://dbpedia.org/resource/Malaysia_Junior_Hockey_League",
			"label": "malaysia league junior hockey",
			"seq": "53,81"
		}]
	},
	{
		"id": "61b0b02309714b1ab6e78e1d416a872f",
		"question": "On how many subjects has Random house publishers published books?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Random_House> . ?x <http://dbpedia.org/property/subject> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/publisher",
			"label": "publishers",
			"seq": "38,47"
		}, {
			"uri": "http://dbpedia.org/property/subject",
			"label": "subjects",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Random_House",
			"label": "random house",
			"seq": "25,36"
		}]
	},
	{
		"id": "39bdbe59a40c47c7afc10b6b85c1286a",
		"question": "What is the common nationality of Funny Face a comedian and that of Georgina Theodora Wood ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Funny_Face_(comedian)> <http://dbpedia.org/property/nationality> ?uri. <http://dbpedia.org/resource/Georgina_Theodora_Wood> <http://dbpedia.org/ontology/nationality> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationality",
			"label": "nationality",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "19,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Funny_Face_(comedian)",
			"label": "comedian funny face",
			"seq": "34,52"
		}, {
			"uri": "http://dbpedia.org/resource/Georgina_Theodora_Wood",
			"label": "theodora georgina wood",
			"seq": "68,89"
		}]
	},
	{
		"id": "89d174ad69534ed48313311864b3fca6",
		"question": "Where do the judge advocate general corps live?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/rank> <http://dbpedia.org/resource/Judge_Advocate_General's_Corps> . ?x <http://dbpedia.org/property/residence> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/rank",
			"label": "general",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/property/residence",
			"label": "general",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Judge_Advocate_General's_Corps",
			"label": "advocate general judge corps",
			"seq": "13,40"
		}]
	},
	{
		"id": "4988ef2fd0df4d35b243ffe31755c171",
		"question": "What are the things Eric Schiller known for ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eric_Schiller> <http://dbpedia.org/ontology/knownFor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "34,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eric_Schiller",
			"label": "schiller eric",
			"seq": "20,32"
		}]
	},
	{
		"id": "0961c5610ded49229b123d87522e0ce9",
		"question": "Does Walt Disney Studio have a subsidiary called PixarCascadia_",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Walt_Disney_Studios_(division)> <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Pixar> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsidiary",
			"label": "subsidiary",
			"seq": "31,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Walt_Disney_Studios_(division)",
			"label": "studio disney walt",
			"seq": "5,22"
		}, {
			"uri": "http://dbpedia.org/resource/Pixar",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "eda67bd4365e424cb594decde543c99e",
		"question": "Which nearest city of Jurgens Site is the death plce of Jimmie Heuga ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jurgens_Site> <http://dbpedia.org/property/nearestCity> ?uri. <http://dbpedia.org/resource/Jimmie_Heuga> <http://dbpedia.org/property/deathPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nearestCity",
			"label": "nearest city",
			"seq": "6,17"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "death",
			"seq": "42,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jurgens_Site",
			"label": "jurgens site",
			"seq": "22,33"
		}, {
			"uri": "http://dbpedia.org/resource/Jimmie_Heuga",
			"label": "jimmie heuga",
			"seq": "56,67"
		}]
	},
	{
		"id": "533717b10afe49fb9b10cc531f19ce41",
		"question": "On which river are there things belonging to zambezi river authority?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Zambezi_River_Authority> . ?x <http://dbpedia.org/ontology/river> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "on",
			"seq": "0,1"
		}, {
			"uri": "http://dbpedia.org/ontology/river",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zambezi_River_Authority",
			"label": "authority zambezi river",
			"seq": "9,31"
		}]
	},
	{
		"id": "f75be1c0090f4e99b6015f9af7d2589d",
		"question": "What are the nearest city to the historic places whose one of the nearest city is Wisconsin?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/nearestCity> <http://dbpedia.org/resource/Wisconsin> . ?x <http://dbpedia.org/property/nearestCity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HistoricPlace>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "nearest",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/property/nearestCity",
			"label": "nearest",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/HistoricPlace",
			"label": "historic",
			"seq": "33,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wisconsin",
			"label": "wisconsin",
			"seq": "82,90"
		}]
	},
	{
		"id": "df34b20d025a49648aa1d1d8d09d8533",
		"question": "Who is the leader of the Kriminalpolizei and Ordnungspolizei?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kriminalpolizei> <http://dbpedia.org/ontology/leader> ?uri. <http://dbpedia.org/resource/Ordnungspolizei> <http://dbpedia.org/ontology/leader> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leader",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leader",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kriminalpolizei",
			"label": "kriminalpolizei",
			"seq": "25,39"
		}, {
			"uri": "http://dbpedia.org/resource/Ordnungspolizei",
			"label": "ordnungspolizei",
			"seq": "45,59"
		}]
	},
	{
		"id": "ee0133ba177848fdaa63a9a0a5fc217d",
		"question": "Does vance johnson play as a wide receiver?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Vance_Johnson> <http://dbpedia.org/ontology/position> <http://dbpedia.org/resource/Wide_receiver> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/position",
			"label": "johnson",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vance_Johnson",
			"label": "johnson vance",
			"seq": "5,17"
		}, {
			"uri": "http://dbpedia.org/resource/Wide_receiver",
			"label": "receiver wide",
			"seq": "29,41"
		}]
	},
	{
		"id": "80973c292e414e8890ed3a1de7f362bf",
		"question": "To which political party does Virendra Kataria belongs ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Virendra_Kataria> <http://dbpedia.org/property/party> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Virendra_Kataria",
			"label": "virendra kataria",
			"seq": "30,45"
		}]
	},
	{
		"id": "65cb7ea9917b44e29c8adbc3e95d1470",
		"question": "How many different products are there of the companies located in the US?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/product> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "55,61"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "products",
			"seq": "19,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "85d2a3aff592486fbe48e0f6d67cebf3",
		"question": "Which are the countires where Pioneer Corporation has flourished?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/country",
			"label": "countires",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pioneer_Corporation",
			"label": "corporation pioneer",
			"seq": "30,48"
		}]
	},
	{
		"id": "76fc4d62d2b74c798a3b6b61c4d1ff6f",
		"question": "List all the former broadcast network of WMDN ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WMDN> <http://dbpedia.org/ontology/formerBroadcastNetwork> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerBroadcastNetwork",
			"label": "broadcast network former",
			"seq": "13,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WMDN",
			"label": "wmdn",
			"seq": "41,44"
		}]
	},
	{
		"id": "406e904e414b410dadccc945a9ed205b",
		"question": "Which ethnicity do Linda Hogan and Riley Reid come from?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Hogan> <http://dbpedia.org/property/ethnicity> ?uri. <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/property/ethnicity> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/ethnicity",
			"label": "ethnicity",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/property/ethnicity",
			"label": "ethnicity",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Linda_Hogan",
			"label": "linda hogan",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/resource/Riley_Reid",
			"label": "riley reid",
			"seq": "35,44"
		}]
	},
	{
		"id": "70fe1d61709e49bd895d4cb06d045664",
		"question": "Who are the people which were the influencer of the person, who influenced Costanzo Preve ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Costanzo_Preve> <http://dbpedia.org/ontology/influencedBy> ?x . ?x <http://dbpedia.org/ontology/influencedBy> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/influencedBy",
			"label": "influenced",
			"seq": "64,73"
		}, {
			"uri": "http://dbpedia.org/ontology/influencedBy",
			"label": "influenced",
			"seq": "64,73"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person,",
			"seq": "52,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Costanzo_Preve",
			"label": "costanzo preve",
			"seq": "75,88"
		}]
	},
	{
		"id": "31afaf9538e24202876296db1b6f2b87",
		"question": "Which city do both Arthur Ross and Edward Niesen come from?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arthur_A._Ross> <http://dbpedia.org/property/placeOfBirth> ?uri. <http://dbpedia.org/resource/Edward_Niesen> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "arthur",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "both",
			"seq": "14,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arthur_A._Ross",
			"label": "arthur ross",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/resource/Edward_Niesen",
			"label": "niesen edward",
			"seq": "35,47"
		}]
	},
	{
		"id": "75d8ae08f021434f8b64b8c089efb56e",
		"question": "Who is married to Tony Ramo",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Tony_Romo>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/partner",
			"label": "married",
			"seq": "7,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tony_Romo",
			"label": "tony",
			"seq": "18,21"
		}]
	},
	{
		"id": "ce59dab6544f465aa821fd5c205187fe",
		"question": "Which county of Tremont Avenue is also the birht place of Ron Galotti ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tremont_Avenue> <http://dbpedia.org/property/counties> ?uri. <http://dbpedia.org/resource/Ron_Galotti> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/counties",
			"label": "county",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "place",
			"seq": "49,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tremont_Avenue",
			"label": "tremont avenue",
			"seq": "16,29"
		}, {
			"uri": "http://dbpedia.org/resource/Ron_Galotti",
			"label": "galotti",
			"seq": "62,68"
		}]
	},
	{
		"id": "2f6ed9508dab4dc695a219ed4c3c90b6",
		"question": "What is the debut team of the gridiron football player who coached the 1931 Staten Island Stapletons season ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/1931_Staten_Island_Stapletons_season> <http://dbpedia.org/ontology/coach> ?x . ?x <http://dbpedia.org/property/debutteam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GridironFootballPlayer>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coach",
			"label": "coached",
			"seq": "59,65"
		}, {
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut team",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/GridironFootballPlayer",
			"label": "gridiron football player",
			"seq": "30,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1931_Staten_Island_Stapletons_season",
			"label": "stapletons staten season island 1931",
			"seq": "71,106"
		}]
	},
	{
		"id": "3e54cd98e79d4fa6b3b2dc7f2674c5d8",
		"question": "Who wrote Heroman?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heroman> <http://dbpedia.org/property/author> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "who",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Heroman",
			"label": "heroman",
			"seq": "10,16"
		}]
	},
	{
		"id": "d21e712713ec4e57824cf6b277c93553",
		"question": "What is the region of the successor of Mr. Jerome B. Chaffee ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Jerome_B._Chaffee> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/region> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "region",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerome_B._Chaffee",
			"label": "chaffee jerome",
			"seq": "43,56"
		}]
	},
	{
		"id": "c641ab471c154f5f85be724766cc04f4",
		"question": "Who appointed Joseph Clay and William Cushing to their office?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joseph_Clay_(Georgia)> <http://dbpedia.org/ontology/appointer> ?uri. <http://dbpedia.org/resource/William_Cushing> <http://dbpedia.org/ontology/appointer> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/appointer",
			"label": "appointed",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/ontology/appointer",
			"label": "appointed",
			"seq": "4,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joseph_Clay_(Georgia)",
			"label": "joseph clay",
			"seq": "14,24"
		}, {
			"uri": "http://dbpedia.org/resource/William_Cushing",
			"label": "william cushing",
			"seq": "30,44"
		}]
	},
	{
		"id": "8e833704b64d4d40bbff73d5746d98c4",
		"question": "Was Zambezi originate in the north western province of zambia?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Zambezi> <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceRegion",
			"label": "originate",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zambezi",
			"label": "zambezi",
			"seq": "4,10"
		}, {
			"uri": "http://dbpedia.org/resource/North-Western_Province,_Zambia",
			"label": "province western zambia north",
			"seq": "29,57"
		}]
	},
	{
		"id": "e118a1a544bf48ee9836c7b3ce7fc651",
		"question": "Who first ascented a mountain of Cathedral Peak (California) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cathedral_Peak_(California)> <http://dbpedia.org/ontology/firstAscentPerson> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "ascented",
			"seq": "10,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cathedral_Peak_(California)",
			"label": "(california) cathedral peak",
			"seq": "33,59"
		}]
	},
	{
		"id": "2cac0aa4df6d4ad6918d462993e33e80",
		"question": "Name the licensee of the WRVU who has the affiliation of  Monroe Carell Jr. Children's Hospital at Vanderbilt ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WRVU> <http://dbpedia.org/property/licensee> ?uri. <http://dbpedia.org/resource/Monroe_Carell_Jr._Children's_Hospital_at_Vanderbilt> <http://dbpedia.org/property/affiliation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/licensee",
			"label": "licensee",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliation",
			"seq": "42,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WRVU",
			"label": "wrvu",
			"seq": "25,28"
		}, {
			"uri": "http://dbpedia.org/resource/Monroe_Carell_Jr._Children's_Hospital_at_Vanderbilt",
			"label": "vanderbilt children's hospital",
			"seq": "76,105"
		}]
	},
	{
		"id": "4aa80af1497f49ecbcd3bd93990e9df9",
		"question": "What awards did the film director of The Haunted House win ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Haunted_House_(1929_film)> <http://dbpedia.org/ontology/director> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "director",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Haunted_House_(1929_film)",
			"label": "haunted house film the",
			"seq": "16,37"
		}]
	},
	{
		"id": "00f3d768f79c46eeaa5348f45889e34e",
		"question": "In which war did the units garrisoned at Turin fight?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/Turin> . ?x <http://dbpedia.org/ontology/battle> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/garrison",
			"label": "garrisoned",
			"seq": "27,36"
		}, {
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "at",
			"seq": "38,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Turin",
			"label": "turin",
			"seq": "41,45"
		}]
	},
	{
		"id": "3abffed2b2504a16b1cbaecbe05b2bde",
		"question": "What all is produced by companies in Douglas, Isle of Man?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Douglas,_Isle_of_Man> . ?x <http://dbpedia.org/ontology/product> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "companies",
			"seq": "24,32"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "produced",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "24,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Douglas,_Isle_of_Man",
			"label": "douglas, isle",
			"seq": "37,49"
		}]
	},
	{
		"id": "01e74239bfaf4b1d8de9cb7ed623a268",
		"question": "What is the number of occupation of the people who died in tampa bay, florida?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "people",
			"seq": "40,45"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "occupation",
			"seq": "22,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tampa,_Florida",
			"label": "florida tampa",
			"seq": "59,71"
		}]
	},
	{
		"id": "b4b48ab141a24da6b6df5ede9f5bfbf3",
		"question": "Whose theme music was composed by a band which collaborated with Phish?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Phish> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "band",
			"seq": "36,39"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Phish",
			"label": "phish",
			"seq": "65,69"
		}]
	},
	{
		"id": "5d06f0ac2946469f965844d87feb57c4",
		"question": "Whose work is in the Musee d'orsay?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/Mus\u00e9e_d'Orsay> . ?x <http://dbpedia.org/property/artist> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artwork>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/museum",
			"label": "musee",
			"seq": "21,25"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "is",
			"seq": "11,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Artwork",
			"label": "work",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mus\u00e9e_d'Orsay",
			"label": "d'orsay",
			"seq": "27,33"
		}]
	},
	{
		"id": "504f89e982944a649b1a6d9e2106f944",
		"question": "Which president had lieutenants whose governor was Bill Clinton?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Bill_Clinton> . ?uri <http://dbpedia.org/ontology/lieutenant> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governor",
			"label": "governor",
			"seq": "38,45"
		}, {
			"uri": "http://dbpedia.org/ontology/lieutenant",
			"label": "lieutenants",
			"seq": "20,30"
		}, {
			"uri": "http://dbpedia.org/ontology/President",
			"label": "president",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bill_Clinton",
			"label": "clinton bill",
			"seq": "51,62"
		}]
	},
	{
		"id": "32bebb59a0fb43aab77ff13a2fba2b4f",
		"question": "List the developers who has contributed to both GNOWSYS and GNU TeXmacs ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GNOWSYS> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/GNU_TeXmacs> <http://dbpedia.org/ontology/developer> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developers",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developers",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/GNOWSYS",
			"label": "gnowsys",
			"seq": "48,54"
		}, {
			"uri": "http://dbpedia.org/resource/GNU_TeXmacs",
			"label": "texmacs gnu",
			"seq": "60,70"
		}]
	},
	{
		"id": "b5774df2305a4772bad9f84bc85d5d62",
		"question": "What is the municipality of Liberty Bell ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liberty_Bell> <http://dbpedia.org/ontology/municipality> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/municipality",
			"label": "municipality",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Liberty_Bell",
			"label": "liberty bell",
			"seq": "28,39"
		}]
	},
	{
		"id": "2d858381e01142748e34b68e8303754c",
		"question": "Who all are known to play the Gibson Guitar Corporation?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Gibson_Guitar_Corporation> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableInstruments",
			"label": "are",
			"seq": "8,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gibson_Guitar_Corporation",
			"label": "corporation guitar gibson",
			"seq": "30,54"
		}]
	},
	{
		"id": "0ffa12b348584eac8502b778b6e3013a",
		"question": "Which animator of the The Skeleton Dance is also the  cinematographer of the Mickey's Mellerdrammer?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> ?uri. <http://dbpedia.org/resource/Mickey's_Mellerdrammer> <http://dbpedia.org/property/cinematography> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/animator",
			"label": "animator",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/cinematography",
			"label": "cinematographer",
			"seq": "54,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Skeleton_Dance",
			"label": "skeleton dance",
			"seq": "26,39"
		}, {
			"uri": "http://dbpedia.org/resource/Mickey's_Mellerdrammer",
			"label": "mellerdrammer mickey's",
			"seq": "77,98"
		}]
	},
	{
		"id": "0211cc1ff7b94942958a04da756282b7",
		"question": "Who built the stadium which was rented for the 2013 Copa Centroamericana ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/2013_Copa_Centroamericana> . ?x <http://dbpedia.org/ontology/builder> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "rented",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "built",
			"seq": "4,8"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2013_Copa_Centroamericana",
			"label": "centroamericana copa 2013",
			"seq": "47,71"
		}]
	},
	{
		"id": "74833a9d360e4944ba62ebb5ff1633fb",
		"question": "Brian Dunkleman is the presenter of what TV show?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Brian_Dunkleman>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/presenter",
			"label": "presenter",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "44,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brian_Dunkleman",
			"label": "dunkleman brian",
			"seq": "0,14"
		}]
	},
	{
		"id": "c476c7a2e55b4c00a92923d7d08a1e5f",
		"question": "How many fictional characters are there in a series in which Craig Robinson acted?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Craig_Robinson_(actor)> . ?uri <http://dbpedia.org/ontology/series> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "craig",
			"seq": "61,65"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "45,50"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Craig_Robinson_(actor)",
			"label": "robinson",
			"seq": "67,74"
		}]
	},
	{
		"id": "eea1dcd97f494d799d7fcacd6bad1685",
		"question": "Which television show is the subsequent work of Frasier and the opening theme is Gary Portnoy?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Frasier> . ?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Gary_Portnoy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "29,43"
		}, {
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opening theme",
			"seq": "64,76"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "6,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frasier",
			"label": "frasier",
			"seq": "48,54"
		}, {
			"uri": "http://dbpedia.org/resource/Gary_Portnoy",
			"label": "portnoy gary",
			"seq": "81,92"
		}]
	},
	{
		"id": "8b10de10cf09466f94c4570b9c61aa72",
		"question": "in which country does the river end which originates in Lebrsnik?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Lebr\u0161nik> . ?x <http://dbpedia.org/ontology/mouthCountry> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourcePlace",
			"label": "originates",
			"seq": "42,51"
		}, {
			"uri": "http://dbpedia.org/ontology/mouthCountry",
			"label": "country",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lebr\u0161nik",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ac8eb701fbd94707ac65d5bd874c8b7a",
		"question": "Which country's largest city is Lima?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Lima> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "16,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lima",
			"label": "lima",
			"seq": "32,35"
		}]
	},
	{
		"id": "89b4110b9d064a0fb8feff6aa5aa2ff2",
		"question": "List the awards given to the relatives of Gregorios Bernardakis.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Gregorios_Bernardakis> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "29,37"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gregorios_Bernardakis",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "18993c411e4b43aa9d11cab3a62f9f88",
		"question": "Count all the games whose distributors are located in America",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/country> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/distributor> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/country",
			"label": "count",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributors",
			"seq": "26,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "8f2c9b53aca646c08bfe2eeee0544df4",
		"question": "What is that something which made Breann McGregor famous, and Frank Thorne received as an award?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frank_Thorne> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Breann_McGregor> <http://dbpedia.org/property/knownFor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "90,94"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "frank",
			"seq": "62,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frank_Thorne",
			"label": "thorne frank",
			"seq": "62,73"
		}, {
			"uri": "http://dbpedia.org/resource/Breann_McGregor",
			"label": "mcgregor breann",
			"seq": "34,48"
		}]
	},
	{
		"id": "6099a612c08a4e97be03115bc7433ad2",
		"question": "Which builder of Ford Straight-6 engine is also the automobile latform provider of Chiva bus ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri. <http://dbpedia.org/resource/Ford_Straight-6_engine> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/automobilePlatform",
			"label": "automobile latform",
			"seq": "52,69"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "automobile",
			"seq": "52,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chiva_bus",
			"label": "chiva bus",
			"seq": "83,91"
		}, {
			"uri": "http://dbpedia.org/resource/Ford_Straight-6_engine",
			"label": "straight-6 engine ford",
			"seq": "17,38"
		}]
	},
	{
		"id": "b58bac57950f452cbbce5e9e0faa159d",
		"question": "What is the university whose campus is Mount Moosilauke?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Mount_Moosilauke>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "campus",
			"seq": "29,34"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mount_Moosilauke",
			"label": "moosilauke mount",
			"seq": "39,54"
		}]
	},
	{
		"id": "c7a0d930b20447e4a742431bbe7d440d",
		"question": "Which non fiction of the Thud is also the field of the Jon Speelman ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri. <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "fiction non",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/ontology/field",
			"label": "field",
			"seq": "42,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thud!",
			"label": "thud",
			"seq": "25,28"
		}, {
			"uri": "http://dbpedia.org/resource/Jon_Speelman",
			"label": "speelman jon",
			"seq": "55,66"
		}]
	},
	{
		"id": "b88127c669a54c12aa05eef809943bc3",
		"question": "What is the owning organisation of the Ford Kansas City Assembly Plant and also the builder of the Ford Y-block engine?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> <http://dbpedia.org/ontology/owningOrganisation> ?uri. <http://dbpedia.org/resource/Ford_Y-block_engine> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningOrganisation",
			"label": "organisation owning",
			"seq": "12,30"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "plant",
			"seq": "65,69"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant",
			"label": "assembly",
			"seq": "56,63"
		}, {
			"uri": "http://dbpedia.org/resource/Ford_Y-block_engine",
			"label": "y-block engine ford",
			"seq": "39,57"
		}]
	},
	{
		"id": "226f3a3f6f844c5fbfee523f31ed439d",
		"question": "what are the nicknames of the people who are in Ekstraliga?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/Ekstraliga_(speedway)> . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nicknames",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ekstraliga_(speedway)",
			"label": "ekstraliga",
			"seq": "48,57"
		}]
	},
	{
		"id": "dc1d2cb750ca4e2e9f9a74ccd1c6c5cc",
		"question": "Who is a famous relative of Aaround Van Heemstra?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Aarnoud_van_Heemstra>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relative",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "aaround",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Aarnoud_van_Heemstra",
			"label": "heemstra",
			"seq": "40,47"
		}]
	},
	{
		"id": "2c84a9a631f743f0b2302b12af7aa606",
		"question": "List the former partner of the figure skaters whose former choreographer was Igor Shpillband.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/formerChoreographer> <http://dbpedia.org/resource/Igor_Shpillband> . ?x <http://dbpedia.org/ontology/formerPartner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FigureSkater>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerChoreographer",
			"label": "choreographer former",
			"seq": "9,28"
		}, {
			"uri": "http://dbpedia.org/ontology/formerPartner",
			"label": "partner former",
			"seq": "9,22"
		}, {
			"uri": "http://dbpedia.org/ontology/FigureSkater",
			"label": "figure",
			"seq": "31,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Igor_Shpillband",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e575b8c0e88a481db2a8c94388a81fdc",
		"question": "List the television shows whose distributors are located at Burbank, California.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/locationCity> <http://dbpedia.org/resource/Burbank,_California> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCity",
			"label": "located",
			"seq": "49,55"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributors",
			"seq": "32,43"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Burbank,_California",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1ccd1c0a38d94273b20369bad3a4e3e6",
		"question": "What is the title of Kakae ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kakae> <http://dbpedia.org/property/title> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/title",
			"label": "title",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kakae",
			"label": "kakae",
			"seq": "21,25"
		}]
	},
	{
		"id": "bf81c3eaa06d49e9b4022d317a8b2af0",
		"question": "List all the line of Vadodara Junction railway station?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/property/line> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/line",
			"label": "line",
			"seq": "13,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vadodara_Junction_railway_station",
			"label": "vadodara junction station railway",
			"seq": "21,53"
		}]
	},
	{
		"id": "c6d8bd8b828a4ffca756fcd6a7b9cad6",
		"question": "What is the birth city of the Salford City F.C players ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Salford_City_F.C.> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "the",
			"seq": "8,10"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birth",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerPlayer",
			"label": "players",
			"seq": "47,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Salford_City_F.C.",
			"label": "salford city f.c",
			"seq": "18,33"
		}]
	},
	{
		"id": "2832515b3cd94fbaba52612934519520",
		"question": "List the team for which Doug Acomb played ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Doug_Acomb> <http://dbpedia.org/property/playedFor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "played for",
			"seq": "14,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Doug_Acomb",
			"label": "acomb doug",
			"seq": "24,33"
		}]
	},
	{
		"id": "a12b9f66bee84b9db6177e03023690f7",
		"question": "To which US states does the roads belong which meet at the East Whiteland Township in Pennsylvania?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/routeJunction> <http://dbpedia.org/resource/East_Whiteland_Township,_Chester_County,_Pennsylvania> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Road>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeJunction",
			"label": "belong",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "states",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Road",
			"label": "roads",
			"seq": "28,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/East_Whiteland_Township,_Chester_County,_Pennsylvania",
			"label": "pennsylvania whiteland township",
			"seq": "64,94"
		}]
	},
	{
		"id": "655aee0c067641ffbd67c9dac3ce438a",
		"question": "To what other locations does the airlines have flights, who also fly to Birmingham?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Birmingham_Airport> . ?x <http://dbpedia.org/property/destinations> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/targetAirport",
			"label": "airlines",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "locations",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "33,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Birmingham_Airport",
			"label": "birmingham",
			"seq": "72,81"
		}]
	},
	{
		"id": "91ea8eda1f9b4116a2f984f432ff6ea6",
		"question": "How many states does the Pioneer corporation operate in?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/country",
			"label": "pioneer",
			"seq": "25,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pioneer_Corporation",
			"label": "corporation pioneer",
			"seq": "25,43"
		}]
	},
	{
		"id": "9559251273fe4cfd94ae14dc401612d9",
		"question": "Which are the predecessors of the cars which are similar to the Oldsmobile 88?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Oldsmobile_88> <http://dbpedia.org/property/related> ?x . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/related",
			"label": "the",
			"seq": "10,12"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessors",
			"seq": "14,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oldsmobile_88",
			"label": "oldsmobile",
			"seq": "64,73"
		}]
	},
	{
		"id": "bcf6d38828d24556aa001e0484100b31",
		"question": "How many people are there whose children died in Indiana?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/ontology/child> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "people",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/child",
			"label": "children",
			"seq": "32,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indiana",
			"label": "indiana",
			"seq": "49,55"
		}]
	},
	{
		"id": "ad765492f88c48c3b2bc9040652ce954",
		"question": "Which mountain range is the one with Ponte d'Aveneyre and Le Gibloux?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pointe_d'Aveneyre> <http://dbpedia.org/ontology/mountainRange> ?uri. <http://dbpedia.org/resource/Le_Gibloux> <http://dbpedia.org/ontology/mountainRange> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountain range",
			"seq": "6,19"
		}, {
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountain range",
			"seq": "6,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pointe_d'Aveneyre",
			"label": "d'aveneyre",
			"seq": "43,52"
		}, {
			"uri": "http://dbpedia.org/resource/Le_Gibloux",
			"label": "gibloux le",
			"seq": "58,67"
		}]
	},
	{
		"id": "dd14801af7dd48b5b9c3860b4f2ac690",
		"question": "What is the appliance which uses the central processing unit manufactured by Marvell Technology Group?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Marvell_Technology_Group>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cpu",
			"label": "uses",
			"seq": "28,31"
		}, {
			"uri": "http://dbpedia.org/ontology/InformationAppliance",
			"label": "appliance",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marvell_Technology_Group",
			"label": "technology marvell group",
			"seq": "77,100"
		}]
	},
	{
		"id": "c0b4eebc87244ce9a17b1517fc5a7e4f",
		"question": "In which team was the person drafted who has studied at the Worcester college, Oxford?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> . ?x <http://dbpedia.org/property/draftTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "drafted",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "drafted",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "22,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Worcester_College,_Oxford",
			"label": "worcester college, oxford",
			"seq": "60,84"
		}]
	},
	{
		"id": "94efeafa9ef24e1391fdb5bed1b465b0",
		"question": "What is the military branch of John Tower ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Tower> <http://dbpedia.org/ontology/militaryBranch> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military branch",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Tower",
			"label": "tower john",
			"seq": "31,40"
		}]
	},
	{
		"id": "8c423ae07cd444eca119288d4f151034",
		"question": "How many people used to play in the youthclub of FC Barcelona?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/FC_Barcelona>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youthclub",
			"seq": "36,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/FC_Barcelona",
			"label": "barcelona fc",
			"seq": "49,60"
		}]
	},
	{
		"id": "09496228c50d4dd0829420bde30ad222",
		"question": "What is the type of Naval Station Bremerton ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Naval_Station_Bremerton> <http://dbpedia.org/property/type> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/type",
			"label": "type",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Naval_Station_Bremerton",
			"label": "bremerton station naval",
			"seq": "20,42"
		}]
	},
	{
		"id": "a5f83e85563f44108c787e395fe60425",
		"question": "Count the number of offices held by people who have their allegiances with the american civil war union?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/allegiance> <http://dbpedia.org/resource/Union_(American_Civil_War)> . ?x <http://dbpedia.org/property/office> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiances",
			"seq": "58,68"
		}, {
			"uri": "http://dbpedia.org/property/office",
			"label": "offices",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Union_(American_Civil_War)",
			"label": "american",
			"seq": "79,86"
		}]
	},
	{
		"id": "5dd25945300c4882b7f41d51f864edbf",
		"question": "What are some movies whose distributors are led by Kevin Tsujihara?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Kevin_Tsujihara> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "kevin",
			"seq": "51,55"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributors",
			"seq": "27,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "led",
			"seq": "44,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kevin_Tsujihara",
			"label": "tsujihara kevin",
			"seq": "51,65"
		}]
	},
	{
		"id": "d8805aed27b84e74a23977910500e942",
		"question": "What are the other band members of the band one of whose current member is Robert De Niro?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Robert_De_Niro> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "members current",
			"seq": "24,38"
		}, {
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "member",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "19,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_De_Niro",
			"label": "robert niro",
			"seq": "75,85"
		}]
	},
	{
		"id": "3f32bfb3b7df4136b3983a9dfe3beed0",
		"question": "Who are the relatives of the character after which Quagmire's Quagmire was made?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Quagmire's_Quagmire> . ?uri <http://dbpedia.org/ontology/relative> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "quagmire",
			"seq": "51,58"
		}, {
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Quagmire's_Quagmire",
			"label": "quagmire's",
			"seq": "51,60"
		}]
	},
	{
		"id": "694a307769eb4f02b15d499978c98c6a",
		"question": "Who are the tenants of MasterCard Centre?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/tenants",
			"label": "tenants",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/MasterCard_Centre",
			"label": "mastercard centre",
			"seq": "23,39"
		}]
	},
	{
		"id": "ba8179bb4b874d8a8ec1115fefbd1fb2",
		"question": "Who is the President of United World College of Costa Rica ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_World_College_of_Costa_Rica> <http://dbpedia.org/property/president> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_World_College_of_Costa_Rica",
			"label": "college united world costa rica",
			"seq": "24,54"
		}]
	},
	{
		"id": "fab1a809ffa043059b189683eb9c205e",
		"question": "Is nintendo in the video games industry?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Nintendo> <http://dbpedia.org/property/industry> <http://dbpedia.org/resource/Video_game> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/industry",
			"label": "industry",
			"seq": "31,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nintendo",
			"label": "nintendo",
			"seq": "3,10"
		}, {
			"uri": "http://dbpedia.org/resource/Video_game",
			"label": "video",
			"seq": "19,23"
		}]
	},
	{
		"id": "bc7257226afd49379f8622d5735bd59f",
		"question": "In which movies directed by Orson Welles has Bernard Herrmann as music composer ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Bernard_Herrmann> . ?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Orson_Welles>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer music",
			"seq": "65,78"
		}, {
			"uri": "http://dbpedia.org/property/director",
			"label": "directed",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "in",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bernard_Herrmann",
			"label": "herrmann bernard",
			"seq": "45,60"
		}, {
			"uri": "http://dbpedia.org/resource/Orson_Welles",
			"label": "welles orson",
			"seq": "28,39"
		}]
	},
	{
		"id": "4279f6d60e2b40aca3b49c6d92f96f80",
		"question": "What is the major shrine of the monarchs whose successor is Dragimir of Travunia and Zachlumia?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Dragimir_of_Travunia_and_Zachlumia> . ?x <http://dbpedia.org/property/majorShrine> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "47,55"
		}, {
			"uri": "http://dbpedia.org/property/majorShrine",
			"label": "shrine major",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Monarch",
			"label": "monarchs",
			"seq": "32,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dragimir_of_Travunia_and_Zachlumia",
			"label": "zachlumia travunia dragimir",
			"seq": "60,86"
		}]
	},
	{
		"id": "2361961d044049bfb2ea19866fcc28b9",
		"question": "Who all play for the teams performing in the united center?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/arena> <http://dbpedia.org/resource/United_Center> . ?uri <http://dbpedia.org/property/team> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/arena",
			"label": "teams",
			"seq": "21,25"
		}, {
			"uri": "http://dbpedia.org/property/team",
			"label": "teams",
			"seq": "21,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_Center",
			"label": "united center",
			"seq": "45,57"
		}]
	},
	{
		"id": "9db99f7b0b424eef87494372c398bb83",
		"question": "Where is the gold coast football club located?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gold_Coast_Football_Club> <http://dbpedia.org/property/location> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "38,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gold_Coast_Football_Club",
			"label": "football coast gold club",
			"seq": "13,36"
		}]
	},
	{
		"id": "d499386227fb4943ad773dfaf48271a3",
		"question": "Which award that has been given to James F Obrien, had used Laemmle Theatres for some service?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Laemmle_Theatres> <http://dbpedia.org/ontology/service> ?uri. <http://dbpedia.org/resource/James_F._O'Brien> <http://dbpedia.org/ontology/award> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/service",
			"label": "service",
			"seq": "86,92"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Laemmle_Theatres",
			"label": "theatres laemmle",
			"seq": "60,75"
		}, {
			"uri": "http://dbpedia.org/resource/James_F._O'Brien",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "613d4281e6a24597aed9eb6dc6ddae4a",
		"question": "Where are the Dinamo Krasnodar players born?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/club> <http://dbpedia.org/resource/Dinamo_Krasnodar> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/club",
			"label": "born",
			"seq": "39,42"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "players",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dinamo_Krasnodar",
			"label": "krasnodar dinamo",
			"seq": "14,29"
		}]
	},
	{
		"id": "0f0065ebc6d9448a9925cf985837df80",
		"question": "Name the people whose academic advisor has also mentored the thesis of Alexius Meinong?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Alexius_Meinong> . ?uri <http://dbpedia.org/ontology/academicAdvisor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "alexius",
			"seq": "71,77"
		}, {
			"uri": "http://dbpedia.org/ontology/academicAdvisor",
			"label": "academic advisor",
			"seq": "22,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alexius_Meinong",
			"label": "meinong alexius",
			"seq": "71,85"
		}]
	},
	{
		"id": "13a6659956ff48d8ad29034fecc6357d",
		"question": "Who is the founder of Wuropean School, Karlsruhe ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/European_School,_Karlsruhe> <http://dbpedia.org/property/founder> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founder",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/European_School,_Karlsruhe",
			"label": "karlsruhe school,",
			"seq": "31,47"
		}]
	},
	{
		"id": "459448bd75ec43279fcae4db9efacd08",
		"question": "Does the croton river flow into the hudson?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Hudson_River> <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Croton_River> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leftTributary",
			"label": "river",
			"seq": "16,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hudson_River",
			"label": "hudson river",
			"seq": "16,27"
		}, {
			"uri": "http://dbpedia.org/resource/Croton_River",
			"label": "croton river",
			"seq": "9,20"
		}]
	},
	{
		"id": "6f280f2da9014ea5b9dd55d08cd22cd5",
		"question": "List the program genres of the sister stations of 97.1 WASH FM?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/WASH_(FM)> <http://dbpedia.org/property/sisterStations> ?x . ?x <http://dbpedia.org/ontology/programmeFormat> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterStations",
			"label": "stations sister",
			"seq": "31,45"
		}, {
			"uri": "http://dbpedia.org/ontology/programmeFormat",
			"label": "program",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WASH_(FM)",
			"label": "wash fm",
			"seq": "55,61"
		}]
	},
	{
		"id": "8994dc83e54f403699937e9328a327a8",
		"question": "Which fields of the Paul Demiville is also the faith of Koay Teng Hai ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paul_Demi\u00e9ville> <http://dbpedia.org/property/fields> ?uri. <http://dbpedia.org/resource/Koay_Teng_Hai> <http://dbpedia.org/ontology/religion> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/fields",
			"label": "fields",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "demiville",
			"seq": "25,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paul_Demi\u00e9ville",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Koay_Teng_Hai",
			"label": "teng koay hai",
			"seq": "56,68"
		}]
	},
	{
		"id": "0bc0430408384e73b48e9e08a71e7f11",
		"question": "Count all the band members who are in Bands which have signed up with Entertainment One Music?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Entertainment_One_Music> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "are",
			"seq": "31,33"
		}, {
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "members",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Entertainment_One_Music",
			"label": "entertainment music",
			"seq": "70,88"
		}]
	},
	{
		"id": "2dccee64e1754b3ebb0e0b7dbd8f53e5",
		"question": " Erik Jendresen is the writer of which television show?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "23,28"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "39,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erik_Jendresen",
			"label": "jendresen erik",
			"seq": "1,14"
		}]
	},
	{
		"id": "3bcdc25b65614b0487c429348217ea4b",
		"question": "Who is the editor of Hearth and Home ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hearth_and_Home> <http://dbpedia.org/ontology/editor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/editor",
			"label": "editor",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hearth_and_Home",
			"label": "hearth home",
			"seq": "21,31"
		}]
	},
	{
		"id": "a2ccd223b18049ec8f3baa631c19db91",
		"question": "Mike Shinoda is in which band?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Mike_Shinoda> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "band",
			"seq": "25,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mike_Shinoda",
			"label": "shinoda mike",
			"seq": "0,11"
		}]
	},
	{
		"id": "af5f1360af214572ad2d8a7f52b326c1",
		"question": "Which leader of United States House of Representatives was the appinter of ohn Drayton ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789> <http://dbpedia.org/property/leader> ?uri. <http://dbpedia.org/resource/John_Drayton> <http://dbpedia.org/property/appointer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leader",
			"label": "leader",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/appointer",
			"label": "appinter",
			"seq": "63,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789",
			"label": "representatives united states",
			"seq": "16,44"
		}, {
			"uri": "http://dbpedia.org/resource/John_Drayton",
			"label": "drayton ohn",
			"seq": "75,85"
		}]
	},
	{
		"id": "2d350c457f654871877104d78d4595be",
		"question": "How many tenants are there in the Mercedes Benz Superdome?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Mercedes-Benz_Superdome> <http://dbpedia.org/ontology/tenant> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenants",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mercedes-Benz_Superdome",
			"label": "superdome mercedes benz",
			"seq": "34,56"
		}]
	},
	{
		"id": "2ce7408563bc4fff84ed8255c318beac",
		"question": "What is the religion of the successor of Chatumongol Sonakul?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Chatumongol_Sonakul> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chatumongol_Sonakul",
			"label": "chatumongol sonakul",
			"seq": "41,59"
		}]
	},
	{
		"id": "4b2bed5caa0f4fcd97539ab5fe8b0c31",
		"question": "Which associated band of the Teddy Riley is also the performer of the Before I Let You Go?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Before_I_Let_You_Go> <http://dbpedia.org/ontology/musicalArtist> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated band",
			"seq": "6,20"
		}, {
			"uri": "http://dbpedia.org/ontology/musicalArtist",
			"label": "also",
			"seq": "44,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Teddy_Riley",
			"label": "teddy riley",
			"seq": "29,39"
		}, {
			"uri": "http://dbpedia.org/resource/Before_I_Let_You_Go",
			"label": "before",
			"seq": "70,75"
		}]
	},
	{
		"id": "9385b5410adb4b398d78b74233daa3e7",
		"question": "List all the doctoral student of the scientist who has advised john Bowlby ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/John_Bowlby> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "doctoral student",
			"seq": "13,28"
		}, {
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "doctoral student",
			"seq": "13,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "37,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Bowlby",
			"label": "bowlby john",
			"seq": "63,73"
		}]
	},
	{
		"id": "c68c8778028948a5a3e0de11281c7ca8",
		"question": "How many developers have worked on games of the Oddworld series?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/Oddworld> . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "57,62"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developers",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oddworld",
			"label": "oddworld",
			"seq": "48,55"
		}]
	},
	{
		"id": "70aa9eff865c482b9b003af932aaf051",
		"question": "Count everyone who was in a youthclub chaired by Josep Maria Bartomeu ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Josep_Maria_Bartomeu> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/chairman",
			"label": "chaired",
			"seq": "38,44"
		}, {
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youthclub",
			"seq": "28,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Josep_Maria_Bartomeu",
			"label": "bartomeu maria josep",
			"seq": "49,68"
		}]
	},
	{
		"id": "13a66e0633544928a5c94aa1f3012477",
		"question": "Is Peter Piper Pizza in the pizza industry?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Peter_Piper_Pizza> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Pizza> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/industry",
			"label": "industry",
			"seq": "34,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peter_Piper_Pizza",
			"label": "pizza piper peter",
			"seq": "3,19"
		}, {
			"uri": "http://dbpedia.org/resource/Pizza",
			"label": "pizza",
			"seq": "15,19"
		}]
	},
	{
		"id": "4faf770f82744bd3a5ae913949ab8d0a",
		"question": "Name a river starting from arequipa region?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/Arequipa_Region>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceRegion",
			"label": "region",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "7,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arequipa_Region",
			"label": "arequipa region",
			"seq": "27,41"
		}]
	},
	{
		"id": "efb34433b68544b09f7dc35e94b450f9",
		"question": "What is the religion of the person who founded the Emel magazine?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Emel_(magazine)> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founded",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Emel_(magazine)",
			"label": "magazine emel",
			"seq": "51,63"
		}]
	},
	{
		"id": "62c64f48fb4e42cba7d5df25238d0c00",
		"question": "How many local authorities manage mixed gender schools?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/gender> <http://dbpedia.org/resource/Mixed-sex_education> . ?x <http://dbpedia.org/ontology/localAuthority> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/gender",
			"label": "gender",
			"seq": "40,45"
		}, {
			"uri": "http://dbpedia.org/ontology/localAuthority",
			"label": "authorities",
			"seq": "15,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mixed-sex_education",
			"label": "mixed",
			"seq": "34,38"
		}]
	},
	{
		"id": "19a1601d48324aeb87419019f0e0e027",
		"question": "What are some apes?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "are",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ape",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c7922582976442cfb8e59c1660842c18",
		"question": "What is the alma mater of the scientist who is known for Rational analysis ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Rational_analysis> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "47,55"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "30,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rational_analysis",
			"label": "rational analysis",
			"seq": "57,73"
		}]
	},
	{
		"id": "059b389bffc642eaab76a7072a3a9b9c",
		"question": "What organisations purpose is Peace?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/purpose",
			"label": "purpose",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organisations",
			"seq": "5,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peace",
			"label": "peace",
			"seq": "30,34"
		}]
	},
	{
		"id": "1a7add8911774e34a9753b1970a42b0f",
		"question": "name the mountain range of Le Gibloux ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Le_Gibloux> <http://dbpedia.org/ontology/mountainRange> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountain range",
			"seq": "9,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Le_Gibloux",
			"label": "gibloux le",
			"seq": "27,36"
		}]
	},
	{
		"id": "020c57dc849e4ed79054a420fb7f59ff",
		"question": "Where is the headquarters of Metro Transit (Minnesota) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Metro_Transit_(Minnesota)> <http://dbpedia.org/property/headquarters> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "13,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Metro_Transit_(Minnesota)",
			"label": "(minnesota) transit metro",
			"seq": "29,53"
		}]
	},
	{
		"id": "f915a7c6e28343a1861fb5a31d770432",
		"question": "Is Peter Crouch currently in the Stoke City FC?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Peter_Crouch> <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/Stoke_City_F.C.> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "currently",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peter_Crouch",
			"label": "crouch peter",
			"seq": "3,14"
		}, {
			"uri": "http://dbpedia.org/resource/Stoke_City_F.C.",
			"label": "stoke city",
			"seq": "33,42"
		}]
	},
	{
		"id": "5e350b58254d4f07a7a629bb71533ba6",
		"question": "Is Lloyd  Nosler the editor of The Temptress?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Temptress> <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Lloyd_Nosler> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "editor",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Temptress",
			"label": "temptress the",
			"seq": "17,29"
		}, {
			"uri": "http://dbpedia.org/resource/Lloyd_Nosler",
			"label": "nosler lloyd",
			"seq": "3,14"
		}]
	},
	{
		"id": "28b62059c317408d9e02cdf9e33d1935",
		"question": "Which relative of ralf schumacher is a famous formula one racer?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ralf_Schumacher>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FormulaOneRacer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relative",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/FormulaOneRacer",
			"label": "formula racer",
			"seq": "46,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ralf_Schumacher",
			"label": "schumacher",
			"seq": "23,32"
		}]
	},
	{
		"id": "47a8730100bb43ab9b5565b15e073f44",
		"question": "List the awards won by the spouse of Harriet Andersson?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Harriet_Andersson> <http://dbpedia.org/ontology/partner> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/partner",
			"label": "andersson",
			"seq": "45,53"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harriet_Andersson",
			"label": "andersson harriet",
			"seq": "37,53"
		}]
	},
	{
		"id": "8a90aa06557b4f7387d69334dbc420ef",
		"question": "How many Thesaban towns are there?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/settlementType> <http://dbpedia.org/resource/Thesaban>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Town>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/settlementType",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Town",
			"label": "towns",
			"seq": "18,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thesaban",
			"label": "thesaban",
			"seq": "9,16"
		}]
	},
	{
		"id": "95a5e8b6535b44d7a306e95c185accee",
		"question": "List the judges of Rising Star which is also the artist of Brad Paisley discography ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rising_Star_(U.S._TV_series)> <http://dbpedia.org/property/judges> ?uri. <http://dbpedia.org/resource/Brad_Paisley_discography> <http://dbpedia.org/property/artist> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/judges",
			"label": "judges",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "49,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rising_Star_(U.S._TV_series)",
			"label": "rising",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/resource/Brad_Paisley_discography",
			"label": "discography paisley",
			"seq": "64,82"
		}]
	},
	{
		"id": "69644dc7516e4f57a68e2ef38707770b",
		"question": "Who are the current members of Insects vs Robots?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Insects_vs_Robots> <http://dbpedia.org/property/currentMembers> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "members current",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Insects_vs_Robots",
			"label": "insects robots",
			"seq": "31,44"
		}]
	},
	{
		"id": "d15fc086b4a342d0a45205ffd6963f8c",
		"question": "Did Oliver Sacks study at the Columbia University?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Oliver_Sacks> <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Columbia_University> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "university",
			"seq": "39,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oliver_Sacks",
			"label": "oliver sacks",
			"seq": "4,15"
		}, {
			"uri": "http://dbpedia.org/resource/Columbia_University",
			"label": "university columbia",
			"seq": "30,48"
		}]
	},
	{
		"id": "02ae1a10a037480a91be9b50a5073a8b",
		"question": "How many other genere are there of the radio stations whose one of the genre  is Classic rock ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/programmeFormat> <http://dbpedia.org/resource/Classic_rock> . ?x <http://dbpedia.org/ontology/programmeFormat> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/programmeFormat",
			"label": "radio",
			"seq": "39,43"
		}, {
			"uri": "http://dbpedia.org/ontology/programmeFormat",
			"label": "radio",
			"seq": "39,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Classic_rock",
			"label": "classic rock",
			"seq": "81,92"
		}]
	},
	{
		"id": "02d8c986d51743f79aadb85498ab95eb",
		"question": "What is the alma mater of the author of Letter to a Christian Nation ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Letter_to_a_Christian_Nation> <http://dbpedia.org/ontology/author> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "author",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Letter_to_a_Christian_Nation",
			"label": "christian nation letter",
			"seq": "40,62"
		}]
	},
	{
		"id": "760c753b13f2446a9330ada587e18873",
		"question": "name the races where bobby beasley took part ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bobby_Beasley> <http://dbpedia.org/ontology/race> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/race",
			"label": "races",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bobby_Beasley",
			"label": "beasley bobby",
			"seq": "21,33"
		}]
	},
	{
		"id": "acc08e9a7a55497086586e40d6223753",
		"question": "What is the content license of Darcs ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Darcs> <http://dbpedia.org/ontology/license> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/license",
			"label": "license",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Darcs",
			"label": "darcs",
			"seq": "31,35"
		}]
	},
	{
		"id": "6cf76cd43efe4dae9271d0dcafd040d0",
		"question": "Who was the narrator in the point?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Point!> <http://dbpedia.org/property/narrated> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/narrated",
			"label": "narrator",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Point!",
			"label": "point the",
			"seq": "8,16"
		}]
	},
	{
		"id": "8ae784fd30814515b6229d039f232b79",
		"question": "How many items belong to the Science Fiction genre?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Science_fiction>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/genre",
			"label": "genre",
			"seq": "45,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Science_fiction",
			"label": "science fiction",
			"seq": "29,43"
		}]
	},
	{
		"id": "37d312b3fc364f16bdc7b55e5a845a90",
		"question": "Which basketball team's president studied in the Brockport Golden Eagles?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/Brockport_Golden_Eagles> . ?uri <http://dbpedia.org/property/president> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballTeam>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/college",
			"label": "golden",
			"seq": "59,64"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "24,32"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballTeam",
			"label": "basketball",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brockport_Golden_Eagles",
			"label": "brockport golden eagles",
			"seq": "49,71"
		}]
	},
	{
		"id": "1df640ae02bb4421947b10d25fb15963",
		"question": "Who is the developer of the software which serves the platform for King's Quest VI?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/King's_Quest_VI> <http://dbpedia.org/ontology/computingPlatform> ?x . ?x <http://dbpedia.org/property/developer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "platform",
			"seq": "54,61"
		}, {
			"uri": "http://dbpedia.org/property/developer",
			"label": "developer",
			"seq": "11,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/King's_Quest_VI",
			"label": "king's quest",
			"seq": "67,78"
		}]
	},
	{
		"id": "930321a78c1f43668bb1a7051bc5727b",
		"question": "What magazine companies are of form Limited liability company?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Limited_liability_company>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "54,60"
		}, {
			"uri": "http://dbpedia.org/ontology/Magazine",
			"label": "magazine",
			"seq": "5,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Limited_liability_company",
			"label": "liability limited company",
			"seq": "36,60"
		}]
	},
	{
		"id": "e2916bd3eb4a49159537f5a32218b829",
		"question": "Count the cities whihch are on the same sea as that of Miami ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Miami> . ?x <http://dbpedia.org/property/cities> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "10,15"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miami",
			"label": "miami",
			"seq": "55,59"
		}]
	},
	{
		"id": "7124c65f43eb4c7db607755053ad3252",
		"question": "How many scientist became famous for the battle of Occupation of Japan?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Occupation_of_Japan> . ?uri <http://dbpedia.org/property/knownFor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "battle",
			"seq": "41,46"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "for",
			"seq": "33,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Occupation_of_Japan",
			"label": "occupation japan",
			"seq": "51,66"
		}]
	},
	{
		"id": "722afd3c1d7f45638c954d4bac6d0dfb",
		"question": "Which owner of the national Herald india is the leader of Kumta ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_National_Herald_(India)> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/property/governmentType> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owner",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/property/governmentType",
			"label": "owner",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_National_Herald_(India)",
			"label": "national herald india",
			"seq": "19,39"
		}, {
			"uri": "http://dbpedia.org/resource/Kumta",
			"label": "kumta",
			"seq": "58,62"
		}]
	},
	{
		"id": "12bc818a1cad45d1a91e51273310e997",
		"question": "Name the river whose mouth mountain is Southend-on-Sea and mouth place is Essex?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Southend-on-Sea> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthMountain",
			"label": "mountain mouth",
			"seq": "21,34"
		}, {
			"uri": "http://dbpedia.org/ontology/mouthPlace",
			"label": "place mouth",
			"seq": "21,31"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Southend-on-Sea",
			"label": "southend-on-sea",
			"seq": "39,53"
		}, {
			"uri": "http://dbpedia.org/resource/Essex",
			"label": "essex",
			"seq": "74,78"
		}]
	},
	{
		"id": "b64d9fce937f4f0e9a0ca37ee8953f92",
		"question": "In how many countries does the Zurich Affoltern am Albis Zug line go?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/line> <http://dbpedia.org/resource/Z\u00fcrich\u2013Affoltern_am_Albis\u2013Zug_railway_line> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/line",
			"label": "line",
			"seq": "61,64"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "countries",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "countries",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Z\u00fcrich\u2013Affoltern_am_Albis\u2013Zug_railway_line",
			"label": "affoltern albis",
			"seq": "38,52"
		}]
	},
	{
		"id": "975c249b705448208e1323922ac6f2da",
		"question": "Give me the count of all people who ascented a peak in California?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/California> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "california",
			"seq": "55,64"
		}, {
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "ascented",
			"seq": "36,43"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "25,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/California",
			"label": "california",
			"seq": "55,64"
		}]
	},
	{
		"id": "d7cf27ca038544a0aedfa9c7533e0743",
		"question": "What people are known to work for Johnny Cash?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Johnny_Cash>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "are",
			"seq": "12,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Johnny_Cash",
			"label": "johnny cash",
			"seq": "34,44"
		}]
	},
	{
		"id": "d4dcd0fd68e54344be04bf5a83626fb8",
		"question": "What is the official residence of the Helen Getachew which is also the palce of death of the Haile Selassie Gugsa ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Helen_Getachew> <http://dbpedia.org/ontology/residence> ?uri. <http://dbpedia.org/resource/Haile_Selassie_Gugsa> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residence",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "death",
			"seq": "80,84"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Helen_Getachew",
			"label": "getachew helen",
			"seq": "38,51"
		}, {
			"uri": "http://dbpedia.org/resource/Haile_Selassie_Gugsa",
			"label": "selassie haile gugsa",
			"seq": "93,112"
		}]
	},
	{
		"id": "a40f13291ca14b10b2f098c618bb7b4d",
		"question": "What rivers originate from Australian Alps?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Australian_Alps>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourcePlace",
			"label": "originate",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Australian_Alps",
			"label": "australian alps",
			"seq": "27,41"
		}]
	},
	{
		"id": "7791f674f69644b597e58b7e0b2da6be",
		"question": "What is the nationality of the J. T. Krogh which is also the  sovereign state of the Camilla Martin",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/J._T._Krogh> <http://dbpedia.org/ontology/nationality> ?uri. <http://dbpedia.org/resource/Camilla_Martin> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "nationality",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/J._T._Krogh",
			"label": "krogh t. j.",
			"seq": "31,41"
		}, {
			"uri": "http://dbpedia.org/resource/Camilla_Martin",
			"label": "camilla martin",
			"seq": "85,98"
		}]
	},
	{
		"id": "ec098d0e9dc04cb997cf1bedf575db5c",
		"question": "What's the religion of the winner of china election of 2008?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Republic_of_China_legislative_election,_2008> <http://dbpedia.org/property/leader> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leader",
			"label": "winner",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Republic_of_China_legislative_election,_2008",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "eb9973f1951346f39307949428dd4e26",
		"question": "Name the saint whose major shrine is in Canada and was canonized by Pope Benedict XVI?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/majorShrine> <http://dbpedia.org/resource/Canada> . ?uri <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_Benedict_XVI>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Saint>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrine major",
			"seq": "21,32"
		}, {
			"uri": "http://dbpedia.org/property/canonizedBy",
			"label": "canonized",
			"seq": "55,63"
		}, {
			"uri": "http://dbpedia.org/ontology/Saint",
			"label": "saint",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canada",
			"label": "canada",
			"seq": "40,45"
		}, {
			"uri": "http://dbpedia.org/resource/Pope_Benedict_XVI",
			"label": "benedict pope xvi",
			"seq": "68,84"
		}]
	},
	{
		"id": "dc23a511ad514de1aa0138b011745698",
		"question": "What is the television show whose sculptor is C. E. Webber and composed by Murray Gold?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/C._E._Webber> . ?uri <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Murray_Gold>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "sculptor",
			"seq": "34,41"
		}, {
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composed",
			"seq": "63,70"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/C._E._Webber",
			"label": "webber e. c.",
			"seq": "46,57"
		}, {
			"uri": "http://dbpedia.org/resource/Murray_Gold",
			"label": "murray gold",
			"seq": "75,85"
		}]
	},
	{
		"id": "85cdd790d3474b37b3fbbb8ecfd40517",
		"question": "What is the constituency of the people who died in Lampedusa?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/Lampedusa> . ?x <http://dbpedia.org/property/constituency> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "people",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lampedusa",
			"label": "lampedusa",
			"seq": "51,59"
		}]
	},
	{
		"id": "5b6758a1346840589e4406f834826e3c",
		"question": "Where else did the graduates of the university of west indies study?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/University_of_the_West_Indies> . ?x <http://dbpedia.org/property/almaMater> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "university",
			"seq": "36,45"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "graduates",
			"seq": "19,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/University_of_the_West_Indies",
			"label": "university indies west",
			"seq": "36,57"
		}]
	},
	{
		"id": "0eb2c9964a5047548bafa2cc6ffb4019",
		"question": "In how many different places have people beatified by Pope Pius X died?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/beatifiedBy> <http://dbpedia.org/resource/Pope_Pius_X> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/beatifiedBy",
			"label": "beatified",
			"seq": "41,49"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "places",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "22,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pope_Pius_X",
			"label": "pope pius",
			"seq": "54,62"
		}]
	},
	{
		"id": "cb55d0a92ec24545ab35ad668354f53e",
		"question": "Which statesman is married to Dolley Madison?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Dolley_Madison>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "dolley",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "which",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dolley_Madison",
			"label": "madison dolley",
			"seq": "30,43"
		}]
	},
	{
		"id": "ed4fb70a35a34a85bd5669521192912b",
		"question": "What is the title of the Kakae and also the district of the Robert William Wilcox ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kakae> <http://dbpedia.org/property/title> ?uri. <http://dbpedia.org/resource/Robert_William_Wilcox> <http://dbpedia.org/property/district> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/title",
			"label": "title",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/property/district",
			"label": "district",
			"seq": "44,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kakae",
			"label": "kakae",
			"seq": "25,29"
		}, {
			"uri": "http://dbpedia.org/resource/Robert_William_Wilcox",
			"label": "william wilcox robert",
			"seq": "60,80"
		}]
	},
	{
		"id": "7dfadb99e8c946deaabb77d1f0ef093c",
		"question": "How many groups have fought in wars where Richard Taylor fought too?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Richard_Taylor_(colonel)> <http://dbpedia.org/property/battles> ?x . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "wars",
			"seq": "31,34"
		}, {
			"uri": "http://dbpedia.org/property/combatant",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "taylor",
			"seq": "50,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Richard_Taylor_(colonel)",
			"label": "richard taylor",
			"seq": "42,55"
		}]
	},
	{
		"id": "46cb9047955d4914a06a2fd681844bba",
		"question": "Is Halyna Kukhar the former coach of Stanislav Morozov?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Stanislav_Morozov> <http://dbpedia.org/ontology/formerCoach> <http://dbpedia.org/resource/Halyna_Kukhar> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerCoach",
			"label": "former coach",
			"seq": "21,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stanislav_Morozov",
			"label": "stanislav morozov",
			"seq": "37,53"
		}, {
			"uri": "http://dbpedia.org/resource/Halyna_Kukhar",
			"label": "kukhar halyna",
			"seq": "3,15"
		}]
	},
	{
		"id": "da7f8fc6054d436fa5dc4a6dca13af51",
		"question": "Who directed the haunted house and alice in wonderland?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alice's_Wonderland> <http://dbpedia.org/ontology/director> ?uri. <http://dbpedia.org/resource/The_Haunted_House_(1929_film)> <http://dbpedia.org/ontology/director> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "directed",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/ontology/director",
			"label": "directed",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alice's_Wonderland",
			"label": "wonderland alice",
			"seq": "35,50"
		}, {
			"uri": "http://dbpedia.org/resource/The_Haunted_House_(1929_film)",
			"label": "haunted house",
			"seq": "17,29"
		}]
	},
	{
		"id": "569f87ca37d249fca1fd669c42b61425",
		"question": "What is the origin of the musical artist whose associated band is Ziggi Recado ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Ziggi_Recado> . ?x <http://dbpedia.org/property/origin> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated band",
			"seq": "47,61"
		}, {
			"uri": "http://dbpedia.org/property/origin",
			"label": "origin",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical artist",
			"seq": "26,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ziggi_Recado",
			"label": "recado ziggi",
			"seq": "66,77"
		}]
	},
	{
		"id": "39670fa8f4204ba69a06afe012d003cb",
		"question": "Count the sports played at universities located in Urban Areas?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Urban_area> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "count",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Urban_area",
			"label": "urban",
			"seq": "51,55"
		}]
	},
	{
		"id": "c24dda07f8a74f7a97a4c283745cc67c",
		"question": "Where the club of Kiki Cutter located?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Kiki_Cutter> <http://dbpedia.org/property/club> ?x . ?x <http://dbpedia.org/ontology/location> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/club",
			"label": "club",
			"seq": "10,13"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "30,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kiki_Cutter",
			"label": "cutter kiki",
			"seq": "18,28"
		}]
	},
	{
		"id": "8facfcdabe5c45f6a4ff24195185f240",
		"question": "Who penned Emma and Jane Austen in Manhatten?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jane_Austen_in_Manhattan> <http://dbpedia.org/ontology/writer> ?uri. <http://dbpedia.org/resource/Emma_(novel)> <http://dbpedia.org/property/author> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "austen",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/property/author",
			"label": "austen",
			"seq": "25,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jane_Austen_in_Manhattan",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Emma_(novel)",
			"label": "emma",
			"seq": "11,14"
		}]
	},
	{
		"id": "b80894dd929f4fff8e33453137e5f838",
		"question": "Which wars were fought by the commander whose deputy was Robert T. Herres?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deputy> <http://dbpedia.org/resource/Robert_T._Herres> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deputy",
			"label": "deputy",
			"seq": "46,51"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "30,38"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "robert",
			"seq": "57,62"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_T._Herres",
			"label": "robert herres",
			"seq": "57,69"
		}]
	},
	{
		"id": "44579153ae3b44e89b30a9b9990e1c09",
		"question": "Is the Bucyrus MT6300AC assembled in north america?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Bucyrus_MT6300AC> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/North_America> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/assembly",
			"label": "assembled",
			"seq": "24,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bucyrus_MT6300AC",
			"label": "mt6300ac bucyrus",
			"seq": "7,22"
		}, {
			"uri": "http://dbpedia.org/resource/North_America",
			"label": "america north",
			"seq": "37,49"
		}]
	},
	{
		"id": "a807b47daf314dd1867083e605303a2b",
		"question": "What are all the religions in which Jacob and Abraham are important?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jacob> <http://dbpedia.org/property/veneratedIn> ?uri. <http://dbpedia.org/resource/Abraham> <http://dbpedia.org/property/veneratedIn> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "religions",
			"seq": "17,25"
		}, {
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "religions",
			"seq": "17,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jacob",
			"label": "jacob",
			"seq": "36,40"
		}, {
			"uri": "http://dbpedia.org/resource/Abraham",
			"label": "abraham",
			"seq": "46,52"
		}]
	},
	{
		"id": "fd948db9a1074ffca0b870175bf8308e",
		"question": "What is the game platform of Google Cloud Connect ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Cloud_Connect> <http://dbpedia.org/ontology/computingPlatform> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "platform",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Google_Cloud_Connect",
			"label": "connect google cloud",
			"seq": "29,48"
		}]
	},
	{
		"id": "c9f63111222c4d6c837952e9c7db59f9",
		"question": "Which city's mayor is married to Jean Marc Germain?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Jean-Marc_Germain> . ?uri <http://dbpedia.org/property/mayor> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "to",
			"seq": "30,31"
		}, {
			"uri": "http://dbpedia.org/property/mayor",
			"label": "mayor",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jean-Marc_Germain",
			"label": "germain",
			"seq": "43,49"
		}]
	},
	{
		"id": "e9767fcb96f14efeaa05520dc4675f58",
		"question": "Name the company which provides Outlook.com as service and also has a product named Microsoft Azure ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Outlook.com> . ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Azure>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "service",
			"seq": "47,53"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "product",
			"seq": "70,76"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Outlook.com",
			"label": "outlook.com",
			"seq": "32,42"
		}, {
			"uri": "http://dbpedia.org/resource/Microsoft_Azure",
			"label": "microsoft azure",
			"seq": "84,98"
		}]
	},
	{
		"id": "0f95ea47819f4c68bd0ce67b5a955e3f",
		"question": "What is the common award won by geoffrey Rush and Laemmle Theatres ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Geoffrey_Rush> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Laemmle_Theatres> <http://dbpedia.org/ontology/service> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "award",
			"seq": "19,23"
		}, {
			"uri": "http://dbpedia.org/ontology/service",
			"label": "theatres",
			"seq": "58,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Geoffrey_Rush",
			"label": "geoffrey rush",
			"seq": "32,44"
		}, {
			"uri": "http://dbpedia.org/resource/Laemmle_Theatres",
			"label": "theatres laemmle",
			"seq": "50,65"
		}]
	},
	{
		"id": "4a3f11eb3f2d4d0389762febc9a3d122",
		"question": "Who develops the computation platform of Microsoft Expression Encoder ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Microsoft_Expression_Encoder> <http://dbpedia.org/ontology/computingPlatform> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "computation",
			"seq": "17,27"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "develops",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Expression_Encoder",
			"label": "expression microsoft encoder",
			"seq": "41,68"
		}]
	},
	{
		"id": "cec0cca9c76744ca97e1a9740254d40a",
		"question": "To which persons is Ron Cyrus a relative?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ron_Cyrus>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relative",
			"seq": "32,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "persons",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ron_Cyrus",
			"label": "cyrus ron",
			"seq": "20,28"
		}]
	},
	{
		"id": "3a6432cd1ada457994b8cd04721bcccd",
		"question": "In which country is the Chapelle Saint-Louis de Carthage located ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Chapelle_Saint-Louis_de_Carthage> <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "57,63"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chapelle_Saint-Louis_de_Carthage",
			"label": "saint-louis chapelle carthage",
			"seq": "24,52"
		}]
	},
	{
		"id": "9a2c07ecaef04020b5ad3820012f0ef4",
		"question": "Name the scientist who was awarded a position in Royal Society and has academic advisor as Franz Brentano?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Royal_Society> . ?uri <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Franz_Brentano>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "awarded",
			"seq": "27,33"
		}, {
			"uri": "http://dbpedia.org/ontology/academicAdvisor",
			"label": "academic advisor",
			"seq": "71,86"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_Society",
			"label": "society royal",
			"seq": "49,61"
		}, {
			"uri": "http://dbpedia.org/resource/Franz_Brentano",
			"label": "brentano franz",
			"seq": "91,104"
		}]
	},
	{
		"id": "2f9f8fd7f42f40a19ee4c0b72746fef6",
		"question": "In how many places can I find tombs of people who fought in the Norwalk Trainband?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/Norwalk_Trainband> . ?x <http://dbpedia.org/property/restingplace> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "many",
			"seq": "7,10"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "places",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Norwalk_Trainband",
			"label": "trainband norwalk",
			"seq": "64,80"
		}]
	},
	{
		"id": "7f491bee97b44a1eb028ecd5aea8a442",
		"question": "Which nationality of Newin Chidchob is also the nationality of Ajahn Sao Kantaslo ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Newin_Chidchob> <http://dbpedia.org/property/nationality> ?uri. <http://dbpedia.org/resource/Ajahn_Sao_Kantas\u012blo> <http://dbpedia.org/ontology/nationality> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationality",
			"label": "nationality",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Newin_Chidchob",
			"label": "chidchob",
			"seq": "27,34"
		}, {
			"uri": "http://dbpedia.org/resource/Ajahn_Sao_Kantas\u012blo",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a655921614b54e81b96b9832c987cc05",
		"question": "Which movies' composers have won a BAFTA for film music?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/BAFTA_Award_for_Best_Film_Music> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "bafta",
			"seq": "35,39"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composers",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "film",
			"seq": "45,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BAFTA_Award_for_Best_Film_Music",
			"label": "music bafta film for",
			"seq": "35,54"
		}]
	},
	{
		"id": "a4af0ba8a3fe4331ac77ceb9f178ed02",
		"question": "Is Microsoft office written in C++",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Microsoft_Office> <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/C++> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "office",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Office",
			"label": "microsoft office",
			"seq": "3,18"
		}, {
			"uri": "http://dbpedia.org/resource/C++",
			"label": "c++",
			"seq": "31,33"
		}]
	},
	{
		"id": "abca45aad53b4fdbaa4b40cd8f0a6490",
		"question": "Was the altazor drawn by Picasso?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Altazor> <http://dbpedia.org/property/illustrator> <http://dbpedia.org/resource/Pablo_Picasso> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/illustrator",
			"label": "altazor",
			"seq": "8,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Altazor",
			"label": "altazor",
			"seq": "8,14"
		}, {
			"uri": "http://dbpedia.org/resource/Pablo_Picasso",
			"label": "picasso",
			"seq": "25,31"
		}]
	},
	{
		"id": "081763becc9f4357b36cb9ef05856c1d",
		"question": "How many people used to play for Toronto Argonauts?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Toronto_Argonauts>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "for",
			"seq": "29,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto_Argonauts",
			"label": "argonauts toronto",
			"seq": "33,49"
		}]
	},
	{
		"id": "0496d085c1c84057847b2b47a44df27d",
		"question": "What is the allegiance of John Kotelawala ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Kotelawala> <http://dbpedia.org/property/allegiance> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Kotelawala",
			"label": "kotelawala john",
			"seq": "26,40"
		}]
	},
	{
		"id": "522b9a5a5c03491bbbb0b8eb89fc063f",
		"question": "In how many languages did Marika Gombitova sing?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Marika_Gombitov\u00e1> . ?x <http://dbpedia.org/property/language> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "marika",
			"seq": "26,31"
		}, {
			"uri": "http://dbpedia.org/property/language",
			"label": "languages",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marika_Gombitov\u00e1",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "af46582ccf234c2f9f78b845dd3c11ee",
		"question": "What is the common party of Chandra Shekhar and Govinda  ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chandra_Shekhar> <http://dbpedia.org/ontology/otherParty> ?uri. <http://dbpedia.org/resource/Govinda_(actor)> <http://dbpedia.org/ontology/party> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/otherParty",
			"label": "party",
			"seq": "19,23"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chandra_Shekhar",
			"label": "shekhar chandra",
			"seq": "28,42"
		}, {
			"uri": "http://dbpedia.org/resource/Govinda_(actor)",
			"label": "govinda",
			"seq": "48,54"
		}]
	},
	{
		"id": "e1d32c8ac1044f5b815f5bd8b971b736",
		"question": "What is the official residence of the Christopher Daz Figuero which is also the  state of the Cruce a Nado Internacional",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Christopher_D\u00edaz_Figueroa> <http://dbpedia.org/property/residence> ?uri. <http://dbpedia.org/resource/Cruce_a_Nado_Internacional> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "residence",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "cruce",
			"seq": "94,98"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christopher_D\u00edaz_Figueroa",
			"label": "christopher figuero",
			"seq": "38,56"
		}, {
			"uri": "http://dbpedia.org/resource/Cruce_a_Nado_Internacional",
			"label": "internacional",
			"seq": "107,119"
		}]
	},
	{
		"id": "477b36580d6c453e9fe828225b61fbb0",
		"question": "What are the track and field events of Jamiatu Muslim Mindanao?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/property/athletics> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/athletics",
			"label": "the",
			"seq": "9,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao",
			"label": "mindanao jamiatu muslim",
			"seq": "39,61"
		}]
	},
	{
		"id": "c9adffe8cefd409cac7b4cb98a75654b",
		"question": "How many different songwriters have had their songs recorded in London?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/London> . ?x <http://dbpedia.org/ontology/writer> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded in",
			"seq": "52,62"
		}, {
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "songwriters",
			"seq": "19,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/London",
			"label": "london",
			"seq": "64,69"
		}]
	},
	{
		"id": "ce42ceda65bc44e4af05eebe148399f6",
		"question": "Which university of Alexandre Tichonov is the place of death of Valentin Muratov /",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alexandre_Tichonov> <http://dbpedia.org/property/university> ?uri. <http://dbpedia.org/resource/Valentin_Muratov> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/university",
			"label": "university",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "place death",
			"seq": "46,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alexandre_Tichonov",
			"label": "alexandre tichonov",
			"seq": "20,37"
		}, {
			"uri": "http://dbpedia.org/resource/Valentin_Muratov",
			"label": "valentin muratov",
			"seq": "64,79"
		}]
	},
	{
		"id": "acf18faa3348443eb2081c4a516063f7",
		"question": "What are the common houses of US Congress and the Kansas Legislature?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_Congress> <http://dbpedia.org/property/houses> ?uri. <http://dbpedia.org/resource/Kansas_Legislature> <http://dbpedia.org/ontology/house> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/houses",
			"label": "houses",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/house",
			"label": "houses",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Congress",
			"label": "congress",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/resource/Kansas_Legislature",
			"label": "legislature kansas",
			"seq": "50,67"
		}]
	},
	{
		"id": "27b4aeb6443f452ab9936158e4704854",
		"question": "Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/capital> ?uri. <http://dbpedia.org/resource/Nicole_Lai> <http://dbpedia.org/ontology/restingPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "administrative",
			"seq": "6,19"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "64,76"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pulau_Ubin",
			"label": "pulau ubin",
			"seq": "41,50"
		}, {
			"uri": "http://dbpedia.org/resource/Nicole_Lai",
			"label": "nicole lai",
			"seq": "85,94"
		}]
	},
	{
		"id": "bdd508af2ed146e7ba2598dd73e439b0",
		"question": "What is the common military branch of the Thomas Darden and that of Edwin F. Hunter",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomas_Darden> <http://dbpedia.org/ontology/militaryBranch> ?uri. <http://dbpedia.org/resource/Edwin_F._Hunter> <http://dbpedia.org/property/branch> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military branch",
			"seq": "19,33"
		}, {
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thomas_Darden",
			"label": "thomas darden",
			"seq": "42,54"
		}, {
			"uri": "http://dbpedia.org/resource/Edwin_F._Hunter",
			"label": "hunter edwin",
			"seq": "68,79"
		}]
	},
	{
		"id": "c9b8f77f399f4f88b60f4a252aa7e825",
		"question": "Which is the university of Vanderbilt Commodores ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vanderbilt_Commodores> <http://dbpedia.org/ontology/university> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/university",
			"label": "university",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vanderbilt_Commodores",
			"label": "vanderbilt commodores",
			"seq": "27,47"
		}]
	},
	{
		"id": "3a4019df663a4b7694548d7e5fa8ed39",
		"question": "Which athlete was the flag bearer for Switzerland in 2004 and 2008 summer Olympics ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri. <http://dbpedia.org/resource/Switzerland_at_the_2008_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/flagbearer",
			"label": "bearer flag",
			"seq": "22,32"
		}, {
			"uri": "http://dbpedia.org/property/flagbearer",
			"label": "bearer flag",
			"seq": "22,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics",
			"label": "switzerland olympics summer 2004",
			"seq": "38,69"
		}, {
			"uri": "http://dbpedia.org/resource/Switzerland_at_the_2008_Summer_Olympics",
			"label": "switzerland olympics summer 2008",
			"seq": "38,69"
		}]
	},
	{
		"id": "76c3eb3bdc2b4a3d846ba7a10155535c",
		"question": "Which fictional character's portrayer was edited by Roger Barton?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Roger_Barton_(film_editor)> . ?uri <http://dbpedia.org/ontology/portrayer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editing",
			"label": "edited",
			"seq": "42,47"
		}, {
			"uri": "http://dbpedia.org/ontology/portrayer",
			"label": "portrayer",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Roger_Barton_(film_editor)",
			"label": "barton roger",
			"seq": "52,63"
		}]
	},
	{
		"id": "4c72ce839cc74eb5af7c755665ba0b19",
		"question": "Which country does the current team of Darren McNamara belong to?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Darren_McNamara> <http://dbpedia.org/property/currentTeam> ?x . ?x <http://dbpedia.org/ontology/locationCountry> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentTeam",
			"label": "current team",
			"seq": "23,34"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCountry",
			"label": "country",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Darren_McNamara",
			"label": "mcnamara darren",
			"seq": "39,53"
		}]
	},
	{
		"id": "0875010dd1d442a09d23bdaaf2293064",
		"question": "List some pupils of National Science Medal winning scientists?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/National_Medal_of_Science> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prizes",
			"label": "pupils",
			"seq": "10,15"
		}, {
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "scientists",
			"seq": "51,60"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientists",
			"seq": "51,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Medal_of_Science",
			"label": "national science medal",
			"seq": "20,41"
		}]
	},
	{
		"id": "1787b4b57f8648f7a691dc0b6458a93c",
		"question": "Which is the common nation of Louisa Hill and American Football Wellington from?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Louisa_Hill> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/American_Football_Wellington> <http://dbpedia.org/ontology/country> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/country",
			"label": "common",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "common",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Louisa_Hill",
			"label": "louisa hill",
			"seq": "30,40"
		}, {
			"uri": "http://dbpedia.org/resource/American_Football_Wellington",
			"label": "wellington football american",
			"seq": "46,73"
		}]
	},
	{
		"id": "1dcc19d42ba74a9487b2f289e05c435e",
		"question": "Was robert sarvis a nominee of the US Senate?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Robert_Sarvis> <http://dbpedia.org/ontology/nominee> <http://dbpedia.org/resource/United_States_Senate> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nominee",
			"label": "nominee",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Sarvis",
			"label": "sarvis robert",
			"seq": "4,16"
		}, {
			"uri": "http://dbpedia.org/resource/United_States_Senate",
			"label": "senate",
			"seq": "38,43"
		}]
	},
	{
		"id": "82c928cbd1774387a68f7fb4dd3e62ec",
		"question": "Name the TV show which has judge as harry Connick and is broadcasted on Fox Broadcasting Company ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Harry_Connick,_Jr.>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/channel",
			"label": "connick",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/property/judges",
			"label": "judge",
			"seq": "27,31"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fox_Broadcasting_Company",
			"label": "broadcasting",
			"seq": "76,87"
		}, {
			"uri": "http://dbpedia.org/resource/Harry_Connick,_Jr.",
			"label": "connick harry",
			"seq": "36,48"
		}]
	},
	{
		"id": "7ad84cbcf92d434bb36c969e41e4969c",
		"question": "What company brought Riddim Ribbon to the market, and developed the batch monitor?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Batch_Monitor> <http://dbpedia.org/property/developer> ?uri. <http://dbpedia.org/resource/Riddim_Ribbon_feat._The_Black_Eyed_Peas> <http://dbpedia.org/property/distributor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "developed",
			"seq": "54,62"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "ribbon",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Batch_Monitor",
			"label": "monitor batch",
			"seq": "68,80"
		}, {
			"uri": "http://dbpedia.org/resource/Riddim_Ribbon_feat._The_Black_Eyed_Peas",
			"label": "riddim ribbon",
			"seq": "21,33"
		}]
	},
	{
		"id": "e496a9c37c484d349983cda8defe8e0e",
		"question": "Who is the successor of McDonnell Douglas ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/McDonnell_Douglas> <http://dbpedia.org/property/successor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/McDonnell_Douglas",
			"label": "mcdonnell douglas",
			"seq": "24,40"
		}]
	},
	{
		"id": "dbd91640b99b4b68accaf939e7b660b6",
		"question": "where did Boga originate?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Boga_(soft_drink)> <http://dbpedia.org/property/origin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/origin",
			"label": "originate",
			"seq": "15,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Boga_(soft_drink)",
			"label": "boga",
			"seq": "10,13"
		}]
	},
	{
		"id": "8bc8f57fd4dc4186ba01fb3c91533c19",
		"question": "What is the order of the Henry Clay and profession of the William Luther Hill?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Clay> <http://dbpedia.org/property/order> ?uri. <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/order",
			"label": "order",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "profession",
			"seq": "40,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henry_Clay",
			"label": "henry clay",
			"seq": "25,34"
		}, {
			"uri": "http://dbpedia.org/resource/William_Luther_Hill",
			"label": "william luther hill",
			"seq": "58,76"
		}]
	},
	{
		"id": "abdbfd4f0fc94f8abd065f71ee33daaa",
		"question": "Name the co-founder of the record labels which have one of the founder as Chris DuBois ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Chris_DuBois> . ?x <http://dbpedia.org/property/founder> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founder",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/property/founder",
			"label": "founder",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/RecordLabel",
			"label": "record",
			"seq": "27,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chris_DuBois",
			"label": "dubois chris",
			"seq": "74,85"
		}]
	},
	{
		"id": "fc3fe84aeff64b73884ae52e139bfb71",
		"question": "Who is the builder of Estadio Nacional de Costa Rica and also location of Xianren Cave ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Estadio_Nacional_de_Costa_Rica_(2011)> <http://dbpedia.org/ontology/builder> ?uri. <http://dbpedia.org/resource/Xianren_Cave> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "builder",
			"seq": "11,17"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "costa",
			"seq": "42,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Estadio_Nacional_de_Costa_Rica_(2011)",
			"label": "nacional estadio costa",
			"seq": "22,43"
		}, {
			"uri": "http://dbpedia.org/resource/Xianren_Cave",
			"label": "xianren cave",
			"seq": "74,85"
		}]
	},
	{
		"id": "84d8ee90740d450784488c785a892205",
		"question": "what does the cahora bassa flow into?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cahora_Bassa> <http://dbpedia.org/property/inflow> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/inflow",
			"label": "flow",
			"seq": "27,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cahora_Bassa",
			"label": "cahora bassa",
			"seq": "14,25"
		}]
	},
	{
		"id": "1c1c775a8beb4abfaacf4e09a2fdde14",
		"question": "What awards have been given to the anyone who raced in the Lawrence Realization Stakes?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/race> <http://dbpedia.org/resource/Lawrence_Realization_Stakes> . ?x <http://dbpedia.org/ontology/honours> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/race",
			"label": "raced",
			"seq": "46,50"
		}, {
			"uri": "http://dbpedia.org/ontology/honours",
			"label": "who",
			"seq": "42,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lawrence_Realization_Stakes",
			"label": "realization lawrence stakes",
			"seq": "59,85"
		}]
	},
	{
		"id": "5cb7cae6ad1c4e6884cdf454075a9ec5",
		"question": "How many home stadium are there, of the soccer club seasons whose chairman is Merritt Paulson?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Merritt_Paulson> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/chairman",
			"label": "chairman",
			"seq": "66,73"
		}, {
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "stadium home",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Merritt_Paulson",
			"label": "paulson merritt",
			"seq": "78,92"
		}]
	},
	{
		"id": "8cf47e5b92d148bdac37fa14e7f2f0d3",
		"question": "Name the scientist whose academic advisor is Karl Ewald Hasse and supervisor is Georg Meissner?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Karl_Ewald_Hasse> . ?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicAdvisor",
			"label": "academic advisor",
			"seq": "25,40"
		}, {
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "advisor",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Karl_Ewald_Hasse",
			"label": "hasse ewald karl",
			"seq": "45,60"
		}, {
			"uri": "http://dbpedia.org/resource/Georg_Meissner",
			"label": "meissner georg",
			"seq": "80,93"
		}]
	},
	{
		"id": "ef953fcfd8774d258a795e40f2c3858b",
		"question": "Erik Jendresen is writer and Play tone is company of which TV show ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Playtone>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "62,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erik_Jendresen",
			"label": "jendresen erik",
			"seq": "0,13"
		}, {
			"uri": "http://dbpedia.org/resource/Playtone",
			"label": "tone play",
			"seq": "29,37"
		}]
	},
	{
		"id": "20d4fbedbfba402298cd46213df4550e",
		"question": "Name the resting place of Charles Edward Magoon ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_Edward_Magoon> <http://dbpedia.org/property/restingplace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "resting place",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_Edward_Magoon",
			"label": "charles magoon edward",
			"seq": "26,46"
		}]
	},
	{
		"id": "6c81695f20d946cfbb2d34523cce45c7",
		"question": "Where is the residence of the governor of Bangkok ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Bangkok> <http://dbpedia.org/ontology/leaderName> ?x . ?x <http://dbpedia.org/property/residence> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "residence",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/property/residence",
			"label": "residence",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bangkok",
			"label": "bangkok",
			"seq": "42,48"
		}]
	},
	{
		"id": "6674f869460343a08285a7ecc8e8efef",
		"question": "Who owns the newspaper which was founded by Nehru?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jawaharlal_Nehru> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founded",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owns",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Newspaper",
			"label": "newspaper",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jawaharlal_Nehru",
			"label": "nehru",
			"seq": "44,48"
		}]
	},
	{
		"id": "997800a673344212a2c5e15235cd6f2a",
		"question": "who all play for of the american football players at  Quarterback position?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Quarterback> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/position",
			"label": "position",
			"seq": "66,73"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "the",
			"seq": "20,22"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football american",
			"seq": "24,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Quarterback",
			"label": "quarterback",
			"seq": "54,64"
		}]
	},
	{
		"id": "bc55397cdb6c4e01b5cb95814c0c9662",
		"question": "In which region was political figure Wayne Allard elected?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wayne_Allard> <http://dbpedia.org/ontology/region> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/region",
			"label": "region",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wayne_Allard",
			"label": "allard wayne",
			"seq": "37,48"
		}]
	},
	{
		"id": "f194dbdb9cd343d0a3713fc8e635fff2",
		"question": "Which party of Rishang Keishing is the leader at Manendragarh ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Manendragarh> <http://dbpedia.org/ontology/leaderName> ?uri. <http://dbpedia.org/resource/Rishang_Keishing> <http://dbpedia.org/property/party> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "leader",
			"seq": "39,44"
		}, {
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Manendragarh",
			"label": "manendragarh",
			"seq": "49,60"
		}, {
			"uri": "http://dbpedia.org/resource/Rishang_Keishing",
			"label": "keishing rishang",
			"seq": "15,30"
		}]
	},
	{
		"id": "d492192a5490409c9eedf51d1e09b74b",
		"question": "Where is Emmett Hughes from?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Emmett_Hughes> <http://dbpedia.org/ontology/nationality> ?uri  . }",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "emmett",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Emmett_Hughes",
			"label": "hughes emmett",
			"seq": "9,21"
		}]
	},
	{
		"id": "ba1296ab79d44a72b90bc4eda20551f0",
		"question": "Name the district of Robert William Wilcox ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_William_Wilcox> <http://dbpedia.org/property/district> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/district",
			"label": "district",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_William_Wilcox",
			"label": "william wilcox robert",
			"seq": "21,41"
		}]
	},
	{
		"id": "3c2822d238f74e5d8723e577709dbc0d",
		"question": "Who is the author of Karakuri Dji Ultimo ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Karakuri_D\u00f4ji_Ultimo> <http://dbpedia.org/property/author> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "author",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Karakuri_D\u00f4ji_Ultimo",
			"label": "karakuri ultimo",
			"seq": "21,35"
		}]
	},
	{
		"id": "96586e0449a14210adfeea2f9756672f",
		"question": "Name the movies in which music is give by  Laurie Johnson and edited by Anthony Harvey ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Laurie_Johnson> . ?uri <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Anthony_Harvey>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "25,29"
		}, {
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "edited",
			"seq": "62,67"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "31,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Laurie_Johnson",
			"label": "johnson laurie",
			"seq": "43,56"
		}, {
			"uri": "http://dbpedia.org/resource/Anthony_Harvey",
			"label": "anthony harvey",
			"seq": "72,85"
		}]
	},
	{
		"id": "87e83ee1d27a42928457988a175777b9",
		"question": "What are some districts in the Tendring borough?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/borough> <http://dbpedia.org/resource/Tendring> . ?x <http://dbpedia.org/ontology/district> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/borough",
			"label": "borough",
			"seq": "40,46"
		}, {
			"uri": "http://dbpedia.org/ontology/district",
			"label": "districts",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tendring",
			"label": "tendring",
			"seq": "31,38"
		}]
	},
	{
		"id": "72c7e0fedd6143eb940bc3debcdec811",
		"question": "What are the television shows which are in NTSC and 5.1 surround sound?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/format> <http://dbpedia.org/resource/NTSC> . ?uri <http://dbpedia.org/ontology/format> <http://dbpedia.org/resource/5.1_surround_sound> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/format",
			"label": "what",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/format",
			"label": "what",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/NTSC",
			"label": "ntsc",
			"seq": "43,46"
		}, {
			"uri": "http://dbpedia.org/resource/5.1_surround_sound",
			"label": "surround sound 5.1",
			"seq": "52,69"
		}]
	},
	{
		"id": "6027ae40ca0541feb5c23edebbf8dc5c",
		"question": "Give me a count of bacterias which belongs to Bacilli class?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Bacilli>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/class",
			"label": "class",
			"seq": "54,58"
		}, {
			"uri": "http://dbpedia.org/ontology/Bacteria",
			"label": "bacterias",
			"seq": "19,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bacilli",
			"label": "bacilli",
			"seq": "46,52"
		}]
	},
	{
		"id": "87b8d216055241b8bfb033091e0b401d",
		"question": " Name the city whose province is Metropolitan City of Venice and has leader as Luigi Brugnaro ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/province> <http://dbpedia.org/resource/Metropolitan_City_of_Venice> . ?uri <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Luigi_Brugnaro>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/province",
			"label": "province",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "leader name",
			"seq": "1,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Metropolitan_City_of_Venice",
			"label": "metropolitan venice",
			"seq": "33,51"
		}, {
			"uri": "http://dbpedia.org/resource/Luigi_Brugnaro",
			"label": "brugnaro luigi",
			"seq": "79,92"
		}]
	},
	{
		"id": "6f0ee8f2cf284dce972eed151ef62685",
		"question": "In which sects was the aristocrat venerated, whose parent is Thelred the Unready?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/\u00c6thelred_the_Unready> . ?x <http://dbpedia.org/property/veneratedIn> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parent",
			"seq": "51,56"
		}, {
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "venerated,",
			"seq": "34,43"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "unready",
			"seq": "73,79"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/\u00c6thelred_the_Unready",
			"label": "unready thelred",
			"seq": "61,75"
		}]
	},
	{
		"id": "b999081fee064aae850db1e1963425c1",
		"question": "Name the television show whose voice is given by April Stewart and it's distributor is Broadcast syndication?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/April_Stewart> . ?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Broadcast_syndication>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/voices",
			"label": "voice",
			"seq": "31,35"
		}, {
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributor",
			"seq": "72,82"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/April_Stewart",
			"label": "stewart april",
			"seq": "49,61"
		}, {
			"uri": "http://dbpedia.org/resource/Broadcast_syndication",
			"label": "syndication broadcast",
			"seq": "87,107"
		}]
	},
	{
		"id": "468c3951514945a0be198af850f2e036",
		"question": "What is the appliance build jointly by Sony and Asus?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Sony> . ?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Asus> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "appliance",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "appliance",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/InformationAppliance",
			"label": "appliance",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony",
			"label": "sony",
			"seq": "39,42"
		}, {
			"uri": "http://dbpedia.org/resource/Asus",
			"label": "asus",
			"seq": "48,51"
		}]
	},
	{
		"id": "e16be5fbd56d460f90909d96e7655e59",
		"question": "What games are played at institutions affiliated with the international association of universities?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/International_Association_of_Universities> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliated",
			"seq": "38,47"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "association",
			"seq": "72,82"
		}, {
			"uri": "http://dbpedia.org/ontology/EducationalInstitution",
			"label": "institutions",
			"seq": "25,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/International_Association_of_Universities",
			"label": "international universities association",
			"seq": "58,95"
		}]
	},
	{
		"id": "2ab3f24e0f7942e2beb152acb193fba3",
		"question": "Whose units are responsible for close air support?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/role> <http://dbpedia.org/resource/Close_air_support> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/role",
			"label": "are",
			"seq": "12,14"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "units",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Close_air_support",
			"label": "support close air",
			"seq": "32,48"
		}]
	},
	{
		"id": "e0baa3e7583a49c484a441b60d77088a",
		"question": "Which work of Craig van Tilbury is close to the area of The Chess Monthyl ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Chess_Monthly> <http://dbpedia.org/property/discipline> ?uri. <http://dbpedia.org/resource/Craig_Van_Tilbury> <http://dbpedia.org/ontology/occupation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/discipline",
			"label": "close",
			"seq": "35,39"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "craig",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Chess_Monthly",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Craig_Van_Tilbury",
			"label": "tilbury craig van",
			"seq": "14,30"
		}]
	},
	{
		"id": "55b783d8ff214544b144eab6929fe919",
		"question": " Count the participants of the NBA.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/National_Basketball_Association>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/league",
			"label": "the",
			"seq": "7,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Basketball_Association",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4f6ae681c8cd42ca97172a0eb6a2601b",
		"question": "How many politicians are in the US Senate?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/order> <http://dbpedia.org/resource/United_States_Senate>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/order",
			"label": "are",
			"seq": "21,23"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "the",
			"seq": "28,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Senate",
			"label": "senate",
			"seq": "35,40"
		}]
	},
	{
		"id": "c4d5f1f0500b4321ace51aaa29c775f4",
		"question": "How many players participated in the 2004-05 FC Barcelona season?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/2004\u201305_FC_Barcelona_season> <http://dbpedia.org/property/name> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
		"sparql_id": "402",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/name",
			"label": "players",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerPlayer",
			"label": "players",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2004\u201305_FC_Barcelona_season",
			"label": "barcelona season",
			"seq": "48,63"
		}]
	},
	{
		"id": "835041264319434da9eae0ff2fa79b48",
		"question": "Count everyone who studied at an institute which are in Suburbs?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Suburb> . ?uri <http://dbpedia.org/property/education> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "count",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "count",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Suburb",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1538e37aff2242c1a828e3a85c5ed1c1",
		"question": "Which source of broad creek is the Audenried tunnel located ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Broad_Creek_(Susquehanna_River)> <http://dbpedia.org/ontology/source> ?uri. <http://dbpedia.org/resource/Audenried_Tunnel> <http://dbpedia.org/ontology/location> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/source",
			"label": "source",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "52,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Broad_Creek_(Susquehanna_River)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Audenried_Tunnel",
			"label": "audenried tunnel",
			"seq": "35,50"
		}]
	},
	{
		"id": "73855487a1de46828e5f91a3cf063c8d",
		"question": "Count me the number of people whose military unit is involved with Close air support ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/role> <http://dbpedia.org/resource/Close_air_support> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/role",
			"label": "people",
			"seq": "23,28"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military unit",
			"seq": "36,48"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryPerson",
			"label": "military",
			"seq": "36,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Close_air_support",
			"label": "support close",
			"seq": "67,79"
		}]
	},
	{
		"id": "39ff074f19dd4139aa8df33d7f1f58bb",
		"question": "Who were fighting the war where the QF Hotchkiss was used?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/QF_6-pounder_Hotchkiss> <http://dbpedia.org/ontology/usedInWar> ?x . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/usedInWar",
			"label": "used war",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "the",
			"seq": "18,20"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "fighting",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/QF_6-pounder_Hotchkiss",
			"label": "hotchkiss qf",
			"seq": "36,47"
		}]
	},
	{
		"id": "61b80c35c46340f49bd57e0bc1086975",
		"question": "What awards have been given to the artists coming out of the university of Melbourne, faculty of VCA and MCM?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/training> <http://dbpedia.org/resource/University_of_Melbourne_Faculty_of_VCA_and_MCM> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/training",
			"label": "coming",
			"seq": "43,48"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artists",
			"seq": "35,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/University_of_Melbourne_Faculty_of_VCA_and_MCM",
			"label": "university",
			"seq": "61,70"
		}]
	},
	{
		"id": "63e6c4e6a8e54d1d84d524f2d2efec81",
		"question": "Which universities are alma mater to Charles Plosser?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_Plosser> <http://dbpedia.org/property/almaMater> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "23,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_Plosser",
			"label": "plosser charles",
			"seq": "37,51"
		}]
	},
	{
		"id": "e8ba1b2b3f3944aa9e7a39ebfb9d8640",
		"question": "Where was the Temptation Waits recorded?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Temptation_Waits> <http://dbpedia.org/ontology/recordedIn> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded",
			"seq": "31,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Temptation_Waits",
			"label": "temptation waits",
			"seq": "14,29"
		}]
	},
	{
		"id": "571fc2015ffd4fc78f1f711b2042fbe1",
		"question": "Name the species of Panthera leo fossilis ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Panthera_leo_fossilis> <http://dbpedia.org/ontology/species> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/species",
			"label": "species",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Panthera_leo_fossilis",
			"label": "panthera fossilis leo",
			"seq": "20,40"
		}]
	},
	{
		"id": "8498d4343f9b475eb530413e390c99cd",
		"question": "What is the associated band of the musical artist who is the producer of The Trumpet Kings Meet Joe Turner ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Trumpet_Kings_Meet_Joe_Turner> <http://dbpedia.org/property/producer> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "producer",
			"seq": "61,68"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated band",
			"seq": "12,26"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical artist",
			"seq": "35,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Trumpet_Kings_Meet_Joe_Turner",
			"label": "trumpet turner kings",
			"seq": "77,96"
		}]
	},
	{
		"id": "af1582bae86d4e2dbb0237cb9e880064",
		"question": "Name the driver who had a pole finish in 1989 Portuguese Grand Prix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1989_Portuguese_Grand_Prix> <http://dbpedia.org/ontology/poleDriver> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/poleDriver",
			"label": "driver pole",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1989_Portuguese_Grand_Prix",
			"label": "portuguese grand prix 1989",
			"seq": "41,66"
		}]
	},
	{
		"id": "1eb5d6d148254250bbcdae0ff473cf35",
		"question": "what are some common surnames of female people?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/gender> <http://dbpedia.org/resource/Female> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/gender",
			"label": "people",
			"seq": "40,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Female",
			"label": "female",
			"seq": "33,38"
		}]
	},
	{
		"id": "66c29c1492c74dc0887a4d8ed49584f1",
		"question": "Give me the total number of membership of the organisations which have memebers as  Azerbaijan?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Azerbaijan> . ?x <http://dbpedia.org/property/membership> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/membership",
			"label": "membership",
			"seq": "28,37"
		}, {
			"uri": "http://dbpedia.org/property/membership",
			"label": "membership",
			"seq": "28,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Azerbaijan",
			"label": "azerbaijan",
			"seq": "84,93"
		}]
	},
	{
		"id": "6843ef8a60e748b1845aa257e4054420",
		"question": "Who is the builder of the bridge owned by Tabriz ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Tabriz> . ?x <http://dbpedia.org/ontology/builder> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owned",
			"seq": "33,37"
		}, {
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "builder",
			"seq": "11,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridge",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tabriz",
			"label": "tabriz",
			"seq": "42,47"
		}]
	},
	{
		"id": "3d937ff8b74e4b77873053158ed4a571",
		"question": "Which show's theme music was composed by Primus and voiced by Isaac Hayes?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Primus_(band)> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "29,36"
		}, {
			"uri": "http://dbpedia.org/property/voices",
			"label": "voiced",
			"seq": "52,57"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show's",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Primus_(band)",
			"label": "primus and",
			"seq": "41,50"
		}, {
			"uri": "http://dbpedia.org/resource/Isaac_Hayes",
			"label": "isaac hayes",
			"seq": "62,72"
		}]
	},
	{
		"id": "f99ff03fa6aa4f94ac6dd9d409b8706a",
		"question": "Which city's governing body is led by Bruce Harrell?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Bruce_Harrell> . ?uri <http://dbpedia.org/property/governingBody> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "led",
			"seq": "31,33"
		}, {
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governing body",
			"seq": "13,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bruce_Harrell",
			"label": "harrell bruce",
			"seq": "38,50"
		}]
	},
	{
		"id": "789c4ee3592743b49f1e3f05c8a35b1e",
		"question": "What are the reason served by Toll Global Express which is also the country of LPGA ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toll_Global_Express> <http://dbpedia.org/ontology/regionServed> ?uri. <http://dbpedia.org/resource/LPGA> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "served",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "68,74"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toll_Global_Express",
			"label": "express global toll",
			"seq": "30,48"
		}, {
			"uri": "http://dbpedia.org/resource/LPGA",
			"label": "lpga",
			"seq": "79,82"
		}]
	},
	{
		"id": "82e734b7dd9541a89f7cef6cbcb9b9df",
		"question": "Give the total number of places to which airlines go, who also go to Glasgow?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Glasgow_Airport> . ?x <http://dbpedia.org/property/destinations> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/targetAirport",
			"label": "glasgow",
			"seq": "69,75"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "airlines",
			"seq": "41,48"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "25,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Glasgow_Airport",
			"label": "glasgow",
			"seq": "69,75"
		}]
	},
	{
		"id": "0dc38267699e4810bc3da41fe383f592",
		"question": "Where does the rail route, which ends at the Moskovsky station, begins?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Moskovsky_railway_station_(Saint_Petersburg)> . ?x <http://dbpedia.org/ontology/routeStart> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "route,",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "route,",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Moskovsky_railway_station_(Saint_Petersburg)",
			"label": "moskovsky",
			"seq": "45,53"
		}]
	},
	{
		"id": "52db9e57f2664971af4d8b9d4dd8b49f",
		"question": "What are the television shows whose writers did notable work for Band of Brothers ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Band_of_Brothers_(miniseries)> . ?uri <http://dbpedia.org/property/writer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "notable work",
			"seq": "48,59"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "writers",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Band_of_Brothers_(miniseries)",
			"label": "brothers",
			"seq": "73,80"
		}]
	},
	{
		"id": "6d862521319c45838d0b8922b8bd22a1",
		"question": "Was 12th Field Artillery Regiment garrisoned at colorado?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/12th_Field_Artillery_Regiment> <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Colorado> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/garrison",
			"label": "garrisoned",
			"seq": "34,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/12th_Field_Artillery_Regiment",
			"label": "artillery regiment field",
			"seq": "9,32"
		}, {
			"uri": "http://dbpedia.org/resource/Colorado",
			"label": "colorado",
			"seq": "48,55"
		}]
	},
	{
		"id": "606abcc3ca2744b2906bb0e7cdd47256",
		"question": "Who is the common prime minster of William Deaner and mark Latham ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Deane> <http://dbpedia.org/ontology/primeMinister> ?uri. <http://dbpedia.org/resource/Mark_Latham> <http://dbpedia.org/property/primeminister> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "minster",
			"seq": "24,30"
		}, {
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "minster",
			"seq": "24,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Deane",
			"label": "william",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/resource/Mark_Latham",
			"label": "latham mark",
			"seq": "54,64"
		}]
	},
	{
		"id": "44d2ca7a78c54e4e8e4034be3b29abd0",
		"question": "What is the genre of the Band whose home town is County Westmeath?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/County_Westmeath> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "36,44"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "genre",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "25,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/County_Westmeath",
			"label": "westmeath county",
			"seq": "49,64"
		}]
	},
	{
		"id": "696529855616457e86adf4ee2c4833a9",
		"question": "What is the municipality of Patterson Houses ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Patterson_Houses> <http://dbpedia.org/ontology/municipality> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/municipality",
			"label": "municipality",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Patterson_Houses",
			"label": "patterson houses",
			"seq": "28,43"
		}]
	},
	{
		"id": "7c998b30d1464e4096270e79dab19769",
		"question": "What is the successor of the governors whose child is Levi Lincoln, Jr.?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Levi_Lincoln,_Jr.> . ?x <http://dbpedia.org/property/successor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Governor>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "child",
			"seq": "45,49"
		}, {
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Governor",
			"label": "governors",
			"seq": "29,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Levi_Lincoln,_Jr.",
			"label": "lincoln, levi jr.",
			"seq": "54,70"
		}]
	},
	{
		"id": "819cbba8b6af4f75bddb596029d507d6",
		"question": "Was Gareth Southgate a manager of Middlesbrough F.C.?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Gareth_Southgate> <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/Middlesbrough_F.C.> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/managerclubs",
			"label": "manager",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gareth_Southgate",
			"label": "southgate gareth",
			"seq": "4,19"
		}, {
			"uri": "http://dbpedia.org/resource/Middlesbrough_F.C.",
			"label": "middlesbrough f.c.",
			"seq": "34,51"
		}]
	},
	{
		"id": "bfc1096eaf1243c6b9d2d32967f50390",
		"question": "In which city is the building, whose part is the Martin AN/FSG1 anti aircraft system?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/part> <http://dbpedia.org/resource/Martin_AN/FSG-1_Antiaircraft_Defense_System> . ?x <http://dbpedia.org/property/district> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/part",
			"label": "part",
			"seq": "37,40"
		}, {
			"uri": "http://dbpedia.org/resource/Martin_AN/FSG-1_Antiaircraft_Defense_System",
			"label": "aircraft system anti",
			"seq": "64,83"
		}, {
			"uri": "http://dbpedia.org/property/district",
			"label": "aircraft",
			"seq": "69,76"
		}, {
			"uri": "http://dbpedia.org/ontology/Building",
			"label": "building,",
			"seq": "21,29"
		}],
		"entity mapping": []
	},
	{
		"id": "b335029079ec49f5972d4b5846330c15",
		"question": "Count the number of sports played by the universities whihc also plays Volleyball ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/athletics> <http://dbpedia.org/resource/Volleyball> . ?x <http://dbpedia.org/property/athletics> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/athletics",
			"label": "the",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/property/athletics",
			"label": "the",
			"seq": "6,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Volleyball",
			"label": "volleyball",
			"seq": "71,80"
		}]
	},
	{
		"id": "fac30a60a31948d38da3463419202599",
		"question": "In which religions are both Pope Gregory 1 and Edwin of northumbria reverred?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pope_Gregory_I> <http://dbpedia.org/property/veneratedIn> ?uri. <http://dbpedia.org/resource/Edwin_of_Northumbria> <http://dbpedia.org/property/veneratedIn> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "reverred",
			"seq": "68,75"
		}, {
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "reverred",
			"seq": "68,75"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pope_Gregory_I",
			"label": "gregory pope",
			"seq": "28,39"
		}, {
			"uri": "http://dbpedia.org/resource/Edwin_of_Northumbria",
			"label": "northumbria edwin",
			"seq": "47,63"
		}]
	},
	{
		"id": "f3500fd23d3a4a29bff285293f25ae61",
		"question": "Which wine region of Bogdanua is the Croatian Inline hockey team part of ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bogdanu\u0161a> <http://dbpedia.org/ontology/wineRegion> ?uri. <http://dbpedia.org/resource/Croatian_Inline_Hockey_League> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "region wine",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "hockey",
			"seq": "53,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bogdanu\u0161a",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Croatian_Inline_Hockey_League",
			"label": "croatian inline hockey",
			"seq": "37,58"
		}]
	},
	{
		"id": "918fa31e392c498eb55811d9fa7b697c",
		"question": "For which games are Sam Loyd and Eric Schiller both famous?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sam_Loyd> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Eric_Schiller> <http://dbpedia.org/ontology/knownFor> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "for",
			"seq": "0,2"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "for",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sam_Loyd",
			"label": "loyd sam",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/resource/Eric_Schiller",
			"label": "schiller eric",
			"seq": "33,45"
		}]
	},
	{
		"id": "8c33f93613d64297b003b2f378be8c76",
		"question": "Count the number of religions followed by Janta Dal members.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Janata_Dal> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/party",
			"label": "janta",
			"seq": "42,46"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "20,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Janata_Dal",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "26729aff756e4638a9b104c39f66ba59",
		"question": "Does Lousana lie at the end of Alberta Highway 42?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Alberta_Highway_42> <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Lousana>  . }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "end",
			"seq": "24,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alberta_Highway_42",
			"label": "highway alberta",
			"seq": "31,45"
		}, {
			"uri": "http://dbpedia.org/resource/Lousana",
			"label": "lousana",
			"seq": "5,11"
		}]
	},
	{
		"id": "d536516bc342455c89d920f17b86dc1e",
		"question": "Which president of United States had vice president as John Adams?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/John_Adams>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/vicePresident",
			"label": "president",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "vice",
			"seq": "37,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Adams",
			"label": "adams john",
			"seq": "55,64"
		}]
	},
	{
		"id": "d84486681133495fa12247728693ae90",
		"question": "Where are the tombs of kings and queens who have died in England?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/England> . ?x <http://dbpedia.org/property/placeOfBurial> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "england",
			"seq": "57,63"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "of",
			"seq": "20,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "of",
			"seq": "20,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England",
			"label": "england",
			"seq": "57,63"
		}]
	},
	{
		"id": "6e1b08820a934affb050c025035b8a9a",
		"question": "Where was the successor of Hank Brown born?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Hank_Brown> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hank_Brown",
			"label": "brown hank",
			"seq": "27,36"
		}]
	},
	{
		"id": "6e0f647889314bb68424848e0c6e2d13",
		"question": "Greek writers have won which award?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/ethnicity> <http://dbpedia.org/resource/Greeks> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/ethnicity",
			"label": "which",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writers",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Greeks",
			"label": "greek",
			"seq": "0,4"
		}]
	},
	{
		"id": "9e0cf38ea6bf48b18ba968d51da06694",
		"question": "Give me a count of movies whose producer is Larry J. Franco?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Larry_J._Franco>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "32,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "16,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Larry_J._Franco",
			"label": "franco larry j.",
			"seq": "44,58"
		}]
	},
	{
		"id": "847f6bf7556844018c82cace3485a7a9",
		"question": "Who authored the works published in the Jump Square Magazine?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/magazine> <http://dbpedia.org/resource/Jump_Square> . ?x <http://dbpedia.org/property/author> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/magazine",
			"label": "magazine",
			"seq": "52,59"
		}, {
			"uri": "http://dbpedia.org/property/author",
			"label": "authored",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jump_Square",
			"label": "square jump",
			"seq": "40,50"
		}]
	},
	{
		"id": "c6210ff5ca7d44fd8d63a4a8c291e777",
		"question": "Name the partners of Kelly Brook?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kelly_Brook> <http://dbpedia.org/ontology/partner> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/partner",
			"label": "partners",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kelly_Brook",
			"label": "kelly brook",
			"seq": "21,31"
		}]
	},
	{
		"id": "9303edfb0af843e094e5273e975f604e",
		"question": "What is the TV Show whose theme is composed by someone signed up with Prawn Song Records?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Prawn_Song_Records> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "records",
			"seq": "81,87"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "15,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Prawn_Song_Records",
			"label": "records prawn song",
			"seq": "70,87"
		}]
	},
	{
		"id": "3c8a202e192c4382af9462f6ba5b67bb",
		"question": "Count everyone who lives in a place where Indian English is an official language ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Indian_English> . ?uri <http://dbpedia.org/ontology/residence> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/officialLanguage",
			"label": "official language",
			"seq": "63,79"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "everyone",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indian_English",
			"label": "english indian",
			"seq": "42,55"
		}]
	},
	{
		"id": "d1caae4b8c75454d93e63dad304d42b9",
		"question": "Count the  total number of mammals whose phylum is Chordate and order (taxonomy) is Diprotodontia?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate> . ?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Diprotodontia> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/phylum",
			"label": "phylum",
			"seq": "41,46"
		}, {
			"uri": "http://dbpedia.org/ontology/order",
			"label": "order",
			"seq": "64,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chordate",
			"label": "chordate",
			"seq": "51,58"
		}, {
			"uri": "http://dbpedia.org/resource/Diprotodontia",
			"label": "diprotodontia",
			"seq": "84,96"
		}]
	},
	{
		"id": "ab981f539cf94ceea0c6ca6ddf8f673d",
		"question": "Where does Dennis DeConcini and Scott Berkun both live?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Scott_Berkun> <http://dbpedia.org/property/residence> ?uri. <http://dbpedia.org/resource/Dennis_DeConcini> <http://dbpedia.org/property/residence> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "deconcini",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/property/residence",
			"label": "deconcini",
			"seq": "18,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Scott_Berkun",
			"label": "berkun scott",
			"seq": "32,43"
		}, {
			"uri": "http://dbpedia.org/resource/Dennis_DeConcini",
			"label": "deconcini dennis",
			"seq": "11,26"
		}]
	},
	{
		"id": "0c2db5b405ac48dcb16b0ce50df877d1",
		"question": "Where does John A Danaher III work?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_A._Danaher_III> <http://dbpedia.org/property/office> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/office",
			"label": "does",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_A._Danaher_III",
			"label": "danaher john iii",
			"seq": "11,26"
		}]
	},
	{
		"id": "1b2911efce6c47eca4f936300c9bb041",
		"question": "What is the location town of First Church of Christ, Scientist (Pittsburgh) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist_(Pittsburgh)> <http://dbpedia.org/property/locationTown> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationTown",
			"label": "location town",
			"seq": "12,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/First_Church_of_Christ,_Scientist_(Pittsburgh)",
			"label": "(pittsburgh) scientist christ, church first",
			"seq": "29,71"
		}]
	},
	{
		"id": "fcf7d180e4f849d884627ce282a7d659",
		"question": "Whose commanders are Colin Powell and Jaber Al-Ahmad Al-Sabah?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Colin_Powell> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Jaber_Al-Ahmad_Al-Sabah> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colin_Powell",
			"label": "powell colin",
			"seq": "21,32"
		}, {
			"uri": "http://dbpedia.org/resource/Jaber_Al-Ahmad_Al-Sabah",
			"label": "al-sabah al-ahmad jaber",
			"seq": "38,60"
		}]
	},
	{
		"id": "3cf7f7b831724521976ea028c52cda60",
		"question": "Where was MacKenzie Miller born?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MacKenzie_Miller> <http://dbpedia.org/property/birthPlace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "miller",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/MacKenzie_Miller",
			"label": "mackenzie miller",
			"seq": "10,25"
		}]
	},
	{
		"id": "9986303e97774cd7a0eb26d611ebfb8c",
		"question": "Who is the person whose home town is Fairmount, Indiana?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Fairmount,_Indiana>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "24,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fairmount,_Indiana",
			"label": "fairmount, indiana",
			"seq": "37,54"
		}]
	},
	{
		"id": "9077ab52a3a64bf292bf4d297b63970e",
		"question": "What disease led to the demise of Letitia MacTavish Hargrave and Martino Martini ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> <http://dbpedia.org/ontology/deathCause> ?uri. <http://dbpedia.org/resource/Martino_Martini> <http://dbpedia.org/ontology/deathCause> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>}",
		"sparql_id": "315",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "demise",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "demise",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Disease",
			"label": "disease",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Letitia_MacTavish_Hargrave",
			"label": "mactavish hargrave letitia",
			"seq": "34,59"
		}, {
			"uri": "http://dbpedia.org/resource/Martino_Martini",
			"label": "martino martini",
			"seq": "65,79"
		}]
	},
	{
		"id": "e79c464a0faa4544b7317d38d2bc4f10",
		"question": "Is George Lucas the cinematographer of 6-18-67?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/6-18-67> <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/George_Lucas> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cinematography",
			"label": "cinematographer",
			"seq": "20,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/6-18-67",
			"label": "6-18-67",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/resource/George_Lucas",
			"label": "george lucas",
			"seq": "3,14"
		}]
	},
	{
		"id": "cae3487d42164d05933fe21a244679b0",
		"question": "List the shows whose company's successor is Amblin Television.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Amblin_Television> . ?uri <http://dbpedia.org/ontology/company> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/ontology/company",
			"label": "company's",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television.",
			"seq": "51,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Amblin_Television",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "3d79316015644677b50c9a9187864e97",
		"question": "Count the total number of battles fought by the military people which fought in Levant ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Levant> . ?x <http://dbpedia.org/property/battles> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battles",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "battles",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Levant",
			"label": "levant",
			"seq": "80,85"
		}]
	},
	{
		"id": "1defef355b2c46aabc6b54f50c3c95fc",
		"question": "List the graves of the royalities which have been buried at Beeleigh Abbey ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Beeleigh_Abbey> . ?x <http://dbpedia.org/property/placeOfBurial> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "buried",
			"seq": "50,55"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "buried",
			"seq": "50,55"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "royalities",
			"seq": "23,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Beeleigh_Abbey",
			"label": "beeleigh abbey",
			"seq": "60,73"
		}]
	},
	{
		"id": "5202a1a43509411c97552eca15f0aa05",
		"question": "In which country does the Auckland rugby union team play  ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Auckland_rugby_union_team> <http://dbpedia.org/ontology/league> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/league",
			"label": "team",
			"seq": "47,50"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Auckland_rugby_union_team",
			"label": "auckland union rugby team",
			"seq": "26,50"
		}]
	},
	{
		"id": "e0d5791e431e4dfaa75b9ae5077f76f6",
		"question": "Which genre of books does the writer of The Many Hands write?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Many_Hands> <http://dbpedia.org/property/author> ?x . ?x <http://dbpedia.org/ontology/genre> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "the",
			"seq": "26,28"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genre",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Many_Hands",
			"label": "hands many the",
			"seq": "26,39"
		}]
	},
	{
		"id": "4f1f3f16733d448ab1125085d243f9f5",
		"question": "Name the sports played by Jamiatu Muslim Mindanao?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/ontology/athletics> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/athletics",
			"label": "the",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao",
			"label": "mindanao jamiatu muslim",
			"seq": "26,48"
		}]
	},
	{
		"id": "28cd37f0c056464ba94caaf56714d451",
		"question": "Laozi has authored which books ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Laozi>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "authored",
			"seq": "10,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "25,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Laozi",
			"label": "laozi",
			"seq": "0,4"
		}]
	},
	{
		"id": "c453823ead1c41b19be3ef0d12dffbcf",
		"question": "Which person naratted The Incredible Hulk and also the writer of Tales of Suspense ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)> <http://dbpedia.org/property/narrated> ?uri. <http://dbpedia.org/resource/Tales_of_Suspense> <http://dbpedia.org/property/writers> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/narrated",
			"label": "naratted",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/property/writers",
			"label": "writer",
			"seq": "55,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)",
			"label": "incredible hulk",
			"seq": "26,40"
		}, {
			"uri": "http://dbpedia.org/resource/Tales_of_Suspense",
			"label": "suspense tales",
			"seq": "65,78"
		}]
	},
	{
		"id": "8cb5fda5cb994ed4a6559ef08a02c270",
		"question": "What is the television show whose opening theme is Te Deum (Charpentier)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Te_Deum_(Charpentier)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opening theme",
			"seq": "34,46"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Te_Deum_(Charpentier)",
			"label": "(charpentier) deum",
			"seq": "54,71"
		}]
	},
	{
		"id": "d8d26021d6d14746b178240e9a73b5c5",
		"question": "What is the total number of participant in conflict of SFOR?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/SFOR> . ?x <http://dbpedia.org/ontology/battle> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "total",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "total",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/SFOR",
			"label": "sfor",
			"seq": "55,58"
		}]
	},
	{
		"id": "2a7a43ae00334b49bc601589c3cad2a4",
		"question": "From how many different places have people gone to the Harward Medical School?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Harvard_Medical_School> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "to",
			"seq": "48,49"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "places",
			"seq": "24,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harvard_Medical_School",
			"label": "medical school",
			"seq": "63,76"
		}]
	},
	{
		"id": "1d9e39c815aa470e98599d9dce9429ac",
		"question": "Name the river passing through Reading Berkshire and has mouth place at Essex ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Reading,_Berkshire> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "at",
			"seq": "69,70"
		}, {
			"uri": "http://dbpedia.org/ontology/mouthPlace",
			"label": "place mouth",
			"seq": "57,67"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Reading,_Berkshire",
			"label": "berkshire reading",
			"seq": "31,47"
		}, {
			"uri": "http://dbpedia.org/resource/Essex",
			"label": "essex",
			"seq": "72,76"
		}]
	},
	{
		"id": "8799ce61b9644208a9ceb5a2851990ef",
		"question": "How many movies music composers are associated with Demis Roussos ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Demis_Roussos> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "associated",
			"seq": "36,45"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composers",
			"seq": "22,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "with",
			"seq": "47,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Demis_Roussos",
			"label": "roussos demis",
			"seq": "52,64"
		}]
	},
	{
		"id": "68b47db5171449cab76dfcb3095290e0",
		"question": "Who all play for the Ivory Coast football team?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Ivory_Coast_national_football_team> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "team",
			"seq": "42,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ivory_Coast_national_football_team",
			"label": "football ivory coast team",
			"seq": "21,45"
		}]
	},
	{
		"id": "535f797b72ad4456b8a00fc9099707aa",
		"question": "Which party has come in power at both Balangir and Amaravila in india?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Balangir_district> <http://dbpedia.org/ontology/leaderName> ?uri. <http://dbpedia.org/resource/Amaravila> <http://dbpedia.org/ontology/leaderName> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "and",
			"seq": "47,49"
		}, {
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "and",
			"seq": "47,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Balangir_district",
			"label": "balangir",
			"seq": "38,45"
		}, {
			"uri": "http://dbpedia.org/resource/Amaravila",
			"label": "amaravila",
			"seq": "51,59"
		}]
	},
	{
		"id": "9145f59edef44c5a9a17a3fe513e7567",
		"question": "What are some common games played in PATTS college of aeronautics and Jamiatu muslim mindanao?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?uri. <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/property/athletics> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/athletics",
			"label": "aeronautics",
			"seq": "54,64"
		}, {
			"uri": "http://dbpedia.org/property/athletics",
			"label": "aeronautics",
			"seq": "54,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PATTS_College_of_Aeronautics",
			"label": "aeronautics college patts",
			"seq": "37,61"
		}, {
			"uri": "http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao",
			"label": "mindanao jamiatu muslim",
			"seq": "70,92"
		}]
	},
	{
		"id": "371d70719856441eaf31d0f5046aa071",
		"question": "List the total number of executive producer of TV show which have one of the executiive producer as Steven Moffat ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Steven_Moffat> . ?x <http://dbpedia.org/property/executiveProducer> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive",
			"seq": "25,33"
		}, {
			"uri": "http://dbpedia.org/property/executiveProducer",
			"label": "executive",
			"seq": "25,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steven_Moffat",
			"label": "steven moffat",
			"seq": "100,112"
		}]
	},
	{
		"id": "e3aa6561a7cc47cf9a28949ebf5a6af6",
		"question": "What is the nation of the Major All Stars Season 1 and Pioneer Corporation ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Major_All_Stars_Season_1> <http://dbpedia.org/property/country> ?uri. <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/country",
			"label": "pioneer",
			"seq": "55,61"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "pioneer",
			"seq": "55,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Major_All_Stars_Season_1",
			"label": "season stars major",
			"seq": "26,43"
		}, {
			"uri": "http://dbpedia.org/resource/Pioneer_Corporation",
			"label": "corporation pioneer",
			"seq": "55,73"
		}]
	},
	{
		"id": "45e3091f10f74546abd072865a7e6b78",
		"question": "How many things belong to a division of plant kingdom?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Plant> . ?uri <http://dbpedia.org/ontology/division> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/kingdom",
			"label": "kingdom",
			"seq": "46,52"
		}, {
			"uri": "http://dbpedia.org/ontology/division",
			"label": "division",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Plant",
			"label": "plant",
			"seq": "40,44"
		}]
	},
	{
		"id": "66a0125dafb4421d8a52c9f2008e8a18",
		"question": "Where is Semnani and Assyrian Neo-Aramaic spoken ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Semnani_languages> . ?uri <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Assyrian_Neo-Aramaic>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/languages",
			"label": "and",
			"seq": "17,19"
		}, {
			"uri": "http://dbpedia.org/ontology/language",
			"label": "and",
			"seq": "17,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Semnani_languages",
			"label": "semnani",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/resource/Assyrian_Neo-Aramaic",
			"label": "neo-aramaic assyrian",
			"seq": "21,40"
		}]
	},
	{
		"id": "cf9b667b1efe4e6cb0e035746c6bba30",
		"question": "Does Massimo Liverani play for Abarth?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Massimo_Liverani> <http://dbpedia.org/property/currentTeam> <http://dbpedia.org/resource/Abarth> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentTeam",
			"label": "liverani",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Massimo_Liverani",
			"label": "liverani massimo",
			"seq": "5,20"
		}, {
			"uri": "http://dbpedia.org/resource/Abarth",
			"label": "abarth",
			"seq": "31,36"
		}]
	},
	{
		"id": "a737185e8cc848e3ab56d97876bccbff",
		"question": "What is the fictional character which has Clan McDuck and Ludwig Von Draken as relatives?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ludwig_Von_Drake> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "79,87"
		}, {
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "79,87"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "12,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Clan_McDuck",
			"label": "mcduck clan",
			"seq": "42,52"
		}, {
			"uri": "http://dbpedia.org/resource/Ludwig_Von_Drake",
			"label": "ludwig",
			"seq": "58,63"
		}]
	},
	{
		"id": "9e456d1b7d7a40c499f3f40a98c78f52",
		"question": "Name the appliance produced by Foxconn and its OS is provided by PlayStation 3 system software ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Foxconn> . ?uri <http://dbpedia.org/property/os> <http://dbpedia.org/resource/PlayStation_3_system_software>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "software",
			"seq": "86,93"
		}, {
			"uri": "http://dbpedia.org/property/os",
			"label": "os",
			"seq": "47,48"
		}, {
			"uri": "http://dbpedia.org/ontology/InformationAppliance",
			"label": "appliance",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Foxconn",
			"label": "foxconn",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/resource/PlayStation_3_system_software",
			"label": "playstation software system",
			"seq": "65,91"
		}]
	},
	{
		"id": "3e9133d020ca44b7a475fec7231d4ad5",
		"question": "Name the source Island of Bayou ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Island_Bayou_(Oklahoma)> <http://dbpedia.org/ontology/source> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/source",
			"label": "source",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Island_Bayou_(Oklahoma)",
			"label": "island bayou",
			"seq": "16,27"
		}]
	},
	{
		"id": "3ae2345e8e8844b1bcdc731a3b106eb9",
		"question": "Did Alexander Magleby study at the Dartmouth College?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Alexander_Magleby> <http://dbpedia.org/ontology/university> <http://dbpedia.org/resource/Dartmouth_College> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/university",
			"label": "study",
			"seq": "22,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alexander_Magleby",
			"label": "alexander magleby",
			"seq": "4,20"
		}, {
			"uri": "http://dbpedia.org/resource/Dartmouth_College",
			"label": "dartmouth college",
			"seq": "35,51"
		}]
	},
	{
		"id": "a7f07e0669f64b349876998f51a1f5c9",
		"question": "Where was Thomy Bourdelle born?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomy_Bourdelle> <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "born",
			"seq": "26,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thomy_Bourdelle",
			"label": "bourdelle thomy",
			"seq": "10,24"
		}]
	},
	{
		"id": "6abe087917704e3f90ab3bbeb58cc5bb",
		"question": "Companies headquartered in Geneva own which TV Shows?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Geneva> . ?uri <http://dbpedia.org/property/company> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/headquarter",
			"label": "headquartered",
			"seq": "10,22"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "companies",
			"seq": "0,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Geneva",
			"label": "geneva",
			"seq": "27,32"
		}]
	},
	{
		"id": "5a9664b9e22545ef8fbc5d56f48ce5c1",
		"question": "Who owns the schools which have a penguin as its mascot?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Penguin> . ?x <http://dbpedia.org/ontology/authority> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "49,54"
		}, {
			"uri": "http://dbpedia.org/ontology/authority",
			"label": "mascot",
			"seq": "49,54"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Penguin",
			"label": "penguin",
			"seq": "34,40"
		}]
	},
	{
		"id": "01a41f39bd59458cb89c2df139ccc213",
		"question": "In which city is the sister station of WCSE-LP located ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/WCSE-LP> <http://dbpedia.org/property/sisterStations> ?x . ?x <http://dbpedia.org/property/city> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterStations",
			"label": "station sister",
			"seq": "21,34"
		}, {
			"uri": "http://dbpedia.org/property/city",
			"label": "city",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WCSE-LP",
			"label": "wcse-lp",
			"seq": "39,45"
		}]
	},
	{
		"id": "042fb5267c974d90beae49ab51013b82",
		"question": "What is the total number of relgions followed by people born in Bangkok?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Bangkok> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "the",
			"seq": "8,10"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "relgions",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bangkok",
			"label": "bangkok",
			"seq": "64,70"
		}]
	},
	{
		"id": "700b88a3eb40456a8ec23a305cc5e2e5",
		"question": "Twin cities 400 is operated by what city, which is the birthplace of Leona Baumgarter?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Twin_Cities_400> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Leona_Baumgartner> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operated by",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birthplace",
			"seq": "55,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Twin_Cities_400",
			"label": "cities twin 400",
			"seq": "0,14"
		}, {
			"uri": "http://dbpedia.org/resource/Leona_Baumgartner",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "b7b9319df8c949b1a7ddcb86ae2879b0",
		"question": "Where are the homestadiums of the seasons chaired by Merritt Paulson?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Merritt_Paulson> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/chairman",
			"label": "chaired",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "homestadiums",
			"seq": "14,25"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClubSeason",
			"label": "seasons",
			"seq": "34,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Merritt_Paulson",
			"label": "paulson merritt",
			"seq": "53,67"
		}]
	},
	{
		"id": "d4cce931336041649e567c91e9bfb7c6",
		"question": "What is the products of the BBC Multimedia and series of the The Last Resort (Doctor Who)",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/BBC_Multimedia> <http://dbpedia.org/property/products> ?uri. <http://dbpedia.org/resource/The_Last_Resort_(Doctor_Who)> <http://dbpedia.org/ontology/series> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "products",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "47,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC_Multimedia",
			"label": "multimedia bbc",
			"seq": "28,41"
		}, {
			"uri": "http://dbpedia.org/resource/The_Last_Resort_(Doctor_Who)",
			"label": "(doctor resort",
			"seq": "70,83"
		}]
	},
	{
		"id": "c09fbce16b2a4485808f9dbd9870a971",
		"question": "What are the gadgets whose manufacturing company is founded by Terry Gou?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Terry_Gou> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Device>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founded",
			"seq": "52,58"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufacturing",
			"seq": "27,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Device",
			"label": "gadgets",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Terry_Gou",
			"label": "terry gou",
			"seq": "63,71"
		}]
	},
	{
		"id": "f129083b942f4b85aa56e2f5b04507ce",
		"question": "In which of the parties that have governed over Rishikesh, does Govinda belong too?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Govinda_(actor)> <http://dbpedia.org/ontology/party> ?uri. <http://dbpedia.org/resource/Rishikesh> <http://dbpedia.org/ontology/leaderName> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/party",
			"label": "parties",
			"seq": "16,22"
		}, {
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "governed",
			"seq": "34,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Govinda_(actor)",
			"label": "govinda",
			"seq": "64,70"
		}, {
			"uri": "http://dbpedia.org/resource/Rishikesh",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "47d43bd9adb04270b992a2f42fdd440d",
		"question": "List softwares written in C++ and runs on Mac OS ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Mac_OS> . ?uri <http://dbpedia.org/ontology/programmingLanguage> <http://dbpedia.org/resource/C++>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "written",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/programmingLanguage",
			"label": "written",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "softwares",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mac_OS",
			"label": "mac os",
			"seq": "42,47"
		}, {
			"uri": "http://dbpedia.org/resource/C++",
			"label": "c++",
			"seq": "26,28"
		}]
	},
	{
		"id": "6e2a9956638d4d918c8bc965f66fb09a",
		"question": "What are the home stadiums of the things Leonid Fedun has been the chairman of?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Leonid_Fedun> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/chairman",
			"label": "chairman",
			"seq": "67,74"
		}, {
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "stadiums",
			"seq": "18,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Leonid_Fedun",
			"label": "leonid fedun",
			"seq": "41,52"
		}]
	},
	{
		"id": "a82ecf0242f748acbf844b9c3181614a",
		"question": "For which team does hunter pence play for?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hunter_Pence> <http://dbpedia.org/ontology/team> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "10,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hunter_Pence",
			"label": "hunter pence",
			"seq": "20,31"
		}]
	},
	{
		"id": "113d32b939f643a3ba85439d8bf95a1f",
		"question": "How many have former teams as Indianapolis Colts and Carolina Panthers?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Indianapolis_Colts> . ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Carolina_Panthers>} ",
		"sparql_id": "107",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indianapolis_Colts",
			"label": "indianapolis colts",
			"seq": "30,47"
		}, {
			"uri": "http://dbpedia.org/resource/Carolina_Panthers",
			"label": "panthers carolina",
			"seq": "53,69"
		}]
	},
	{
		"id": "5932978b97be44fd926095c0dfaad785",
		"question": "Of what all has David Ian Salter been an editor of?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/David_Ian_Salter> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editing",
			"label": "editor",
			"seq": "41,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Ian_Salter",
			"label": "salter david ian",
			"seq": "16,31"
		}]
	},
	{
		"id": "1455c7629a9f4b2cab3a809b4feac666",
		"question": "Who owns Ivanpah Solar Power Facility?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ivanpah_Solar_Power_Facility> <http://dbpedia.org/ontology/owner> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "power",
			"seq": "23,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ivanpah_Solar_Power_Facility",
			"label": "facility ivanpah solar power",
			"seq": "9,36"
		}]
	},
	{
		"id": "163faec9938d47df8df231307032c826",
		"question": "Where are ethnic group located which speak Nebraskan?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Nebraska> <http://dbpedia.org/ontology/language> ?x . ?x <http://dbpedia.org/property/region> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/language",
			"label": "located",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/property/region",
			"label": "are",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/ontology/EthnicGroup",
			"label": "ethnic group",
			"seq": "10,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nebraska",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "b9bf97d01e9745d681eda36b557db3a8",
		"question": "Name the sharehoders of The National Herald ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_National_Herald_(India)> <http://dbpedia.org/ontology/owner> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "name",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_National_Herald_(India)",
			"label": "national herald",
			"seq": "28,42"
		}]
	},
	{
		"id": "b4ab98c79b904735bf86e5221256116e",
		"question": "List some things that Swedish people have become famous for?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/stateOfOrigin> <http://dbpedia.org/resource/Sweden> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "for",
			"seq": "56,58"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "for",
			"seq": "56,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sweden",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ebc8f78170a84f1b82725c6d20206319",
		"question": "Which  governing body of the Oahu Railway and Land Company is also the military branch of the Jimmy Quillen ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oahu_Railway_and_Land_Company> <http://dbpedia.org/property/governingBody> ?uri. <http://dbpedia.org/resource/Jimmy_Quillen> <http://dbpedia.org/ontology/militaryBranch> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governing body",
			"seq": "7,20"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military branch",
			"seq": "71,85"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oahu_Railway_and_Land_Company",
			"label": "railway company",
			"seq": "34,48"
		}, {
			"uri": "http://dbpedia.org/resource/Jimmy_Quillen",
			"label": "quillen jimmy",
			"seq": "94,106"
		}]
	},
	{
		"id": "8265fe61d94940a4b5d099c217d00245",
		"question": "How many things are made by companies who produce mass media articles?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Mass_media> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "produce",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "are",
			"seq": "16,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mass_media",
			"label": "media mass",
			"seq": "50,59"
		}]
	},
	{
		"id": "1d9fe6f6eb72444b935342fb4d81dad1",
		"question": "Name the rivers who originate from Essex?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthPlace",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Essex",
			"label": "essex",
			"seq": "35,39"
		}]
	},
	{
		"id": "2e77394fb30c488ba0cb3132da2b5e95",
		"question": "What is the place of death of the royalties one of whose parents was Adam Ludwik Czartoryski?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Adam_Ludwik_Czartoryski> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parents",
			"seq": "57,63"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "place death",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "royalties",
			"seq": "34,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Adam_Ludwik_Czartoryski",
			"label": "czartoryski ludwik adam",
			"seq": "69,91"
		}]
	},
	{
		"id": "dcb720202a9b4b1bac3951450a734b3a",
		"question": "Name the fictional character whose voice's animator is Hardie Gramatky?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/animator> <http://dbpedia.org/resource/Hardie_Gramatky> . ?uri <http://dbpedia.org/ontology/voice> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/animator",
			"label": "animator",
			"seq": "43,50"
		}, {
			"uri": "http://dbpedia.org/ontology/voice",
			"label": "voice's",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "9,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hardie_Gramatky",
			"label": "gramatky hardie",
			"seq": "55,69"
		}]
	},
	{
		"id": "be6257ece9e546bc821b110aed45c1b1",
		"question": "What actor starred in Splash and is married to Rita Wilson?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Splash_(film)> <http://dbpedia.org/property/starring> ?uri. <http://dbpedia.org/resource/Rita_Wilson> <http://dbpedia.org/property/spouse> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "starred",
			"seq": "11,17"
		}, {
			"uri": "http://dbpedia.org/property/spouse",
			"label": "splash",
			"seq": "22,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Splash_(film)",
			"label": "splash",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/resource/Rita_Wilson",
			"label": "wilson rita",
			"seq": "47,57"
		}]
	},
	{
		"id": "6f768f7b19424f46bd39e6238cd0662c",
		"question": "Is lion an animal?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Lion> <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/kingdom",
			"label": "lion",
			"seq": "3,6"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lion",
			"label": "lion",
			"seq": "3,6"
		}, {
			"uri": "http://dbpedia.org/resource/Animal",
			"label": "animal",
			"seq": "11,16"
		}]
	},
	{
		"id": "6e7b5dec0d264850bf90a1ff6256427a",
		"question": "Which players have represented Los Angeles Angels of Anaheim?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Los_Angeles_Angels_of_Anaheim>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "anaheim",
			"seq": "53,59"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballPlayer",
			"label": "players",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Los_Angeles_Angels_of_Anaheim",
			"label": "angeles anaheim angels",
			"seq": "35,56"
		}]
	},
	{
		"id": "d8d554549f9949d5833e62ee180939b7",
		"question": "What are the movies whose distributor's headquarters is New York?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/New_York> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "40,51"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributor's",
			"seq": "26,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "27,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York",
			"label": "york new",
			"seq": "56,63"
		}]
	},
	{
		"id": "e0472e2206c9496a9f05207287956509",
		"question": "List the shows whose network is run by BBC.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/BBC> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningCompany",
			"label": "whose",
			"seq": "15,19"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f6f5d9f089ee4019abd4ce4fb8a6235e",
		"question": "What is the religion of the political party which is an international party of Hamas?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Hamas> <http://dbpedia.org/property/international> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/international",
			"label": "international",
			"seq": "56,68"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/PoliticalParty",
			"label": "political party",
			"seq": "28,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hamas",
			"label": "hamas",
			"seq": "79,83"
		}]
	},
	{
		"id": "0cae9ed212d44d639d21c9747fe2c523",
		"question": "What are some games availible on nintendo's virtual console?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Virtual_Console>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "console",
			"seq": "52,58"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Virtual_Console",
			"label": "virtual console",
			"seq": "44,58"
		}]
	},
	{
		"id": "2f91368c9d5c424791d014f111214078",
		"question": "For which party's PM did Chidambaram Subramaniam serve?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Chidambaram_Subramaniam> <http://dbpedia.org/property/primeminister> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "subramaniam",
			"seq": "37,47"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party's",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chidambaram_Subramaniam",
			"label": "subramaniam chidambaram",
			"seq": "25,47"
		}]
	},
	{
		"id": "8b32454f2b2e4618a018054db9635e5b",
		"question": "Which bacteria's taxonomic class is Bacilli?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Bacilli>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/class",
			"label": "class",
			"seq": "27,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Bacteria",
			"label": "bacteria's",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bacilli",
			"label": "bacilli",
			"seq": "36,42"
		}]
	},
	{
		"id": "4b8c7926f42b4c87ab22e1d6116e4c50",
		"question": "Who was the prime minister of Victor Hope, 2nd Marquess of Linlithgow and also the editor of British Gazette ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Victor_Hope,_2nd_Marquess_of_Linlithgow> <http://dbpedia.org/property/primeminister> ?uri. <http://dbpedia.org/resource/British_Gazette> <http://dbpedia.org/property/editor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "minister prime",
			"seq": "12,25"
		}, {
			"uri": "http://dbpedia.org/property/editor",
			"label": "editor",
			"seq": "83,88"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Victor_Hope,_2nd_Marquess_of_Linlithgow",
			"label": "linlithgow marquess victor hope,",
			"seq": "30,61"
		}, {
			"uri": "http://dbpedia.org/resource/British_Gazette",
			"label": "gazette british",
			"seq": "93,107"
		}]
	},
	{
		"id": "0f11a466b24a499382890661bf1fc5ef",
		"question": "Is the magnolia place of the greek revival architectural style?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Magnolia_Place> <http://dbpedia.org/ontology/architecturalStyle> <http://dbpedia.org/resource/Greek_Revival_architecture> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architecturalStyle",
			"label": "architectural style",
			"seq": "43,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Magnolia_Place",
			"label": "magnolia place",
			"seq": "7,20"
		}, {
			"uri": "http://dbpedia.org/resource/Greek_Revival_architecture",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6f8d3265d2f34fe2823b67ae38748882",
		"question": "Name the fictional character whose relative are Duck family and Clan McDuck?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Duck_family_(Disney)> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relative",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relative",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "9,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Duck_family_(Disney)",
			"label": "family duck",
			"seq": "48,58"
		}, {
			"uri": "http://dbpedia.org/resource/Clan_McDuck",
			"label": "mcduck clan",
			"seq": "64,74"
		}]
	},
	{
		"id": "faa44f1aaa984ca3b8508b206a3d0434",
		"question": "List the movies whose cast member were born in Scotland.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Scotland> . ?uri <http://dbpedia.org/ontology/starring> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "scotland.",
			"seq": "47,55"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "in",
			"seq": "44,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Scotland",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "57e62ad01fb74f208589fefbb58693e3",
		"question": "Name the movies distributed by Warner Bros. and directed by Ridley Scott ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Warner_Bros.> . ?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Ridley_Scott>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "16,26"
		}, {
			"uri": "http://dbpedia.org/property/director",
			"label": "directed",
			"seq": "48,55"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "ridley",
			"seq": "60,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Warner_Bros.",
			"label": "warner bros.",
			"seq": "31,42"
		}, {
			"uri": "http://dbpedia.org/resource/Ridley_Scott",
			"label": "ridley scott",
			"seq": "60,71"
		}]
	},
	{
		"id": "b3e73fe9523d4661876a510c322a6d66",
		"question": "Which recognized title of Frank Thorne is also the product of Playboy Enterprise ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Playboy_Enterprises> <http://dbpedia.org/property/products> ?uri. <http://dbpedia.org/resource/Frank_Thorne> <http://dbpedia.org/ontology/award> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "product",
			"seq": "51,57"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "product",
			"seq": "51,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Playboy_Enterprises",
			"label": "enterprise playboy",
			"seq": "62,79"
		}, {
			"uri": "http://dbpedia.org/resource/Frank_Thorne",
			"label": "thorne frank",
			"seq": "26,37"
		}]
	},
	{
		"id": "56360270525d4a54a2201b9a4d1f5f55",
		"question": "Who is the publisher of the comic, one of whose authors is Kentaro Takekuma ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/writers> <http://dbpedia.org/resource/Kentaro_Takekuma> . ?x <http://dbpedia.org/property/publisher> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Comic>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writers",
			"label": "is",
			"seq": "4,5"
		}, {
			"uri": "http://dbpedia.org/property/publisher",
			"label": "publisher",
			"seq": "11,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Comic",
			"label": "comic,",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kentaro_Takekuma",
			"label": "takekuma kentaro",
			"seq": "59,74"
		}]
	},
	{
		"id": "1c72a1337f9d4e5aabf86018b6b52340",
		"question": "What was the result of Operation Autumn Clouds ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Operation_Autumn_Clouds> <http://dbpedia.org/property/result> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/result",
			"label": "result",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Operation_Autumn_Clouds",
			"label": "operation clouds autumn",
			"seq": "23,45"
		}]
	},
	{
		"id": "9de9adf4a6e94b7a8958262626c02714",
		"question": "List the significant building of the architect who also designed  Kiev?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/significantBuilding> <http://dbpedia.org/resource/Kiev> . ?x <http://dbpedia.org/ontology/significantBuilding> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/significantBuilding",
			"label": "significant building",
			"seq": "9,28"
		}, {
			"uri": "http://dbpedia.org/ontology/significantBuilding",
			"label": "significant building",
			"seq": "9,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Architect",
			"label": "architect",
			"seq": "37,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kiev",
			"label": "kiev",
			"seq": "66,69"
		}]
	},
	{
		"id": "246f18a55ab64b0fbb6478194175418d",
		"question": "Was George Washington on the rank of general?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/George_Washington> <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/General_(United_States)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryRank",
			"label": "rank",
			"seq": "29,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_Washington",
			"label": "washington george",
			"seq": "4,20"
		}, {
			"uri": "http://dbpedia.org/resource/General_(United_States)",
			"label": "general",
			"seq": "37,43"
		}]
	},
	{
		"id": "68516929d5024193a4b6db18b81526ba",
		"question": "What softwares were created by Apple Productivity Experience Group ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Apple_Productivity_Experience_Group> <http://dbpedia.org/ontology/product> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/product",
			"label": "productivity",
			"seq": "37,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Apple_Productivity_Experience_Group",
			"label": "productivity experience group apple",
			"seq": "31,65"
		}]
	},
	{
		"id": "f43f2072568f44aaa9450a64e62ca3da",
		"question": "Count the number of judges who've come on CTV network shows.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/CTV_Television_Network> . ?x <http://dbpedia.org/property/judges> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network",
			"seq": "46,52"
		}, {
			"uri": "http://dbpedia.org/property/judges",
			"label": "judges",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CTV_Television_Network",
			"label": "network",
			"seq": "46,52"
		}]
	},
	{
		"id": "3d48aaabb0914e66b31f1f131e6694fa",
		"question": "What are the shows whose creator has worked as a screenwriter?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Screenwriting> . ?uri <http://dbpedia.org/ontology/creator> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "creator",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "creator",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Screenwriting",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a9c3b3eccb964ced854274422bbdec73",
		"question": "Who is the person whose opponent's father is Newman Haynes Clanton?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Newman_Haynes_Clanton> . ?uri <http://dbpedia.org/ontology/opponent> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "person",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponent's",
			"seq": "24,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Newman_Haynes_Clanton",
			"label": "clanton newman haynes",
			"seq": "45,65"
		}]
	},
	{
		"id": "d33ef66c27f14eab8306e08bdf8b8973",
		"question": "What is the mountain whose parent mountain peak is Nevado de Toluca?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parentMountainPeak> <http://dbpedia.org/resource/Nevado_de_Toluca>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentMountainPeak",
			"label": "mountain",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Mountain",
			"label": "mountain",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nevado_de_Toluca",
			"label": "toluca nevado",
			"seq": "51,63"
		}]
	},
	{
		"id": "5f5159b391bc417294f896820d53baf8",
		"question": "Which religions are practiced in India?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/India> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "religions",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "religions",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/India",
			"label": "india",
			"seq": "33,37"
		}]
	},
	{
		"id": "3a8332895e0e42bf98c79235b4002de4",
		"question": "What is the Recorded of the Kaptaan is also the headquarters of the Orient News ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kaptaan> <http://dbpedia.org/property/recorded> ?uri. <http://dbpedia.org/resource/Orient_News> <http://dbpedia.org/property/headquarters> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/recorded",
			"label": "recorded",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "48,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kaptaan",
			"label": "kaptaan",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/resource/Orient_News",
			"label": "orient news",
			"seq": "68,78"
		}]
	},
	{
		"id": "4d97dbf2259544de93801dc834e88eb7",
		"question": "Is Gaza Strip the result of Operation Autumn Clouds?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Operation_Autumn_Clouds> <http://dbpedia.org/property/result> <http://dbpedia.org/resource/Gaza_Strip> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/result",
			"label": "result",
			"seq": "18,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Operation_Autumn_Clouds",
			"label": "operation clouds autumn",
			"seq": "28,50"
		}, {
			"uri": "http://dbpedia.org/resource/Gaza_Strip",
			"label": "strip gaza",
			"seq": "3,12"
		}]
	},
	{
		"id": "8937f9f398fb4c4091e5b258bed5abf1",
		"question": "Name the office holder whose predecessor is Henry E. Catto, Jr. and successor is Adrian A. Basora?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Henry_E._Catto,_Jr.> . ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "29,39"
		}, {
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "68,76"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henry_E._Catto,_Jr.",
			"label": "catto, henry",
			"seq": "44,55"
		}, {
			"uri": "http://dbpedia.org/resource/Adrian_A._Basora",
			"label": "basora adrian",
			"seq": "81,93"
		}]
	},
	{
		"id": "606ecd9c542e4d1d8cd5322a41818757",
		"question": "?What are the airline hubs of Cascade Airways",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/property/hubs> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hubs",
			"seq": "22,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cascade_Airways",
			"label": "cascade airways",
			"seq": "30,44"
		}]
	},
	{
		"id": "9ca41a6f79a14b689dcfae0764808cd6",
		"question": "Is the Frank R Lillie House has the Chicago architecture?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Frank_R._Lillie_House> <http://dbpedia.org/ontology/architecturalStyle> <http://dbpedia.org/resource/Chicago> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architecturalStyle",
			"label": "architecture",
			"seq": "44,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frank_R._Lillie_House",
			"label": "lillie house frank",
			"seq": "7,24"
		}, {
			"uri": "http://dbpedia.org/resource/Chicago",
			"label": "chicago",
			"seq": "36,42"
		}]
	},
	{
		"id": "b727f0394eae4116bc3af96be4da1c1d",
		"question": "Grey gppse and eristoff is produced by which company?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Grey_Goose_(vodka)> <http://dbpedia.org/property/manufacturer> ?uri. <http://dbpedia.org/resource/Eristoff> <http://dbpedia.org/property/manufacturer> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/manufacturer",
			"label": "company",
			"seq": "45,51"
		}, {
			"uri": "http://dbpedia.org/property/manufacturer",
			"label": "company",
			"seq": "45,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Grey_Goose_(vodka)",
			"label": "grey",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/resource/Eristoff",
			"label": "eristoff",
			"seq": "15,22"
		}]
	},
	{
		"id": "6f9848de2af84f4fbcded6f13f857cf2",
		"question": "Which politician's constituency is led by the SF Board of Supervisors?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderTitle> <http://dbpedia.org/resource/San_Francisco_Board_of_Supervisors> . ?uri <http://dbpedia.org/property/constituency> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderTitle",
			"label": "led",
			"seq": "35,37"
		}, {
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "19,30"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "which",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Francisco_Board_of_Supervisors",
			"label": "supervisors board",
			"seq": "49,65"
		}]
	},
	{
		"id": "eec96c7f869747149720de05e392503f",
		"question": "Name the common musical band of Take Me There and Tonight's the Night ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)> <http://dbpedia.org/ontology/musicalBand> ?uri. <http://dbpedia.org/resource/Tonight's_the_Night_(Blackstreet_song)> <http://dbpedia.org/ontology/musicalBand> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalBand",
			"label": "musical band",
			"seq": "16,27"
		}, {
			"uri": "http://dbpedia.org/ontology/musicalBand",
			"label": "musical band",
			"seq": "16,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)",
			"label": "there take",
			"seq": "32,41"
		}, {
			"uri": "http://dbpedia.org/resource/Tonight's_the_Night_(Blackstreet_song)",
			"label": "tonight's",
			"seq": "50,58"
		}]
	},
	{
		"id": "19ab52b648234276ae7f2e54b88f4ea7",
		"question": "What are the county seats of the region which operates the Boeing Field?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Boeing_Field> <http://dbpedia.org/ontology/operator> ?x . ?x <http://dbpedia.org/ontology/countySeat> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operates",
			"seq": "46,53"
		}, {
			"uri": "http://dbpedia.org/ontology/countySeat",
			"label": "county",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Region",
			"label": "region",
			"seq": "33,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Boeing_Field",
			"label": "boeing field",
			"seq": "59,70"
		}]
	},
	{
		"id": "1bcf8001ee594f30bb75b84ca66dabab",
		"question": "What is the university whose campus are Indiana and Iowa?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Iowa> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "campus",
			"seq": "29,34"
		}, {
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "campus",
			"seq": "29,34"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indiana",
			"label": "indiana",
			"seq": "40,46"
		}, {
			"uri": "http://dbpedia.org/resource/Iowa",
			"label": "iowa",
			"seq": "52,55"
		}]
	},
	{
		"id": "dbc169a2e4a34f00b36ca8be031fe8f5",
		"question": "To which political party does the writer of In the Bazaars of Hyderabad belong?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/In_the_Bazaars_of_Hyderabad> <http://dbpedia.org/property/writer> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/In_the_Bazaars_of_Hyderabad",
			"label": "hyderabad bazaars the",
			"seq": "30,50"
		}]
	},
	{
		"id": "292a555f92794024a9334e9248fd2c1a",
		"question": "List the other members of the band of which Juelz Santana is a part?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Juelz_Santana> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "members",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "members",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "30,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Juelz_Santana",
			"label": "santana juelz",
			"seq": "44,56"
		}]
	},
	{
		"id": "4a03be4b69ea4b10ba1e3d95a5f86f62",
		"question": "Where did the 2015 MLS All-Star Game take place?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/property/city> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2015_MLS_All-Star_Game",
			"label": "all-star game 2015 mls",
			"seq": "14,35"
		}]
	},
	{
		"id": "0373e167503941919cb83707358aee72",
		"question": "What is the style of architecture of Pontiac Building ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pontiac_Building> <http://dbpedia.org/ontology/architecturalStyle> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architecturalStyle",
			"label": "architecture",
			"seq": "21,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pontiac_Building",
			"label": "building pontiac",
			"seq": "37,52"
		}]
	},
	{
		"id": "447a43a67f144236a29b626f440ec2a0",
		"question": "Name some people working at someplace owned by News Corp.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owners> <http://dbpedia.org/resource/News_Corp> . ?uri <http://dbpedia.org/ontology/employer> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owners",
			"label": "owned",
			"seq": "38,42"
		}, {
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "people",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/News_Corp",
			"label": "news",
			"seq": "47,50"
		}]
	},
	{
		"id": "a5012e9aba5b40bbbc06155442c8940c",
		"question": "Name the constituency of  Jonas Gahr Stre ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jonas_Gahr_St\u00f8re> <http://dbpedia.org/property/constituency> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jonas_Gahr_St\u00f8re",
			"label": "jonas",
			"seq": "26,30"
		}]
	},
	{
		"id": "262bc6894dcd4fda8c651eb310b44496",
		"question": "What is the mascot of military in Quezon city?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/Quezon_City> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/garrison",
			"label": "mascot",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "military",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Quezon_City",
			"label": "quezon city",
			"seq": "34,44"
		}]
	},
	{
		"id": "6689a88cf3af48998efaa96b5466f7cb",
		"question": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lennon_Legend:_The_Very_Best_of_John_Lennon_(DVD)> <http://dbpedia.org/ontology/director> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "directors",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lennon_Legend:_The_Very_Best_of_John_Lennon_(DVD)",
			"label": "legend: lennon (dvd)",
			"seq": "22,41"
		}]
	},
	{
		"id": "0213a459e69a402da238e1ea7bf48f91",
		"question": "Who was the president at the time when the opponent of Benjamin Spock held office?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Benjamin_Spock> . ?x <http://dbpedia.org/property/incumbent> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponent",
			"seq": "43,50"
		}, {
			"uri": "http://dbpedia.org/property/incumbent",
			"label": "opponent",
			"seq": "43,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Benjamin_Spock",
			"label": "benjamin spock",
			"seq": "55,68"
		}]
	},
	{
		"id": "f96d57842d93417d8597a69c57604dd8",
		"question": "For how many other teams have the members of Atlant Moscow Oblast played?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/playedFor> <http://dbpedia.org/resource/Atlant_Moscow_Oblast> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "played for",
			"seq": "0,9"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Atlant_Moscow_Oblast",
			"label": "oblast moscow atlant",
			"seq": "45,64"
		}]
	},
	{
		"id": "dfc6f1364b4f43ac8569c33167e51bee",
		"question": "What are some products of the company whose parent is BBC?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/parent> <http://dbpedia.org/resource/BBC> . ?x <http://dbpedia.org/property/products> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/parent",
			"label": "parent",
			"seq": "44,49"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "products",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "30,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC",
			"label": "bbc",
			"seq": "54,56"
		}]
	},
	{
		"id": "c24ec1614e724dd8aa615e6054a4f8f3",
		"question": "Janaka Thissakuttiarachchi follows what religion, which once employed Atisa Srijnana too?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Janaka_Thissakuttiarachchi> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Ati\u015ba> <http://dbpedia.org/ontology/occupation> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religion",
			"label": "religion,",
			"seq": "40,48"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "atisa",
			"seq": "70,74"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Janaka_Thissakuttiarachchi",
			"label": "thissakuttiarachchi janaka",
			"seq": "0,25"
		}, {
			"uri": "http://dbpedia.org/resource/Ati\u015ba",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e8ea9501be9241a191a46ec67d21f79b",
		"question": "How many sports are played in maharashtran schools?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/state> <http://dbpedia.org/resource/Maharashtra> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sport>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/state",
			"label": "are",
			"seq": "16,18"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Sport",
			"label": "sports",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maharashtra",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6924f47eafe44da9954f729ada2342f5",
		"question": "List the served region of the organisations of Trade association.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Trade_association> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/type",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "served region",
			"seq": "9,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organisations",
			"seq": "30,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Trade_association",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7c0d1f9a0e5e430ea5c1edbef2007075",
		"question": "Whose famous works have been illustrated by E W Kemble?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/illustrator> <http://dbpedia.org/resource/E._W._Kemble> . ?uri <http://dbpedia.org/ontology/notableWork> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/illustrator",
			"label": "illustrated",
			"seq": "29,39"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "works",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/E._W._Kemble",
			"label": "kemble",
			"seq": "48,53"
		}]
	},
	{
		"id": "3180262923484726bbeebc7b398144d1",
		"question": "Who is the owner of the South end ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_South_End> <http://dbpedia.org/property/owners> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owners",
			"label": "owner",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_South_End",
			"label": "south the end",
			"seq": "7,19"
		}]
	},
	{
		"id": "6b763993596b4edab96dd9ec9211ba78",
		"question": "List down the commanders of Battle of Fort stephenson ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Fort_Stephenson> <http://dbpedia.org/ontology/commander> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "14,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Battle_of_Fort_Stephenson",
			"label": "stephenson battle fort",
			"seq": "28,49"
		}]
	},
	{
		"id": "ba7f17bb21dc46b9979f8bffb96711ed",
		"question": "Which cities of the American Mediterranean Sea has Nickname Entronque de Herradura?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/American_Mediterranean_Sea> <http://dbpedia.org/property/cities> ?uri. <http://dbpedia.org/resource/Entronque_de_Herradura> <http://dbpedia.org/property/nickname> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "51,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Mediterranean_Sea",
			"label": "mediterranean american",
			"seq": "20,41"
		}, {
			"uri": "http://dbpedia.org/resource/Entronque_de_Herradura",
			"label": "herradura entronque",
			"seq": "60,78"
		}]
	},
	{
		"id": "7e627205a122439da56687c80907b67e",
		"question": "What is the municipality of the Brown's Corners, Toronto and also the  place of birth of the George Karrys",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brown's_Corners,_Toronto> <http://dbpedia.org/ontology/municipality> ?uri. <http://dbpedia.org/resource/George_Karrys> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/municipality",
			"label": "municipality",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "71,81"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brown's_Corners,_Toronto",
			"label": "corners, toronto brown's",
			"seq": "32,55"
		}, {
			"uri": "http://dbpedia.org/resource/George_Karrys",
			"label": "karrys george",
			"seq": "93,105"
		}]
	},
	{
		"id": "1cf22c99abb546c680faf2a6b74be80c",
		"question": "List the books whose authors are in Alcal de Henares.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Alcal\u00e1_de_Henares> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "authors",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alcal\u00e1_de_Henares",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "bc844f916fc34914ad85428c10a7184c",
		"question": "Is Guatemala a unitary state?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Guatemala> <http://dbpedia.org/ontology/governmentType> <http://dbpedia.org/resource/Unitary_state> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governmentType",
			"label": "state",
			"seq": "23,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Guatemala",
			"label": "guatemala",
			"seq": "3,11"
		}, {
			"uri": "http://dbpedia.org/resource/Unitary_state",
			"label": "unitary state",
			"seq": "15,27"
		}]
	},
	{
		"id": "498f586cd8424c38b3af6f802891e55a",
		"question": "what are some journals of academic Philosophy",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/discipline> <http://dbpedia.org/resource/Philosophy> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/discipline",
			"label": "some",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Philosophy",
			"label": "philosophy",
			"seq": "35,44"
		}]
	},
	{
		"id": "5894b0cd2f60427089e1eb2fc7c0607f",
		"question": "By which member of parliament was Provisional Government of Saskatchewan led?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/order> <http://dbpedia.org/resource/Provisional_Government_of_Saskatchewan>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MemberOfParliament>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/order",
			"label": "government",
			"seq": "46,55"
		}, {
			"uri": "http://dbpedia.org/ontology/MemberOfParliament",
			"label": "parliament member",
			"seq": "9,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Provisional_Government_of_Saskatchewan",
			"label": "saskatchewan provisional government",
			"seq": "34,68"
		}]
	},
	{
		"id": "d5b9d26028c14c77af021dfcc3cc13c2",
		"question": "Did taylor swift do the theme song of The Farmer Wants a Wife?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Farmer_Wants_a_Wife_(Australian_TV_series)> <http://dbpedia.org/property/opentheme> <http://dbpedia.org/resource/Taylor_Swift> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/opentheme",
			"label": "theme",
			"seq": "24,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Farmer_Wants_a_Wife_(Australian_TV_series)",
			"label": "farmer wants",
			"seq": "42,53"
		}, {
			"uri": "http://dbpedia.org/resource/Taylor_Swift",
			"label": "taylor swift",
			"seq": "4,15"
		}]
	},
	{
		"id": "2c6285f3f7ad4840802f57a3ec025f80",
		"question": "Where does the Kentucky cycle take place?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Kentucky_Cycle> <http://dbpedia.org/property/place> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/place",
			"label": "place",
			"seq": "35,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Kentucky_Cycle",
			"label": "kentucky cycle the",
			"seq": "11,28"
		}]
	},
	{
		"id": "953d596a5ee1434a969fadbb3a3741a1",
		"question": "Which drinks have emerged from the US?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/property/locationCity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "drinks",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/locationCity",
			"label": "which",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/Beverage",
			"label": "emerged",
			"seq": "18,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a0e58ea11b974c7a85d86e9f454b77c8",
		"question": "What currencies have been prevalent in the country whose national anthem is La Marseillaise?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/anthem> <http://dbpedia.org/resource/La_Marseillaise> . ?x <http://dbpedia.org/ontology/currency> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/anthem",
			"label": "anthem",
			"seq": "66,71"
		}, {
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currencies",
			"seq": "5,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/La_Marseillaise",
			"label": "marseillaise",
			"seq": "79,90"
		}]
	},
	{
		"id": "b698642c0c4944baad539ca67412e78a",
		"question": "Name the college of Jon Curran ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Curran> <http://dbpedia.org/property/college> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/college",
			"label": "college",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jon_Curran",
			"label": "curran jon",
			"seq": "20,29"
		}]
	},
	{
		"id": "3280fa6df4c244cfa8768b869e50218f",
		"question": "Where is Vietnam Airlines located ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vietnam_Airlines> <http://dbpedia.org/ontology/location> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vietnam_Airlines",
			"label": "airlines vietnam",
			"seq": "9,24"
		}]
	},
	{
		"id": "685ddf1e1ed641888613c5f9c85267b7",
		"question": "Who is the chancellor of the university which affiliates the Dartington College of Arts?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Dartington_College_of_Arts> . ?x <http://dbpedia.org/property/chancellor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliates",
			"seq": "46,55"
		}, {
			"uri": "http://dbpedia.org/property/chancellor",
			"label": "chancellor",
			"seq": "11,20"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "29,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dartington_College_of_Arts",
			"label": "dartington college",
			"seq": "61,78"
		}]
	},
	{
		"id": "e33e3f1a2e9d462cb891215cad82dc5b",
		"question": "How many sitcoms are there whose theme music is composed by a New Yorker?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/New_York> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "how",
			"seq": "0,2"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "48,55"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "sitcoms",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "5a8d27913f2348a5a0a9641d53ef1704",
		"question": "Comcast SportsNet is broadcasted in what area, which also has the Michigan Renaissance Festival?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michigan_Renaissance_Festival> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Comcast_SportsNet_Chicago> <http://dbpedia.org/ontology/broadcastArea> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "comcast",
			"seq": "0,6"
		}, {
			"uri": "http://dbpedia.org/ontology/broadcastArea",
			"label": "broadcasted",
			"seq": "21,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michigan_Renaissance_Festival",
			"label": "renaissance michigan festival",
			"seq": "66,94"
		}, {
			"uri": "http://dbpedia.org/resource/Comcast_SportsNet_Chicago",
			"label": "sportsnet comcast",
			"seq": "0,16"
		}]
	},
	{
		"id": "46394065a08e478b946f7994c131b013",
		"question": "List all the tenants of the stadium where the WWF Summer Slam 2004 took place.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/SummerSlam_(2004)> <http://dbpedia.org/property/venue> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/venue",
			"label": "where",
			"seq": "36,40"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenants",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/SummerSlam_(2004)",
			"label": "summer slam 2004",
			"seq": "50,65"
		}]
	},
	{
		"id": "64cb26ab6c624d9daee385d3e86ed7c4",
		"question": "Which writer of A streetcar Named Desire is also the author of The Catastrophe of Success ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A_Streetcar_Named_Desire_(play)> <http://dbpedia.org/property/writer> ?uri. <http://dbpedia.org/resource/The_Catastrophe_of_Success> <http://dbpedia.org/ontology/author> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "author",
			"seq": "53,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A_Streetcar_Named_Desire_(play)",
			"label": "streetcar desire named",
			"seq": "18,39"
		}, {
			"uri": "http://dbpedia.org/resource/The_Catastrophe_of_Success",
			"label": "catastrophe success",
			"seq": "67,85"
		}]
	},
	{
		"id": "6ad1a5e54b384e689efa82debf6b0c4f",
		"question": "Which venue of indy PopCon is also the death palce of Louis Le Cocqq ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indy_PopCon> <http://dbpedia.org/property/venue> ?uri. <http://dbpedia.org/resource/Louis_LeCocq> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/venue",
			"label": "venue",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "death",
			"seq": "39,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indy_PopCon",
			"label": "popcon indy",
			"seq": "15,25"
		}, {
			"uri": "http://dbpedia.org/resource/Louis_LeCocq",
			"label": "louis",
			"seq": "54,58"
		}]
	},
	{
		"id": "9ba55398005e4e5c9354a2f73d3f4113",
		"question": "What state was Cyrus Mann born in, and has the famous Downriver ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Downriver> <http://dbpedia.org/ontology/state> ?uri. <http://dbpedia.org/resource/Cyrus_Mann> <http://dbpedia.org/property/birthPlace> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/state",
			"label": "state",
			"seq": "5,9"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "the",
			"seq": "43,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Downriver",
			"label": "downriver",
			"seq": "54,62"
		}, {
			"uri": "http://dbpedia.org/resource/Cyrus_Mann",
			"label": "cyrus mann",
			"seq": "15,24"
		}]
	},
	{
		"id": "d585bb851bb2430d9893a3976b2310bd",
		"question": "Who is the appointer of William Cushing ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Cushing> <http://dbpedia.org/ontology/appointer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/appointer",
			"label": "appointer",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Cushing",
			"label": "william cushing",
			"seq": "24,38"
		}]
	},
	{
		"id": "331c4b8c9a8a40a78ec70c332af7cf77",
		"question": "Where is the origin of Filbert's Old Time Root Beer ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Filbert's_Old_Time_Root_Beer> <http://dbpedia.org/ontology/origin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "origin",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Filbert's_Old_Time_Root_Beer",
			"label": "filbert's time root beer old",
			"seq": "23,50"
		}]
	},
	{
		"id": "e7cb1c037fd84b45a5a0b5e4de0f3ef2",
		"question": "Name the TV show with theme music by Primus and broadcasted on Comedy Central ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Comedy_Central> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Primus_(band)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/network",
			"label": "central",
			"seq": "70,76"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "theme music",
			"seq": "22,32"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Comedy_Central",
			"label": "central comedy",
			"seq": "63,76"
		}, {
			"uri": "http://dbpedia.org/resource/Primus_(band)",
			"label": "primus and",
			"seq": "37,46"
		}]
	},
	{
		"id": "f82d0e347f514ec1bcb41a22922ce6aa",
		"question": "Name the musical band of Written in the Stars ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Written_in_the_Stars_(Elton_John_and_LeAnn_Rimes_song)> <http://dbpedia.org/ontology/musicalBand> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalBand",
			"label": "musical band",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Written_in_the_Stars_(Elton_John_and_LeAnn_Rimes_song)",
			"label": "written stars",
			"seq": "25,37"
		}]
	},
	{
		"id": "5fa9fa2055eb4ddbb39a16de5cdc76ec",
		"question": "List down all the associcated musical artist of the artist of In a Word or 2 ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/In_a_Word_or_2> <http://dbpedia.org/property/artist> ?x . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "38,43"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associcated",
			"seq": "18,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/In_a_Word_or_2",
			"label": "word in",
			"seq": "62,68"
		}]
	},
	{
		"id": "e18fd4075a914d4a8455c72375bdd4b9",
		"question": "Count the affiliations of International Union of Anarchists?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/International_Union_of_Anarchists> <http://dbpedia.org/property/affiliation> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliations",
			"seq": "10,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/International_Union_of_Anarchists",
			"label": "international anarchists",
			"seq": "26,49"
		}]
	},
	{
		"id": "965fd3fdc73445e6b1bddc3d141ebb3c",
		"question": "Hugh Hefner is editor of which magazine?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/editor> <http://dbpedia.org/resource/Hugh_Hefner>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editor",
			"label": "editor",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Magazine",
			"label": "magazine",
			"seq": "31,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hugh_Hefner",
			"label": "hefner hugh",
			"seq": "0,10"
		}]
	},
	{
		"id": "3bb69cb3b8634c3689b4846fcbb449cd",
		"question": "Which are the previous broadcast networks of sister channels of WGBC?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/WGBC_(DT2)> <http://dbpedia.org/property/sisterStations> ?x . ?x <http://dbpedia.org/ontology/formerBroadcastNetwork> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterStations",
			"label": "sister",
			"seq": "45,50"
		}, {
			"uri": "http://dbpedia.org/ontology/formerBroadcastNetwork",
			"label": "broadcast",
			"seq": "23,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WGBC_(DT2)",
			"label": "wgbc",
			"seq": "64,67"
		}]
	},
	{
		"id": "94de863bd4184aa2a7f508889eabee26",
		"question": "On which subjects does the author of the novel Thud! delve?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "subjects",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thud!",
			"label": "thud!",
			"seq": "47,51"
		}]
	},
	{
		"id": "103349c9b1c646bca70a2c8d7a4458d3",
		"question": "Is Lancy a city close to Geneva?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/ontology/neighboringMunicipality> <http://dbpedia.org/resource/Lancy> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/neighboringMunicipality",
			"label": "city",
			"seq": "11,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Geneva",
			"label": "geneva",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/resource/Lancy",
			"label": "lancy",
			"seq": "3,7"
		}]
	},
	{
		"id": "d3b2ba7427da4cfba3470565de8c8c64",
		"question": "Which awards have been given to the horse who sired Triplicate ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Triplicate> <http://dbpedia.org/property/sire> ?x . ?x <http://dbpedia.org/ontology/honours> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sire",
			"label": "sired",
			"seq": "46,50"
		}, {
			"uri": "http://dbpedia.org/ontology/honours",
			"label": "horse",
			"seq": "36,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Triplicate",
			"label": "triplicate",
			"seq": "52,61"
		}]
	},
	{
		"id": "24e52abfafbb43d491744511cbfbfb38",
		"question": "Who is the american football player whose highschool is Ringgold High School (Pennsylvania)?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/highschool> <http://dbpedia.org/resource/Ringgold_High_School_(Pennsylvania)> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/highschool",
			"label": "highschool",
			"seq": "42,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ringgold_High_School_(Pennsylvania)",
			"label": "(pennsylvania)",
			"seq": "77,90"
		}]
	},
	{
		"id": "f075032d8bb14876a93a95f98cda7330",
		"question": "Give me some organizations working for Environmentalism",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/purpose",
			"label": "some",
			"seq": "8,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organizations",
			"seq": "13,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Environmentalism",
			"label": "environmentalism",
			"seq": "39,54"
		}]
	},
	{
		"id": "dbb28edd6b1a49f384baf3d63c64a0b3",
		"question": "List books authored by Miguel de Cervantes and published by Francisco de Robles ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Miguel_de_Cervantes> . ?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Francisco_de_Robles>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "authored",
			"seq": "11,18"
		}, {
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "published",
			"seq": "47,55"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miguel_de_Cervantes",
			"label": "cervantes miguel",
			"seq": "23,38"
		}, {
			"uri": "http://dbpedia.org/resource/Francisco_de_Robles",
			"label": "francisco robles",
			"seq": "60,75"
		}]
	},
	{
		"id": "6205616c0ee048eab5e020480247818b",
		"question": "What territory of Sino French War was the battle of Raoul Magrin-Vernerey fought ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sino-French_War> <http://dbpedia.org/ontology/territory> ?uri. <http://dbpedia.org/resource/Raoul_Magrin-Vernerey> <http://dbpedia.org/property/battles> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "territory",
			"seq": "5,13"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "battle",
			"seq": "42,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sino-French_War",
			"label": "french sino war",
			"seq": "18,32"
		}, {
			"uri": "http://dbpedia.org/resource/Raoul_Magrin-Vernerey",
			"label": "magrin-vernerey raoul",
			"seq": "52,72"
		}]
	},
	{
		"id": "e4fd9eca450f4cb2ba2b2bc4f87102ad",
		"question": "Is Wahoo! the previous work of Honeybuns?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Honeybuns> <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Wahoo!> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/previousWork",
			"label": "previous work",
			"seq": "14,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Honeybuns",
			"label": "honeybuns",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/resource/Wahoo!",
			"label": "wahoo!",
			"seq": "3,8"
		}]
	},
	{
		"id": "f0e59cb06b254517af079b9825cebc6b",
		"question": "List the awards given to the race horses bred by Willis Sharpe Kilmer.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/breeder> <http://dbpedia.org/resource/Willis_Sharpe_Kilmer> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/breeder",
			"label": "bred",
			"seq": "41,44"
		}, {
			"uri": "http://dbpedia.org/ontology/honours",
			"label": "horses",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/ontology/RaceHorse",
			"label": "horses",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Willis_Sharpe_Kilmer",
			"label": "willis sharpe",
			"seq": "49,61"
		}]
	},
	{
		"id": "2ba0e19e73f04f15b8858aec5e4e7bd7",
		"question": "What is the constituency of the leader of Labour Party (Norway)?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Labour_Party_(Norway)> <http://dbpedia.org/property/leader> ?x . ?x <http://dbpedia.org/property/constituency> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leader",
			"label": "leader",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Labour_Party_(Norway)",
			"label": "(norway) labour party",
			"seq": "42,62"
		}]
	},
	{
		"id": "d7c5b09663594b8d9849e4b0a4561068",
		"question": "List the tomb of the royalties whose burial place is Little Easton ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Little_Easton> . ?x <http://dbpedia.org/property/placeOfBurial> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "burial place",
			"seq": "37,48"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "burial place",
			"seq": "37,48"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "royalties",
			"seq": "21,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Little_Easton",
			"label": "little easton",
			"seq": "53,65"
		}]
	},
	{
		"id": "0a6db2441bd741369578947633c0ff1f",
		"question": "The players born in Bellaire, Ohio have played for which team?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Bellaire,_Ohio> . ?x <http://dbpedia.org/ontology/team> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "played",
			"seq": "40,45"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "57,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bellaire,_Ohio",
			"label": "bellaire, ohio",
			"seq": "20,33"
		}]
	},
	{
		"id": "1ffae1c9ef7d48869e193bade845992d",
		"question": "What games can be played in schools founded by Fr. Orlando?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fr._Orlando> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "founded",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "schools",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fr._Orlando",
			"label": "orlando",
			"seq": "51,57"
		}]
	},
	{
		"id": "715cd1e1ff8d43868e231fe93c6699c9",
		"question": "What are the television shows whose voices is given by  Mona Marshall?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/voices",
			"label": "voices",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mona_Marshall",
			"label": "marshall mona",
			"seq": "56,68"
		}]
	},
	{
		"id": "1f3e42c050df4103ab6f4ee7b80bc037",
		"question": "Which TV show distributed by Warner Bros. has Christopher Franke as one of the artist ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Warner_Bros._Television> . ?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "14,24"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "79,84"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Warner_Bros._Television",
			"label": "warner bros.",
			"seq": "29,40"
		}, {
			"uri": "http://dbpedia.org/resource/Christopher_Franke",
			"label": "christopher franke",
			"seq": "46,63"
		}]
	},
	{
		"id": "66629e2919e3457b92e9412d2765707f",
		"question": "Where did the graduates of Memphis, Tenessee continue their education?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/highschool> <http://dbpedia.org/resource/Memphis,_Tennessee> . ?x <http://dbpedia.org/ontology/school> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/highschool",
			"label": "memphis,",
			"seq": "27,34"
		}, {
			"uri": "http://dbpedia.org/ontology/school",
			"label": "continue",
			"seq": "45,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Memphis,_Tennessee",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "479e2179c3784c05b660e355e8236391",
		"question": "Is Frontaccounting licensed under GNU license?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Frontaccounting> <http://dbpedia.org/ontology/license> <http://dbpedia.org/resource/GNU> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/license",
			"label": "license",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frontaccounting",
			"label": "frontaccounting",
			"seq": "3,17"
		}, {
			"uri": "http://dbpedia.org/resource/GNU",
			"label": "gnu",
			"seq": "34,36"
		}]
	},
	{
		"id": "321da0a6b5db42d28b6af0d8130999ad",
		"question": "Who is the employer of Ralph flanders ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ralph_Flanders> <http://dbpedia.org/property/occupation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/occupation",
			"label": "flanders",
			"seq": "29,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ralph_Flanders",
			"label": "flanders ralph",
			"seq": "23,36"
		}]
	},
	{
		"id": "95e2eff5a1b64e1b9ce1e7edf8adedcf",
		"question": "What is an airport inside ontario?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/Ontario,_California>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airport>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cityServed",
			"label": "inside",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Airport",
			"label": "airport",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ontario,_California",
			"label": "ontario",
			"seq": "26,32"
		}]
	},
	{
		"id": "f6c5c6f3ecd14071b9bfc93098fb994e",
		"question": "What sports are played by school which owns Fr. Agnel Stadium ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Fr._Agnel_Stadium> <http://dbpedia.org/property/owner> ?x . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owns",
			"seq": "39,42"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "school",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fr._Agnel_Stadium",
			"label": "stadium agnel fr.",
			"seq": "44,60"
		}]
	},
	{
		"id": "b3e252172359437c9a8de2e762ad5ce7",
		"question": "Which things have been made by artists who died in Midhurst?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Midhurst> . ?uri <http://dbpedia.org/ontology/creator> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "have",
			"seq": "13,16"
		}, {
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "artists",
			"seq": "31,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Midhurst",
			"label": "midhurst",
			"seq": "51,58"
		}]
	},
	{
		"id": "5b3a93c4212a454bb5186485623329c7",
		"question": "What is the Location of the Peetz Table Wind Energy Center which is also the state of Ben Nighthorse Campbell ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Ben_Nighthorse_Campbell> <http://dbpedia.org/property/state> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "location",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "77,81"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center",
			"label": "energy center table peetz wind",
			"seq": "28,57"
		}, {
			"uri": "http://dbpedia.org/resource/Ben_Nighthorse_Campbell",
			"label": "nighthorse campbell",
			"seq": "90,108"
		}]
	},
	{
		"id": "3b8e4f3b8b154b09b5afa7f034e6aa1f",
		"question": "What is the citizenship of the Sarah Kazemy and land of the Cervelle de canut",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sarah_Kazemy> <http://dbpedia.org/ontology/citizenship> ?uri. <http://dbpedia.org/resource/Cervelle_de_canut> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "citizenship",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "canut",
			"seq": "72,76"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sarah_Kazemy",
			"label": "kazemy sarah",
			"seq": "31,42"
		}, {
			"uri": "http://dbpedia.org/resource/Cervelle_de_canut",
			"label": "cervelle canut",
			"seq": "60,73"
		}]
	},
	{
		"id": "e2c86da7511a495c8e6a199690371c48",
		"question": "From which team did Marv McFadden played ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marv_McFadden> <http://dbpedia.org/property/pastteams> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastteams",
			"label": "team",
			"seq": "11,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marv_McFadden",
			"label": "mcfadden marv",
			"seq": "20,32"
		}]
	},
	{
		"id": "d645d34b10204b259900c68a10b1de61",
		"question": "What is the city whose mayor is Anne Hidalgo?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mayor> <http://dbpedia.org/resource/Anne_Hidalgo>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mayor",
			"label": "mayor",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Settlement",
			"label": "the",
			"seq": "8,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anne_Hidalgo",
			"label": "hidalgo anne",
			"seq": "32,43"
		}]
	},
	{
		"id": "4c9dc9bbe2444c8890caed8026dde6df",
		"question": "Name some dishes made with flowering plants.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Flowering_plant> . ?uri <http://dbpedia.org/ontology/ingredient> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/division",
			"label": "dishes",
			"seq": "10,15"
		}, {
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "dishes",
			"seq": "10,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Food",
			"label": "flowering",
			"seq": "27,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Flowering_plant",
			"label": "flowering",
			"seq": "27,35"
		}]
	},
	{
		"id": "0b8b29a0b2b745acbbed6037be44ec41",
		"question": "Which nation's engineers have graduated in Poland?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Poland> . ?x <http://dbpedia.org/property/nationality> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engineer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/education",
			"label": "nation's",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/nationality",
			"label": "nation's",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Engineer",
			"label": "engineers",
			"seq": "15,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Poland",
			"label": "poland",
			"seq": "43,48"
		}]
	},
	{
		"id": "a7ad80582ef84f54bb67cf7108003796",
		"question": "What are some cities which have a Ferris wheel?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/buildingType> <http://dbpedia.org/resource/Ferris_wheel> . ?x <http://dbpedia.org/property/locationTown> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/buildingType",
			"label": "cities",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/property/locationTown",
			"label": "cities",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ferris_wheel",
			"label": "ferris wheel",
			"seq": "34,45"
		}]
	},
	{
		"id": "d527f6cf049c4bd29df7ab1f81a69de8",
		"question": "What is the draft team of Bob MacMillan ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bob_MacMillan> <http://dbpedia.org/property/draftTeam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "draft team",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bob_MacMillan",
			"label": "macmillan bob",
			"seq": "26,38"
		}]
	},
	{
		"id": "0261cb6df27c42bea175c81ec1b62f5c",
		"question": "How many other home stadium are there of the soccer club whose home stadium is Luzhniki Stadium ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/homeStadium> <http://dbpedia.org/resource/Luzhniki_Stadium> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "stadium",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "stadium",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Luzhniki_Stadium",
			"label": "luzhniki stadium",
			"seq": "20,35"
		}]
	},
	{
		"id": "1a98e56e3b3844d28ca9cb861532a949",
		"question": "Which author inspired Susanna Clarke, and wrote Northanger Abbey?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Northanger_Abbey> <http://dbpedia.org/property/author> ?uri. <http://dbpedia.org/resource/Susanna_Clarke> <http://dbpedia.org/property/influences> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "author",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/influences",
			"label": "inspired",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Northanger_Abbey",
			"label": "northanger abbey",
			"seq": "48,63"
		}, {
			"uri": "http://dbpedia.org/resource/Susanna_Clarke",
			"label": "susanna",
			"seq": "22,28"
		}]
	},
	{
		"id": "122b26f0029248c683b600712a408383",
		"question": "List the races of Fergie Sutherland?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fergie_Sutherland> <http://dbpedia.org/property/race> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/race",
			"label": "races",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fergie_Sutherland",
			"label": "sutherland fergie",
			"seq": "18,34"
		}]
	},
	{
		"id": "619c994eb3cd4bbfb7925d970b1f3ad9",
		"question": "Where is the  assembly of Caterpillar 797 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Caterpillar_797> <http://dbpedia.org/ontology/assembly> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/assembly",
			"label": "assembly",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Caterpillar_797",
			"label": "caterpillar 797",
			"seq": "26,40"
		}]
	},
	{
		"id": "892b60fa57f743969c1fe9bf5708e9c0",
		"question": "In all the places with a stagecoach, where is a Peetz Table Wind Energy Center located too?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stagecoach,_Colorado> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center> <http://dbpedia.org/property/location> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "79,85"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "79,85"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stagecoach,_Colorado",
			"label": "stagecoach,",
			"seq": "25,35"
		}, {
			"uri": "http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center",
			"label": "energy center table peetz wind",
			"seq": "48,77"
		}]
	},
	{
		"id": "4423f1c8b04e4c438c50790d4c60c722",
		"question": "Which things are Breann McGregor known for ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Breann_McGregor> <http://dbpedia.org/property/knownFor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "33,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Breann_McGregor",
			"label": "mcgregor breann",
			"seq": "17,31"
		}]
	},
	{
		"id": "ec13e17ac45d4c1a8e774331d113e8cd",
		"question": "Who is the Pole driver of 1992 Canadian Grand Prix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1992_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/poleDriver",
			"label": "driver pole",
			"seq": "11,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1992_Canadian_Grand_Prix",
			"label": "canadian grand prix 1992",
			"seq": "26,49"
		}]
	},
	{
		"id": "d90cfc130f684d5a9c0c03a85e6e6dc3",
		"question": "List everything governed by the Democratic Party of US?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Democratic_Party_(United_States)> . ?uri <http://dbpedia.org/ontology/location> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "governed",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "democratic",
			"seq": "32,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Democratic_Party_(United_States)",
			"label": "democratic party",
			"seq": "32,47"
		}]
	},
	{
		"id": "962450920a5d4789866bb953d15deaa4",
		"question": "Sentinel High School  team is known as ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sentinel_High_School> <http://dbpedia.org/property/teamName> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/teamName",
			"label": "team",
			"seq": "22,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sentinel_High_School",
			"label": "sentinel school high",
			"seq": "0,19"
		}]
	},
	{
		"id": "5f84770805fe4db48a22ddd19ae2daf5",
		"question": "Of all the teams that Andrew Economos played for, which one did Jerrel Jackson play his first game for?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerrell_Jackson> <http://dbpedia.org/ontology/debutTeam> ?uri. <http://dbpedia.org/resource/Andrew_Economos> <http://dbpedia.org/ontology/formerTeam> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "teams",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerrell_Jackson",
			"label": "jackson jerrel",
			"seq": "64,77"
		}, {
			"uri": "http://dbpedia.org/resource/Andrew_Economos",
			"label": "economos andrew",
			"seq": "22,36"
		}]
	},
	{
		"id": "81237995d578482ea6accf7e9ffcd320",
		"question": "What are some software which are written in languages that are run on Unix like OS?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operatingSystem",
			"label": "written",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "languages",
			"seq": "44,52"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Unix-like",
			"label": "unix like",
			"seq": "70,78"
		}]
	},
	{
		"id": "ce5ddceafe844a9bb7a76194c0af8c7f",
		"question": "Name the movies writtten by the group Monty Python ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writtten",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "name",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Monty_Python",
			"label": "python monty",
			"seq": "38,49"
		}]
	},
	{
		"id": "b39233c5a03a4b7087e4b5546806cc80",
		"question": "Where did some of the matches take place where Columbus Crew SC played?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Columbus_Crew_SC> . ?x <http://dbpedia.org/ontology/location> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballMatch>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/team",
			"label": "the",
			"seq": "18,20"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "place",
			"seq": "35,39"
		}, {
			"uri": "http://dbpedia.org/ontology/FootballMatch",
			"label": "matches",
			"seq": "22,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Columbus_Crew_SC",
			"label": "columbus crew",
			"seq": "47,59"
		}]
	},
	{
		"id": "43d606c2a68b425aa232aff1c3428a37",
		"question": "How many shows belong to the networks one of whose sister station is BBC News?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/BBC_News_(TV_channel)> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterNames",
			"label": "sister",
			"seq": "51,56"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "networks",
			"seq": "29,36"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC_News_(TV_channel)",
			"label": "news",
			"seq": "73,76"
		}]
	},
	{
		"id": "a29f93a5bc72413887c3844c5ebf8e76",
		"question": "What are some shareholders of the bridge maintained by the Massachusetts department of transportation?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/maintainedBy> <http://dbpedia.org/resource/Massachusetts_Department_of_Transportation> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/maintainedBy",
			"label": "maintained",
			"seq": "41,50"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "some",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridge",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Massachusetts_Department_of_Transportation",
			"label": "transportation massachusetts department",
			"seq": "59,97"
		}]
	},
	{
		"id": "f6ced5d820a1470b843b40391b01cf86",
		"question": "List the agencies located someplace lead by Alex Chalk.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Alex_Chalk> . ?uri <http://dbpedia.org/ontology/location> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GovernmentAgency>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "lead",
			"seq": "36,39"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/GovernmentAgency",
			"label": "agencies",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alex_Chalk",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "abb80d23ef834a749f6d227acc81e758",
		"question": "Which creator of Theme Time Radio Hour has also given the  musical score of the The Times They Are a-Changin' (musical)?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Theme_Time_Radio_Hour> <http://dbpedia.org/property/creator> ?uri. <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/ontology/musicBy> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "creator",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/musicBy",
			"label": "musical",
			"seq": "59,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Theme_Time_Radio_Hour",
			"label": "theme radio time hour",
			"seq": "17,37"
		}, {
			"uri": "http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)",
			"label": "a-changin' (musical) times",
			"seq": "84,109"
		}]
	},
	{
		"id": "d2698d17b3fc4da3b3a659d38d722a13",
		"question": "Alexander Magleby, a rugby player is alma mater to which university?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alexander_Magleby> <http://dbpedia.org/property/university> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/university",
			"label": "university",
			"seq": "57,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alexander_Magleby",
			"label": "alexander",
			"seq": "0,8"
		}]
	},
	{
		"id": "78aeb7a8b2814ff1a4a9f813f7e41392",
		"question": "Through which cities do the rivers starting at the Montauk State Park flow?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Montauk_State_Park> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourcePlace",
			"label": "state",
			"seq": "59,63"
		}, {
			"uri": "http://dbpedia.org/ontology/city",
			"label": "cities",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Montauk_State_Park",
			"label": "montauk state park",
			"seq": "51,68"
		}]
	},
	{
		"id": "9c90326c60b94d57bf5ee570607ca6b5",
		"question": "People from how many political parties exist in Maharashtra?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Maharashtra> . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "parties",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "parties",
			"seq": "31,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maharashtra",
			"label": "maharashtra",
			"seq": "48,58"
		}]
	},
	{
		"id": "8b493628c6cb47dcaa54dfa91d17f425",
		"question": "Among the universities having Gyrfalcon as mascot which have Michelle D. Johnson as superintendent ? ",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/superintendent> <http://dbpedia.org/resource/Michelle_D._Johnson> . ?uri <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Gyrfalcon>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/superintendent",
			"label": "superintendent",
			"seq": "84,97"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "43,48"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "10,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michelle_D._Johnson",
			"label": "michelle johnson",
			"seq": "61,76"
		}, {
			"uri": "http://dbpedia.org/resource/Gyrfalcon",
			"label": "gyrfalcon",
			"seq": "30,38"
		}]
	},
	{
		"id": "f155833272af4760ab962b2c4a75ea1f",
		"question": "Whose opponents are Ike Clanton and Billy Clanton?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Ike_Clanton> . ?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Billy_Clanton> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponents",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponents",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ike_Clanton",
			"label": "clanton ike",
			"seq": "20,30"
		}, {
			"uri": "http://dbpedia.org/resource/Billy_Clanton",
			"label": "clanton billy",
			"seq": "24,36"
		}]
	},
	{
		"id": "7a65376ab49c4988a7e19d19ee8b0575",
		"question": "Which moto of american Classical League is also the academic discipline of Probus ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/American_Classical_League> <http://dbpedia.org/property/motto> ?uri. <http://dbpedia.org/resource/Probus_(journal)> <http://dbpedia.org/ontology/academicDiscipline> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/motto",
			"label": "moto",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "discipline academic",
			"seq": "52,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Classical_League",
			"label": "classical american league",
			"seq": "14,38"
		}, {
			"uri": "http://dbpedia.org/resource/Probus_(journal)",
			"label": "probus",
			"seq": "75,80"
		}]
	},
	{
		"id": "28f1b38fd1fa43dcafd2eee7e5778775",
		"question": "Who are the people whose alumna is a part of the National Collegiate Athletic Association?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/athletics> <http://dbpedia.org/resource/National_Collegiate_Athletic_Association> . ?uri <http://dbpedia.org/property/education> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/athletics",
			"label": "athletic",
			"seq": "69,76"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "association",
			"seq": "78,88"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Collegiate_Athletic_Association",
			"label": "association collegiate national athletic",
			"seq": "49,88"
		}]
	},
	{
		"id": "25d1a97101e943698160921c3f0bb7cc",
		"question": "To which religion does the commander of South Thailand insurgency belong?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/South_Thailand_insurgency> <http://dbpedia.org/ontology/commander> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "27,35"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Thailand_insurgency",
			"label": "insurgency thailand south",
			"seq": "40,64"
		}]
	},
	{
		"id": "7e8d0703ae84488c9069607df8d097d6",
		"question": "What is the parent company of Edsel?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edsel> <http://dbpedia.org/property/parent> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/parent",
			"label": "parent",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edsel",
			"label": "edsel",
			"seq": "30,34"
		}]
	},
	{
		"id": "921e9607ab704a2293e0d3c7a2e6dbe3",
		"question": "Give me a count of everything owned by the network whose sister name is The CW?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/The_CW> . ?uri <http://dbpedia.org/property/network> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterNames",
			"label": "sister name",
			"seq": "57,67"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "network",
			"seq": "43,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_CW",
			"label": "the cw",
			"seq": "39,44"
		}]
	},
	{
		"id": "b0daa7f219de4127802c163ea4d7b308",
		"question": "In which state does the valley bordering the Modoc plateau lie?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/border> <http://dbpedia.org/resource/Modoc_Plateau> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Valley>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/border",
			"label": "bordering",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "state",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Valley",
			"label": "valley",
			"seq": "24,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Modoc_Plateau",
			"label": "plateau modoc",
			"seq": "45,57"
		}]
	},
	{
		"id": "af78d170c10743f2b8c2008336992a65",
		"question": "Name the common alma mater of the Henry Morton Dexter and Jack McGregor",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Morton_Dexter> <http://dbpedia.org/ontology/education> ?uri. <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/education",
			"label": "morton",
			"seq": "40,45"
		}, {
			"uri": "http://dbpedia.org/ontology/education",
			"label": "morton",
			"seq": "40,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henry_Morton_Dexter",
			"label": "morton dexter henry",
			"seq": "34,52"
		}, {
			"uri": "http://dbpedia.org/resource/Jack_McGregor",
			"label": "mcgregor jack",
			"seq": "58,70"
		}]
	},
	{
		"id": "e2c84e16da1c4ada900d8e9932d4c088",
		"question": "Which famous writer was married to Jill Krementz and had a son named Edith Vonnegut ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Jill_Krementz> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edith_Vonnegut>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "famous",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/child",
			"label": "had",
			"seq": "53,55"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writer",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jill_Krementz",
			"label": "krementz jill",
			"seq": "35,47"
		}, {
			"uri": "http://dbpedia.org/resource/Edith_Vonnegut",
			"label": "vonnegut edith",
			"seq": "69,82"
		}]
	},
	{
		"id": "17a32c37985d4016a2887aaeae4c165c",
		"question": "What did the people buried in Toronto die of?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Toronto> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingPlace",
			"label": "people",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "the",
			"seq": "9,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto",
			"label": "toronto",
			"seq": "30,36"
		}]
	},
	{
		"id": "f04e2e9f5e1246b7a8494b970c269e6c",
		"question": "Which are the races in which Martin Molony participated?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Molony> <http://dbpedia.org/ontology/race> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/race",
			"label": "races",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Martin_Molony",
			"label": "molony martin",
			"seq": "29,41"
		}]
	},
	{
		"id": "cc91a807569c4c39bd0a00e68053d9c9",
		"question": "What is the main common interests of the Philip Novak and Timothy Morton?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philip_Novak> <http://dbpedia.org/property/mainInterests> ?uri. <http://dbpedia.org/resource/Timothy_Morton> <http://dbpedia.org/property/mainInterests> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "interests main",
			"seq": "12,25"
		}, {
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "interests main",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Philip_Novak",
			"label": "philip novak",
			"seq": "41,52"
		}, {
			"uri": "http://dbpedia.org/resource/Timothy_Morton",
			"label": "timothy morton",
			"seq": "58,71"
		}]
	},
	{
		"id": "4382d08ff34c47ffbf3c17b6a9451ce1",
		"question": "Was Yabanc Damat first aired in UAE?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Yabanc\u0131_Damat> <http://dbpedia.org/property/firstAired> <http://dbpedia.org/resource/United_Arab_Emirates> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstAired",
			"label": "first aired",
			"seq": "17,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Yabanc\u0131_Damat",
			"label": "yabanc damat",
			"seq": "4,15"
		}, {
			"uri": "http://dbpedia.org/resource/United_Arab_Emirates",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6aff1d15601947138c861eb36f7aa7ac",
		"question": "Name some basketball players who  have played for chicago bulls?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/team",
			"label": "name",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballPlayer",
			"label": "basketball",
			"seq": "10,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chicago_Bulls",
			"label": "chicago bulls",
			"seq": "50,62"
		}]
	},
	{
		"id": "6f3fc96104a94a63a66096801b34bf71",
		"question": "list the organisation with motive for peace and environmentalism?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace> . ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/purpose",
			"label": "peace",
			"seq": "38,42"
		}, {
			"uri": "http://dbpedia.org/property/purpose",
			"label": "peace",
			"seq": "38,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organisation",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peace",
			"label": "peace",
			"seq": "38,42"
		}, {
			"uri": "http://dbpedia.org/resource/Environmentalism",
			"label": "environmentalism",
			"seq": "48,63"
		}]
	},
	{
		"id": "fe375b78109c42628cbc2ce69704bc5b",
		"question": "What is the company which has Raymond Conner and Dennis Muilenburg as key person?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Raymond_Conner> . ?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Dennis_Muilenburg> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "key",
			"seq": "70,72"
		}, {
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "key",
			"seq": "70,72"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Raymond_Conner",
			"label": "raymond conner",
			"seq": "30,43"
		}, {
			"uri": "http://dbpedia.org/resource/Dennis_Muilenburg",
			"label": "muilenburg dennis",
			"seq": "49,65"
		}]
	},
	{
		"id": "7ba861cb0c5447b79cb878b421cf1113",
		"question": "What is the field of the Jon Speelman and occupation of the Karen Grigorian?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri. <http://dbpedia.org/resource/Karen_Grigorian> <http://dbpedia.org/ontology/occupation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/field",
			"label": "field",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "occupation",
			"seq": "42,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jon_Speelman",
			"label": "speelman jon",
			"seq": "25,36"
		}, {
			"uri": "http://dbpedia.org/resource/Karen_Grigorian",
			"label": "grigorian karen",
			"seq": "60,74"
		}]
	},
	{
		"id": "ddf2a44585b34de3afaf20021f33a330",
		"question": "List the maintainers of Pandaruan Bridge?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pandaruan_Bridge> <http://dbpedia.org/ontology/maintainedBy> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/maintainedBy",
			"label": "maintainers",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pandaruan_Bridge",
			"label": "pandaruan bridge",
			"seq": "24,39"
		}]
	},
	{
		"id": "28ef4e7c24d544d1b9c35db869e032b0",
		"question": "Name the river with source country in Zambia and source region as North-Western Province, Zambia?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "country source",
			"seq": "20,33"
		}, {
			"uri": "http://dbpedia.org/ontology/sourceRegion",
			"label": "source",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zambia",
			"label": "zambia",
			"seq": "38,43"
		}, {
			"uri": "http://dbpedia.org/resource/North-Western_Province,_Zambia",
			"label": "north-western province, zambia",
			"seq": "38,67"
		}]
	},
	{
		"id": "42e685f396ad4d289d05e57d384f0b3c",
		"question": "Who were the producers of the tenderfoot?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Tenderfoot_(miniseries)> <http://dbpedia.org/ontology/producer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producers",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Tenderfoot_(miniseries)",
			"label": "tenderfoot",
			"seq": "30,39"
		}]
	},
	{
		"id": "90670bde322f4fdb820424305500a826",
		"question": "Which former team of Franois Beauchemin does the Nathan Dempsey played for ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nathan_Dempsey> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/Fran\u00e7ois_Beauchemin> <http://dbpedia.org/ontology/formerTeam> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "played for",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former team",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nathan_Dempsey",
			"label": "dempsey nathan",
			"seq": "49,62"
		}, {
			"uri": "http://dbpedia.org/resource/Fran\u00e7ois_Beauchemin",
			"label": "beauchemin",
			"seq": "29,38"
		}]
	},
	{
		"id": "751a7482320c4deb949864158d4b16b9",
		"question": "Is coffee a main ingredient of Hopje?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Hopje> <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Coffee> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainIngredient",
			"label": "ingredient main",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hopje",
			"label": "hopje",
			"seq": "31,35"
		}, {
			"uri": "http://dbpedia.org/resource/Coffee",
			"label": "coffee",
			"seq": "3,8"
		}]
	},
	{
		"id": "a62ce2cfa64b4b0fb7f2e17ba58b43d1",
		"question": "Who has Saint Joseph and Mary as parents ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saint_Joseph> . ?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Mary_(mother_of_Jesus)> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parents",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parents",
			"seq": "33,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saint_Joseph",
			"label": "joseph saint",
			"seq": "8,19"
		}, {
			"uri": "http://dbpedia.org/resource/Mary_(mother_of_Jesus)",
			"label": "mary",
			"seq": "25,28"
		}]
	},
	{
		"id": "af164ec109cc41a8895ca7011ca62c3f",
		"question": "List the products of the company which published Tweenies: Game Time.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Tweenies:_Game_Time> <http://dbpedia.org/property/publisher> ?x . ?x <http://dbpedia.org/property/products> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/publisher",
			"label": "published",
			"seq": "39,47"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "products",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tweenies:_Game_Time",
			"label": "tweenies: game",
			"seq": "49,62"
		}]
	},
	{
		"id": "0692b55140154ca68f9797dda50c0caa",
		"question": "How many sitcoms were produced by the company whose predecessor was the Desilu Productions",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Desilu_Productions> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "52,62"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "38,44"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "productions",
			"seq": "79,89"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Desilu_Productions",
			"label": "productions desilu",
			"seq": "72,89"
		}]
	},
	{
		"id": "e68e190c5fea42bd9d7b2f106c0299e4",
		"question": "Which engine's successor's predecessor is BMW M10?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/BMW_M10> . ?uri <http://dbpedia.org/ontology/successor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engine>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "27,37"
		}, {
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor's",
			"seq": "15,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Engine",
			"label": "engine's",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BMW_M10",
			"label": "m10 bmw",
			"seq": "42,48"
		}]
	},
	{
		"id": "e52a7b93b92f4a908fbe6e753ea32d89",
		"question": "Which person's successor is Samsu-iluna?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Samsu-iluna>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "15,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person's",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Samsu-iluna",
			"label": "samsu-iluna",
			"seq": "28,38"
		}]
	},
	{
		"id": "87210ff3e55b4299a32d89b85345d93f",
		"question": "To which region does the Miluk language belong?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Miluk_language> <http://dbpedia.org/property/region> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/region",
			"label": "region",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miluk_language",
			"label": "language miluk",
			"seq": "25,38"
		}]
	},
	{
		"id": "ae8ea7fe77cc49459a8f5e49652308d4",
		"question": "Under which president did the predecessor of Simon Ferro work?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Simon_Ferro> . ?x <http://dbpedia.org/ontology/president> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "predecessor",
			"seq": "30,40"
		}, {
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Simon_Ferro",
			"label": "simon ferro",
			"seq": "45,55"
		}]
	},
	{
		"id": "ffd7305acc7848ba94088cfcda3648c6",
		"question": "In which municipalities does the NYC housing authority own buildings?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/New_York_City_Housing_Authority> . ?x <http://dbpedia.org/ontology/municipality> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningOrganisation",
			"label": "municipalities",
			"seq": "9,22"
		}, {
			"uri": "http://dbpedia.org/ontology/municipality",
			"label": "municipalities",
			"seq": "9,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Building",
			"label": "buildings",
			"seq": "59,67"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York_City_Housing_Authority",
			"label": "authority housing",
			"seq": "37,53"
		}]
	},
	{
		"id": "6ed618f4088e4b24921cb9a0130ce68c",
		"question": "What are some team members of the team based in Camp Nou?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/homeStadium> <http://dbpedia.org/resource/Camp_Nou> . ?x <http://dbpedia.org/property/name> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "team",
			"seq": "14,17"
		}, {
			"uri": "http://dbpedia.org/property/name",
			"label": "are",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Camp_Nou",
			"label": "camp nou",
			"seq": "48,55"
		}]
	},
	{
		"id": "2ca6b83130654efb9992783432c6e211",
		"question": "Was andy worhol the director of the san diego surf?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/San_Diego_Surf_(film)> <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Andy_Warhol> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cinematography",
			"label": "director",
			"seq": "20,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Diego_Surf_(film)",
			"label": "diego surf san",
			"seq": "36,49"
		}, {
			"uri": "http://dbpedia.org/resource/Andy_Warhol",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0f1a0373eac342828313fec23a869b83",
		"question": "Name a person who was educated in Humes High School ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Humes_High_School>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/education",
			"label": "educated",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "7,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Humes_High_School",
			"label": "school humes high",
			"seq": "34,50"
		}]
	},
	{
		"id": "bc8d8dac1f054a9eaaf3a61ebce0decd",
		"question": "Count the number of places where alumini of Edinburgh university have died?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/University_of_Edinburgh> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "edinburgh",
			"seq": "44,52"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "places",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/University_of_Edinburgh",
			"label": "university edinburgh",
			"seq": "44,63"
		}]
	},
	{
		"id": "0f3f93023ae74d94bac356887ec1e15b",
		"question": "Is Cologny a neighbouring city of Geneva?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/neighboringMunicipalities",
			"label": "neighbouring",
			"seq": "13,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Geneva",
			"label": "geneva",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/resource/Cologny",
			"label": "cologny",
			"seq": "3,9"
		}]
	},
	{
		"id": "ce0cda33ee3e45b0b88aae26a2908f48",
		"question": "List the awards won by the writer of Face to Face ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Face_to_Face_(1976_film)> <http://dbpedia.org/property/writer> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Face_to_Face_(1976_film)",
			"label": "face to",
			"seq": "37,43"
		}]
	},
	{
		"id": "1efd0ef701644607af3ae7939ea319be",
		"question": "Whose tomb is in cities under Dane County of Wisconsin?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/territory> <http://dbpedia.org/resource/Dane_County,_Wisconsin> . ?uri <http://dbpedia.org/ontology/restingPlace> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "tomb",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "cities",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dane_County,_Wisconsin",
			"label": "wisconsin county dane",
			"seq": "30,50"
		}]
	},
	{
		"id": "0a010b343f2b41da91c743a12b3a47a0",
		"question": "Does the Sicklefin lemon shark belong in the animal kingdom?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Sicklefin_lemon_shark> <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/kingdom",
			"label": "kingdom",
			"seq": "52,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sicklefin_lemon_shark",
			"label": "sicklefin shark lemon",
			"seq": "9,29"
		}, {
			"uri": "http://dbpedia.org/resource/Animal",
			"label": "animal",
			"seq": "45,50"
		}]
	},
	{
		"id": "91921f98a78148b1b74c79a5bd598e40",
		"question": "What is the local authority of Liverpool Institute High School for Boys ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liverpool_Institute_High_School_for_Boys> <http://dbpedia.org/ontology/localAuthority> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/localAuthority",
			"label": "authority local",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Liverpool_Institute_High_School_for_Boys",
			"label": "liverpool institute school",
			"seq": "31,56"
		}]
	},
	{
		"id": "8a98295e35f9472fbc9b9d7ebb99de74",
		"question": "What is the place of birth of the Kira Plastinina and Sergey Ryazansky",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kira_Plastinina> <http://dbpedia.org/property/placeOfBirth> ?uri. <http://dbpedia.org/resource/Sergey_Ryazansky> <http://dbpedia.org/property/placeOfBirth> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kira_Plastinina",
			"label": "plastinina kira",
			"seq": "34,48"
		}, {
			"uri": "http://dbpedia.org/resource/Sergey_Ryazansky",
			"label": "ryazansky sergey",
			"seq": "54,69"
		}]
	},
	{
		"id": "8fce468edfb5414283a20c5f243e0728",
		"question": "Which of the continents that Digitalb worked in, was christine rolfes born in?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Digit-Alb> <http://dbpedia.org/ontology/regionServed> ?uri. <http://dbpedia.org/resource/Christine_Rolfes> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "worked",
			"seq": "38,43"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "9,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Digit-Alb",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Christine_Rolfes",
			"label": "christine rolfes",
			"seq": "53,68"
		}]
	},
	{
		"id": "3f4b72d7662b4caa82f1760f020528db",
		"question": "Give me the places where people who worked in Church of England died in ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Church_of_England> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "in",
			"seq": "43,44"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "places",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Church_of_England",
			"label": "england church",
			"seq": "46,59"
		}]
	},
	{
		"id": "c39f9c9df5b147d49a09ee2a5ef485d3",
		"question": "What famous musicians play the remo?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Remo>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/instrument",
			"label": "musicians",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musicians",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Remo",
			"label": "remo",
			"seq": "31,34"
		}]
	},
	{
		"id": "ff112c068fe348d99bc382783bc5554f",
		"question": "What belongs to the families of Buccinidae and Buccinoidea?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae> . ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinoidea> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "families",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/ontology/family",
			"label": "families",
			"seq": "20,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Buccinidae",
			"label": "buccinidae",
			"seq": "32,41"
		}, {
			"uri": "http://dbpedia.org/resource/Buccinoidea",
			"label": "buccinoidea",
			"seq": "47,57"
		}]
	},
	{
		"id": "6437c30f7c71486d9651bdf6c5109725",
		"question": "List the television shows whose network's executive officer is Steve Burke.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Steve_Burke_(businessman)> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "television",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network's",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steve_Burke_(businessman)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "89de2e9950be4d148cceb0f13606223d",
		"question": "List down all notable works of Neil Cross ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neil_Cross> <http://dbpedia.org/ontology/notableWork> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "notable",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neil_Cross",
			"label": "cross neil",
			"seq": "31,40"
		}]
	},
	{
		"id": "10540b9b82364f5eb00957a38632eca3",
		"question": "What is the largest city of the country which have an assembly of Plymouth Savoy?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Plymouth_Savoy> <http://dbpedia.org/ontology/assembly> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/assembly",
			"label": "assembly",
			"seq": "54,61"
		}, {
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Plymouth_Savoy",
			"label": "plymouth savoy",
			"seq": "66,79"
		}]
	},
	{
		"id": "f6ce613bfafa488daaf3caf27629399b",
		"question": "Does nintendo have a division called Nintendo Entertainment Planning & Development?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Nintendo> <http://dbpedia.org/property/divisions> <http://dbpedia.org/resource/Nintendo_Entertainment_Planning_&_Development> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/divisions",
			"label": "division",
			"seq": "21,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nintendo",
			"label": "nintendo",
			"seq": "5,12"
		}, {
			"uri": "http://dbpedia.org/resource/Nintendo_Entertainment_Planning_&_Development",
			"label": "entertainment development planning nintendo",
			"seq": "5,47"
		}]
	},
	{
		"id": "aaee7a24a90e47d3954f143bf64ca267",
		"question": "How many pole drivers have been there in grand prixes where first driver was Damon Hill?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/firstDriver> <http://dbpedia.org/resource/Damon_Hill> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FormulaOneRacer>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/firstDriver",
			"label": "driver",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/poleDriver",
			"label": "driver",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/FormulaOneRacer",
			"label": "pole",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Damon_Hill",
			"label": "damon hill",
			"seq": "77,86"
		}]
	},
	{
		"id": "1a8cc713ccd443c9ba6a74d395b4b6b2",
		"question": "In which city wasThe Triple Door (The Courage album)  performed live?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)> <http://dbpedia.org/property/recorded> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/recorded",
			"label": "performed",
			"seq": "54,62"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)",
			"label": "courage triple album)",
			"seq": "21,41"
		}]
	},
	{
		"id": "3af799b07d8d4b5c8a03857948db6c6f",
		"question": "Was the Model K designed by Herny Ford?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ford_Model_K> <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/Henry_Ford> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designCompany",
			"label": "designed",
			"seq": "16,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Model_K",
			"label": "model ford",
			"seq": "8,17"
		}, {
			"uri": "http://dbpedia.org/resource/Henry_Ford",
			"label": "ford",
			"seq": "34,37"
		}]
	},
	{
		"id": "9e0dd9094d6b42b2ade24c563d35c3db",
		"question": "Which local authority of Buckhurst Hill County High School is the palce of burial of Elizabeth Rhuddlan ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elizabeth_of_Rhuddlan> <http://dbpedia.org/property/placeOfBurial> ?uri. <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "burial",
			"seq": "75,80"
		}, {
			"uri": "http://dbpedia.org/ontology/localAuthority",
			"label": "authority local",
			"seq": "6,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elizabeth_of_Rhuddlan",
			"label": "elizabeth rhuddlan",
			"seq": "85,102"
		}, {
			"uri": "http://dbpedia.org/resource/Buckhurst_Hill_County_High_School",
			"label": "buckhurst school county",
			"seq": "25,47"
		}]
	},
	{
		"id": "34eed5d543524bd6a5872d93bf79d3e7",
		"question": "Is Queen Latifah the narrator of Arctic Tale?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Arctic_Tale> <http://dbpedia.org/property/narrator> <http://dbpedia.org/resource/Queen_Latifah> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/narrator",
			"label": "narrator",
			"seq": "21,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arctic_Tale",
			"label": "arctic tale",
			"seq": "33,43"
		}, {
			"uri": "http://dbpedia.org/resource/Queen_Latifah",
			"label": "latifah queen",
			"seq": "3,15"
		}]
	},
	{
		"id": "cf2c22fcebba4a6f86eed6755e915b2f",
		"question": "What is manufactured by a company headed by Kazuo Hirai?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Kazuo_Hirai> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "kazuo",
			"seq": "44,48"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "8,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kazuo_Hirai",
			"label": "kazuo hirai",
			"seq": "44,54"
		}]
	},
	{
		"id": "3c301cf561394deba7b635bc6a8f2877",
		"question": "List the outflows of the lake whose one of the outflows is Benu river ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Benu\u00e9_River> . ?x <http://dbpedia.org/ontology/outflow> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/outflow",
			"label": "outflows",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/outflow",
			"label": "outflows",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Benu\u00e9_River",
			"label": "river benu",
			"seq": "59,68"
		}]
	},
	{
		"id": "17b4a249affa4dde85cdeb1693177725",
		"question": "List the major shrines of the saints whose one of the shrine is St. Takla Haymanot's Church ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/majorShrine> <http://dbpedia.org/resource/St._Takla_Haymanot's_Church_(Alexandria)> . ?x <http://dbpedia.org/ontology/majorShrine> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Saint>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/majorShrine",
			"label": "shrine",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrine",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Saint",
			"label": "saints",
			"seq": "30,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/St._Takla_Haymanot's_Church_(Alexandria)",
			"label": "haymanot's church takla",
			"seq": "68,90"
		}]
	},
	{
		"id": "da03ed79bd2448b49214a557bd180b57",
		"question": "How many companies were founded in Dallas?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/Dallas>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "24,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dallas",
			"label": "dallas",
			"seq": "35,40"
		}]
	},
	{
		"id": "b4b08639276b4e5f8db54327fc6c012f",
		"question": "What are the mammals whose phylum is Chordate?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/phylum",
			"label": "phylum",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Mammal",
			"label": "mammals",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chordate",
			"label": "chordate",
			"seq": "37,44"
		}]
	},
	{
		"id": "3c8fdf37975f4f08945c5542bcc97d93",
		"question": "What is the denomination of S. H. Kapadia ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/S._H._Kapadia> <http://dbpedia.org/property/religion> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religion",
			"label": "denomination",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/S._H._Kapadia",
			"label": "kapadia s. h.",
			"seq": "28,40"
		}]
	},
	{
		"id": "ee30b589024f41ba94eeeb43ca06b2cb",
		"question": "Who created the Women in the Garden and also the L'Enfant a la tasse ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Women_in_the_Garden> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/L'Enfant_a_la_tasse> <http://dbpedia.org/property/artist> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "also",
			"seq": "40,43"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "also",
			"seq": "40,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Women_in_the_Garden",
			"label": "garden women",
			"seq": "16,27"
		}, {
			"uri": "http://dbpedia.org/resource/L'Enfant_a_la_tasse",
			"label": "l'enfant tasse",
			"seq": "49,62"
		}]
	},
	{
		"id": "b4072b20f7fa40d7b0fe48885dca9d53",
		"question": "Charles Willing Byrd was the governor under which politician?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Charles_Willing_Byrd> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governor",
			"label": "governor",
			"seq": "29,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_Willing_Byrd",
			"label": "willing charles byrd",
			"seq": "0,19"
		}]
	},
	{
		"id": "7d5159ea5c5a452086175f68079c8e22",
		"question": "Who is the maker of the engine of Ford F-Series first generation ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ford_F-Series_first_generation> <http://dbpedia.org/property/engine> ?x . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/engine",
			"label": "engine",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "maker",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_F-Series_first_generation",
			"label": "generation f-series first ford",
			"seq": "34,63"
		}]
	},
	{
		"id": "f7dc75036c854765af67522f62223266",
		"question": "Which state's largest city is Omaha?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Omaha,_Nebraska>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "14,25"
		}, {
			"uri": "http://dbpedia.org/ontology/AdministrativeRegion",
			"label": "state's",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Omaha,_Nebraska",
			"label": "omaha",
			"seq": "30,34"
		}]
	},
	{
		"id": "209493482df043e9ac2583b042622b16",
		"question": "In which wars has Steven Palazzo fought?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steven_Palazzo> <http://dbpedia.org/property/battles> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "has",
			"seq": "14,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steven_Palazzo",
			"label": "palazzo steven",
			"seq": "18,31"
		}]
	},
	{
		"id": "44126a7ebefe489c8d4093ec82f95ef1",
		"question": "Who all have been judges on CTV Network's shows?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/CTV_Television_Network> . ?x <http://dbpedia.org/property/judges> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network's",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/property/judges",
			"label": "judges",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "42,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CTV_Television_Network",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fcbd2eb259ad4797a4de074a9e6ca51b",
		"question": "Which training center of William Anthony has also alumni named Philip W Pillsbury ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Anthony_(artist)> <http://dbpedia.org/property/training> ?uri. <http://dbpedia.org/resource/Philip_W._Pillsbury> <http://dbpedia.org/property/education> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/training",
			"label": "training",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "anthony",
			"seq": "33,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Anthony_(artist)",
			"label": "william anthony",
			"seq": "25,39"
		}, {
			"uri": "http://dbpedia.org/resource/Philip_W._Pillsbury",
			"label": "pillsbury philip",
			"seq": "63,78"
		}]
	},
	{
		"id": "8f75a8ba0817469791fe7f783a003b62",
		"question": "Which rivers end in Old Saybrook, Connecticut?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Old_Saybrook,_Connecticut> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthMountain",
			"label": "in",
			"seq": "17,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Old_Saybrook,_Connecticut",
			"label": "connecticut saybrook, old",
			"seq": "20,44"
		}]
	},
	{
		"id": "9f6eaa108131427a9ac70decbdd4d153",
		"question": "List all the nicknames of the city which has Toru gingerbread as one of it ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/nickname> <http://dbpedia.org/resource/Toru\u0144_gingerbread> . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nicknames",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nicknames",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toru\u0144_gingerbread",
			"label": "gingerbread toru",
			"seq": "45,60"
		}]
	},
	{
		"id": "e1d331f8870d4fcb99ef55121fda7c31",
		"question": "Which TV show's executive producer is Douglas Netter and composed by Stewart Copeland ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Douglas_Netter> . ?uri <http://dbpedia.org/property/composer> <http://dbpedia.org/resource/Stewart_Copeland>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "16,33"
		}, {
			"uri": "http://dbpedia.org/property/composer",
			"label": "composed",
			"seq": "57,64"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show's",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Douglas_Netter",
			"label": "douglas netter",
			"seq": "38,51"
		}, {
			"uri": "http://dbpedia.org/resource/Stewart_Copeland",
			"label": "copeland stewart",
			"seq": "69,84"
		}]
	},
	{
		"id": "af7ff586aa3e46058865543dba5c96b0",
		"question": "Name the television show whose network is TNT (TV channel) and Prime Time Entertainment Network?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/TNT_(TV_channel)> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/Prime_Time_Entertainment_Network>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/network",
			"label": "network",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/TNT_(TV_channel)",
			"label": "channel) tnt",
			"seq": "42,53"
		}, {
			"uri": "http://dbpedia.org/resource/Prime_Time_Entertainment_Network",
			"label": "entertainment network prime time",
			"seq": "31,62"
		}]
	},
	{
		"id": "374e41e0c9074e29aa08bc200f1d9a04",
		"question": "Where is the arena of WPC Dynamo Moscow situated?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WPC_Dynamo_Moscow> <http://dbpedia.org/property/arena> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/arena",
			"label": "arena",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WPC_Dynamo_Moscow",
			"label": "moscow dynamo wpc",
			"seq": "22,38"
		}]
	},
	{
		"id": "e52302c32d6440dba926e0d3ed0f97f9",
		"question": "Who was the writer of the novel Maniac Magee?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableworks> <http://dbpedia.org/resource/Maniac_Magee>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "novel",
			"seq": "26,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writer",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maniac_Magee",
			"label": "maniac magee",
			"seq": "32,43"
		}]
	},
	{
		"id": "ed3777b583d140ae9097e15d39c80d2f",
		"question": "Name the founders of the record labels whose one of the founders is Frank Rogers ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Frank_Rogers_(record_producer)> . ?x <http://dbpedia.org/property/founder> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founders",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/founder",
			"label": "founders",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/RecordLabel",
			"label": "record",
			"seq": "25,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frank_Rogers_(record_producer)",
			"label": "rogers record frank",
			"seq": "25,43"
		}]
	},
	{
		"id": "990acb5fafe142619ee7ad93a614fcf9",
		"question": "What are some movies whose distributer's CEO is Ted Hartley?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Ted_Hartley> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "ceo",
			"seq": "41,43"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributer's",
			"seq": "27,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "28,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ted_Hartley",
			"label": "hartley ted",
			"seq": "48,58"
		}]
	},
	{
		"id": "7db07f152ba64000952041d7c269d816",
		"question": "What are the television shows whose starting music is composed by Ron Grainer?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "54,61"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ron_Grainer",
			"label": "grainer ron",
			"seq": "66,76"
		}]
	},
	{
		"id": "74a833da4a3449f792fe8603400f3a51",
		"question": "List the military branch of  Henry Hyde ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Hyde> <http://dbpedia.org/ontology/militaryBranch> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military branch",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henry_Hyde",
			"label": "henry hyde",
			"seq": "29,38"
		}]
	},
	{
		"id": "a51b846524854b8d8be7950d0143aa08",
		"question": "Who is the developer of Montecito Inn ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Montecito_Inn> <http://dbpedia.org/property/developer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "developer",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Montecito_Inn",
			"label": "montecito inn",
			"seq": "24,36"
		}]
	},
	{
		"id": "48eb16573ec141a5ab3f8b412564aea6",
		"question": "How many artists' works are in Muse d'Orsay?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/Mus\u00e9e_d'Orsay> . ?x <http://dbpedia.org/property/artist> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/museum",
			"label": "muse",
			"seq": "31,34"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "artists'",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artists'",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mus\u00e9e_d'Orsay",
			"label": "d'orsay",
			"seq": "36,42"
		}]
	},
	{
		"id": "73c600f7e8e647769990e32d95c69f46",
		"question": "In how many different places does Canal and River Trust own its assets?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Canal_&_River_Trust> . ?x <http://dbpedia.org/ontology/location> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "own",
			"seq": "56,58"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "canal",
			"seq": "34,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canal_&_River_Trust",
			"label": "trust river canal",
			"seq": "34,50"
		}]
	},
	{
		"id": "b2179061510340db8454e133c3829727",
		"question": "which planet was discovered by Urbain Le Verrier?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/discoverer> <http://dbpedia.org/resource/Urbain_Le_Verrier> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/discoverer",
			"label": "discovered",
			"seq": "17,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Urbain_Le_Verrier",
			"label": "verrier urbain",
			"seq": "31,44"
		}]
	},
	{
		"id": "19cf7033523648298b64a3b26c61d63c",
		"question": "Where is the stadium of west Papus football team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/West_Papua_football_team> <http://dbpedia.org/ontology/stadium> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stadium",
			"label": "stadium",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/West_Papua_football_team",
			"label": "football",
			"seq": "35,42"
		}]
	},
	{
		"id": "b6ebb2f75c0a40edb2c5f55a8490d32f",
		"question": "Who are some authoritative persons on the matter of Megabalanus concinnus?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Megabalanus_concinnus> <http://dbpedia.org/ontology/binomialAuthority> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/binomialAuthority",
			"label": "authoritative",
			"seq": "13,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Megabalanus_concinnus",
			"label": "megabalanus concinnus",
			"seq": "52,72"
		}]
	},
	{
		"id": "8ff0158616ba4528a7ed38a4e45df6bf",
		"question": "Who is the father of Barbara Ann Crancer?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Barbara_Ann_Crancer>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "is",
			"seq": "4,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Barbara_Ann_Crancer",
			"label": "crancer barbara ann",
			"seq": "21,39"
		}]
	},
	{
		"id": "9977743655db452280ad8b646cb1901d",
		"question": "Whose music composer is signed up with Sony Music Entertainment?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "whose",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer music",
			"seq": "6,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony_Music_Entertainment",
			"label": "entertainment music sony",
			"seq": "6,29"
		}]
	},
	{
		"id": "10b3153964714ccd855e09939b3fea93",
		"question": "What are some given names for males?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/gender> <http://dbpedia.org/resource/Male> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/gender",
			"label": "given",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Male",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "96c26048a5cc488796e2747513584530",
		"question": "Which famous person is born in Marlboro Township, New Jersey?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/homeTown> <http://dbpedia.org/resource/Marlboro_Township,_New_Jersey>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/homeTown",
			"label": "township,",
			"seq": "40,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marlboro_Township,_New_Jersey",
			"label": "township, marlboro jersey",
			"seq": "31,55"
		}]
	},
	{
		"id": "d1129ddcb8c04a6d88e360a759cf01d9",
		"question": "Name the parent company of Ford Falcon Cobra ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Falcon_Cobra> <http://dbpedia.org/ontology/parentCompany> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "company parent",
			"seq": "9,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Falcon_Cobra",
			"label": "falcon cobra ford",
			"seq": "27,43"
		}]
	},
	{
		"id": "9bc21c53162242ed83aa510e3a346546",
		"question": "Saores de costa built a bridge over which river?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/builder> <http://dbpedia.org/resource/Soares_da_Costa> . ?x <http://dbpedia.org/ontology/crosses> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/builder",
			"label": "built",
			"seq": "16,20"
		}, {
			"uri": "http://dbpedia.org/ontology/crosses",
			"label": "costa",
			"seq": "10,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridge",
			"seq": "24,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Soares_da_Costa",
			"label": "costa",
			"seq": "10,14"
		}]
	},
	{
		"id": "6cf9b1c0073641558b6b87a6afd477c3",
		"question": "Where is the radio broadcasted in, whose sister station is CKFM-FM?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/CKFM-FM> . ?x <http://dbpedia.org/ontology/broadcastArea> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sisterStation",
			"label": "station sister",
			"seq": "41,54"
		}, {
			"uri": "http://dbpedia.org/ontology/broadcastArea",
			"label": "broadcasted",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/ontology/RadioStation",
			"label": "station radio",
			"seq": "13,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CKFM-FM",
			"label": "ckfm-fm",
			"seq": "59,65"
		}]
	},
	{
		"id": "63ca129cc4fa4a1a982e2980c540e35b",
		"question": "Does A foreign policy of freedom belong to the genre Politics?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/A_Foreign_Policy_of_Freedom> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Politics> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/literaryGenre",
			"label": "genre",
			"seq": "47,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A_Foreign_Policy_of_Freedom",
			"label": "freedom foreign policy",
			"seq": "7,28"
		}, {
			"uri": "http://dbpedia.org/resource/Politics",
			"label": "politics",
			"seq": "53,60"
		}]
	},
	{
		"id": "5b5d82f71a4c4d54989be43bbf8d4ce4",
		"question": "Chestnut colored horses have won which races?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/colour> <http://dbpedia.org/resource/Chestnut_(coat)> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/colour",
			"label": "colored",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/honours",
			"label": "horses",
			"seq": "17,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Horse",
			"label": "horses",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chestnut_(coat)",
			"label": "chestnut",
			"seq": "0,7"
		}]
	},
	{
		"id": "8185bbd0be854ace812c865f25e2ffb2",
		"question": "For which common president did Jim Sasser and Mike McCurry work?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jim_Sasser> <http://dbpedia.org/ontology/president> ?uri. <http://dbpedia.org/resource/Mike_McCurry_(press_secretary)> <http://dbpedia.org/ontology/president> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "17,25"
		}, {
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "17,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jim_Sasser",
			"label": "sasser jim",
			"seq": "31,40"
		}, {
			"uri": "http://dbpedia.org/resource/Mike_McCurry_(press_secretary)",
			"label": "mccurry",
			"seq": "51,57"
		}]
	},
	{
		"id": "bdbf00bc5747405fb0687f5da283e0d8",
		"question": "Of how many battles is Chickasaw Campaign of 1736 consisted?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chickasaw_Campaign_of_1736> <http://dbpedia.org/property/combatant> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/combatant",
			"label": "battles",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chickasaw_Campaign_of_1736",
			"label": "chickasaw campaign 1736",
			"seq": "23,45"
		}]
	},
	{
		"id": "427a250b939b4dbfab09841c8f20e929",
		"question": "Jerry Bock's musicals has been adapted from how many things?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Jerry_Bock> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "musicals",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/ontology/basedOn",
			"label": "been",
			"seq": "26,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerry_Bock",
			"label": "jerry",
			"seq": "0,4"
		}]
	},
	{
		"id": "08365c0b072f40a6bc18e0f181f3518d",
		"question": "In what group Joe Jonas and Kevin Jonas were previously involved?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Joe_Jonas> . ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Kevin_Jonas> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "previously",
			"seq": "45,54"
		}, {
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "previously",
			"seq": "45,54"
		}, {
			"uri": "http://dbpedia.org/ontology/Group",
			"label": "group",
			"seq": "8,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joe_Jonas",
			"label": "jonas joe",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/resource/Kevin_Jonas",
			"label": "kevin jonas",
			"seq": "18,28"
		}]
	},
	{
		"id": "720882e8f33e4b9a8d62b57e24b5c363",
		"question": "What is the birth place of the children of Miguel Garca Granados ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Miguel_Garc\u00eda_Granados> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "place birth",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miguel_Garc\u00eda_Granados",
			"label": "granados miguel",
			"seq": "43,57"
		}]
	},
	{
		"id": "edec33716ab949b993955978a2dc9011",
		"question": "Titus software publishes which genre of games?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Titus_Software> . ?x <http://dbpedia.org/ontology/genre> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/publisher",
			"label": "publishes",
			"seq": "15,23"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genre",
			"seq": "31,35"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "40,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Titus_Software",
			"label": "software titus",
			"seq": "0,13"
		}]
	},
	{
		"id": "5574fe2aa59d4b4394e830d098886f3c",
		"question": "Who are the spouse of the parents of Kimberly Stewart?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Kimberly_Stewart> <http://dbpedia.org/ontology/parent> ?x . ?x <http://dbpedia.org/ontology/spouse> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parents",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "spouse",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kimberly_Stewart",
			"label": "kimberly stewart",
			"seq": "37,52"
		}]
	},
	{
		"id": "79b29a50491143fcb95984df5dc84ca0",
		"question": "What academic discipline of the Journal of Cerebral Blood Flow & Metabolism is also the record label of the Double Diamond (album)?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Journal_of_Cerebral_Blood_Flow_&_Metabolism> <http://dbpedia.org/ontology/academicDiscipline> ?uri. <http://dbpedia.org/resource/Double_Diamond_(album)> <http://dbpedia.org/ontology/recordLabel> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "discipline academic",
			"seq": "5,23"
		}, {
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "record label",
			"seq": "88,99"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Journal_of_Cerebral_Blood_Flow_&_Metabolism",
			"label": "metabolism cerebral journal",
			"seq": "32,58"
		}, {
			"uri": "http://dbpedia.org/resource/Double_Diamond_(album)",
			"label": "diamond (album) double",
			"seq": "108,129"
		}]
	},
	{
		"id": "24248e8d88324f82a0d46eb1449b6e7f",
		"question": "Where were Micheal Santos and Wendy Jaquet born?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_G._Santos> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/Wendy_Jaquet> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "micheal",
			"seq": "11,17"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "jaquet",
			"seq": "36,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_G._Santos",
			"label": "santos",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/resource/Wendy_Jaquet",
			"label": "jaquet wendy",
			"seq": "30,41"
		}]
	},
	{
		"id": "6edb218446b8457c9a2ea5168ff7fb50",
		"question": "Count the number of fileds of the scientist whose one of the interest is Chinese poetry ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/fields> <http://dbpedia.org/resource/Chinese_poetry> . ?x <http://dbpedia.org/property/fields> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/fields",
			"label": "fileds",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/property/fields",
			"label": "fileds",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chinese_poetry",
			"label": "chinese poetry",
			"seq": "73,86"
		}]
	},
	{
		"id": "0baa037b73d543a7a59be401e8a0bc44",
		"question": "What are the houses of Parliament Security Services ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Parliament_Security_Services> <http://dbpedia.org/property/houses> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/houses",
			"label": "houses",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Parliament_Security_Services",
			"label": "parliament services security",
			"seq": "23,50"
		}]
	},
	{
		"id": "9f03bf078f8e43e68ca2db1f89a182b7",
		"question": "Who is the governor of Carl McCall ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carl_McCall> <http://dbpedia.org/ontology/governor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governor",
			"label": "governor",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carl_McCall",
			"label": "mccall carl",
			"seq": "23,33"
		}]
	},
	{
		"id": "6010a5c2d8cf410ba846684155d6afb3",
		"question": "What is the nickname of the city where Tuba Dei lives?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Tuba_Dei> <http://dbpedia.org/property/city> ?x . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "city",
			"seq": "28,31"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tuba_Dei",
			"label": "tuba dei",
			"seq": "39,46"
		}]
	},
	{
		"id": "2d048077fe044885a1f11a831df39ba7",
		"question": "What borders the valley which falls under Lake County, Oregon?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/municipality> <http://dbpedia.org/resource/Lake_County,_Oregon> . ?x <http://dbpedia.org/ontology/border> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Valley>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/municipality",
			"label": "county,",
			"seq": "47,53"
		}, {
			"uri": "http://dbpedia.org/ontology/border",
			"label": "borders",
			"seq": "5,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Valley",
			"label": "valley",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lake_County,_Oregon",
			"label": "county, oregon lake",
			"seq": "42,60"
		}]
	},
	{
		"id": "297480b7b3fd43e7819b9eb234501795",
		"question": "Name the television show created by CE Webber and also has actor named Companion?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Companion_(Doctor_Who)> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/C._E._Webber>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "and",
			"seq": "46,48"
		}, {
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "created",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Companion_(Doctor_Who)",
			"label": "companion",
			"seq": "71,79"
		}, {
			"uri": "http://dbpedia.org/resource/C._E._Webber",
			"label": "webber",
			"seq": "39,44"
		}]
	},
	{
		"id": "6411e0733ae5460499b210f08633ce12",
		"question": "Which company founded in New Mexico manufactures Visual Studio ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_Mexico> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Microsoft_Visual_Studio>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "manufactures",
			"seq": "36,47"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_Mexico",
			"label": "mexico new",
			"seq": "25,34"
		}, {
			"uri": "http://dbpedia.org/resource/Microsoft_Visual_Studio",
			"label": "visual studio",
			"seq": "49,61"
		}]
	},
	{
		"id": "46c7118086dc4e08bdd9bf77f4273377",
		"question": "List the mascot of the universities which are a part of  National Collegiate Athletic Association.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/National_Collegiate_Athletic_Association> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/athletics",
			"label": "athletic",
			"seq": "77,84"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "23,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Collegiate_Athletic_Association",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6125911b7ddd4d3cbca857215c9e59c4",
		"question": "Which developer of Go was also the predecssor of X compnay ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Go_(programming_language)> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/X_(company)> <http://dbpedia.org/property/predecessor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developer",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecssor",
			"seq": "35,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Go_(programming_language)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/X_(company)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "31fb215b84b44ec5bed3253fc1734d5f",
		"question": "What sports are played at universities affiliated by States Colleges and Universities athletic association?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/State_Colleges_and_Universities_Athletic_Association> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "affiliated",
			"seq": "39,48"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "26,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/State_Colleges_and_Universities_Athletic_Association",
			"label": "universities association colleges athletic",
			"seq": "26,67"
		}]
	},
	{
		"id": "0f8e4549023f4e80849e86009ce04679",
		"question": "Which team has had both Martin prochzka and garry unger as its players ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Proch\u00e1zka> <http://dbpedia.org/ontology/formerTeam> ?uri. <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/formerTeam> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "team",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "team",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Martin_Proch\u00e1zka",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Garry_Unger",
			"label": "unger garry",
			"seq": "44,54"
		}]
	},
	{
		"id": "80f27d6316b847f999d784e02ce6eaf2",
		"question": "What is that river whose source gets water from the Shannon cave?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/inflow> <http://dbpedia.org/resource/Shannon_Cave> . ?uri <http://dbpedia.org/ontology/source> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/inflow",
			"label": "from",
			"seq": "43,46"
		}, {
			"uri": "http://dbpedia.org/ontology/source",
			"label": "source",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shannon_Cave",
			"label": "shannon cave",
			"seq": "52,63"
		}]
	},
	{
		"id": "90b8340912aa47be9e2468424ccf95d8",
		"question": "What is the official residence of Fergus McMaster ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fergus_McMaster> <http://dbpedia.org/ontology/residence> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residence",
			"seq": "21,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fergus_McMaster",
			"label": "mcmaster fergus",
			"seq": "34,48"
		}]
	},
	{
		"id": "a54d9ab5b073425aa078172cd3175ec8",
		"question": "Which university has chancellor as Nicholas S. Zeppos?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/chancellor> <http://dbpedia.org/resource/Nicholas_S._Zeppos>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/chancellor",
			"label": "chancellor",
			"seq": "21,30"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nicholas_S._Zeppos",
			"label": "nicholas zeppos",
			"seq": "35,49"
		}]
	},
	{
		"id": "c83f849b65f046198bee117225c1dac5",
		"question": "What is the total number of  builder of the military structures whose builder is also United States?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/builder> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/builder> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "builder",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "builder",
			"seq": "29,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "united states",
			"seq": "86,98"
		}]
	},
	{
		"id": "f38ad466348b4ec3ae7a9bcef89d6c51",
		"question": "From what countries have people participated in the Excelsior Stakes?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/race> <http://dbpedia.org/resource/Excelsior_Stakes> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/race",
			"label": "have",
			"seq": "20,23"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "48,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Excelsior_Stakes",
			"label": "excelsior stakes",
			"seq": "52,67"
		}]
	},
	{
		"id": "37fc8c815f8f4cd1a8c8b46ad3a577f7",
		"question": "List the associated musical artist of the current members of Al Bano and Romina Power?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Al_Bano_and_Romina_Power> <http://dbpedia.org/property/currentMembers> ?x . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "members current",
			"seq": "42,56"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated musical artist",
			"seq": "9,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Al_Bano_and_Romina_Power",
			"label": "romina power",
			"seq": "73,84"
		}]
	},
	{
		"id": "7372eadd97374e8b88eb962559850324",
		"question": "List some people who were opponents of someone who was died by hanging? ",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Hanging> . ?x <http://dbpedia.org/ontology/opponent> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathCause",
			"label": "opponents",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponents",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hanging",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "967f6935fd4248ed99f03141a2b0e459",
		"question": "What team does John McGeever play for, which also employed Ben Dreith at some time?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ben_Dreith> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/John_McGeever> <http://dbpedia.org/ontology/team> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "at",
			"seq": "2,3"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ben_Dreith",
			"label": "dreith ben",
			"seq": "59,68"
		}, {
			"uri": "http://dbpedia.org/resource/John_McGeever",
			"label": "mcgeever john",
			"seq": "15,27"
		}]
	},
	{
		"id": "0a6bea353ecd405497f5ceab8b5d3dc3",
		"question": "Name the company which produces Marionette and has key person as Edwin catmull ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Marionette_(software)> . ?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Edwin_Catmull>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "produces",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "key",
			"seq": "51,53"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marionette_(software)",
			"label": "marionette",
			"seq": "32,41"
		}, {
			"uri": "http://dbpedia.org/resource/Edwin_Catmull",
			"label": "catmull edwin",
			"seq": "65,77"
		}]
	},
	{
		"id": "98cf58e6424a49e1afab18da3372f362",
		"question": "What is the total number of guests on the show whose theme music is Let me be your star?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Let_Me_Be_Your_Star> . ?x <http://dbpedia.org/property/guests> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "59,63"
		}, {
			"uri": "http://dbpedia.org/property/guests",
			"label": "guests",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Let_Me_Be_Your_Star",
			"label": "your star",
			"seq": "78,86"
		}]
	},
	{
		"id": "0f2bfb81e96b44b1bc4586e49852fccf",
		"question": "Name the home town of Rolando Gomez ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rolando_Gomez> <http://dbpedia.org/property/homeTown> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/homeTown",
			"label": "town home",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rolando_Gomez",
			"label": "rolando gomez",
			"seq": "22,34"
		}]
	},
	{
		"id": "3914f43429894759b145e663790fc209",
		"question": "Was Noko a band member of Luxuria?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Luxuria_(band)> <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Noko> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerBandMember",
			"label": "member band",
			"seq": "11,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Luxuria_(band)",
			"label": "luxuria band",
			"seq": "11,22"
		}, {
			"uri": "http://dbpedia.org/resource/Noko",
			"label": "noko",
			"seq": "4,7"
		}]
	},
	{
		"id": "07606daaf7b34904923872ec6df2df2d",
		"question": "In which cities can i find drinks similar to the IBC root beer?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/IBC_Root_Beer> . ?x <http://dbpedia.org/property/locationCity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/related",
			"label": "the",
			"seq": "45,47"
		}, {
			"uri": "http://dbpedia.org/property/locationCity",
			"label": "can",
			"seq": "16,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Beverage",
			"label": "beer",
			"seq": "58,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/IBC_Root_Beer",
			"label": "root beer ibc",
			"seq": "49,61"
		}]
	},
	{
		"id": "6ad0d1eeef934ec0bfd88f85a1e3320f",
		"question": "Name some basketball players whose team is coached by Fred Hoiberg?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Fred_Hoiberg> . ?uri <http://dbpedia.org/property/team> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coach",
			"label": "coached",
			"seq": "43,49"
		}, {
			"uri": "http://dbpedia.org/property/team",
			"label": "team",
			"seq": "35,38"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballPlayer",
			"label": "basketball",
			"seq": "10,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fred_Hoiberg",
			"label": "hoiberg fred",
			"seq": "54,65"
		}]
	},
	{
		"id": "881b5cae435244b2b7caadf0a38478e0",
		"question": "Who all have developed softwares for Unix Like OSes?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operatingSystem",
			"label": "oses",
			"seq": "47,50"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "softwares",
			"seq": "23,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Unix-like",
			"label": "unix like",
			"seq": "37,45"
		}]
	},
	{
		"id": "3dab698090ef4acda3d9a1bd30a307dc",
		"question": "Who is the prime minister that Michael Jeffery served?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Jeffery> <http://dbpedia.org/property/primeminister> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "minister prime",
			"seq": "11,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Jeffery",
			"label": "michael jeffery",
			"seq": "31,45"
		}]
	},
	{
		"id": "bf81b0ed08944a0091644587ff07d4fc",
		"question": "What are the movies whose music is composed by Vangelis?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Vangelis>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composed",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "32,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vangelis",
			"label": "vangelis",
			"seq": "47,54"
		}]
	},
	{
		"id": "f1eae8d8caba4bae88873a154dfec671",
		"question": "Was Walt Disney the cinematographer of Mickey's Mellerdrammer?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mickey's_Mellerdrammer> <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/Walt_Disney> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cinematography",
			"label": "cinematographer",
			"seq": "20,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mickey's_Mellerdrammer",
			"label": "mellerdrammer mickey's",
			"seq": "39,60"
		}, {
			"uri": "http://dbpedia.org/resource/Walt_Disney",
			"label": "disney walt",
			"seq": "4,14"
		}]
	},
	{
		"id": "ff89e1f2ebea4884b42c7497cbf61372",
		"question": "Who is the operator of Rainbow Warrior (1955) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rainbow_Warrior_(1955)> <http://dbpedia.org/ontology/operator> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operator",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rainbow_Warrior_(1955)",
			"label": "warrior rainbow (1955)",
			"seq": "23,44"
		}]
	},
	{
		"id": "46849da00b124a0f9c847045c1d34579",
		"question": "To which sports team is Aubie the mascot?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Aubie>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "sports team",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Aubie",
			"label": "aubie",
			"seq": "24,28"
		}]
	},
	{
		"id": "732483cb47924b00b32792c0bb79f680",
		"question": "Which series are Lennier and Londo Mollari both from?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lennier> <http://dbpedia.org/ontology/series> ?uri. <http://dbpedia.org/resource/Londo_Mollari> <http://dbpedia.org/ontology/series> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lennier",
			"label": "lennier",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/resource/Londo_Mollari",
			"label": "mollari londo",
			"seq": "29,41"
		}]
	},
	{
		"id": "ed3ea597f28a40cbbf89b727e336a636",
		"question": "Who acted in the movies whose music is composed by Walter Scharf?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Walter_Scharf> . ?x <http://dbpedia.org/property/artist> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composed",
			"seq": "39,46"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "is",
			"seq": "36,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "36,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Walter_Scharf",
			"label": "walter scharf",
			"seq": "51,63"
		}]
	},
	{
		"id": "c1d38d3b2ca945bd9989a4ea50cb9b23",
		"question": "Graduates of Somerville College have been in how many political parties?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Somerville_College,_Oxford> . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "graduates",
			"seq": "0,8"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "parties",
			"seq": "64,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Somerville_College,_Oxford",
			"label": "somerville college",
			"seq": "13,30"
		}]
	},
	{
		"id": "2eddea00fa824cbcaff727302f22ba39",
		"question": "What are some primates?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Primate>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/order",
			"label": "are",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Primate",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9f0fff722db84e1498deba1ebb619e50",
		"question": "Count the number of battles fought by the military person involved in Morocco ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Morocco> . ?x <http://dbpedia.org/property/battles> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battles",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "battles",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Morocco",
			"label": "morocco",
			"seq": "70,76"
		}]
	},
	{
		"id": "89ff0d71b0d54f428fbebcc8d9f151ee",
		"question": "How many companies were founded in Denton, texas?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/part> <http://dbpedia.org/resource/Denton_County,_Texas> . ?uri <http://dbpedia.org/ontology/foundationPlace> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/part",
			"label": "companies",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "24,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Denton_County,_Texas",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7fc3026611784ca68abe446d974bf7fb",
		"question": "Count the different causes of death of Christians.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Christianity> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "christians.",
			"seq": "39,49"
		}, {
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "death",
			"seq": "30,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christianity",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a68039a3908e4104a6c881f0b0d1bac7",
		"question": "List all the teams which have someone who played their first game for the Yankees?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/debutteam> <http://dbpedia.org/resource/New_York_Yankees> . ?x <http://dbpedia.org/ontology/team> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "teams",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "teams",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York_Yankees",
			"label": "yankees",
			"seq": "74,80"
		}]
	},
	{
		"id": "81fc6048cd674197b4c6918b39592d57",
		"question": "Who is the office holder whose deputy was Andrew Peacock and predecessor was Alexander Downer?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Andrew_Peacock> . ?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Alexander_Downer>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deputy",
			"label": "deputy",
			"seq": "31,36"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "61,71"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "11,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Andrew_Peacock",
			"label": "peacock andrew",
			"seq": "42,55"
		}, {
			"uri": "http://dbpedia.org/resource/Alexander_Downer",
			"label": "alexander downer",
			"seq": "77,92"
		}]
	},
	{
		"id": "68d4d257dad14afa9f33b32b9f8f06cc",
		"question": "Who was the editor of the newspaper owned by the the UK government?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/owners> <http://dbpedia.org/resource/Government_of_the_United_Kingdom> . ?x <http://dbpedia.org/property/editor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owners",
			"label": "owned",
			"seq": "36,40"
		}, {
			"uri": "http://dbpedia.org/property/editor",
			"label": "editor",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Newspaper",
			"label": "newspaper",
			"seq": "26,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Government_of_the_United_Kingdom",
			"label": "government",
			"seq": "56,65"
		}]
	},
	{
		"id": "bf76f57f7884400e8f11ba71e1d0787b",
		"question": "Name the TV show whose cast member is Companion (Doctor Who) and is related to The Sarah Jane Adventures?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Companion_(Doctor_Who)> . ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "sarah",
			"seq": "83,87"
		}, {
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "68,74"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Companion_(Doctor_Who)",
			"label": "companion (doctor who)",
			"seq": "38,59"
		}, {
			"uri": "http://dbpedia.org/resource/The_Sarah_Jane_Adventures",
			"label": "adventures sarah jane the",
			"seq": "5,29"
		}]
	},
	{
		"id": "c8c5d0a0594e48609e559b9b8766b7a5",
		"question": "List all the collaborators of the artist which has collaborated with sanremo Music Festival ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Sanremo_Music_Festival> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "artist music",
			"seq": "34,45"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "artist music",
			"seq": "34,45"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artist",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sanremo_Music_Festival",
			"label": "festival sanremo music",
			"seq": "69,90"
		}]
	},
	{
		"id": "0a0eaf434b7342f1a47f9e61c8093efe",
		"question": "Where did the plays written by Robert Schenkkan take place?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Robert_Schenkkan> . ?x <http://dbpedia.org/property/place> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Play>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/property/place",
			"label": "place",
			"seq": "53,57"
		}, {
			"uri": "http://dbpedia.org/ontology/Play",
			"label": "plays",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Schenkkan",
			"label": "schenkkan robert",
			"seq": "31,46"
		}]
	},
	{
		"id": "4e06115370044892bc19f3433446d6c1",
		"question": "In which sects were the aristocrats included, who were buried in Westminister abbey?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/majorShrine> <http://dbpedia.org/resource/Westminster_Abbey> . ?x <http://dbpedia.org/property/veneratedIn> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/majorShrine",
			"label": "buried",
			"seq": "55,60"
		}, {
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "were",
			"seq": "15,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "abbey",
			"seq": "78,82"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Westminster_Abbey",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6b7392c622bf4b9d8d89ad9e53010cb2",
		"question": "Which baseball team is owned by Robert Nutting?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Robert_Nutting>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owned",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballTeam",
			"label": "baseball team",
			"seq": "6,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Nutting",
			"label": "nutting robert",
			"seq": "32,45"
		}]
	},
	{
		"id": "e7dde5ecb2d4418f9c39988c43ddb848",
		"question": "Which sports are played typically in private schools?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/schooltype> <http://dbpedia.org/resource/Private_school> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/schooltype",
			"label": "schools",
			"seq": "45,51"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Private_school",
			"label": "private",
			"seq": "37,43"
		}]
	},
	{
		"id": "a98e065d3ca64e319fdeba4de8cd09f7",
		"question": "Name the  people whose residence is Beverly Hills, California?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Beverly_Hills,_California>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residence",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Beverly_Hills,_California",
			"label": "california beverly hills,",
			"seq": "36,60"
		}]
	},
	{
		"id": "c6a4fb6c10984d2494a7f6b2c3c6f6a9",
		"question": "Was Marie Curie a doctoral student of Henri Becquerel?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Henri_Becquerel> <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Marie_Curie> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralStudent",
			"label": "doctoral student",
			"seq": "18,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henri_Becquerel",
			"label": "becquerel henri",
			"seq": "38,52"
		}, {
			"uri": "http://dbpedia.org/resource/Marie_Curie",
			"label": "marie curie",
			"seq": "4,14"
		}]
	},
	{
		"id": "ec357021bd3041b88bc21430566a7aa5",
		"question": "List the television shows whose network's sister names is N-tv.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/N-tv> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterNames",
			"label": "sister names",
			"seq": "42,53"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "network's",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/N-tv",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "478436ca4cc34c0bb4f8d95e5e869be7",
		"question": "What are some other services of the company whose service is Onedrive?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/service> <http://dbpedia.org/resource/OneDrive> . ?x <http://dbpedia.org/property/services> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/service",
			"label": "service",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "36,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/OneDrive",
			"label": "onedrive",
			"seq": "61,68"
		}]
	},
	{
		"id": "ddc9605fad1340cfa17fe46efa3d5516",
		"question": "Where does the railway tracks start, which ends in Kazan?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Kazan> . ?x <http://dbpedia.org/ontology/routeStart> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayLine>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "ends",
			"seq": "43,46"
		}, {
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "start,",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/ontology/RailwayLine",
			"label": "railway",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kazan",
			"label": "kazan",
			"seq": "51,55"
		}]
	},
	{
		"id": "f3a7adce77844beb83973ad768b686b0",
		"question": "Give me a count of all ice hockey players whose teams are headcoached by John Tortorella?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/John_Tortorella> . ?uri <http://dbpedia.org/ontology/team> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/IceHockeyPlayer>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headCoach",
			"label": "headcoached",
			"seq": "58,68"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "teams",
			"seq": "48,52"
		}, {
			"uri": "http://dbpedia.org/ontology/IceHockeyPlayer",
			"label": "hockey",
			"seq": "27,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Tortorella",
			"label": "tortorella john",
			"seq": "73,87"
		}]
	},
	{
		"id": "0fd3b4501cd4447d9cf64dd71b596c3c",
		"question": "What are some important people in NGOs headed by Donna Shalala?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Donna_Shalala> . ?x <http://dbpedia.org/property/keyPeople> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Non-ProfitOrganisation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "people",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Non-ProfitOrganisation",
			"label": "important",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Donna_Shalala",
			"label": "shalala donna",
			"seq": "49,61"
		}]
	},
	{
		"id": "1243d7724dc846eea4a227142bb548be",
		"question": "Name all the venues of the convention which has also been hosted in San Diego Convention ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/venue> <http://dbpedia.org/resource/San_Diego_Convention_Center> . ?x <http://dbpedia.org/property/venue> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/venue",
			"label": "venues",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/property/venue",
			"label": "venues",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Diego_Convention_Center",
			"label": "convention diego",
			"seq": "27,42"
		}]
	},
	{
		"id": "83eea7c4c71d45ec847c1410bfbdd035",
		"question": "Where is the county seat of King County, Washington?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/King_County,_Washington> <http://dbpedia.org/ontology/countySeat> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/countySeat",
			"label": "county",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/King_County,_Washington",
			"label": "washington county, king",
			"seq": "28,50"
		}]
	},
	{
		"id": "75aa8a417fa547bab0e8895242554497",
		"question": "How many relatives are there of the people who died in Germany?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Germany> . ?x <http://dbpedia.org/ontology/relation> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "people",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Germany",
			"label": "germany",
			"seq": "55,61"
		}]
	},
	{
		"id": "801fda9479a245bfba75d1f7d1881540",
		"question": "What is the river whose mouth locations are Arctic Ocean and Laptev Sea?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Laptev_Sea> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "locations",
			"seq": "30,38"
		}, {
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "locations",
			"seq": "30,38"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arctic_Ocean",
			"label": "arctic ocean",
			"seq": "44,55"
		}, {
			"uri": "http://dbpedia.org/resource/Laptev_Sea",
			"label": "laptev sea",
			"seq": "61,70"
		}]
	},
	{
		"id": "4f1a4374cc27457faacbad707a9ca72f",
		"question": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Lorenzo_de'_Medici> <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Lucrezia_Tornabuoni> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mother",
			"label": "mother",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lorenzo_de'_Medici",
			"label": "lorenzo medici",
			"seq": "38,51"
		}, {
			"uri": "http://dbpedia.org/resource/Lucrezia_Tornabuoni",
			"label": "tornabuoni lucrezia",
			"seq": "4,22"
		}]
	},
	{
		"id": "92e3b5727baf4081b7905f89e63e2785",
		"question": "What band had  Nick Jonas and Kevin Jonas as former members ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Nick_Jonas> . ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Kevin_Jonas> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "members",
			"seq": "52,58"
		}, {
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "members",
			"seq": "52,58"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nick_Jonas",
			"label": "jonas nick",
			"seq": "15,24"
		}, {
			"uri": "http://dbpedia.org/resource/Kevin_Jonas",
			"label": "kevin jonas",
			"seq": "20,30"
		}]
	},
	{
		"id": "d6c6b1031e8a40ccabf25cc682c9eb07",
		"question": "What is the combatant of the Northwest Indian War and also the ethnic group of the Linda Hogan ",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Northwest_Indian_War> <http://dbpedia.org/property/combatant> ?uri. <http://dbpedia.org/resource/Linda_Hogan> <http://dbpedia.org/property/ethnicity> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/combatant",
			"label": "combatant",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/property/ethnicity",
			"label": "ethnic",
			"seq": "63,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Northwest_Indian_War",
			"label": "northwest indian",
			"seq": "29,44"
		}, {
			"uri": "http://dbpedia.org/resource/Linda_Hogan",
			"label": "linda hogan",
			"seq": "83,93"
		}]
	},
	{
		"id": "5c6a09d1e72a45429f86bae07bb422e6",
		"question": "Give me the characters who last appeared in Star Wars Episode 3",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/last> <http://dbpedia.org/resource/Star_Wars:_Episode_III_\u2013_Revenge_of_the_Sith> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/last",
			"label": "last",
			"seq": "27,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Star_Wars:_Episode_III_\u2013_Revenge_of_the_Sith",
			"label": "episode",
			"seq": "54,60"
		}]
	},
	{
		"id": "19799ac99ae44c6ea599ce69e0ef0bc8",
		"question": "List of people who were the first one to ascend a mountain in the Cathedral range?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/mountainRange> <http://dbpedia.org/resource/Cathedral_Range> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountain range",
			"seq": "50,63"
		}, {
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "first",
			"seq": "28,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Mountain",
			"label": "mountain",
			"seq": "50,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cathedral_Range",
			"label": "cathedral range",
			"seq": "66,80"
		}]
	},
	{
		"id": "78af55409ffc4e32b981e66132116fdd",
		"question": "What is the city nearest to the islands in the Northwestern Hawaiian Islands?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/Northwestern_Hawaiian_Islands> . ?x <http://dbpedia.org/property/nearestCity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/archipelago",
			"label": "nearest",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/property/nearestCity",
			"label": "nearest city",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Island",
			"label": "islands",
			"seq": "32,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Northwestern_Hawaiian_Islands",
			"label": "northwestern hawaiian islands",
			"seq": "32,60"
		}]
	},
	{
		"id": "9efa225a4f6841b5a6304ffb5111a1ed",
		"question": "Employees of Ottawa Citizen have come from which towns?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/Ottawa_Citizen> . ?x <http://dbpedia.org/property/homeTown> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "employees",
			"seq": "0,8"
		}, {
			"uri": "http://dbpedia.org/property/homeTown",
			"label": "towns",
			"seq": "49,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ottawa_Citizen",
			"label": "citizen ottawa",
			"seq": "13,26"
		}]
	},
	{
		"id": "c7d501b648c444519cdf5fc5af8a1145",
		"question": "Name the movie with narrator as Trevor Peacock and music composer  as Christophe Beck?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/narrator> <http://dbpedia.org/resource/Trevor_Peacock> . ?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Christophe_Beck>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/narrator",
			"label": "narrator",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "51,55"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "with",
			"seq": "15,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Trevor_Peacock",
			"label": "peacock trevor",
			"seq": "32,45"
		}, {
			"uri": "http://dbpedia.org/resource/Christophe_Beck",
			"label": "christophe beck",
			"seq": "70,84"
		}]
	},
	{
		"id": "b8f8719333604e9b9a5e34e7babe9e91",
		"question": "How many movies did Stanley Kubrick direct?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "direct",
			"seq": "36,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stanley_Kubrick",
			"label": "stanley kubrick",
			"seq": "20,34"
		}]
	},
	{
		"id": "5f620b019a9d4b988b56f5b4f3d4666a",
		"question": "Name the televesion show which has artist named Christopher Franke ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "35,40"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "televesion",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christopher_Franke",
			"label": "christopher franke",
			"seq": "48,65"
		}]
	},
	{
		"id": "a9026609cc0e4324bbc568de1e9c8f61",
		"question": "Where are the philosophers from, whose main work is on the matter of feminism in Canada?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/mainInterest> <http://dbpedia.org/resource/Feminism_in_Canada> . ?x <http://dbpedia.org/property/region> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Philosopher>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mainInterest",
			"label": "matter",
			"seq": "59,64"
		}, {
			"uri": "http://dbpedia.org/property/region",
			"label": "on",
			"seq": "52,53"
		}, {
			"uri": "http://dbpedia.org/ontology/Philosopher",
			"label": "philosophers",
			"seq": "14,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Feminism_in_Canada",
			"label": "feminism canada",
			"seq": "69,83"
		}]
	},
	{
		"id": "f0157809a86545afa67e70029372d9ef",
		"question": "In how many different places can I fnd Modern Architectural buildings?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/architecturalStyle> <http://dbpedia.org/resource/Modern_architecture> . ?x <http://dbpedia.org/property/address> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architecturalStyle",
			"label": "architectural",
			"seq": "46,58"
		}, {
			"uri": "http://dbpedia.org/property/address",
			"label": "places",
			"seq": "22,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Modern_architecture",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e38ad8e6192b406494e5c1a4926019e3",
		"question": "Who is the President of the United World College of Costa Rica and United World Colleges ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_World_College_of_Costa_Rica> <http://dbpedia.org/property/president> ?uri. <http://dbpedia.org/resource/United_World_Colleges> <http://dbpedia.org/property/president> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "11,19"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_World_College_of_Costa_Rica",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/United_World_Colleges",
			"label": "colleges united world",
			"seq": "28,48"
		}]
	},
	{
		"id": "d0aac092bd35492b9e073efaf22ba601",
		"question": "Which movie produced by Michael Deeley was distributed by Warner Bros ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Warner_Bros.> . ?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Michael_Deeley>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "43,53"
		}, {
			"uri": "http://dbpedia.org/property/producer",
			"label": "produced",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "which",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Warner_Bros.",
			"label": "warner bros",
			"seq": "58,68"
		}, {
			"uri": "http://dbpedia.org/resource/Michael_Deeley",
			"label": "michael deeley",
			"seq": "24,37"
		}]
	},
	{
		"id": "cefb9d24941c422d97cf5b0e1d6a517f",
		"question": "What are some musicians who have worked with Dean Ambrose?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Dean_Ambrose>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "musicians",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musicians",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dean_Ambrose",
			"label": "ambrose dean",
			"seq": "45,56"
		}]
	},
	{
		"id": "7d987e66986840188fcae0a20722dccf",
		"question": "Who has had been the tenant of the stadium built by PCL construction firm?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/builder> <http://dbpedia.org/resource/PCL_Construction> . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "built",
			"seq": "43,47"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenant",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "35,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PCL_Construction",
			"label": "construction pcl",
			"seq": "52,67"
		}]
	},
	{
		"id": "8dc6914347504e2983925818c0616850",
		"question": "For which team did Cam Plante and Doug Acomb both play atleast once?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cam_Plante> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/Doug_Acomb> <http://dbpedia.org/property/playedFor> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "play",
			"seq": "50,53"
		}, {
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "play",
			"seq": "50,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cam_Plante",
			"label": "plante cam",
			"seq": "19,28"
		}, {
			"uri": "http://dbpedia.org/resource/Doug_Acomb",
			"label": "acomb doug",
			"seq": "34,43"
		}]
	},
	{
		"id": "c5f6f930e7c2465d84f9347c2ed9be35",
		"question": "What is the type of Vesak ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vesak> <http://dbpedia.org/ontology/type> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/type",
			"label": "type",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vesak",
			"label": "vesak",
			"seq": "20,24"
		}]
	},
	{
		"id": "a407bb2b3115418b9c87072530021edb",
		"question": "Which military personnel belong to the branch of Continental Army?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Continental_Army> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military branch",
			"seq": "6,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Continental_Army",
			"label": "continental",
			"seq": "49,59"
		}]
	},
	{
		"id": "12c919e6fa354555971464cbeb961149",
		"question": "Where did the president study, whose VP was Emilio Nez?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/Emilio_N\u00fa\u00f1ez> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/vicePresident",
			"label": "president",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Emilio_N\u00fa\u00f1ez",
			"label": "emilio",
			"seq": "44,49"
		}]
	},
	{
		"id": "22c351d2188d4fdf9764737954766fa0",
		"question": "What is the title of the successor of Kaulahea I ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Kaulahea_I> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/title> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "25,33"
		}, {
			"uri": "http://dbpedia.org/property/title",
			"label": "title",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kaulahea_I",
			"label": "kaulahea",
			"seq": "38,45"
		}]
	},
	{
		"id": "3f08ba5c7c254c4391b45ec5efe64b44",
		"question": "In how many different places were the people born who are members of National Museum of Racing and Hall of Fame?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/honours> <http://dbpedia.org/resource/National_Museum_of_Racing_and_Hall_of_Fame> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/honours",
			"label": "who",
			"seq": "50,52"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "places",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "22,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Museum_of_Racing_and_Hall_of_Fame",
			"label": "national racing museum hall fame",
			"seq": "69,100"
		}]
	},
	{
		"id": "095c674f34ba4e68bbf07397d12a0aa9",
		"question": "Which military commander fought his battle at Fort Gadsen?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Fort_Gadsden>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "battle",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "commander",
			"seq": "15,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fort_Gadsden",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "988903c3f615471fbd0fe2adeafdd518",
		"question": "Did Phillippe Cabot go to Columbia for studying?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Phillippe_Cabot> <http://dbpedia.org/ontology/university> <http://dbpedia.org/resource/Columbia_University> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/university",
			"label": "studying",
			"seq": "39,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Phillippe_Cabot",
			"label": "phillippe cabot",
			"seq": "4,18"
		}, {
			"uri": "http://dbpedia.org/resource/Columbia_University",
			"label": "columbia",
			"seq": "26,33"
		}]
	},
	{
		"id": "de86bc6a4b574f6ea396c7793787cb13",
		"question": "Which rivers start at the Brower's Spring?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Brower's_Spring> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceMountain",
			"label": "spring",
			"seq": "35,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brower's_Spring",
			"label": "brower's spring",
			"seq": "26,40"
		}]
	},
	{
		"id": "29718ea92a0c4340b8220c80488cd310",
		"question": "For which reasons have the ones born in Edinburgh, died?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Edinburgh> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "edinburgh,",
			"seq": "40,49"
		}, {
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "the",
			"seq": "23,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edinburgh",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "86af262ded0c418592ba045d1b609aab",
		"question": "What games are played in Protestant schools?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/schooltype> <http://dbpedia.org/resource/Protestantism> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/schooltype",
			"label": "schools",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "protestant",
			"seq": "25,34"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "36,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Protestantism",
			"label": "protestant",
			"seq": "25,34"
		}]
	},
	{
		"id": "fd0df4cfc4fc439696f39dd5d17dc45a",
		"question": "Which religion is followed by people in the family of Meadow Sopranos?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/family> <http://dbpedia.org/resource/Meadow_Soprano> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/family",
			"label": "family",
			"seq": "44,49"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "30,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Meadow_Soprano",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "aff5614125a14573982db28c91a123c8",
		"question": "List the notable works of the writer of The Tony Randall Show ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Tony_Randall_Show> <http://dbpedia.org/property/writer> ?x . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "notable",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Tony_Randall_Show",
			"label": "randall tony show the",
			"seq": "5,25"
		}]
	},
	{
		"id": "5aebd57c3f2140568f2473946d068238",
		"question": "Which software uses windows as it's operating system and is written in C++ ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> . ?uri <http://dbpedia.org/ontology/programmingLanguage> <http://dbpedia.org/resource/C++>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating system",
			"seq": "36,51"
		}, {
			"uri": "http://dbpedia.org/ontology/programmingLanguage",
			"label": "operating",
			"seq": "36,44"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Windows",
			"label": "windows",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/resource/C++",
			"label": "c++",
			"seq": "71,73"
		}]
	},
	{
		"id": "65e7f354b21d4f9eb1902ef3435b1f59",
		"question": "Which draft team od Dale Mitchell is also the tenant of Master Card center /",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dale_Mitchell_(ice_hockey)> <http://dbpedia.org/ontology/draftTeam> ?uri. <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/draftTeam",
			"label": "draft team",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/property/tenants",
			"label": "tenant",
			"seq": "46,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dale_Mitchell_(ice_hockey)",
			"label": "mitchell dale",
			"seq": "20,32"
		}, {
			"uri": "http://dbpedia.org/resource/MasterCard_Centre",
			"label": "master",
			"seq": "56,61"
		}]
	},
	{
		"id": "76979737099748f4a8ec2329b9f2a7f0",
		"question": "What prizes have been awarded to the relatives of Linn Ullmann?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Linn_Ullmann> <http://dbpedia.org/property/relatives> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "37,45"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awarded",
			"seq": "22,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Linn_Ullmann",
			"label": "ullmann linn",
			"seq": "50,61"
		}]
	},
	{
		"id": "212a265d6c5f4b94a59ae65ab6741cce",
		"question": "Who is the scientist whose academic advisor was Karl Ewald Hasse?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Karl_Ewald_Hasse>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicAdvisor",
			"label": "academic advisor",
			"seq": "27,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Karl_Ewald_Hasse",
			"label": "hasse ewald karl",
			"seq": "48,63"
		}]
	},
	{
		"id": "26de4237807b43509a696a7aa4460ae3",
		"question": "Paris Sisters singles are of which language?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/musicalBand> <http://dbpedia.org/resource/The_Paris_Sisters> . ?x <http://dbpedia.org/property/language> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalBand",
			"label": "singles",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/property/language",
			"label": "language",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Single",
			"label": "singles",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Paris_Sisters",
			"label": "sisters paris",
			"seq": "0,12"
		}]
	},
	{
		"id": "e3e252422e084971a88eab39961db3c6",
		"question": "List the other nicknames of city which has one of the nickname as City of Angels ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/nickname> <http://dbpedia.org/resource/City_of_Angels> . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "15,22"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "15,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/City_of_Angels",
			"label": "angels city",
			"seq": "28,38"
		}]
	},
	{
		"id": "47af7157273449c9855fdc6169f53bc3",
		"question": "Which models were featured in Playboy Playmates 1954?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/succeeded> <http://dbpedia.org/resource/List_of_Playboy_Playmates_of_1954>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PlayboyPlaymate>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/succeeded",
			"label": "featured",
			"seq": "18,25"
		}, {
			"uri": "http://dbpedia.org/ontology/PlayboyPlaymate",
			"label": "playmates",
			"seq": "38,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/List_of_Playboy_Playmates_of_1954",
			"label": "playmates playboy 1954",
			"seq": "30,51"
		}]
	},
	{
		"id": "8a6b193951864f6599a5793d574b5f02",
		"question": "Where is the sister station of Al Arabiya 99 located?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/sisterStations> <http://dbpedia.org/resource/Al_Arabiya_99> . ?x <http://dbpedia.org/property/location> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterStations",
			"label": "station sister",
			"seq": "13,26"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "station",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/RadioStation",
			"label": "station",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Al_Arabiya_99",
			"label": "arabiya al 99",
			"seq": "31,43"
		}]
	},
	{
		"id": "11b1b9c7215d497589a3b1657936580f",
		"question": "Count the awards received by the ones who fought the battle of france?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_France> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "battle",
			"seq": "53,58"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Battle_of_France",
			"label": "france battle",
			"seq": "53,65"
		}]
	},
	{
		"id": "c2e076a790a4486b93dcd39fbd2281db",
		"question": "What is the baseball team whose club manager is Chip Hale?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/manager> <http://dbpedia.org/resource/Chip_Hale>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/manager",
			"label": "manager",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballTeam",
			"label": "baseball team",
			"seq": "12,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chip_Hale",
			"label": "hale chip",
			"seq": "48,56"
		}]
	},
	{
		"id": "32fab0cef56a47c1998aeed3476af6d2",
		"question": "Which cities are located around the sea into which the ionian flows?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ionian_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/outflow",
			"label": "flows",
			"seq": "62,66"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ionian_Sea",
			"label": "ionian sea",
			"seq": "36,45"
		}]
	},
	{
		"id": "cb15bf7284f846b29b8e526dbe1593a5",
		"question": "By what person of which political party is Balangir district led?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Balangir_district> <http://dbpedia.org/ontology/leaderName> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "led",
			"seq": "61,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Balangir_district",
			"label": "district balangir",
			"seq": "43,59"
		}]
	},
	{
		"id": "8b85636931964fff9dbdd3890ae49b79",
		"question": "What team were the people drafted to, which are in the National Hockey League?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/National_Hockey_League> . ?x <http://dbpedia.org/property/draftTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "league",
			"seq": "71,76"
		}, {
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "drafted",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Hockey_League",
			"label": "national league hockey",
			"seq": "55,76"
		}]
	},
	{
		"id": "db8768bc59044ae58cdf6ba508873b38",
		"question": "What is the owner of Ivanpah Solar Power Facility and the original developer of Dart?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ivanpah_Solar_Power_Facility> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Dart_(programming_language)> <http://dbpedia.org/ontology/developer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owner",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developer",
			"seq": "67,75"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ivanpah_Solar_Power_Facility",
			"label": "facility ivanpah solar power",
			"seq": "21,48"
		}, {
			"uri": "http://dbpedia.org/resource/Dart_(programming_language)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1470a63eb37e4e13bd56e77aa0ebfe3d",
		"question": "Who all are buried in Arlington national cementary?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Arlington_National_Cemetery> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeofburial",
			"label": "buried",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arlington_National_Cemetery",
			"label": "arlington national",
			"seq": "22,39"
		}]
	},
	{
		"id": "321d971403c844f7b7233e28728d227e",
		"question": "Where did Jerry Tagge do his elementary schooling?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerry_Tagge> <http://dbpedia.org/property/highSchool> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/highSchool",
			"label": "schooling",
			"seq": "40,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerry_Tagge",
			"label": "tagge jerry",
			"seq": "10,20"
		}]
	},
	{
		"id": "c425a861d015448ea91b7fbda3cc03cf",
		"question": "who manufactures the SHO V8?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_SHO_V8_engine> <http://dbpedia.org/ontology/manufacturer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactures",
			"seq": "4,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_SHO_V8_engine",
			"label": "sho v8",
			"seq": "21,26"
		}]
	},
	{
		"id": "aa6d6a9311c148d4ad8adcf7211e37d0",
		"question": "Which source of Water resources management in El Salvador is also the nation of the Sierra del Merendn?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Water_resources_management_in_El_Salvador> <http://dbpedia.org/property/sourceCountry> ?uri. <http://dbpedia.org/resource/Sierra_del_Merend\u00f3n> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceCountry",
			"label": "source",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "source",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Water_resources_management_in_El_Salvador",
			"label": "management resources salvador water",
			"seq": "16,50"
		}, {
			"uri": "http://dbpedia.org/resource/Sierra_del_Merend\u00f3n",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d3d85e553d834356807085b355f01240",
		"question": "Name the movie which has music composed by Elliot Goldenthal and screenplay by Akiva Goldsman ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Elliot_Goldenthal> . ?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "25,29"
		}, {
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screenplay",
			"seq": "65,74"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "goldsman",
			"seq": "85,92"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elliot_Goldenthal",
			"label": "goldenthal elliot",
			"seq": "43,59"
		}, {
			"uri": "http://dbpedia.org/resource/Akiva_Goldsman",
			"label": "goldsman akiva",
			"seq": "79,92"
		}]
	},
	{
		"id": "51cbc9d885dd4b7ea69442fd1343c8c9",
		"question": "Which shows had their painters born in England?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/England> . ?uri <http://dbpedia.org/ontology/creator> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "their",
			"seq": "16,20"
		}, {
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "painters",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England",
			"label": "england",
			"seq": "39,45"
		}]
	},
	{
		"id": "625ae94833b045a0a4baa5ce95d97900",
		"question": "What awards are won by the screenwriter of Lucky You?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Lucky_You_(film)> <http://dbpedia.org/property/screenplay> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screenwriter",
			"seq": "27,38"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lucky_You_(film)",
			"label": "lucky you",
			"seq": "43,51"
		}]
	},
	{
		"id": "03bb0e70f8a44f4f8650ccf6d6ff03dc",
		"question": "What is the former team of the american football players whose position is Running back?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/position> <http://dbpedia.org/resource/Running_back> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/position",
			"label": "position",
			"seq": "63,70"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former team",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football american",
			"seq": "31,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Running_back",
			"label": "running back",
			"seq": "75,86"
		}]
	},
	{
		"id": "fd40821f1b1c4243bc23ef7f91268311",
		"question": "Which political party got elected in First Legislative Assembly of Uttar Pradesh ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Crane> <http://dbpedia.org/property/children> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "in",
			"seq": "34,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Martin_Crane",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "871775efcda94304826009853e33cb49",
		"question": "In which areas can we find the networks owned by the govt of Mauritius?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Government_of_Mauritius> . ?x <http://dbpedia.org/property/broadcastArea> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningCompany",
			"label": "can",
			"seq": "15,17"
		}, {
			"uri": "http://dbpedia.org/property/broadcastArea",
			"label": "areas",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/BroadcastNetwork",
			"label": "networks",
			"seq": "31,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Government_of_Mauritius",
			"label": "mauritius",
			"seq": "61,69"
		}]
	},
	{
		"id": "7d3a614fe3294084b04b3d873b41c665",
		"question": "Which current players once played for Toronto argonauts?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Toronto_Argonauts>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "for",
			"seq": "34,36"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "players",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto_Argonauts",
			"label": "argonauts toronto",
			"seq": "38,54"
		}]
	},
	{
		"id": "7abda6e6bf294ae7a68497a1c4579a94",
		"question": "Which company builds Microsoft Azure and Microsoft Surface?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Azure> . ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Surface> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/product",
			"label": "microsoft",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "microsoft",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Azure",
			"label": "microsoft azure",
			"seq": "21,35"
		}, {
			"uri": "http://dbpedia.org/resource/Microsoft_Surface",
			"label": "microsoft surface",
			"seq": "21,37"
		}]
	},
	{
		"id": "13fd5d955c674770a707d5548231b9e1",
		"question": "Which contnet license provider of Microsoft Office Picture Manager is also the game platform of Google Clud Connect ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Microsoft_Office_Picture_Manager> <http://dbpedia.org/ontology/license> ?uri. <http://dbpedia.org/resource/Google_Cloud_Connect> <http://dbpedia.org/ontology/computingPlatform> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/license",
			"label": "license",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "platform",
			"seq": "84,91"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Office_Picture_Manager",
			"label": "microsoft picture manager office",
			"seq": "34,65"
		}, {
			"uri": "http://dbpedia.org/resource/Google_Cloud_Connect",
			"label": "connect google",
			"seq": "96,109"
		}]
	},
	{
		"id": "7645a46261d14d09a5d676889c29a695",
		"question": "Did Stan Lee create the Iceman comics?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Iceman_(comics)> <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Stan_Lee> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creators",
			"label": "create",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Iceman_(comics)",
			"label": "iceman comics",
			"seq": "24,36"
		}, {
			"uri": "http://dbpedia.org/resource/Stan_Lee",
			"label": "stan lee",
			"seq": "4,11"
		}]
	},
	{
		"id": "1941e1a9b0c24c018927477c05b1e5cc",
		"question": "What are the movies whose director's daughter is Luke Scott?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Luke_Scott_(director)> . ?uri <http://dbpedia.org/property/director> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "is",
			"seq": "46,47"
		}, {
			"uri": "http://dbpedia.org/property/director",
			"label": "director's",
			"seq": "26,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "46,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Luke_Scott_(director)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "129712fe4ad5420f9c2c7ec7bf7b44be",
		"question": "Whihc party of the Mizoram Legislative Assembly is the government type of kumta ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/ontology/governmentType> ?uri. <http://dbpedia.org/resource/Mizoram_Legislative_Assembly> <http://dbpedia.org/property/party> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governmentType",
			"label": "government type",
			"seq": "55,69"
		}, {
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kumta",
			"label": "kumta",
			"seq": "74,78"
		}, {
			"uri": "http://dbpedia.org/resource/Mizoram_Legislative_Assembly",
			"label": "legislative assembly mizoram",
			"seq": "19,46"
		}]
	},
	{
		"id": "c58dabff921c4dc18a7525f173f9b73d",
		"question": "Who has rented the stadiums owned by Toronto?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Toronto> . ?x <http://dbpedia.org/property/tenants> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owned",
			"seq": "28,32"
		}, {
			"uri": "http://dbpedia.org/property/tenants",
			"label": "rented",
			"seq": "8,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadiums",
			"seq": "19,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto",
			"label": "toronto",
			"seq": "37,43"
		}]
	},
	{
		"id": "1ce8eb889dc948598061a205d9ac8292",
		"question": "Who won a Norbert Wiener Award for Social and Professional Responsibility?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Norbert_Wiener_Award_for_Social_and_Professional_Responsibility>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prizes",
			"label": "professional",
			"seq": "46,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Norbert_Wiener_Award_for_Social_and_Professional_Responsibility",
			"label": "responsibility professional norbert wiener social",
			"seq": "10,58"
		}]
	},
	{
		"id": "a3226ab632ca4954b180bdb3473e0aa4",
		"question": "Who is the mfr. of the engine used in Ford Transit ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ford_Transit> <http://dbpedia.org/property/engine> ?x . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engine>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/engine",
			"label": "engine",
			"seq": "23,28"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "mfr.",
			"seq": "11,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Engine",
			"label": "engine",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Transit",
			"label": "transit ford",
			"seq": "38,49"
		}]
	},
	{
		"id": "4db21db33c10474689e1a77bde6e0c01",
		"question": "What is the birthplace of the Ferrel Harris which is also resting palce of  Green Wix Unthank?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ferrel_Harris> <http://dbpedia.org/property/birthplace> ?uri. <http://dbpedia.org/resource/Green_Wix_Unthank> <http://dbpedia.org/ontology/restingPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthplace",
			"label": "birthplace",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting",
			"seq": "58,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ferrel_Harris",
			"label": "harris ferrel",
			"seq": "30,42"
		}, {
			"uri": "http://dbpedia.org/resource/Green_Wix_Unthank",
			"label": "unthank green",
			"seq": "76,88"
		}]
	},
	{
		"id": "ebde94c05f654d6b8a9dc3a159f815e9",
		"question": "What currencies are circulated in the countries where people speak French?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/French_language> . ?x <http://dbpedia.org/ontology/currency> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/officialLanguage",
			"label": "circulated",
			"seq": "20,29"
		}, {
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currencies",
			"seq": "5,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Location",
			"label": "in",
			"seq": "31,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/French_language",
			"label": "french",
			"seq": "67,72"
		}]
	},
	{
		"id": "8d1df3c7e7af4760a3bf0077cd9afb56",
		"question": "Which division of Serbia national team is also the region of Dobinsk Ice Cave ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Serbia_national_American_football_team> <http://dbpedia.org/ontology/division> ?uri. <http://dbpedia.org/resource/Dob\u0161insk\u00e1_Ice_Cave> <http://dbpedia.org/ontology/region> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/division",
			"label": "division",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "region",
			"seq": "51,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Serbia_national_American_football_team",
			"label": "national serbia team",
			"seq": "18,37"
		}, {
			"uri": "http://dbpedia.org/resource/Dob\u0161insk\u00e1_Ice_Cave",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "35a87d039618479c830132847e30888b",
		"question": "Name the common current team of the Shaun Thong and Kaannder ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Shaun_Thong> <http://dbpedia.org/property/currentTeam> ?uri. <http://dbpedia.org/resource/Kaan_\u00d6nder> <http://dbpedia.org/property/currentTeam> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentTeam",
			"label": "current team",
			"seq": "16,27"
		}, {
			"uri": "http://dbpedia.org/property/currentTeam",
			"label": "current team",
			"seq": "16,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shaun_Thong",
			"label": "thong shaun",
			"seq": "36,46"
		}, {
			"uri": "http://dbpedia.org/resource/Kaan_\u00d6nder",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7a4d4807f7e44d8298c4c03226d00b85",
		"question": "What is the television show which has cast member as Jason Carter and network is TNT (TV channel)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)> . ?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/TNT_(TV_channel)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "carter",
			"seq": "59,64"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "network",
			"seq": "70,76"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jason_Carter_(actor)",
			"label": "carter jason",
			"seq": "53,64"
		}, {
			"uri": "http://dbpedia.org/resource/TNT_(TV_channel)",
			"label": "channel) tnt",
			"seq": "81,92"
		}]
	},
	{
		"id": "4fa56fcae915405bb3dc2d843d72a39b",
		"question": "Who hold stocks in the bank which is located at 731 Lexington Avenue?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/731_Lexington_Avenue> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "located",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "located",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/ontology/Bank",
			"label": "bank",
			"seq": "23,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/731_Lexington_Avenue",
			"label": "lexington avenue",
			"seq": "52,67"
		}]
	},
	{
		"id": "99a59ee47bac4242b9a447372ed7862e",
		"question": "Who rented the stadium where the UFC 152 take place?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/UFC_152> <http://dbpedia.org/property/venue> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/venue",
			"label": "rented",
			"seq": "4,9"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "rented",
			"seq": "4,9"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/UFC_152",
			"label": "ufc 152",
			"seq": "33,39"
		}]
	},
	{
		"id": "d734bb40ec504463855c4d255151750f",
		"question": "Which company's cars are assembled in Iran?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Iran> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/assembly",
			"label": "assembled",
			"seq": "25,33"
		}, {
			"uri": "http://dbpedia.org/property/parentCompany",
			"label": "company's",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "assembled",
			"seq": "25,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Iran",
			"label": "iran",
			"seq": "38,41"
		}]
	},
	{
		"id": "2a4df258ebd845d6b60aa3371a5e639c",
		"question": "Under which president was timothy l. woodruff a lieutenant?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/lieutenant> <http://dbpedia.org/resource/Timothy_L._Woodruff> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/lieutenant",
			"label": "lieutenant",
			"seq": "48,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Timothy_L._Woodruff",
			"label": "woodruff timothy l.",
			"seq": "26,44"
		}]
	},
	{
		"id": "d229a447683c43bdab10a891ceb42456",
		"question": "Which first driver of  European Grand Prix 1993 is also finished first in 1985 Portuguese Grand Prix ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1993_European_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri. <http://dbpedia.org/resource/1985_Portuguese_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstDriver",
			"label": "driver first",
			"seq": "6,17"
		}, {
			"uri": "http://dbpedia.org/property/firstDriver",
			"label": "driver first",
			"seq": "6,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1993_European_Grand_Prix",
			"label": "european grand prix",
			"seq": "23,41"
		}, {
			"uri": "http://dbpedia.org/resource/1985_Portuguese_Grand_Prix",
			"label": "portuguese grand prix",
			"seq": "32,52"
		}]
	},
	{
		"id": "1df641d8a68b4fc085b0cb54337deb82",
		"question": "What place is the birthplace of Vijay Chavan where Eka Lagnachi Teesri Goshta is located as well?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eka_Lagnachi_Teesri_Goshta> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Vijay_Chavan> <http://dbpedia.org/property/placeOfBirth> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "81,87"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eka_Lagnachi_Teesri_Goshta",
			"label": "lagnachi teesri goshta",
			"seq": "55,76"
		}, {
			"uri": "http://dbpedia.org/resource/Vijay_Chavan",
			"label": "chavan vijay",
			"seq": "32,43"
		}]
	},
	{
		"id": "e9036a6c1a674f64a85a400eb987393b",
		"question": "In which fields are both Paul Demiville and Sylvain levi experts?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paul_Demi\u00e9ville> <http://dbpedia.org/property/fields> ?uri. <http://dbpedia.org/resource/Sylvain_L\u00e9vi> <http://dbpedia.org/property/fields> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/fields",
			"label": "fields",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/property/fields",
			"label": "fields",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paul_Demi\u00e9ville",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Sylvain_L\u00e9vi",
			"label": "sylvain",
			"seq": "44,50"
		}]
	},
	{
		"id": "78671ca44f6445c08adb515eb5031860",
		"question": "Ernest Rutherford was the advisor of how many people?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Ernest_Rutherford>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "advisor",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ernest_Rutherford",
			"label": "rutherford ernest",
			"seq": "0,16"
		}]
	},
	{
		"id": "482ddc59c8bc469aba847456beec32d4",
		"question": "Which birthplace of Liliya Lobanova is also the location of the Snake Island ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liliya_Lobanova> <http://dbpedia.org/property/birthplace> ?uri. <http://dbpedia.org/resource/Snake_Island_(Black_Sea)> <http://dbpedia.org/property/locationCountry> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthplace",
			"label": "birthplace",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "location",
			"seq": "48,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Liliya_Lobanova",
			"label": "lobanova liliya",
			"seq": "20,34"
		}, {
			"uri": "http://dbpedia.org/resource/Snake_Island_(Black_Sea)",
			"label": "island snake",
			"seq": "64,75"
		}]
	},
	{
		"id": "754a3bc265ae4fe1833884e86aceb12b",
		"question": "Where were some people associated with Steve Winwood employed at?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Steve_Winwood> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated",
			"seq": "23,32"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "associated",
			"seq": "23,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steve_Winwood",
			"label": "winwood steve",
			"seq": "39,51"
		}]
	},
	{
		"id": "7750fb1d95a7475ea49813b10023c2ed",
		"question": "What is the nationality of Aishath Saffa ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aishath_Saffa> <http://dbpedia.org/property/nationality> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationality",
			"label": "nationality",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Aishath_Saffa",
			"label": "aishath saffa",
			"seq": "27,39"
		}]
	},
	{
		"id": "f58241b0c93f471fb1b44686630eccf1",
		"question": "Who were involved in the wars where Jonathan Haskell battled?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Jonathan_Haskell> <http://dbpedia.org/property/battles> ?x . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battled",
			"seq": "53,59"
		}, {
			"uri": "http://dbpedia.org/property/combatant",
			"label": "jonathan",
			"seq": "36,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jonathan_Haskell",
			"label": "jonathan haskell",
			"seq": "36,51"
		}]
	},
	{
		"id": "950b70d788fa482b9c3855e96aebe7ac",
		"question": "Does the river shannon originate from Dowra?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/River_Shannon> <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Dowra> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceMountain",
			"label": "originate",
			"seq": "23,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/River_Shannon",
			"label": "shannon river",
			"seq": "9,21"
		}, {
			"uri": "http://dbpedia.org/resource/Dowra",
			"label": "dowra",
			"seq": "38,42"
		}]
	},
	{
		"id": "bd98b86d3b6c435aacc10d295ce6d25c",
		"question": "What is the currency of Kerguelen Islands ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currency",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kerguelen_Islands",
			"label": "kerguelen islands",
			"seq": "24,40"
		}]
	},
	{
		"id": "22fdf1b988044e3992540ed303e59a54",
		"question": "Does Jevan Snead play as Quarterback?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jevan_Snead> <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Quarterback> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/position",
			"label": "does",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jevan_Snead",
			"label": "snead jevan",
			"seq": "5,15"
		}, {
			"uri": "http://dbpedia.org/resource/Quarterback",
			"label": "quarterback",
			"seq": "25,35"
		}]
	},
	{
		"id": "b3accf6c63ba441da4b7f73c93c7fc87",
		"question": "In how many nations is Coconut a common food ingredient?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Coconut> . ?x <http://dbpedia.org/property/country> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "45,54"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "coconut",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "coconut",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Coconut",
			"label": "coconut",
			"seq": "23,29"
		}]
	},
	{
		"id": "d23c4c43e4f1484b99c8054143bf2438",
		"question": "Name the show whose jury consist of Jennifer Lopez and Randy Jackson?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/judges",
			"label": "jury",
			"seq": "20,23"
		}, {
			"uri": "http://dbpedia.org/property/judges",
			"label": "jury",
			"seq": "20,23"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jennifer_Lopez",
			"label": "jennifer lopez",
			"seq": "36,49"
		}, {
			"uri": "http://dbpedia.org/resource/Randy_Jackson",
			"label": "jackson randy",
			"seq": "55,67"
		}]
	},
	{
		"id": "50f9b25a3d0c408fb2383283fe04a6d3",
		"question": "Is tahiti in the Society Islands achipelago?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Tahiti> <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/Society_Islands> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/archipelago",
			"label": "achipelago",
			"seq": "33,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tahiti",
			"label": "tahiti",
			"seq": "3,8"
		}, {
			"uri": "http://dbpedia.org/resource/Society_Islands",
			"label": "society islands",
			"seq": "17,31"
		}]
	},
	{
		"id": "e845283de6574fc59a1cce2cc027c070",
		"question": "How many games have been composed by Hirokazu Tanaka?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/composer> <http://dbpedia.org/resource/Hirokazu_Tanaka>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/composer",
			"label": "composed",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hirokazu_Tanaka",
			"label": "hirokazu tanaka",
			"seq": "37,51"
		}]
	},
	{
		"id": "73b6ab3abf6f45c4b9e8d5139432cbc2",
		"question": "Where did the fashion designer study who died at the Stony Brook University Hospital?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Stony_Brook_University_Hospital> . ?x <http://dbpedia.org/property/education> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FashionDesigner>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "10,12"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "fashion",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/FashionDesigner",
			"label": "designer fashion",
			"seq": "14,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stony_Brook_University_Hospital",
			"label": "university hospital stony brook",
			"seq": "53,83"
		}]
	},
	{
		"id": "e47dfae4d0b64adf925f7961a27179fe",
		"question": "Name few television shows's anchored by Ryan Seacrest?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/presenter",
			"label": "seacrest",
			"seq": "45,52"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ryan_Seacrest",
			"label": "seacrest",
			"seq": "45,52"
		}]
	},
	{
		"id": "67483b164094400d9d576eccb59768bd",
		"question": "Was Queen Latifah in the U.N.I.T.Y. group?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/U.N.I.T.Y.> <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Queen_Latifah> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalArtist",
			"label": "latifah",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/U.N.I.T.Y.",
			"label": "u.n.i.t.y.",
			"seq": "25,34"
		}, {
			"uri": "http://dbpedia.org/resource/Queen_Latifah",
			"label": "latifah queen",
			"seq": "4,16"
		}]
	},
	{
		"id": "c75bb3f9a6a54bc995eec394e964b45e",
		"question": "Give me some shows related to the ones created by Russell Davies",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Russell_T_Davies> . ?uri <http://dbpedia.org/ontology/related> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "created",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Russell_T_Davies",
			"label": "russell davies",
			"seq": "50,63"
		}]
	},
	{
		"id": "8346271fdbeb43c38d5f057dcd618d8f",
		"question": "List the total number of regions of the building whose are located in\\Grand Forks Air Force Base?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/region> <http://dbpedia.org/resource/Grand_Forks_Air_Force_Base> . ?x <http://dbpedia.org/ontology/region> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/region",
			"label": "regions",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "regions",
			"seq": "25,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Grand_Forks_Air_Force_Base",
			"label": "forks force",
			"seq": "76,86"
		}]
	},
	{
		"id": "9bd93e910858410cb64bf86b0f1a17f5",
		"question": "Where is the headquarters of the company which runs the Metro Blue Line in minnesota?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Metro_Blue_Line_(Minnesota)> <http://dbpedia.org/property/operator> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operator",
			"label": "metro",
			"seq": "56,60"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "13,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "runs",
			"seq": "47,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Metro_Blue_Line_(Minnesota)",
			"label": "minnesota metro",
			"seq": "56,70"
		}]
	},
	{
		"id": "69cb6ce0352f474abab40245852c8670",
		"question": "Which office holder owes its allegiance to a state whose capital town is Jamestown, Virginia?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Jamestown,_Virginia> . ?uri <http://dbpedia.org/property/allegiance> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "capital",
			"seq": "57,63"
		}, {
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "29,38"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "6,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jamestown,_Virginia",
			"label": "jamestown, virginia",
			"seq": "73,91"
		}]
	},
	{
		"id": "a561ecf7220a4ede974139e2dd42ed14",
		"question": "Which religion's people are member of BJP?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Bharatiya_Janata_Party> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/party",
			"label": "are",
			"seq": "24,26"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion's",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bharatiya_Janata_Party",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "432c5c5d446a4b608c1de47eac01170d",
		"question": "Count the different alma maters of people employed by the CNN",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/CNN> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "employed",
			"seq": "42,49"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "maters",
			"seq": "25,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CNN",
			"label": "cnn",
			"seq": "58,60"
		}]
	},
	{
		"id": "9e2d283b09f4408392359dbb0df6b0a3",
		"question": "How many dishes are made with an ingredient belonging to the flowering plant species?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Flowering_plant> . ?uri <http://dbpedia.org/ontology/ingredient> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/division",
			"label": "dishes",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "33,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Food",
			"label": "to",
			"seq": "54,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Flowering_plant",
			"label": "flowering plant",
			"seq": "61,75"
		}]
	},
	{
		"id": "e204ffab3fc443009fdb2fe1076fe742",
		"question": "What is the common governing body of the Naval Air Facility Adak and Oahu Railway and Land Company?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Naval_Air_Facility_Adak> <http://dbpedia.org/property/governingBody> ?uri. <http://dbpedia.org/resource/Oahu_Railway_and_Land_Company> <http://dbpedia.org/property/governingBody> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governing body",
			"seq": "19,32"
		}, {
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governing body",
			"seq": "19,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Naval_Air_Facility_Adak",
			"label": "facility naval adak",
			"seq": "41,59"
		}, {
			"uri": "http://dbpedia.org/resource/Oahu_Railway_and_Land_Company",
			"label": "railway company oahu land",
			"seq": "69,93"
		}]
	},
	{
		"id": "6d530d8977fd4a4cbc5f2cb377470f1d",
		"question": "Whose band members are known to play a PRS guitar?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/PRS_Guitars> . ?uri <http://dbpedia.org/property/currentMembers> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableInstruments",
			"label": "are",
			"seq": "19,21"
		}, {
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "members",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PRS_Guitars",
			"label": "guitar prs",
			"seq": "39,48"
		}]
	},
	{
		"id": "3ea8d607953f4c308929055937b16aaa",
		"question": "Was the Funky Lab Rat released in North America?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Funky_Lab_Rat> <http://dbpedia.org/property/released> <http://dbpedia.org/resource/North_America> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/released",
			"label": "released",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Funky_Lab_Rat",
			"label": "funky rat lab",
			"seq": "8,20"
		}, {
			"uri": "http://dbpedia.org/resource/North_America",
			"label": "america north",
			"seq": "34,46"
		}]
	},
	{
		"id": "7852a6da015f4c208bb9f11e5e423d74",
		"question": "Which nation is the origin of Dornier Aerodyne ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dornier_Aerodyne> <http://dbpedia.org/property/nationalOrigin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalOrigin",
			"label": "origin nation",
			"seq": "6,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dornier_Aerodyne",
			"label": "aerodyne dornier",
			"seq": "30,45"
		}]
	},
	{
		"id": "7b5b0c8cb0ab4bd392162a7625ee8375",
		"question": "Where is the rival school of Somerset Berkeley Regional High school?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/rival> <http://dbpedia.org/resource/Somerset_Berkley_Regional_High_School> . ?x <http://dbpedia.org/ontology/region> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/rival",
			"label": "rival",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "regional",
			"seq": "47,54"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "school",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Somerset_Berkley_Regional_High_School",
			"label": "somerset regional",
			"seq": "29,45"
		}]
	},
	{
		"id": "2dc904ef3c0548be8f0e6094c1d29e82",
		"question": "Which is the city closest to both the Lodaiska site and the home of David w brown?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/LoDaisKa_Site> <http://dbpedia.org/ontology/nearestCity> ?uri. <http://dbpedia.org/resource/David_W._Brown_House> <http://dbpedia.org/ontology/nearestCity> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "city",
			"seq": "13,16"
		}, {
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "city",
			"seq": "13,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/LoDaisKa_Site",
			"label": "lodaiska site",
			"seq": "38,50"
		}, {
			"uri": "http://dbpedia.org/resource/David_W._Brown_House",
			"label": "david brown",
			"seq": "68,78"
		}]
	},
	{
		"id": "06b5a80c33ba482fae7bb1d6ca6f4466",
		"question": "What is the state of the settlement, which is the sub assembly of Mohamedia, Tunisia ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Mohamedia,_Tunisia> <http://dbpedia.org/ontology/isPartOf> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/isPartOf",
			"label": "tunisia",
			"seq": "77,83"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "tunisia",
			"seq": "77,83"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mohamedia,_Tunisia",
			"label": "mohamedia, tunisia",
			"seq": "66,83"
		}]
	},
	{
		"id": "6a5d40f8a52947ff8f4c0f896df790b9",
		"question": "Name the television show whose company is HBO and Playtone?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/HBO> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Playtone>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/company",
			"label": "company",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/HBO",
			"label": "hbo",
			"seq": "42,44"
		}, {
			"uri": "http://dbpedia.org/resource/Playtone",
			"label": "playtone",
			"seq": "50,57"
		}]
	},
	{
		"id": "24fb6dd7a0ba43e2868b53007f2509e5",
		"question": "Whose leaders are Willem-Alexander and Fredis Refunjol?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands> . ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Fredis_Refunjol> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leaders",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leaders",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands",
			"label": "willem-alexander",
			"seq": "18,33"
		}, {
			"uri": "http://dbpedia.org/resource/Fredis_Refunjol",
			"label": "refunjol fredis",
			"seq": "39,53"
		}]
	},
	{
		"id": "278c456525224d648387222246b05683",
		"question": "What television show are distributed by Broadcast syndication?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Broadcast_syndication>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributed",
			"seq": "25,35"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "5,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Broadcast_syndication",
			"label": "syndication broadcast",
			"seq": "40,60"
		}]
	},
	{
		"id": "b0d14b766ec544f7b6027a2ff2c21705",
		"question": "Who is the common parent of Gettv and hypnotize mind ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri. <http://dbpedia.org/resource/Hypnotize_Minds> <http://dbpedia.org/property/parent> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentOrganisation",
			"label": "parent",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/property/parent",
			"label": "parent",
			"seq": "18,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/GetTV",
			"label": "gettv",
			"seq": "28,32"
		}, {
			"uri": "http://dbpedia.org/resource/Hypnotize_Minds",
			"label": "hypnotize mind",
			"seq": "38,51"
		}]
	},
	{
		"id": "db8ba3e09dd14372b45c7565c2b078f7",
		"question": "Name the mascot of Austin College ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Austin_College> <http://dbpedia.org/property/mascot> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Austin_College",
			"label": "college austin",
			"seq": "19,32"
		}]
	},
	{
		"id": "e61297db8f36438f953bf3f79b912f41",
		"question": "What is the birth city of trainer of Leallah?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Leallah> <http://dbpedia.org/property/trainer> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/trainer",
			"label": "trainer",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "birth",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Leallah",
			"label": "leallah",
			"seq": "37,43"
		}]
	},
	{
		"id": "698471b904f24b2aa626bb6426728661",
		"question": "Name the person with opponents Ike Clanton and Tom McLaury?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Ike_Clanton> . ?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Tom_McLaury> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponents",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponents",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ike_Clanton",
			"label": "clanton ike",
			"seq": "31,41"
		}, {
			"uri": "http://dbpedia.org/resource/Tom_McLaury",
			"label": "mclaury tom",
			"seq": "47,57"
		}]
	},
	{
		"id": "de301d41a10c41a3a2d59f1551e5d9ac",
		"question": "What are the airlines whose hub airport is operated by the Los Angeles World Airports?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Los_Angeles_World_Airports> . ?uri <http://dbpedia.org/ontology/hubAirport> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operated",
			"seq": "43,50"
		}, {
			"uri": "http://dbpedia.org/ontology/hubAirport",
			"label": "airport",
			"seq": "32,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Los_Angeles_World_Airports",
			"label": "airports angeles world",
			"seq": "63,84"
		}]
	},
	{
		"id": "53c6290f51ab4906877de90618901cdd",
		"question": "What is used as money for French Southern and Antarctic Lands is also the  product of the Karafarin Bank ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> <http://dbpedia.org/ontology/currency> ?uri. <http://dbpedia.org/resource/Karafarin_Bank> <http://dbpedia.org/ontology/product> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "french",
			"seq": "26,31"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "product",
			"seq": "75,81"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands",
			"label": "antarctic southern french lands",
			"seq": "26,56"
		}, {
			"uri": "http://dbpedia.org/resource/Karafarin_Bank",
			"label": "karafarin bank",
			"seq": "90,103"
		}]
	},
	{
		"id": "e57b71a78a4646b0a3ce6c506fffc8e6",
		"question": "Which office holder's resting place is in  Palo Alto, California and was succeeded by Adrian A. Basora ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Palo_Alto,_California> . ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingPlace",
			"label": "resting place",
			"seq": "22,34"
		}, {
			"uri": "http://dbpedia.org/property/successor",
			"label": "succeeded",
			"seq": "73,81"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Palo_Alto,_California",
			"label": "california alto, palo",
			"seq": "43,63"
		}, {
			"uri": "http://dbpedia.org/resource/Adrian_A._Basora",
			"label": "basora adrian",
			"seq": "86,98"
		}]
	},
	{
		"id": "fa5fce44a7e64b59826c7dba9a288670",
		"question": "Name the companies which are in cities under Denzil Minnan Wong?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Denzil_Minnan-Wong> . ?uri <http://dbpedia.org/ontology/locationCity> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "name",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "companies",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Denzil_Minnan-Wong",
			"label": "minnan denzil wong",
			"seq": "45,62"
		}]
	},
	{
		"id": "8e8ac76792d840c9849445eb2ee65da9",
		"question": "Which city was founded by  George Washington and John Forbes (British Army officer)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/George_Washington> . ?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/John_Forbes_(British_Army_officer)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founded",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founded",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/City",
			"label": "city",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_Washington",
			"label": "washington george",
			"seq": "27,43"
		}, {
			"uri": "http://dbpedia.org/resource/John_Forbes_(British_Army_officer)",
			"label": "officer) (british forbes john army",
			"seq": "49,82"
		}]
	},
	{
		"id": "778cbddc962441b5b7e5928f7fbd4c0f",
		"question": "List the country of Tokaj wine region ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tokaj_wine_region> <http://dbpedia.org/property/country> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/country",
			"label": "country",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tokaj_wine_region",
			"label": "region tokaj wine",
			"seq": "20,36"
		}]
	},
	{
		"id": "d291a478d5a74fb6bebdcc6c74bf55c8",
		"question": "Who are the golf players whose college is Arizona State Sun Devils?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/Arizona_State_Sun_Devils>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/college",
			"label": "college",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/ontology/GolfPlayer",
			"label": "players",
			"seq": "17,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arizona_State_Sun_Devils",
			"label": "arizona devils state sun",
			"seq": "42,65"
		}]
	},
	{
		"id": "3bb7be1a180e47e49b6cc14c06051021",
		"question": "Where is the successor of john waldo from?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/John_B._Waldo> . ?x <http://dbpedia.org/property/state> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/property/state",
			"label": "the",
			"seq": "9,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_B._Waldo",
			"label": "waldo john",
			"seq": "26,35"
		}]
	},
	{
		"id": "22eeb146aa1f41a4b0db6df5844b3fed",
		"question": "Which home town of Cline Buckens is the place of Death of Richard heron ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/C\u00e9line_Buckens> <http://dbpedia.org/ontology/hometown> ?uri. <http://dbpedia.org/resource/Richard_Heron> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "place death of",
			"seq": "16,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/C\u00e9line_Buckens",
			"label": "buckens",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/resource/Richard_Heron",
			"label": "richard heron",
			"seq": "58,70"
		}]
	},
	{
		"id": "a501085682e8485f815a18df2b94a9a0",
		"question": "Name some cars similar to the ones which are assembled at the Jefferson North Assembly?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Jefferson_North_Assembly> . ?x <http://dbpedia.org/property/related> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/assembly",
			"label": "assembly",
			"seq": "78,85"
		}, {
			"uri": "http://dbpedia.org/property/related",
			"label": "at",
			"seq": "55,56"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "assembled",
			"seq": "45,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jefferson_North_Assembly",
			"label": "jefferson assembly",
			"seq": "62,79"
		}]
	},
	{
		"id": "d7c077b487cb42b5869f72a3cd8d28be",
		"question": "Which awards are presented by the committee located in Stockholm?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Stockholm> . ?uri <http://dbpedia.org/ontology/presenter> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "awards",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/presenter",
			"label": "presented",
			"seq": "17,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stockholm",
			"label": "stockholm",
			"seq": "55,63"
		}]
	},
	{
		"id": "d6aaeb41aef44a8b8bffd1a5e90e3d16",
		"question": "Which school did Robbie Diack attend?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robbie_Diack> <http://dbpedia.org/property/school> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/school",
			"label": "school",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robbie_Diack",
			"label": "robbie diack",
			"seq": "17,28"
		}]
	},
	{
		"id": "f1036fdd007245499c769a21e5ecb88e",
		"question": "Who is the film star of On Air with Ryan Seacrest ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/On_Air_with_Ryan_Seacrest> <http://dbpedia.org/ontology/starring> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "star",
			"seq": "16,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/On_Air_with_Ryan_Seacrest",
			"label": "seacrest with ryan",
			"seq": "31,48"
		}]
	},
	{
		"id": "e3bdce2f724541fc987861adb5d4e715",
		"question": "List everything in which saxophone players have been casted.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Saxophone> . ?uri <http://dbpedia.org/property/starring> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/instrument",
			"label": "list",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "everything",
			"seq": "5,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saxophone",
			"label": "saxophone",
			"seq": "25,33"
		}]
	},
	{
		"id": "b25f5f59b6e44ff28e90122b0cd42a0f",
		"question": "Who wrote Catch My soul ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Catch_My_Soul_(UK_stage_version)> <http://dbpedia.org/ontology/author> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "catch",
			"seq": "10,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Catch_My_Soul_(UK_stage_version)",
			"label": "catch soul my",
			"seq": "10,22"
		}]
	},
	{
		"id": "87745e512088474b8c15730c5bb6c4c1",
		"question": "Who is the builder of Atamurat-Kerkichi Bridge ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Atamurat-Kerkichi_Bridge> <http://dbpedia.org/property/builder> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/builder",
			"label": "builder",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Atamurat-Kerkichi_Bridge",
			"label": "atamurat-kerkichi bridge",
			"seq": "22,45"
		}]
	},
	{
		"id": "0db563660d024f5db42e2ff6ddb9f966",
		"question": "How many bands collaborated with artists who signed up with EMI?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/EMI> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "collaborated",
			"seq": "15,26"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "artists",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "bands",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/EMI",
			"label": "emi",
			"seq": "60,62"
		}]
	},
	{
		"id": "83858d645fa74a698c361696ed79496f",
		"question": "Where did the president study, who's the president of Besiktas JK?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Be\u015fikta\u015f_JK_(wheelchair_basketball)> <http://dbpedia.org/ontology/president> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Be\u015fikta\u015f_JK_(wheelchair_basketball)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "31f62ce6b5864c64a97f7cc543adf78e",
		"question": "To which destinations does Air 2000 fly?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Air_2000> <http://dbpedia.org/property/destinations> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/destinations",
			"label": "destinations",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Air_2000",
			"label": "2000 air",
			"seq": "27,34"
		}]
	},
	{
		"id": "d30be769b8ad4830a948b6b989b27b12",
		"question": "In which places can we find the people won the Project Runaway Canada?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Project_Runway_Canada> . ?x <http://dbpedia.org/ontology/residence> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "canada",
			"seq": "63,68"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "project",
			"seq": "47,53"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "places",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Project_Runway_Canada",
			"label": "project canada",
			"seq": "47,60"
		}]
	},
	{
		"id": "b8223f04582b4b20a1089758559d531f",
		"question": "How many factions were fighting in the wars where Blue Jacket was a commander?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/commander> <http://dbpedia.org/resource/Blue_Jacket> . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/commander",
			"label": "commander",
			"seq": "68,76"
		}, {
			"uri": "http://dbpedia.org/property/combatant",
			"label": "commander",
			"seq": "68,76"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blue_Jacket",
			"label": "jacket blue",
			"seq": "50,60"
		}]
	},
	{
		"id": "364f8115122d4456bd0b8b6d9667f399",
		"question": "Did Stan Lee write the Daredevils?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Daredevils> <http://dbpedia.org/property/writers> <http://dbpedia.org/resource/Stan_Lee> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writers",
			"label": "write",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Daredevils",
			"label": "daredevils the",
			"seq": "19,32"
		}, {
			"uri": "http://dbpedia.org/resource/Stan_Lee",
			"label": "stan lee",
			"seq": "4,11"
		}]
	},
	{
		"id": "7355543eae974888a7f58b4d3f0b935f",
		"question": "How many record labels publish works of Jazz fusion?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Jazz_fusion> . ?x <http://dbpedia.org/ontology/recordLabel> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "record",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "record",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jazz_fusion",
			"label": "fusion jazz",
			"seq": "40,50"
		}]
	},
	{
		"id": "6593b0b0d9e445f68fe8d0c7cb6deb32",
		"question": "Where was the person born whose successor was Le Hong Phong?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/L\u00ea_H\u1ed3ng_Phong> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/L\u00ea_H\u1ed3ng_Phong",
			"label": "phong",
			"seq": "54,58"
		}]
	},
	{
		"id": "37c6c9560a004182b868a8325b4125f7",
		"question": "To what region is Sukhumbhand Paribatra, a leader?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Sukhumbhand_Paribatra>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "leader",
			"seq": "43,48"
		}, {
			"uri": "http://dbpedia.org/ontology/Region",
			"label": "region",
			"seq": "8,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sukhumbhand_Paribatra",
			"label": "sukhumbhand",
			"seq": "18,28"
		}]
	},
	{
		"id": "8427427253454182aca2857c9c998594",
		"question": "Where was Picasso's Last Words recorded ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Picasso's_Last_Words_(Drink_to_Me)> <http://dbpedia.org/property/recorded> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/recorded",
			"label": "recorded",
			"seq": "31,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Picasso's_Last_Words_(Drink_to_Me)",
			"label": "picasso's words",
			"seq": "10,24"
		}]
	},
	{
		"id": "b39bd89257314e1590322c36e2473a36",
		"question": "What is the largest city of the birthplace of Pat Kirkwood?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Pat_Kirkwood_(racing_driver)> <http://dbpedia.org/property/birthplace> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthplace",
			"label": "birthplace",
			"seq": "32,41"
		}, {
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pat_Kirkwood_(racing_driver)",
			"label": "kirkwood",
			"seq": "50,57"
		}]
	},
	{
		"id": "b202004bedfc47c3ab2bf3c5a1cadc48",
		"question": "For how many movies have the music composer composed music, who have collaborated with Yes ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Yes_(band)> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "music",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "for",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Yes_(band)",
			"label": "yes",
			"seq": "87,89"
		}]
	},
	{
		"id": "08a500572859403193faa199f742c448",
		"question": "What is the largest city of Pulau Ubin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pulau_Ubin",
			"label": "pulau ubin",
			"seq": "28,37"
		}]
	},
	{
		"id": "9babaa2d96e64f1db42f3fb1df04a4bb",
		"question": "What is the former team of the Athens borned basketball players ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Athens> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "players",
			"seq": "56,62"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former team",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballPlayer",
			"label": "basketball",
			"seq": "45,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Athens",
			"label": "athens",
			"seq": "31,36"
		}]
	},
	{
		"id": "ec8a5db122044505b00fd65fb461df70",
		"question": "Which key perosn of the Elders is also the president of united World College ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Elders_(organization)> <http://dbpedia.org/property/keyPeople> ?uri. <http://dbpedia.org/resource/United_World_Colleges> <http://dbpedia.org/ontology/president> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "key",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "43,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Elders_(organization)",
			"label": "elders",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/resource/United_World_Colleges",
			"label": "college united world",
			"seq": "56,75"
		}]
	},
	{
		"id": "6b13f7438d6d4847b09299089889dd7e",
		"question": "What is the total number of other nearest countries to the lakes whose nearest countries is Uganda?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/nearestCity> <http://dbpedia.org/resource/Uganda> . ?x <http://dbpedia.org/ontology/nearestCity> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "nearest",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "nearest",
			"seq": "34,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Uganda",
			"label": "uganda",
			"seq": "92,97"
		}]
	},
	{
		"id": "840cc802cdf04e8eac6a2f572777b0fa",
		"question": "Name the television show directed by Simon Fuller and judged by Jennifier Lopez ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "directed",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/property/judges",
			"label": "judged",
			"seq": "54,59"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Simon_Fuller",
			"label": "fuller simon",
			"seq": "37,48"
		}, {
			"uri": "http://dbpedia.org/resource/Jennifer_Lopez",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0130934ed9434be69d31f035e062979a",
		"question": "Give me some shows owned by BBC one and BBC hd?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_One> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/network",
			"label": "one",
			"seq": "32,34"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "one",
			"seq": "32,34"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC_One",
			"label": "one bbc",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/resource/BBC_HD",
			"label": "bbc hd",
			"seq": "28,33"
		}]
	},
	{
		"id": "379c894ed50943efa6daca5de2dba735",
		"question": "Name the shows whose theme was composed by a band in which Jay Lane used to be?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Jay_Lane> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerBandMember",
			"label": "band",
			"seq": "45,48"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jay_Lane",
			"label": "lane jay",
			"seq": "59,66"
		}]
	},
	{
		"id": "f81e7f1fee7f4af2a3dcb722750b7137",
		"question": "Where do the rivers from greater London flow into?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/Greater_London> . ?x <http://dbpedia.org/property/mouthLocation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceRegion",
			"label": "where",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "london",
			"seq": "33,38"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Greater_London",
			"label": "greater london",
			"seq": "25,38"
		}]
	},
	{
		"id": "2c1e5203a1b34f32b1e7d70c4086c339",
		"question": "List out the people who are related to the relatives of Jared Kushner ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Jared_Kushner> <http://dbpedia.org/ontology/relation> ?x . ?x <http://dbpedia.org/ontology/relation> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "43,51"
		}, {
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "43,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jared_Kushner",
			"label": "kushner jared",
			"seq": "56,68"
		}]
	},
	{
		"id": "a3791b21aca7437b82671f3c7f08d07d",
		"question": "Was Buzz Williams the headcoach of the Marquette Golden Eagles mens team?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/2013\u201314_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/property/headcoach> <http://dbpedia.org/resource/Buzz_Williams> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headcoach",
			"label": "headcoach",
			"seq": "22,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2013\u201314_Marquette_Golden_Eagles_men's_basketball_team",
			"label": "marquette golden eagles team",
			"seq": "39,66"
		}, {
			"uri": "http://dbpedia.org/resource/Buzz_Williams",
			"label": "williams buzz",
			"seq": "4,16"
		}]
	},
	{
		"id": "d8f5b908b827406cb94b84acf46a4d08",
		"question": "How many units follow the US Navy Department's command structure?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_the_Navy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commandStructure",
			"label": "structure command",
			"seq": "47,63"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "units",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Department_of_the_Navy",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9833117a26d84052ac213535b41a7fd9",
		"question": "Under which US president was a politician in opposition of John G Schmitz?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/opponent> <http://dbpedia.org/resource/John_G._Schmitz> . ?x <http://dbpedia.org/ontology/incumbent> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/opponent",
			"label": "opposition",
			"seq": "45,54"
		}, {
			"uri": "http://dbpedia.org/ontology/incumbent",
			"label": "president",
			"seq": "15,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Politician",
			"label": "politician",
			"seq": "31,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_G._Schmitz",
			"label": "schmitz john",
			"seq": "59,70"
		}]
	},
	{
		"id": "670aa15c90d24e1e973eaeb3581ebacd",
		"question": "Whcih creator of Theme Time Radio Hour also created subsequent work of Moondoc Matinee ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moondog_Matinee> <http://dbpedia.org/ontology/subsequentWork> ?uri. <http://dbpedia.org/resource/Theme_Time_Radio_Hour> <http://dbpedia.org/property/creator> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "52,66"
		}, {
			"uri": "http://dbpedia.org/property/creator",
			"label": "creator",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Moondog_Matinee",
			"label": "matinee",
			"seq": "79,85"
		}, {
			"uri": "http://dbpedia.org/resource/Theme_Time_Radio_Hour",
			"label": "theme radio time hour",
			"seq": "17,37"
		}]
	},
	{
		"id": "24b693a3d51d407081f086a373e872c9",
		"question": "Which education institute of Duncan U. Fletcher is also the university of Vanderbilt Commodores ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duncan_U._Fletcher> <http://dbpedia.org/ontology/almaMater> ?uri. <http://dbpedia.org/resource/Vanderbilt_Commodores> <http://dbpedia.org/ontology/university> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "fletcher",
			"seq": "39,46"
		}, {
			"uri": "http://dbpedia.org/ontology/university",
			"label": "university",
			"seq": "60,69"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Duncan_U._Fletcher",
			"label": "fletcher duncan",
			"seq": "29,43"
		}, {
			"uri": "http://dbpedia.org/resource/Vanderbilt_Commodores",
			"label": "vanderbilt commodores",
			"seq": "74,94"
		}]
	},
	{
		"id": "5581904287e54612991d36031d060a31",
		"question": "Which license provider of MSX basic is also the designer of Language Integrated Query ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designer",
			"label": "designer",
			"seq": "48,55"
		}, {
			"uri": "http://dbpedia.org/property/license",
			"label": "license",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Language_Integrated_Query",
			"label": "integrated language query",
			"seq": "60,84"
		}, {
			"uri": "http://dbpedia.org/resource/MSX_BASIC",
			"label": "basic msx",
			"seq": "26,34"
		}]
	},
	{
		"id": "1b3cf7cd113c4026ae73b7cb071d05d8",
		"question": "Who was the United States president who also served as a governor of Indiana Territory?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Indiana_Territory> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "indiana",
			"seq": "69,75"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indiana_Territory",
			"label": "territory indiana",
			"seq": "69,85"
		}]
	},
	{
		"id": "9682bc0632d6403e9e533df9f9bee572",
		"question": "Who built the Ford Y-block engine ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Y-block_engine> <http://dbpedia.org/ontology/manufacturer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Y-block_engine",
			"label": "y-block engine ford",
			"seq": "14,32"
		}]
	},
	{
		"id": "57b3533cb2b741e1a567c34b4ff71b21",
		"question": "What are the awards received by spouse of Ellen Lundstrom?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ellen_Lundstr\u00f6m> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "spouse",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ellen_Lundstr\u00f6m",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "92a16632674c43289898624bf2cb23aa",
		"question": "Is Plymouth High School for Girls in Devon county?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Plymouth_High_School_for_Girls> <http://dbpedia.org/ontology/county> <http://dbpedia.org/resource/Devon> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/county",
			"label": "county",
			"seq": "43,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Plymouth_High_School_for_Girls",
			"label": "plymouth school girls high for",
			"seq": "3,32"
		}, {
			"uri": "http://dbpedia.org/resource/Devon",
			"label": "devon",
			"seq": "37,41"
		}]
	},
	{
		"id": "b8c65342df0845babde8d67c22d0343c",
		"question": "In which city is the hub airport of Club One Air?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Club_One_Air> <http://dbpedia.org/ontology/hubAirport> ?x . ?x <http://dbpedia.org/property/cityServed> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hubAirport",
			"label": "airport hub",
			"seq": "21,31"
		}, {
			"uri": "http://dbpedia.org/property/cityServed",
			"label": "city",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Club_One_Air",
			"label": "club one air",
			"seq": "25,36"
		}]
	},
	{
		"id": "15dd4008b74d40e89454e046b370e8f8",
		"question": "List the first drivers of Grand Prixes where Mika Hakkinen was a pole driver.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/poleDriver> <http://dbpedia.org/resource/Mika_H\u00e4kkinen> . ?x <http://dbpedia.org/ontology/firstDriver> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/poleDriver",
			"label": "drivers",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/firstDriver",
			"label": "drivers",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/GrandPrix",
			"label": "grand",
			"seq": "26,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mika_H\u00e4kkinen",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "00fb7cf892ed4de0a25b3d8c04526470",
		"question": "Who produced the Pixar Image Computer?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Pixar_Image_Computer>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/product",
			"label": "produced",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pixar_Image_Computer",
			"label": "computer pixar image",
			"seq": "17,36"
		}]
	},
	{
		"id": "7ffdaaa1870e4b449f08ef6591198dfb",
		"question": "Name the royalty whose daughter was Cleopatra V and was married to Ptolemy XIV of Egypt?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Cleopatra_V_of_Egypt> . ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ptolemy_XIV_of_Egypt>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mother",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "whose",
			"seq": "17,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "royalty",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cleopatra_V_of_Egypt",
			"label": "cleopatra egypt",
			"seq": "36,50"
		}, {
			"uri": "http://dbpedia.org/resource/Ptolemy_XIV_of_Egypt",
			"label": "ptolemy egypt",
			"seq": "67,79"
		}]
	},
	{
		"id": "8ef554c7762349339b7cecc0fdf1bf1e",
		"question": "What are some islands in the bahamas?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/The_Bahamas>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/archipelago",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Island",
			"label": "islands",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Bahamas",
			"label": "bahamas the",
			"seq": "25,35"
		}]
	},
	{
		"id": "dcf35e72e0e94e41bde4a681a72c6e01",
		"question": "Was mother teresa beatified by John Paul the second?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mother_Teresa> <http://dbpedia.org/property/beatifiedBy> <http://dbpedia.org/resource/Pope_John_Paul_II> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/beatifiedBy",
			"label": "beatified by",
			"seq": "18,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mother_Teresa",
			"label": "teresa mother",
			"seq": "4,16"
		}, {
			"uri": "http://dbpedia.org/resource/Pope_John_Paul_II",
			"label": "paul john",
			"seq": "31,39"
		}]
	},
	{
		"id": "900865ae340c40d793d500a8d01ca479",
		"question": "Who is the designer of Saleen S5S Raptor ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saleen_S5S_Raptor> <http://dbpedia.org/property/designer> ?uri  . }",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "designer",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saleen_S5S_Raptor",
			"label": "saleen raptor s5s",
			"seq": "23,39"
		}]
	},
	{
		"id": "6e4a15a53aae46c98668eb591c9d4c6d",
		"question": "Name some TV shows whose theme is made by a band associated with Buckethead?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Buckethead> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "906",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated band",
			"seq": "44,58"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "theme",
			"seq": "25,29"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Buckethead",
			"label": "buckethead",
			"seq": "65,74"
		}]
	},
	{
		"id": "299a2517930845609e238e4349ba2e5a",
		"question": "How many different people hold authority over the members of Balanidae family?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Balanidae> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "family",
			"seq": "71,76"
		}, {
			"uri": "http://dbpedia.org/ontology/binomialAuthority",
			"label": "authority",
			"seq": "31,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Balanidae",
			"label": "balanidae",
			"seq": "61,69"
		}]
	},
	{
		"id": "e97e582bdce440f9acac0f42cfa04053",
		"question": "Which fields' academic journals are found in the US?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/property/discipline> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/country",
			"label": "found",
			"seq": "36,40"
		}, {
			"uri": "http://dbpedia.org/property/discipline",
			"label": "in",
			"seq": "42,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a1b9bccd83024859887b1a4045cc1240",
		"question": "Which  municipality is neighbored by Cologny and Chne-Bougeries?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> . ?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Ch\u00eane-Bougeries> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/neighboringMunicipalities",
			"label": "municipality",
			"seq": "7,18"
		}, {
			"uri": "http://dbpedia.org/property/neighboringMunicipalities",
			"label": "municipality",
			"seq": "7,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cologny",
			"label": "cologny",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/resource/Ch\u00eane-Bougeries",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "663ee78f1ef04f2e993a7e2bfc3a33f6",
		"question": "Which basketball team's coach is Kurt Rambis?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Kurt_Rambis> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coach",
			"label": "coach",
			"seq": "24,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kurt_Rambis",
			"label": "rambis kurt",
			"seq": "33,43"
		}]
	},
	{
		"id": "ef2ee51cf7824d8fa2fd0a5ab306a4dc",
		"question": "How many other region served are there of the companies which serves  Pacific Ocean ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/regionServed> <http://dbpedia.org/resource/Pacific_Ocean> . ?x <http://dbpedia.org/ontology/regionServed> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "served region",
			"seq": "15,27"
		}, {
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "served region",
			"seq": "15,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pacific_Ocean",
			"label": "pacific ocean",
			"seq": "70,82"
		}]
	},
	{
		"id": "787190bf105a421a9ce3d9c43676b4e9",
		"question": "Which common prime minister did Graham Richardson and Bon McMullan serve ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Graham_Richardson> <http://dbpedia.org/ontology/primeMinister> ?uri. <http://dbpedia.org/resource/Bob_McMullan> <http://dbpedia.org/ontology/primeMinister> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "minister prime",
			"seq": "13,26"
		}, {
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "minister prime",
			"seq": "13,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Graham_Richardson",
			"label": "richardson graham",
			"seq": "32,48"
		}, {
			"uri": "http://dbpedia.org/resource/Bob_McMullan",
			"label": "mcmullan",
			"seq": "58,65"
		}]
	},
	{
		"id": "ec64691c6956449cb904adfc2f248e5e",
		"question": "Name the alma mater of Ernest de Saisset ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ernest_de_Saisset> <http://dbpedia.org/ontology/almaMater> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ernest_de_Saisset",
			"label": "saisset ernest",
			"seq": "23,36"
		}]
	},
	{
		"id": "7d551dbcd79d403490a5b99b491823dd",
		"question": "Where does the Giannis Alafouzos originate?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Giannis_Alafouzos> <http://dbpedia.org/ontology/stateOfOrigin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "originate",
			"seq": "33,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Giannis_Alafouzos",
			"label": "alafouzos giannis",
			"seq": "15,31"
		}]
	},
	{
		"id": "dd2c217006414f468433007e3ee89d47",
		"question": "Whose constituency is Duboce Triangle ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Duboce_Triangle,_San_Francisco>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "6,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Duboce_Triangle,_San_Francisco",
			"label": "triangle duboce is",
			"seq": "19,36"
		}]
	},
	{
		"id": "df38113ac72a4b079f4b7ce32a5fab4d",
		"question": "Name the office holder with predecessor as Mark Latham and partner Tim Mathieson ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Mark_Latham> . ?uri <http://dbpedia.org/ontology/partner> <http://dbpedia.org/resource/Tim_Mathieson>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "28,38"
		}, {
			"uri": "http://dbpedia.org/ontology/partner",
			"label": "partner",
			"seq": "59,65"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mark_Latham",
			"label": "latham mark",
			"seq": "43,53"
		}, {
			"uri": "http://dbpedia.org/resource/Tim_Mathieson",
			"label": "mathieson tim",
			"seq": "67,79"
		}]
	},
	{
		"id": "279603f7c94547af858759999611f14d",
		"question": "What are some party leaders of the parties which have had a seat in Berlin?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Berlin> . ?x <http://dbpedia.org/ontology/leader> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/headquarter",
			"label": "leaders",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leaders",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/PoliticalParty",
			"label": "party",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Berlin",
			"label": "berlin",
			"seq": "68,73"
		}]
	},
	{
		"id": "1f0727912ac34c55b9900d1943f9a7af",
		"question": "What awards have been given to Screenwriters?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/occupation> <http://dbpedia.org/resource/Screenwriter> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/occupation",
			"label": "to",
			"seq": "28,29"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Screenwriter",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a39c0776beac448ba93918e218e263d9",
		"question": "What is the location city of the Denver Broncos which is also  place of birth of the William C. Cramer ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri. <http://dbpedia.org/resource/William_C._Cramer> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "location city",
			"seq": "12,24"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "63,73"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Denver_Broncos",
			"label": "broncos denver",
			"seq": "33,46"
		}, {
			"uri": "http://dbpedia.org/resource/William_C._Cramer",
			"label": "william cramer",
			"seq": "85,98"
		}]
	},
	{
		"id": "861f142fbb834b069b0085c225e1a899",
		"question": "What companies are located in toronto?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Toronto>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "located",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto",
			"label": "toronto",
			"seq": "30,36"
		}]
	},
	{
		"id": "a6422effde9d467e8150547dafbdb5f6",
		"question": "Which video game's artist is Hiroji Kiyotake and computing platform is Virtual Console?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Hiroji_Kiyotake> . ?uri <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Virtual_Console>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "computing platform",
			"seq": "49,66"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "video",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hiroji_Kiyotake",
			"label": "kiyotake hiroji",
			"seq": "29,43"
		}, {
			"uri": "http://dbpedia.org/resource/Virtual_Console",
			"label": "virtual console",
			"seq": "71,85"
		}]
	},
	{
		"id": "6d79d046defe4cb683dddbf548a4dbc1",
		"question": "What is the city of the Maine School of Science and Mathematics is also the resting place of Charles A. Boutelle ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics> <http://dbpedia.org/ontology/authority> ?uri. <http://dbpedia.org/resource/Charles_A._Boutelle> <http://dbpedia.org/property/restingplace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/authority",
			"label": "city",
			"seq": "12,15"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "resting place",
			"seq": "76,88"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics",
			"label": "mathematics science school maine",
			"seq": "24,55"
		}, {
			"uri": "http://dbpedia.org/resource/Charles_A._Boutelle",
			"label": "boutelle charles",
			"seq": "93,108"
		}]
	},
	{
		"id": "d1bcc9750c134471969808b985308178",
		"question": "Which Harris County based company is a subsidiary of Tandem Computers?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Harris_County,_Texas> . ?uri <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Tandem_Computers>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "county",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/subsidiary",
			"label": "subsidiary",
			"seq": "39,48"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harris_County,_Texas",
			"label": "harris county",
			"seq": "6,18"
		}, {
			"uri": "http://dbpedia.org/resource/Tandem_Computers",
			"label": "computers tandem",
			"seq": "53,68"
		}]
	},
	{
		"id": "f84586d24de34750a3807a55539f8bf9",
		"question": "List the characters of Lysistrata ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lysistrata> <http://dbpedia.org/property/characters> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/characters",
			"label": "characters",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lysistrata",
			"label": "lysistrata",
			"seq": "23,32"
		}]
	},
	{
		"id": "6165d3f09df840a0920e30b60a8a66ed",
		"question": "Where is the office of P Elmo Futrell Jr?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/P._Elmo_Futrell,_Jr.> <http://dbpedia.org/property/office> ?uri  . }",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/office",
			"label": "office",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/P._Elmo_Futrell,_Jr.",
			"label": "futrell elmo",
			"seq": "25,36"
		}]
	},
	{
		"id": "17f767e9a51b4a3d935fa194d0de2f8d",
		"question": "Which spouse of Ptolemy XIV had a mother named Ptolemy XII auletes ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ptolemy_XII_Auletes> . ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ptolemy_XIV_of_Egypt>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "auletes",
			"seq": "59,65"
		}, {
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "spouse",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ptolemy_XII_Auletes",
			"label": "ptolemy auletes xii",
			"seq": "16,34"
		}, {
			"uri": "http://dbpedia.org/resource/Ptolemy_XIV_of_Egypt",
			"label": "ptolemy xiv",
			"seq": "16,26"
		}]
	},
	{
		"id": "9a52bd8a34ec4f4ea8936de7ddaf2d47",
		"question": "What is the baseball team whose club manager's debut team is Houston Astros?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/debutTeam> <http://dbpedia.org/resource/Houston_Astros> . ?uri <http://dbpedia.org/ontology/manager> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debut team",
			"seq": "21,30"
		}, {
			"uri": "http://dbpedia.org/ontology/manager",
			"label": "manager's",
			"seq": "37,45"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballTeam",
			"label": "baseball team",
			"seq": "12,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Houston_Astros",
			"label": "houston astros",
			"seq": "61,74"
		}]
	},
	{
		"id": "d9a5d02d87f1498995339381249f32ad",
		"question": "List the producer of the television shows distributed by FremantleMedia.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/FremantleMedia> . ?x <http://dbpedia.org/ontology/producer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "42,52"
		}, {
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "25,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/FremantleMedia",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fdff8ccca9db497f99b8d58a8528289e",
		"question": "What stadium's operator is Stan Kroenke",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Stan_Kroenke>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operator",
			"seq": "15,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium's",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stan_Kroenke",
			"label": "kroenke stan",
			"seq": "27,38"
		}]
	},
	{
		"id": "0adae92fcd52472bb68050b2bbb93c44",
		"question": "How many corporations were founded in Texas?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Texas>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "27,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "many",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Texas",
			"label": "texas",
			"seq": "38,42"
		}]
	},
	{
		"id": "2bb47e7a93f54b089d92f2822728eb97",
		"question": "List all binomial authority of the insects whose one of the  binomial authority is douard Mntries?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/binomialAuthority> <http://dbpedia.org/resource/\u00c9douard_M\u00e9n\u00e9tries> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/binomialAuthority",
			"label": "authority",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/ontology/binomialAuthority",
			"label": "authority",
			"seq": "18,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/\u00c9douard_M\u00e9n\u00e9tries",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d173daed7ab8420da0c8c83b7327b298",
		"question": "In which state is Red Willow Creek?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Red_Willow_Creek> <http://dbpedia.org/ontology/state> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/state",
			"label": "state",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Red_Willow_Creek",
			"label": "willow creek red",
			"seq": "18,33"
		}]
	},
	{
		"id": "6b258a86694f43419d3c78e7aec3c3a7",
		"question": "Where does Manu cornet work?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Manu_Cornet> <http://dbpedia.org/property/employer> ?uri  . }",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "work",
			"seq": "23,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Manu_Cornet",
			"label": "cornet manu",
			"seq": "11,21"
		}]
	},
	{
		"id": "51c70eaba07848f2a77e752b51b5d1d4",
		"question": "Name the resting place of Fazlur Rahman Khan ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fazlur_Rahman_Khan> <http://dbpedia.org/ontology/restingPlace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fazlur_Rahman_Khan",
			"label": "rahman fazlur khan",
			"seq": "26,43"
		}]
	},
	{
		"id": "b387a0ed9c02429981b6d661bfe7d779",
		"question": "List some teams for which someone who has played as a defender, now plays?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Defenceman> . ?x <http://dbpedia.org/ontology/team> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/position",
			"label": "someone",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "teams",
			"seq": "10,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Defenceman",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "81a19f6c64e14ffeb7f3f28e34230331",
		"question": "In which place is the company which is known for Barbara bestor located ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Barbara_Bestor> <http://dbpedia.org/property/knownFor> ?x . ?x <http://dbpedia.org/ontology/location> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "39,47"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "64,70"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "22,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Barbara_Bestor",
			"label": "barbara bestor",
			"seq": "49,62"
		}]
	},
	{
		"id": "b107d70a40bd4d58953a8a9b4aacc109",
		"question": "Count all the places where companies located in Ontario operate.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Ontario> . ?x <http://dbpedia.org/property/locations> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "located",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/property/locations",
			"label": "located",
			"seq": "37,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ontario",
			"label": "ontario",
			"seq": "48,54"
		}]
	},
	{
		"id": "7f3a0c2887a7423eb69732bbf1208c88",
		"question": "What is the famous relative of Mrunalini Kunte known for?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Mrunalini_Kunte> . ?x <http://dbpedia.org/property/knownFor> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relative",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "47,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mrunalini_Kunte",
			"label": "mrunalini kunte",
			"seq": "31,45"
		}]
	},
	{
		"id": "3c8f5b5976af40178208af0ac6ccae51",
		"question": "What is the resting place of the person who is the successor of James W. Hyatt ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/James_W._Hyatt> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "51,59"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "12,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "33,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_W._Hyatt",
			"label": "james hyatt",
			"seq": "64,74"
		}]
	},
	{
		"id": "e8db37fb6c5445dbbbc87de13325c056",
		"question": "What politician's partner is Diana Taylor ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/partner> <http://dbpedia.org/resource/Diana_Taylor_(superintendent)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/partner",
			"label": "partner",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Politician",
			"label": "politician's",
			"seq": "5,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Diana_Taylor_(superintendent)",
			"label": "taylor diana",
			"seq": "29,40"
		}]
	},
	{
		"id": "75f2b0e695d0422494bcbf36743ad108",
		"question": "Who was the architect of the stadium currently run by Brandenton?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Bradenton,_Florida> . ?x <http://dbpedia.org/property/architect> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "brandenton",
			"seq": "54,63"
		}, {
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "29,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bradenton,_Florida",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "04f9e85f054f4225bed1717739a1e8f9",
		"question": "What is the district of Methodist Central Hall Westminster ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Methodist_Central_Hall_Westminster> <http://dbpedia.org/ontology/district> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/district",
			"label": "district",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Methodist_Central_Hall_Westminster",
			"label": "westminster methodist central",
			"seq": "24,52"
		}]
	},
	{
		"id": "dd004ede34464a0f82faca6742a25184",
		"question": "What is the academic journal whose editor is Stephen Law?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/editor> <http://dbpedia.org/resource/Stephen_Law>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editor",
			"label": "editor",
			"seq": "35,40"
		}, {
			"uri": "http://dbpedia.org/ontology/AcademicJournal",
			"label": "academic journal",
			"seq": "12,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stephen_Law",
			"label": "stephen",
			"seq": "45,51"
		}]
	},
	{
		"id": "8e29eff6b17f4319b9c659532af37bad",
		"question": "Does Jean Louis Arcand work for Geneva?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jean-Louis_Arcand> <http://dbpedia.org/property/institution> <http://dbpedia.org/resource/Geneva> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/institution",
			"label": "for",
			"seq": "28,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jean-Louis_Arcand",
			"label": "arcand louis jean",
			"seq": "5,21"
		}, {
			"uri": "http://dbpedia.org/resource/Geneva",
			"label": "geneva",
			"seq": "32,37"
		}]
	},
	{
		"id": "c7dc969d31554373b40ef9f089a6bbc3",
		"question": "How many religions are followed amongst the people who've worked in the Korean army?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Republic_of_Korea_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Republic_of_Korea_Army",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9eed6571d0a94fbb9a0cbca09a094a42",
		"question": "List the people died in Hyderabad and are a member of political party ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Hyderabad> . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "people",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "64,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hyderabad",
			"label": "hyderabad",
			"seq": "24,32"
		}]
	},
	{
		"id": "4c467d0fc1fd40a199f7c5588d0aaee0",
		"question": "What kind of buildings were designed by Pyusawhti?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Pyusawhti> . ?x <http://dbpedia.org/ontology/type> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architect",
			"label": "pyusawhti",
			"seq": "40,48"
		}, {
			"uri": "http://dbpedia.org/ontology/type",
			"label": "by",
			"seq": "37,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Building",
			"label": "buildings",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pyusawhti",
			"label": "pyusawhti",
			"seq": "40,48"
		}]
	},
	{
		"id": "9e8f8ca6979d424ca40a9cad3ba2b841",
		"question": "Is Esther Alder the mayor of Geneva?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/property/mayor> <http://dbpedia.org/resource/Esther_Alder> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mayor",
			"label": "mayor",
			"seq": "20,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Geneva",
			"label": "geneva",
			"seq": "29,34"
		}, {
			"uri": "http://dbpedia.org/resource/Esther_Alder",
			"label": "esther alder",
			"seq": "3,14"
		}]
	},
	{
		"id": "4d2c398f35de4c2891ccc4c3b77e1ed6",
		"question": "What are the baseball players who played for San Francisco Giants?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/San_Francisco_Giants>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballPlayer",
			"label": "baseball",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Francisco_Giants",
			"label": "francisco giants san",
			"seq": "45,64"
		}]
	},
	{
		"id": "4a64f2d15b0b43d8a9e07d44a7be8966",
		"question": "Which architect of Marine Corps Air Station Kaneohe Bay was also tenant of New Sanno hotel /'",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/ontology/tenant> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenant",
			"seq": "65,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay",
			"label": "station kaneohe marine corps",
			"seq": "19,46"
		}, {
			"uri": "http://dbpedia.org/resource/New_Sanno_Hotel",
			"label": "sanno hotel new",
			"seq": "75,89"
		}]
	},
	{
		"id": "526573654e8e40fe9c04f756f3343bd8",
		"question": "Which ship builder built the USS Camp and Sturtevant ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/USS_Camp_(DE-251)> <http://dbpedia.org/property/shipBuilder> ?uri. <http://dbpedia.org/resource/USS_Sturtevant_(DE-239)> <http://dbpedia.org/property/shipBuilder> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/shipBuilder",
			"label": "builder ship",
			"seq": "6,17"
		}, {
			"uri": "http://dbpedia.org/property/shipBuilder",
			"label": "builder ship",
			"seq": "6,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/USS_Camp_(DE-251)",
			"label": "camp uss",
			"seq": "29,36"
		}, {
			"uri": "http://dbpedia.org/resource/USS_Sturtevant_(DE-239)",
			"label": "sturtevant uss",
			"seq": "29,42"
		}]
	},
	{
		"id": "69c1b8315bfc45bc8d7001b2207bf482",
		"question": "Where does the Jerusalem Institute of Justice render their services?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerusalem_Institute_of_Justice> <http://dbpedia.org/ontology/service> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/service",
			"label": "services",
			"seq": "59,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerusalem_Institute_of_Justice",
			"label": "jerusalem institute justice",
			"seq": "15,41"
		}]
	},
	{
		"id": "e0e0942378134df3b26ed071efe372b3",
		"question": "What are some movies whose score is composed by relatives of Bodhi Elfman?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Bodhi_Elfman> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "48,56"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "score",
			"seq": "27,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "elfman",
			"seq": "67,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bodhi_Elfman",
			"label": "elfman bodhi",
			"seq": "61,72"
		}]
	},
	{
		"id": "adb445039dba499fb87254b5db15cf1d",
		"question": "Which political party got elected in First Legislative Assembly of Uttar Pradesh ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/First_Legislative_Assembly_of_Uttar_Pradesh> <http://dbpedia.org/property/party> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "16,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/First_Legislative_Assembly_of_Uttar_Pradesh",
			"label": "legislative assembly pradesh",
			"seq": "43,70"
		}]
	},
	{
		"id": "5e35e8af2b984b51b235bbe13703c939",
		"question": "How many companies were founded in Menlo Park, California?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/Menlo_Park,_California>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "24,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Menlo_Park,_California",
			"label": "california park, menlo",
			"seq": "35,56"
		}]
	},
	{
		"id": "ccb09f2a248b46a6bbc34abf3022e4f2",
		"question": "What is the television show whose channel's parent organisation is Fox Sports?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentOrganisation> <http://dbpedia.org/resource/Fox_Sports_(United_States)> . ?uri <http://dbpedia.org/ontology/channel> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentOrganisation",
			"label": "organisation parent",
			"seq": "44,62"
		}, {
			"uri": "http://dbpedia.org/ontology/channel",
			"label": "channel's",
			"seq": "34,42"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fox_Sports_(United_States)",
			"label": "sports",
			"seq": "71,76"
		}]
	},
	{
		"id": "bed5afa37566420489106a8f8da38bb0",
		"question": "Which bands are associated to David Paton?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Paton> <http://dbpedia.org/ontology/associatedBand> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated",
			"seq": "16,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Paton",
			"label": "paton david",
			"seq": "30,40"
		}]
	},
	{
		"id": "39c7d79acd6a4c698df99c2cf360fdee",
		"question": "Who wrote a streetcar named desire?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A_Streetcar_Named_Desire_(play)> <http://dbpedia.org/property/writer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "wrote",
			"seq": "4,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A_Streetcar_Named_Desire_(play)",
			"label": "streetcar desire named",
			"seq": "12,33"
		}]
	},
	{
		"id": "87ca63e3887e495ebe99cdef9dc9f3d7",
		"question": "What sports can be played at universities in Metro Manila?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/state> <http://dbpedia.org/resource/Metro_Manila> . ?x <http://dbpedia.org/property/athletics> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/state",
			"label": "at",
			"seq": "2,3"
		}, {
			"uri": "http://dbpedia.org/property/athletics",
			"label": "universities",
			"seq": "29,40"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "29,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Metro_Manila",
			"label": "manila metro",
			"seq": "45,56"
		}]
	},
	{
		"id": "14aeee6f609641969e67d616c245ed48",
		"question": "Where does Kafue and Shire river flow into?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kafue_River> <http://dbpedia.org/ontology/riverMouth> ?uri. <http://dbpedia.org/resource/Shire_River> <http://dbpedia.org/ontology/riverMouth> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "27,31"
		}, {
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "27,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kafue_River",
			"label": "river kafue",
			"seq": "11,21"
		}, {
			"uri": "http://dbpedia.org/resource/Shire_River",
			"label": "shire river",
			"seq": "21,31"
		}]
	},
	{
		"id": "2ae49f2b089243fe8429fb7fc6f37020",
		"question": "Which US state gave  us Brian Deegan and Harold Lyold?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brian_Deegan_(rider)> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/Harold_Lloyd> <http://dbpedia.org/property/birthPlace> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "state",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "state",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brian_Deegan_(rider)",
			"label": "deegan brian",
			"seq": "24,35"
		}, {
			"uri": "http://dbpedia.org/resource/Harold_Lloyd",
			"label": "harold",
			"seq": "41,46"
		}]
	},
	{
		"id": "23b82966a26e4e568066583eee6da399",
		"question": "Who is the president when Loretta Ucelli used to work for Democratic party?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Loretta_Ucelli> <http://dbpedia.org/ontology/president> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Loretta_Ucelli",
			"label": "loretta ucelli",
			"seq": "26,39"
		}]
	},
	{
		"id": "56180046035946cf88878e6666d488c1",
		"question": "was Charlemagne canonized by antipope pachal 3?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Charlemagne> <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Antipope_Paschal_III> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/canonizedBy",
			"label": "canonized",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charlemagne",
			"label": "charlemagne",
			"seq": "4,14"
		}, {
			"uri": "http://dbpedia.org/resource/Antipope_Paschal_III",
			"label": "antipope",
			"seq": "29,36"
		}]
	},
	{
		"id": "739fbedde305453abbfed585e00e09b1",
		"question": "What are the players whose former teams are Carolina Panthers and Indianapolis Colts?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Carolina_Panthers> . ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Indianapolis_Colts> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former",
			"seq": "27,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carolina_Panthers",
			"label": "panthers carolina",
			"seq": "44,60"
		}, {
			"uri": "http://dbpedia.org/resource/Indianapolis_Colts",
			"label": "indianapolis colts",
			"seq": "66,83"
		}]
	},
	{
		"id": "5eb2e5439fa141a895d7ce6ec1c0460b",
		"question": "Is Akan spoken in Ghana?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ghana> <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Akan_language> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/languages",
			"label": "ghana",
			"seq": "18,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ghana",
			"label": "ghana",
			"seq": "18,22"
		}, {
			"uri": "http://dbpedia.org/resource/Akan_language",
			"label": "akan",
			"seq": "3,6"
		}]
	},
	{
		"id": "a74dc03be29c445da9b7b70e054546d1",
		"question": "How many basketball players studied in the Midland College?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/Midland_College>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/college",
			"label": "college",
			"seq": "51,57"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballPlayer",
			"label": "basketball",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Midland_College",
			"label": "midland college",
			"seq": "43,57"
		}]
	},
	{
		"id": "f40c1a2ee9c24177ad87206df71211e0",
		"question": "Rickenbacker is a musical instrument played by which artists?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Rickenbacker>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/instrument",
			"label": "instrument",
			"seq": "26,35"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical",
			"seq": "18,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rickenbacker",
			"label": "rickenbacker",
			"seq": "0,11"
		}]
	},
	{
		"id": "b8602cf66ce54d7480a3cf07b2d2329f",
		"question": "Deion sanders and Hinkey haines debuted their career with which common team?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hinkey_Haines> <http://dbpedia.org/property/debutteam> ?uri. <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debuted",
			"seq": "32,38"
		}, {
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debuted",
			"seq": "32,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hinkey_Haines",
			"label": "hinkey haines",
			"seq": "18,30"
		}, {
			"uri": "http://dbpedia.org/resource/Deion_Sanders",
			"label": "sanders deion",
			"seq": "0,12"
		}]
	},
	{
		"id": "1bfa3acdacdd4b798f6e8cf072d4ed54",
		"question": "Is Liang Chow the headcoach of Shawn Johnson?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Shawn_Johnson> <http://dbpedia.org/property/headcoach> <http://dbpedia.org/resource/Liang_Chow> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headcoach",
			"label": "headcoach",
			"seq": "18,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shawn_Johnson",
			"label": "johnson shawn",
			"seq": "31,43"
		}, {
			"uri": "http://dbpedia.org/resource/Liang_Chow",
			"label": "liang chow",
			"seq": "3,12"
		}]
	},
	{
		"id": "2ea87bee77ff44d2a1bd856fc6106c1c",
		"question": "List the work institute of the medicians who has also worked at University of Miami ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/workInstitutions> <http://dbpedia.org/resource/University_of_Miami> . ?x <http://dbpedia.org/property/workInstitutions> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Medician>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/workInstitutions",
			"label": "institute",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/property/workInstitutions",
			"label": "institute",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Medician",
			"label": "medicians",
			"seq": "31,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/University_of_Miami",
			"label": "university miami",
			"seq": "64,79"
		}]
	},
	{
		"id": "fbc52b963d5141a6b89216bae276bf21",
		"question": "What ethinicity of Linda Hogan is also the state of origin of Holmes Colbert ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Hogan> <http://dbpedia.org/ontology/ethnicity> ?uri. <http://dbpedia.org/resource/Holmes_Colbert> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ethnicity",
			"label": "ethinicity",
			"seq": "5,14"
		}, {
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "origin state",
			"seq": "43,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Linda_Hogan",
			"label": "linda hogan",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/resource/Holmes_Colbert",
			"label": "colbert holmes",
			"seq": "62,75"
		}]
	},
	{
		"id": "7b86db7dd4c14d2e8d914ef82ac4044e",
		"question": "In which television shows has Eliza Schneider given her voice?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/voices",
			"label": "voice",
			"seq": "56,60"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eliza_Schneider",
			"label": "schneider eliza",
			"seq": "30,44"
		}]
	},
	{
		"id": "3932dc742d734d208470a844d5484ced",
		"question": "Where are jockeys in Dubai World Cup from?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/race> <http://dbpedia.org/resource/Dubai_World_Cup> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Jockey>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/race",
			"label": "are",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "are",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/ontology/Jockey",
			"label": "jockeys",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dubai_World_Cup",
			"label": "world dubai cup",
			"seq": "21,35"
		}]
	},
	{
		"id": "75956ea1ffb748f7b9bb48794ac65260",
		"question": "From which country is Lawrence Okoye's nationality ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lawrence_Okoye> <http://dbpedia.org/property/nationality> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationality",
			"label": "nationality",
			"seq": "39,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lawrence_Okoye",
			"label": "lawrence",
			"seq": "22,29"
		}]
	},
	{
		"id": "fce78279c2e143a79652b8514207cd41",
		"question": "Which american football players currently plays for Michigan Wolverines?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentteam> <http://dbpedia.org/resource/Michigan_Wolverines>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentteam",
			"label": "currently",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football american",
			"seq": "6,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michigan_Wolverines",
			"label": "wolverines michigan",
			"seq": "52,70"
		}]
	},
	{
		"id": "d6d1fdb7f3604da48fee7fba7961f107",
		"question": "What is the location of the Walter Evans Edge office which is also the place of birth of henry Miller ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Walter_Evans_Edge> <http://dbpedia.org/property/office> ?uri. <http://dbpedia.org/resource/Henry_Miller_Shreve> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/office",
			"label": "office",
			"seq": "46,51"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "place birth",
			"seq": "71,81"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Walter_Evans_Edge",
			"label": "walter evans edge",
			"seq": "28,44"
		}, {
			"uri": "http://dbpedia.org/resource/Henry_Miller_Shreve",
			"label": "miller henry",
			"seq": "89,100"
		}]
	},
	{
		"id": "0d7b3b1e1ef24b64bb14f8a88bb3ba16",
		"question": "What is the base currency of Benelux ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Benelux> <http://dbpedia.org/property/currency> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currency",
			"label": "currency",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Benelux",
			"label": "benelux",
			"seq": "29,35"
		}]
	},
	{
		"id": "5ba35b11cd8b47b3bdb0467bb646621b",
		"question": "What other destinations do airlines go to, whose flights also come to Glasgow?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Glasgow_Airport> . ?x <http://dbpedia.org/property/destinations> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/targetAirport",
			"label": "destinations",
			"seq": "11,22"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "destinations",
			"seq": "11,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "27,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Glasgow_Airport",
			"label": "glasgow",
			"seq": "70,76"
		}]
	},
	{
		"id": "cd069e1c88ed4e77ae308cbb998f57ca",
		"question": "List down the common sports played by PATTS College of Aeronautics and lytechnic University of the Philippines Taguig ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/athletics",
			"label": "aeronautics",
			"seq": "55,65"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PATTS_College_of_Aeronautics",
			"label": "aeronautics college patts",
			"seq": "38,62"
		}, {
			"uri": "http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig",
			"label": "philippines university lytechnic",
			"seq": "71,102"
		}]
	},
	{
		"id": "8e45bd7253a74f70beef10fbff653824",
		"question": "Where did Steve Romeo dies ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steve_Romeo> <http://dbpedia.org/ontology/deathPlace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "dies",
			"seq": "22,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steve_Romeo",
			"label": "steve romeo",
			"seq": "10,20"
		}]
	},
	{
		"id": "6e794f3cb6e6412f993f19aa5cd71225",
		"question": "Of the sports commonly played at Islamic Azad Uni, tehran, which one does Jon Speelman play?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri. <http://dbpedia.org/resource/Islamic_Azad_University_Central_Tehran_Branch> <http://dbpedia.org/ontology/sport> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/field",
			"label": "played",
			"seq": "23,28"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "7,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jon_Speelman",
			"label": "speelman",
			"seq": "78,85"
		}, {
			"uri": "http://dbpedia.org/resource/Islamic_Azad_University_Central_Tehran_Branch",
			"label": "islamic",
			"seq": "33,39"
		}]
	},
	{
		"id": "81717b01e68a4e36876d59157b0c01d9",
		"question": "What is the government type of Ancient Rome ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ancient_Rome> <http://dbpedia.org/ontology/governmentType> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governmentType",
			"label": "government type",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ancient_Rome",
			"label": "ancient rome",
			"seq": "31,42"
		}]
	},
	{
		"id": "58f1836b2739462a8eee1fb265dfabf3",
		"question": "Who are the animator of The Skeleton Dance?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/animator",
			"label": "animator",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Skeleton_Dance",
			"label": "skeleton dance the",
			"seq": "8,25"
		}]
	},
	{
		"id": "80b6db330714404da1f2443e719d62f4",
		"question": "What is the birth location of the pope who was canonized by Agatha of Sicily?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Agatha_of_Sicily> <http://dbpedia.org/ontology/canonizedBy> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Pope>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/canonizedBy",
			"label": "canonized",
			"seq": "47,55"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "birth",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Pope",
			"label": "pope",
			"seq": "34,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Agatha_of_Sicily",
			"label": "sicily agatha",
			"seq": "60,72"
		}]
	},
	{
		"id": "69fee15c06f64c7eb69fdfc71e10c6d8",
		"question": "Who have become famous by movies produced by Laurence Mark?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Laurence_Mark> . ?uri <http://dbpedia.org/ontology/knownFor> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "produced",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "who",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Laurence_Mark",
			"label": "laurence mark",
			"seq": "45,57"
		}]
	},
	{
		"id": "8553c4fee8b04dc18263ee3f07b81807",
		"question": "What is the common country of Ganz UV and Balaton wine region ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ganz_UV> <http://dbpedia.org/ontology/operator> ?uri. <http://dbpedia.org/resource/Balaton_wine_region> <http://dbpedia.org/ontology/location> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "country",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "balaton",
			"seq": "42,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ganz_UV",
			"label": "ganz uv",
			"seq": "30,36"
		}, {
			"uri": "http://dbpedia.org/resource/Balaton_wine_region",
			"label": "balaton region wine",
			"seq": "42,60"
		}]
	},
	{
		"id": "6f1d569a147d482ca609cfdbec7c9ed8",
		"question": "What organization is the parent of Greenpeace Nordic?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Greenpeace_Nordic> <http://dbpedia.org/ontology/parentOrganisation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentOrganisation",
			"label": "organization",
			"seq": "5,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Greenpeace_Nordic",
			"label": "greenpeace nordic",
			"seq": "35,51"
		}]
	},
	{
		"id": "aaf4a21d2ca04d3bb91aed5c6063223d",
		"question": "Give me some softwares which run on mac os",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Mac_OS>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "softwares",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "softwares",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mac_OS",
			"label": "mac os",
			"seq": "36,41"
		}]
	},
	{
		"id": "691a84e5e7b3486aa5ff297feb1d534b",
		"question": "Which destination of the Novair International Airways is also the  predecessor of the Chevrolet Caprice?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Novair_International_Airways> <http://dbpedia.org/ontology/destination> ?uri. <http://dbpedia.org/resource/Chevrolet_Caprice> <http://dbpedia.org/ontology/predecessor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/destination",
			"label": "destination",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "67,77"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Novair_International_Airways",
			"label": "international airways",
			"seq": "32,52"
		}, {
			"uri": "http://dbpedia.org/resource/Chevrolet_Caprice",
			"label": "chevrolet caprice",
			"seq": "86,102"
		}]
	},
	{
		"id": "11b93f9e8ea74606a3e6e0e6f6e55a21",
		"question": "What are some scientists who have stateless citizenship?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/citizenship> <http://dbpedia.org/resource/Statelessness>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "citizenship",
			"seq": "44,54"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientists",
			"seq": "14,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Statelessness",
			"label": "stateless",
			"seq": "34,42"
		}]
	},
	{
		"id": "53ed8e82e6ec49d0b9e1762d781e71d4",
		"question": "List the doctoral students of Harry Harlow ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Harry_Harlow> <http://dbpedia.org/property/doctoralStudents> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "students doctoral",
			"seq": "9,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harry_Harlow",
			"label": "harlow harry",
			"seq": "30,41"
		}]
	},
	{
		"id": "2006a24c1c3e478b98df523596714251",
		"question": "Panthera leo fossils and Liger belong to which species?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Panthera_leo_fossilis> <http://dbpedia.org/ontology/species> ?uri. <http://dbpedia.org/resource/Liger> <http://dbpedia.org/ontology/species> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/species",
			"label": "species",
			"seq": "47,53"
		}, {
			"uri": "http://dbpedia.org/ontology/species",
			"label": "species",
			"seq": "47,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Panthera_leo_fossilis",
			"label": "panthera",
			"seq": "0,7"
		}, {
			"uri": "http://dbpedia.org/resource/Liger",
			"label": "liger",
			"seq": "25,29"
		}]
	},
	{
		"id": "30d46acd81d9420f9bef5bbebec0d15f",
		"question": "which awards have been given to people who fought in the Battle of France?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_France> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "battle",
			"seq": "57,62"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Battle_of_France",
			"label": "france battle",
			"seq": "57,69"
		}]
	},
	{
		"id": "44378225c4c7414bbcfefcb69cfc2d92",
		"question": "How many people have been trained in an institute located in California?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/California> . ?uri <http://dbpedia.org/property/training> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "located",
			"seq": "50,56"
		}, {
			"uri": "http://dbpedia.org/property/training",
			"label": "trained",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/California",
			"label": "california",
			"seq": "61,70"
		}]
	},
	{
		"id": "a9fc9b062b16419dbf83984d9a7bcb0e",
		"question": "Which composer subsequent work of Moondog Matinee and also composed The TImes They are A changin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/ontology/musicBy> ?uri. <http://dbpedia.org/resource/Moondog_Matinee> <http://dbpedia.org/ontology/subsequentWork> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicBy",
			"label": "which",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "15,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)",
			"label": "changin times they are",
			"seq": "72,93"
		}, {
			"uri": "http://dbpedia.org/resource/Moondog_Matinee",
			"label": "moondog matinee",
			"seq": "34,48"
		}]
	},
	{
		"id": "444c3a8fb88747a4bce43c1d413b2b26",
		"question": "Name whose youth club was FC Barcelona ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/FC_Barcelona>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youth club",
			"seq": "11,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/FC_Barcelona",
			"label": "barcelona fc",
			"seq": "26,37"
		}]
	},
	{
		"id": "7991781a1984410b9f4707dd643830a3",
		"question": "Which religion does the leader of Church and Wellesley follow?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Church_and_Wellesley> <http://dbpedia.org/property/leaderName> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "leader",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Church_and_Wellesley",
			"label": "wellesley church and",
			"seq": "34,53"
		}]
	},
	{
		"id": "92dea938b59a49b88d62bed248dc6a4c",
		"question": "What is the citizenship of Erastus Wiman ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Erastus_Wiman> <http://dbpedia.org/ontology/citizenship> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "citizenship",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erastus_Wiman",
			"label": "erastus wiman",
			"seq": "27,39"
		}]
	},
	{
		"id": "7e9e2be8376e470bbfbe44d535fd2b65",
		"question": "Does the Amazon River start in Arequipa Region?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Amazon_River> <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/Arequipa_Region> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceRegion",
			"label": "region",
			"seq": "40,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Amazon_River",
			"label": "amazon river",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/resource/Arequipa_Region",
			"label": "arequipa region",
			"seq": "31,45"
		}]
	},
	{
		"id": "24b98ce65ef6434f9ea0fdbc61657261",
		"question": "Which is the nearest city to Elliott Bay ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elliott_Bay> <http://dbpedia.org/ontology/nearestCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "nearest city",
			"seq": "13,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elliott_Bay",
			"label": "elliott bay",
			"seq": "29,39"
		}]
	},
	{
		"id": "5cf1e1c8ee184ab0aa42a8628980116b",
		"question": "What magazine is Marritt Cabal known for which has Lucifer Hammer as publisher ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Merritt_Cabal> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Lucifer's_Hammer> <http://dbpedia.org/ontology/publisher> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publisher",
			"seq": "69,77"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Merritt_Cabal",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Lucifer's_Hammer",
			"label": "lucifer hammer",
			"seq": "51,64"
		}]
	},
	{
		"id": "8575d9a3b2064c21985eeeeb57e60eb4",
		"question": "What are the movies whose screenplay is done by Eric Roth?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Eric_Roth>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screenplay",
			"seq": "26,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "37,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eric_Roth",
			"label": "roth eric",
			"seq": "48,56"
		}]
	},
	{
		"id": "dd43bcfacc674fb8980f943492e44533",
		"question": "List the movie whose music was given by Geoffrey Burgon and distributed by Cinema International Corporation?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Geoffrey_Burgon> . ?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "music",
			"seq": "21,25"
		}, {
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributed",
			"seq": "60,70"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "cinema",
			"seq": "75,80"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Geoffrey_Burgon",
			"label": "geoffrey burgon",
			"seq": "40,54"
		}, {
			"uri": "http://dbpedia.org/resource/Cinema_International_Corporation",
			"label": "international corporation cinema",
			"seq": "75,106"
		}]
	},
	{
		"id": "e8c5049fd8a743ee8d0faf76a10ae000",
		"question": "Which series has an episode called The lost special and also a character named Sherlock Holmes ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Lost_Special> <http://dbpedia.org/property/series> ?uri. <http://dbpedia.org/resource/Sherlock_Holmes_(play)> <http://dbpedia.org/property/characters> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/series",
			"label": "series",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/characters",
			"label": "character",
			"seq": "63,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Lost_Special",
			"label": "special",
			"seq": "44,50"
		}, {
			"uri": "http://dbpedia.org/resource/Sherlock_Holmes_(play)",
			"label": "sherlock holmes",
			"seq": "79,93"
		}]
	},
	{
		"id": "9e56e9f24bb64c5b894e7a47b2c9cd94",
		"question": "Which football teams is Shahid Khan proprietor to?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Shahid_Khan> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "to",
			"seq": "43,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shahid_Khan",
			"label": "shahid khan",
			"seq": "24,34"
		}]
	},
	{
		"id": "ffc2d9ad79e947ae95f0e8795dad6214",
		"question": "What cities are near to Nihoa which is also known as Bird Island ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nihoa> <http://dbpedia.org/property/nearestCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nearestCity",
			"label": "near are",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nihoa",
			"label": "nihoa",
			"seq": "24,28"
		}]
	},
	{
		"id": "2d3b740bd54a4388a8be9f63fcaef04d",
		"question": "Which football players currently have their contracts with Stoke City F.C.?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/Stoke_City_F.C.> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "currently",
			"seq": "23,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stoke_City_F.C.",
			"label": "stoke f.c. city",
			"seq": "59,73"
		}]
	},
	{
		"id": "51982b316423405bb8b05661dd691bff",
		"question": "How many cities are around the sea in which the the fig tree bay meets?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Fig_Tree_Bay> <http://dbpedia.org/ontology/inflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/inflow",
			"label": "in",
			"seq": "35,36"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "31,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fig_Tree_Bay",
			"label": "tree fig bay",
			"seq": "52,63"
		}]
	},
	{
		"id": "9049b588d47b4566b827b69d457b3725",
		"question": "What are all the prizes won by the writer of A Grand Day Out?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/A_Grand_Day_Out> <http://dbpedia.org/ontology/writer> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "writer",
			"seq": "35,40"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "are",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A_Grand_Day_Out",
			"label": "grand out day",
			"seq": "47,59"
		}]
	},
	{
		"id": "002b171e559d44dab3ae234723824bac",
		"question": "Count the number of families of the Animal kingdom.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> . ?x <http://dbpedia.org/ontology/family> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/kingdom",
			"label": "kingdom.",
			"seq": "43,50"
		}, {
			"uri": "http://dbpedia.org/ontology/family",
			"label": "families",
			"seq": "20,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Animal",
			"label": "animal",
			"seq": "36,41"
		}]
	},
	{
		"id": "da9e64c20e50473fb7df93281a4a2d44",
		"question": "Which magazine has publisher as Jann Wenner?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Jann_Wenner>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publisher",
			"seq": "19,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Magazine",
			"label": "magazine",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jann_Wenner",
			"label": "wenner jann",
			"seq": "32,42"
		}]
	},
	{
		"id": "b1d14746b41f47459edf2a268414687f",
		"question": "Where are Thomas Franois Burgers and Johannes Gerhardus Strijdom buried?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomas_Fran\u00e7ois_Burgers> <http://dbpedia.org/property/restingplace> ?uri. <http://dbpedia.org/resource/Johannes_Gerhardus_Strijdom> <http://dbpedia.org/property/restingplace> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "buried",
			"seq": "65,70"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "buried",
			"seq": "65,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thomas_Fran\u00e7ois_Burgers",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Johannes_Gerhardus_Strijdom",
			"label": "gerhardus strijdom johannes",
			"seq": "37,63"
		}]
	},
	{
		"id": "14d666af4e7f4944b90397bb7836911e",
		"question": "where are renaissance centers located?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Renaissance_Center> <http://dbpedia.org/property/address> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/address",
			"label": "are",
			"seq": "6,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Renaissance_Center",
			"label": "renaissance",
			"seq": "10,20"
		}]
	},
	{
		"id": "ca66ad5b2f544c31a6254b0ba2808274",
		"question": "What are the broadcast areas of Mauritius Broadcasting Corporation?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mauritius_Broadcasting_Corporation> <http://dbpedia.org/property/broadcastArea> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/broadcastArea",
			"label": "broadcast",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mauritius_Broadcasting_Corporation",
			"label": "broadcasting corporation mauritius",
			"seq": "32,65"
		}]
	},
	{
		"id": "c4cb772e25ba433582020a0bf1bea228",
		"question": "Where is the ground of the soccer club, which has Alan Kusov as a team member ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Alan_Kusov__11> <http://dbpedia.org/ontology/team> ?x . ?x <http://dbpedia.org/ontology/ground> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "66,69"
		}, {
			"uri": "http://dbpedia.org/ontology/ground",
			"label": "ground",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClub",
			"label": "soccer",
			"seq": "27,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alan_Kusov__11",
			"label": "kusov alan",
			"seq": "50,59"
		}]
	},
	{
		"id": "9c91b4cd6e5341e08778831ad38a79d3",
		"question": "which president was served by Joseph Stiglitz?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joseph_Stiglitz> <http://dbpedia.org/property/president> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joseph_Stiglitz",
			"label": "stiglitz joseph",
			"seq": "30,44"
		}]
	},
	{
		"id": "eba614f60dae40f98002cee1a97d644a",
		"question": "What is the nickname of the club managed by Piotr baron?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Piotr_Baron> . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manager",
			"label": "managed",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Piotr_Baron",
			"label": "piotr baron",
			"seq": "44,54"
		}]
	},
	{
		"id": "d3c5d6d98b654e44bbd5b942e911e74a",
		"question": "Give the name of the river with source place as Australian Alps and has mouth place as Goolwa , a place in Siyuth Australia ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Australian_Alps> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Goolwa,_South_Australia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourcePlace",
			"label": "source place",
			"seq": "32,43"
		}, {
			"uri": "http://dbpedia.org/ontology/mouthPlace",
			"label": "place",
			"seq": "39,43"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "21,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Australian_Alps",
			"label": "australian alps",
			"seq": "48,62"
		}, {
			"uri": "http://dbpedia.org/resource/Goolwa,_South_Australia",
			"label": "australia",
			"seq": "48,56"
		}]
	},
	{
		"id": "4a61c257cb3c4649a59faec69a5bab87",
		"question": "Did Trish Stratus train Christina Crawford?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Christina_Crawford_(wrestler)> <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Trish_Stratus> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/trainer",
			"label": "train",
			"seq": "18,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christina_Crawford_(wrestler)",
			"label": "christina crawford",
			"seq": "24,41"
		}, {
			"uri": "http://dbpedia.org/resource/Trish_Stratus",
			"label": "stratus trish",
			"seq": "4,16"
		}]
	},
	{
		"id": "6abff67222f640f98134a1d608370fc0",
		"question": "Who is the writer of the Cavalcade of America and The United States Steel Hour ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cavalcade_of_America> <http://dbpedia.org/ontology/writer> ?uri. <http://dbpedia.org/resource/The_United_States_Steel_Hour> <http://dbpedia.org/ontology/writer> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "writer",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "writer",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cavalcade_of_America",
			"label": "cavalcade america of",
			"seq": "18,37"
		}, {
			"uri": "http://dbpedia.org/resource/The_United_States_Steel_Hour",
			"label": "united states steel hour",
			"seq": "54,77"
		}]
	},
	{
		"id": "d98921970a2643a8b9b1d8863e275faf",
		"question": "To what nation do Victor Gunasekara and Anuruddha Ratwatte owe their allegiance?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Victor_Gunasekara> <http://dbpedia.org/property/allegiance> ?uri. <http://dbpedia.org/resource/Anuruddha_Ratwatte> <http://dbpedia.org/property/allegiance> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "69,78"
		}, {
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "69,78"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Victor_Gunasekara",
			"label": "gunasekara victor",
			"seq": "18,34"
		}, {
			"uri": "http://dbpedia.org/resource/Anuruddha_Ratwatte",
			"label": "anuruddha ratwatte",
			"seq": "40,57"
		}]
	},
	{
		"id": "191277ee793a402ab582ed1fbba59680",
		"question": "Which artists have co-starred with Kris Kristofferson?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Kris_Kristofferson>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "artists",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artists",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kris_Kristofferson",
			"label": "kristofferson",
			"seq": "40,52"
		}]
	},
	{
		"id": "1cedfca911824453b06451cbc8104541",
		"question": "Count the total religions followed by the ones living in England.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/England> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "religions",
			"seq": "16,24"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "religions",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "569d57916252412ab7543cdd78e851a3",
		"question": "Which club of Michael Springer is also the parent organization of Syracuse University press ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Springer> <http://dbpedia.org/property/team> ?uri. <http://dbpedia.org/resource/Syracuse_University_Press> <http://dbpedia.org/property/parent> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/team",
			"label": "the",
			"seq": "39,41"
		}, {
			"uri": "http://dbpedia.org/property/parent",
			"label": "parent",
			"seq": "43,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Springer",
			"label": "springer michael",
			"seq": "14,29"
		}, {
			"uri": "http://dbpedia.org/resource/Syracuse_University_Press",
			"label": "university syracuse press",
			"seq": "66,90"
		}]
	},
	{
		"id": "9496ce7155814acaac417eb27fd22cc1",
		"question": "Name the cover artist of the adventure of Tom sawyer ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coverArtist",
			"label": "artist cover",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer",
			"label": "adventure sawyer",
			"seq": "29,44"
		}]
	},
	{
		"id": "0d9332702ee748b2a87f19d9c50726e4",
		"question": "Which river flows through both eastern and western washington?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eastern_Washington> <http://dbpedia.org/ontology/river> ?uri. <http://dbpedia.org/resource/Central_Washington> <http://dbpedia.org/ontology/river> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/river",
			"label": "river",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/river",
			"label": "river",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eastern_Washington",
			"label": "washington eastern",
			"seq": "31,48"
		}, {
			"uri": "http://dbpedia.org/resource/Central_Washington",
			"label": "washington",
			"seq": "51,60"
		}]
	},
	{
		"id": "1bbb3a798a1f410986aeee42f900f74b",
		"question": "What is the nationality of the golf player who won the  2002 Players Championship ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/2002_Players_Championship> <http://dbpedia.org/ontology/champion> ?x . ?x <http://dbpedia.org/ontology/nationality> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/champion",
			"label": "championship",
			"seq": "69,80"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/GolfPlayer",
			"label": "player",
			"seq": "36,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2002_Players_Championship",
			"label": "championship players",
			"seq": "61,80"
		}]
	},
	{
		"id": "3fd0cb3a9d11496ca7d876547a5e6409",
		"question": "Who was the president under which people won the United States House of Representatives elections in 1790 ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1790> <http://dbpedia.org/property/leader> ?x . ?x <http://dbpedia.org/property/president> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leader",
			"label": "under",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "president",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1790",
			"label": "representatives elections",
			"seq": "72,96"
		}]
	},
	{
		"id": "96886b0fa50b4ecebcc44d15c8c59b37",
		"question": "Which companies are founded in the city of which Collin County Texas is a part?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/part> <http://dbpedia.org/resource/Collin_County,_Texas> . ?uri <http://dbpedia.org/ontology/foundationPlace> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/part",
			"label": "part",
			"seq": "74,77"
		}, {
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Collin_County,_Texas",
			"label": "county collin texas",
			"seq": "49,67"
		}]
	},
	{
		"id": "b8180174343249208cb2beeebf8476a0",
		"question": "Terminal Station at Chattanooga is made by architects from which University?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Terminal_Station_(Chattanooga)> . ?x <http://dbpedia.org/property/education> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "from",
			"seq": "54,57"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "station",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Architect",
			"label": "architects",
			"seq": "43,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Terminal_Station_(Chattanooga)",
			"label": "chattanooga terminal station",
			"seq": "0,27"
		}]
	},
	{
		"id": "d2b7dba56c5f4859813272dda053e0a1",
		"question": "Which home stadium of 2011-12 FC Spartak Moscow season is also the location of birth of the Svetlana Gounkina ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2011\u201312_FC_Spartak_Moscow_season> <http://dbpedia.org/ontology/homeStadium> ?uri. <http://dbpedia.org/resource/Svetlana_Gounkina> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "stadium home",
			"seq": "6,17"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birth",
			"seq": "79,83"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2011\u201312_FC_Spartak_Moscow_season",
			"label": "spartak season moscow",
			"seq": "33,53"
		}, {
			"uri": "http://dbpedia.org/resource/Svetlana_Gounkina",
			"label": "svetlana gounkina",
			"seq": "92,108"
		}]
	},
	{
		"id": "d742a7e01f4c4ee48d60d542ecc2fb42",
		"question": "Who is the former partner of Chris Knierim ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chris_Knierim> <http://dbpedia.org/ontology/formerPartner> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerPartner",
			"label": "partner former",
			"seq": "11,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chris_Knierim",
			"label": "knierim chris",
			"seq": "29,41"
		}]
	},
	{
		"id": "443f406a43a149918fa7e12a6326a81e",
		"question": "What is the predecessor of BMW M40 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/BMW_M40> <http://dbpedia.org/property/predecessor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BMW_M40",
			"label": "m40 bmw",
			"seq": "27,33"
		}]
	},
	{
		"id": "c015a34029f941aeb5c25cfc4bab4c52",
		"question": "How many different pole drivers are there, of the GPs when Renault was the first team?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/firstTeam> <http://dbpedia.org/resource/Renault_in_Formula_One> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FormulaOneRacer>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstTeam",
			"label": "first team",
			"seq": "75,84"
		}, {
			"uri": "http://dbpedia.org/ontology/poleDriver",
			"label": "drivers",
			"seq": "24,30"
		}, {
			"uri": "http://dbpedia.org/ontology/FormulaOneRacer",
			"label": "different",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Renault_in_Formula_One",
			"label": "renault",
			"seq": "59,65"
		}]
	},
	{
		"id": "74971790782c4927ab2f8321c4e322a3",
		"question": "What is the former team of the football player who is the coach of 2006 Oakland Raiders season ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/2006_Oakland_Raiders_season> <http://dbpedia.org/property/coach> ?x . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coach",
			"label": "coach",
			"seq": "58,62"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former team",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football player",
			"seq": "31,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2006_Oakland_Raiders_season",
			"label": "raiders oakland season 2006",
			"seq": "67,93"
		}]
	},
	{
		"id": "e179bec4f0ea4b508f69fac03d08356e",
		"question": "Amongst the winner of Lovelace medal, who has John Robert as doctoral supervisor ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/John_Robert_Woodyard> . ?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Lovelace_Medal>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "doctoral",
			"seq": "61,68"
		}, {
			"uri": "http://dbpedia.org/property/prizes",
			"label": "winner",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Robert_Woodyard",
			"label": "robert john",
			"seq": "46,56"
		}, {
			"uri": "http://dbpedia.org/resource/Lovelace_Medal",
			"label": "lovelace",
			"seq": "22,29"
		}]
	},
	{
		"id": "b9b35134084c486ab2f02ecdc549e6bc",
		"question": "who was the australian flagbearer of 2008 Summer Olympics?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Australia_at_the_2008_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/flagbearer",
			"label": "flagbearer",
			"seq": "23,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Australia_at_the_2008_Summer_Olympics",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "3230de5fe63a44debe27de6c25e6aedf",
		"question": "Whose mam is Bertrada of Laon?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Bertrada_of_Laon> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mother",
			"label": "whose",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bertrada_of_Laon",
			"label": "bertrada laon of",
			"seq": "13,28"
		}]
	},
	{
		"id": "7652df11d2a14922acffd1e9556bfb09",
		"question": "List the leaders of all the cities through which the Ganga river flows ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ganges> <http://dbpedia.org/property/city> ?x . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "cities",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "leaders",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/City",
			"label": "cities",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ganges",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4b41483f7e73472da3d5fafa4cc448d6",
		"question": "What is the common citizenship between JSM Hopoer and Robert Valentine ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/J._S._M._Hooper> <http://dbpedia.org/ontology/citizenship> ?uri. <http://dbpedia.org/resource/Robert_Valentine_(composer)> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "citizenship",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "common",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/J._S._M._Hooper",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Robert_Valentine_(composer)",
			"label": "valentine robert",
			"seq": "54,69"
		}]
	},
	{
		"id": "51484b4dd82e47e9838bd6ae4d77c67a",
		"question": "Who is the partner of Rob Patterson?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Rob_Patterson>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/partner",
			"label": "partner",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rob_Patterson",
			"label": "patterson",
			"seq": "26,34"
		}]
	},
	{
		"id": "7e6d0482a40245e6bf7602e2ad0d65ed",
		"question": "What are all the TV shows which are related to the ones produced by Julie Gardner?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Julie_Gardner> . ?uri <http://dbpedia.org/ontology/related> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "produced",
			"seq": "56,63"
		}, {
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "20,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Julie_Gardner",
			"label": "gardner julie",
			"seq": "68,80"
		}]
	},
	{
		"id": "d96691130f534245a4d69a4dcbc67391",
		"question": "Name the parent company of  Ford Air Transport Service ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Air_Transport_Service> <http://dbpedia.org/ontology/parentCompany> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "company parent",
			"seq": "9,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Air_Transport_Service",
			"label": "transport service ford air",
			"seq": "28,53"
		}]
	},
	{
		"id": "c077c60d66924d99ad283dbd4078d564",
		"question": "Which football teams are in a city where Oakland Athletics were the tenants?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Oakland_Athletics> . ?uri <http://dbpedia.org/ontology/locationCity> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenants",
			"seq": "68,74"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "city",
			"seq": "30,33"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballTeam",
			"label": "football",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oakland_Athletics",
			"label": "athletics oakland",
			"seq": "41,57"
		}]
	},
	{
		"id": "9287889114534eda9daed4e2d79a4680",
		"question": "How many people have worked in the band one of whose current member is Hynief?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Hynief> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "current member",
			"seq": "53,66"
		}, {
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "member band",
			"seq": "35,45"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hynief",
			"label": "hynief",
			"seq": "71,76"
		}]
	},
	{
		"id": "42c827cfc2294a5390f501f2f6447b1a",
		"question": "What is the residence of the bronze medalist of Alpine skiing at the women's downhill competition at the 1972 Winter Olympics?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Alpine_skiing_at_the_1972_Winter_Olympics_\u2013_Women's_downhill> <http://dbpedia.org/ontology/bronzeMedalist> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bronzeMedalist",
			"label": "medalist bronze",
			"seq": "29,43"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "the",
			"seq": "8,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alpine_skiing_at_the_1972_Winter_Olympics_\u2013_Women's_downhill",
			"label": "olympics downhill women's winter skiing",
			"seq": "55,93"
		}]
	},
	{
		"id": "4a9b50b6f10f4e23bfacaee43d35e802",
		"question": "Does Mt St. Peter Churt follow the architectural style of art deco?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mount_St._Peter_Church> <http://dbpedia.org/property/architecture> <http://dbpedia.org/resource/Art_Deco> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architecture",
			"label": "architectural",
			"seq": "35,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mount_St._Peter_Church",
			"label": "peter",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/resource/Art_Deco",
			"label": "deco art",
			"seq": "58,65"
		}]
	},
	{
		"id": "1ef8cd8959f34ef2b16979eec3a75888",
		"question": "Which companies published Super Mario Adventures?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Super_Mario_Adventures> <http://dbpedia.org/property/publisher> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/publisher",
			"label": "published",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Super_Mario_Adventures",
			"label": "adventures super mario",
			"seq": "26,47"
		}]
	},
	{
		"id": "711db5b7af9245649c23c84820a2671c",
		"question": "King crimson has been recorded in which places?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/King_Crimson> . ?x <http://dbpedia.org/ontology/recordedIn> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/artist",
			"label": "crimson",
			"seq": "5,11"
		}, {
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/King_Crimson",
			"label": "crimson king",
			"seq": "0,11"
		}]
	},
	{
		"id": "a9081790bb784c2da0983b1fa106ab2c",
		"question": "Is william doyle the chairman of Georgetown university?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Georgetown_University> <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/William_Doyle_(businessman)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/chairman",
			"label": "chairman",
			"seq": "21,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Georgetown_University",
			"label": "university georgetown",
			"seq": "33,53"
		}, {
			"uri": "http://dbpedia.org/resource/William_Doyle_(businessman)",
			"label": "william doyle",
			"seq": "3,15"
		}]
	},
	{
		"id": "965e3f4581784cb492f2fe92677b9928",
		"question": "who developed google videos?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Videos> <http://dbpedia.org/property/developer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "developed",
			"seq": "4,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Google_Videos",
			"label": "videos google",
			"seq": "14,26"
		}]
	},
	{
		"id": "582f1c08834e4bbd825c551add0365e4",
		"question": "Count me all the video game distributor whose parent company is Warner Bros ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/parent> <http://dbpedia.org/resource/Warner_Bros.> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/parent",
			"label": "parent",
			"seq": "46,51"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributor",
			"seq": "28,38"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "video game",
			"seq": "17,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Warner_Bros.",
			"label": "warner bros",
			"seq": "64,74"
		}]
	},
	{
		"id": "409f7fe7f1614782a7c0a3659521a50b",
		"question": "Was Elizabeth Ann Seton canonized by Pope Paul VI?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Elizabeth_Ann_Seton> <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_Paul_VI> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/canonizedBy",
			"label": "canonized",
			"seq": "24,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elizabeth_Ann_Seton",
			"label": "elizabeth seton",
			"seq": "4,18"
		}, {
			"uri": "http://dbpedia.org/resource/Pope_Paul_VI",
			"label": "pope paul vi",
			"seq": "37,48"
		}]
	},
	{
		"id": "1d9d0611f1a341ddb067c01fc356f3dd",
		"question": "Is Sao Paulo the largest city of Brazil?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Brazil> <http://dbpedia.org/property/largestCity> <http://dbpedia.org/resource/S\u00e3o_Paulo> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/largestCity",
			"label": "largest city",
			"seq": "17,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brazil",
			"label": "brazil",
			"seq": "33,38"
		}, {
			"uri": "http://dbpedia.org/resource/S\u00e3o_Paulo",
			"label": "paulo",
			"seq": "7,11"
		}]
	},
	{
		"id": "7de6776232624ca297b978ded3f8f754",
		"question": "Does Ford own the Ford Kansas Assembly plant?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/Ford_Motor_Company> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningOrganisation",
			"label": "kansas",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant",
			"label": "assembly kansas plant ford",
			"seq": "5,30"
		}, {
			"uri": "http://dbpedia.org/resource/Ford_Motor_Company",
			"label": "ford",
			"seq": "5,8"
		}]
	},
	{
		"id": "dcb85ef5573c48b38fec1148f6076eae",
		"question": "What are the nicknames of the schools whose color is royal blue?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/colour> <http://dbpedia.org/resource/Royal_blue> . ?x <http://dbpedia.org/property/nickname> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/colour",
			"label": "color",
			"seq": "44,48"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nicknames",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "30,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_blue",
			"label": "royal blue",
			"seq": "53,62"
		}]
	},
	{
		"id": "f56af3f27ab94106a92cb2337b8c73ad",
		"question": "Was David Gilmour a former member of Pink Floyd?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Pink_Floyd> <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/David_Gilmour> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerBandMember",
			"label": "member former",
			"seq": "20,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pink_Floyd",
			"label": "floyd pink",
			"seq": "37,46"
		}, {
			"uri": "http://dbpedia.org/resource/David_Gilmour",
			"label": "gilmour david",
			"seq": "4,16"
		}]
	},
	{
		"id": "305a5e72abde4540a896cb6f4e731952",
		"question": "Name the office holder who has a child named lori Black and Harvard Westlake school as one of the educational institute ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Harvard-Westlake_School>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "child",
			"seq": "33,37"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "name",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lori_Black",
			"label": "black lori",
			"seq": "45,54"
		}, {
			"uri": "http://dbpedia.org/resource/Harvard-Westlake_School",
			"label": "westlake harvard school",
			"seq": "60,82"
		}]
	},
	{
		"id": "53399784d528412faa510052199348bf",
		"question": "Which ppolitical party of Yashpal Kapur is also the owner of National Herald ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_National_Herald_(India)> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Yashpal_Kapur> <http://dbpedia.org/ontology/party> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owner",
			"seq": "52,56"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "17,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_National_Herald_(India)",
			"label": "national herald",
			"seq": "61,75"
		}, {
			"uri": "http://dbpedia.org/resource/Yashpal_Kapur",
			"label": "yashpal kapur",
			"seq": "26,38"
		}]
	},
	{
		"id": "fc8f458df57d49c1a584f223702f336f",
		"question": "Name the sstadium of 2015 Pro Duta FC season ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_Pro_Duta_FC_season> <http://dbpedia.org/property/stadium> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/stadium",
			"label": "sstadium",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2015_Pro_Duta_FC_season",
			"label": "season duta 2015 pro",
			"seq": "21,40"
		}]
	},
	{
		"id": "3d37be8adf384987ad3f198bd18908f2",
		"question": "What is the region served by Toll Global Express and also borders Siberia ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toll_Global_Express> <http://dbpedia.org/ontology/regionServed> ?uri. <http://dbpedia.org/resource/Siberia> <http://dbpedia.org/ontology/border> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "served region",
			"seq": "12,24"
		}, {
			"uri": "http://dbpedia.org/ontology/border",
			"label": "borders",
			"seq": "58,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toll_Global_Express",
			"label": "express global toll",
			"seq": "29,47"
		}, {
			"uri": "http://dbpedia.org/resource/Siberia",
			"label": "siberia",
			"seq": "66,72"
		}]
	},
	{
		"id": "208d4114c72d4eb8aa2dc244a8f1e842",
		"question": "Where is the tombstone of the congressman who died in the McLean hospital?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/McLean_Hospital> . ?x <http://dbpedia.org/property/restingplace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Congressman>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "tombstone",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Congressman",
			"label": "congressman",
			"seq": "30,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/McLean_Hospital",
			"label": "hospital mclean",
			"seq": "58,72"
		}]
	},
	{
		"id": "536fa92bfb0c4a26bdd1546cbbbc9030",
		"question": "Which writer is famous for works written by Neil Gaiman?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writers> <http://dbpedia.org/resource/Neil_Gaiman> . ?uri <http://dbpedia.org/ontology/notableWork> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writers",
			"label": "writer",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "works",
			"seq": "27,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neil_Gaiman",
			"label": "gaiman neil",
			"seq": "44,54"
		}]
	},
	{
		"id": "63ed80a6c6304f309c4370cd47649349",
		"question": "What awards have been given to citizens of the Ottoman Empire?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/citizenship> <http://dbpedia.org/resource/Ottoman_Empire> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "citizens",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ottoman_Empire",
			"label": "ottoman empire",
			"seq": "47,60"
		}]
	},
	{
		"id": "bdc8518615b54204b29359054a6ad859",
		"question": "Where did the athlete start his career, who did his highschool in Red Lion Area School District?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/highschool> <http://dbpedia.org/resource/Red_Lion_Area_School_District> . ?x <http://dbpedia.org/property/debutteam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/highschool",
			"label": "highschool",
			"seq": "52,61"
		}, {
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "athlete",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "athlete",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Red_Lion_Area_School_District",
			"label": "district",
			"seq": "87,94"
		}]
	},
	{
		"id": "105a1052c4e54d828a4f8b08aca03408",
		"question": "Who are the shareholder of the broadcast networks whose owning company is Jamie Kellner?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Jamie_Kellner> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningCompany",
			"label": "company owning",
			"seq": "56,69"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owning",
			"seq": "56,61"
		}, {
			"uri": "http://dbpedia.org/ontology/BroadcastNetwork",
			"label": "broadcast",
			"seq": "31,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jamie_Kellner",
			"label": "kellner jamie",
			"seq": "74,86"
		}]
	},
	{
		"id": "9b05edb125ad445c826406a7e5bad001",
		"question": "List the state of the universities whose nation is United States ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/country",
			"label": "united",
			"seq": "51,56"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "state",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "22,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a8ffab72a4f64753b5a7c3ff38c48057",
		"question": "Which destination of Emerald Air is also the city served by houston Fort Bend Airport ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Emerald_Air_(United_States)> <http://dbpedia.org/ontology/destination> ?uri. <http://dbpedia.org/resource/Houston_Fort_Bend_Airport> <http://dbpedia.org/property/cityServed> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/destination",
			"label": "destination",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/property/cityServed",
			"label": "served city",
			"seq": "45,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Emerald_Air_(United_States)",
			"label": "emerald",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/resource/Houston_Fort_Bend_Airport",
			"label": "houston airport fort bend",
			"seq": "60,84"
		}]
	},
	{
		"id": "efe69ad1cb94450398a0a0a408332d63",
		"question": "What faith of Buddhist Tai Hung College is also the acadmeic interest of Paul Demiville ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paul_Demi\u00e9ville> <http://dbpedia.org/property/fields> ?uri. <http://dbpedia.org/resource/Buddhist_Tai_Hung_College> <http://dbpedia.org/property/religion> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/fields",
			"label": "is",
			"seq": "19,20"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "demiville",
			"seq": "78,86"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paul_Demi\u00e9ville",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Buddhist_Tai_Hung_College",
			"label": "buddhist college",
			"seq": "14,29"
		}]
	},
	{
		"id": "a7c33137e9004883871a9e2a4a7eddb9",
		"question": "What are the software whose operating systems are Mac OS and Microsoft Windows?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Mac_OS> . ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mac_OS",
			"label": "mac",
			"seq": "50,52"
		}, {
			"uri": "http://dbpedia.org/resource/Microsoft_Windows",
			"label": "microsoft windows",
			"seq": "61,77"
		}]
	},
	{
		"id": "c18a6d5e8e5849f2b9a305dce85ad014",
		"question": "Does the Utah State Route 162 end at Colorado?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Utah_State_Route_162> <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Colorado> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "route end",
			"seq": "20,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Utah_State_Route_162",
			"label": "state route utah",
			"seq": "9,24"
		}, {
			"uri": "http://dbpedia.org/resource/Colorado",
			"label": "colorado",
			"seq": "37,44"
		}]
	},
	{
		"id": "898f2a6888704c2b843822e4e7ef60d1",
		"question": "List the debut team of the baseball player who born in Houston.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Houston> . ?x <http://dbpedia.org/ontology/debutTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "player",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debut team",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballPlayer",
			"label": "baseball player",
			"seq": "27,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Houston",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "8ce6aa741f5047309e078d1c2a08e7a4",
		"question": "Is jim harbaugh currently in the Michigan Wolverines?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jim_Harbaugh> <http://dbpedia.org/property/currentteam> <http://dbpedia.org/resource/Michigan_Wolverines> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentteam",
			"label": "currently",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jim_Harbaugh",
			"label": "harbaugh jim",
			"seq": "3,14"
		}, {
			"uri": "http://dbpedia.org/resource/Michigan_Wolverines",
			"label": "wolverines michigan",
			"seq": "33,51"
		}]
	},
	{
		"id": "82a6252eb38448dba20dc6489bc2b39c",
		"question": "How many awards have been received by graduates of University of Melbourne, Faculty of VCA & MCM?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/training> <http://dbpedia.org/resource/University_of_Melbourne_Faculty_of_VCA_and_MCM> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/training",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/University_of_Melbourne_Faculty_of_VCA_and_MCM",
			"label": "university",
			"seq": "51,60"
		}]
	},
	{
		"id": "58cf5b8a4f4e47bcb79a98fac51edd37",
		"question": "To which books Thomas Egerton, an editor?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Thomas_Egerton_(publisher)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "books",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thomas_Egerton_(publisher)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "bef8f6aac12d4d6283dceb45a5a45f15",
		"question": "List the people with final resting place as Plymouth, Vermont and has Samuel W. McCall as predecessor?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Plymouth,_Vermont> . ?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Samuel_W._McCall>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "27,39"
		}, {
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "90,100"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "vermont",
			"seq": "54,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Plymouth,_Vermont",
			"label": "plymouth, vermont",
			"seq": "44,60"
		}, {
			"uri": "http://dbpedia.org/resource/Samuel_W._McCall",
			"label": "samuel mccall w.",
			"seq": "70,85"
		}]
	},
	{
		"id": "da77bfa505514635bfea5b12d1f3b075",
		"question": "Was christina crawford trained by Booker T?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Christina_Crawford_(wrestler)> <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Booker_T_(wrestler)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/trainer",
			"label": "trained",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christina_Crawford_(wrestler)",
			"label": "christina crawford",
			"seq": "4,21"
		}, {
			"uri": "http://dbpedia.org/resource/Booker_T_(wrestler)",
			"label": "booker",
			"seq": "34,39"
		}]
	},
	{
		"id": "595c138b55a942dd940bede3ff72b507",
		"question": "In how many places has Garbage recorded their songs?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Garbage_(band)> . ?x <http://dbpedia.org/ontology/recordedIn> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "places",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded in",
			"seq": "0,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Garbage_(band)",
			"label": "garbage",
			"seq": "23,29"
		}]
	},
	{
		"id": "5d0e2659e4b0492fb4530be48fa720db",
		"question": "What award was won by executive producer of Shaun the Sheep?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Shaun_the_Sheep> <http://dbpedia.org/ontology/executiveProducer> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "22,39"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shaun_the_Sheep",
			"label": "sheep shaun the",
			"seq": "44,58"
		}]
	},
	{
		"id": "4c68e37c40ea4e44950037ef974d5879",
		"question": "Name the current club of Abdelhameed Amarri ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Abdelhameed_Amarri> <http://dbpedia.org/property/currentclub> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "current club",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Abdelhameed_Amarri",
			"label": "abdelhameed amarri",
			"seq": "25,42"
		}]
	},
	{
		"id": "264c4445e1374947ab6f8121e12c286c",
		"question": "Whose songs are Tickle Me and Viva Las Vegas?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tickle_Me> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Viva_Las_Vegas> <http://dbpedia.org/property/artist> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "las",
			"seq": "35,37"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "las",
			"seq": "35,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tickle_Me",
			"label": "tickle me",
			"seq": "16,24"
		}, {
			"uri": "http://dbpedia.org/resource/Viva_Las_Vegas",
			"label": "vegas viva las",
			"seq": "30,43"
		}]
	},
	{
		"id": "0da441743df14fafb7bc6b4bcacc81bf",
		"question": "Among the scientist known for Manhattan Project who had a doctoral student named Charles Ellis ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Charles_Drummond_Ellis> . ?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Manhattan_Project>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "doctoral student",
			"seq": "58,73"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "20,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "10,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_Drummond_Ellis",
			"label": "charles ellis",
			"seq": "81,93"
		}, {
			"uri": "http://dbpedia.org/resource/Manhattan_Project",
			"label": "manhattan project",
			"seq": "30,46"
		}]
	},
	{
		"id": "9abe253ae8a348c8b5f3b85f4cf62072",
		"question": "Which education center Sidney Catlin Partrodge attended which was also the alma mater of Lisa Brummel ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sidney_Catlin_Partridge> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Lisa_Brummel> <http://dbpedia.org/ontology/almaMater> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "education",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "75,84"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sidney_Catlin_Partridge",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Lisa_Brummel",
			"label": "brummel lisa",
			"seq": "89,100"
		}]
	},
	{
		"id": "b225170899d7462d96eaf7899775423b",
		"question": "Which club of perianne Lones is also the home town of the Kady O'Malley ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kady_O'Malley> <http://dbpedia.org/property/homeTown> ?uri. <http://dbpedia.org/resource/Perianne_Jones> <http://dbpedia.org/property/club> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/homeTown",
			"label": "town home",
			"seq": "41,49"
		}, {
			"uri": "http://dbpedia.org/property/club",
			"label": "club",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kady_O'Malley",
			"label": "o'malley kady",
			"seq": "58,70"
		}, {
			"uri": "http://dbpedia.org/resource/Perianne_Jones",
			"label": "perianne",
			"seq": "14,21"
		}]
	},
	{
		"id": "176507c0f98f445c85cccae3d80a54b0",
		"question": "Which countries share a similar sociocultural and ethnic heritage of that of Native Indonesians?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Native_Indonesians> <http://dbpedia.org/property/region> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/region",
			"label": "share",
			"seq": "16,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Native_Indonesians",
			"label": "indonesians native",
			"seq": "77,94"
		}]
	},
	{
		"id": "aedcce3300544a758c309617ae9a6643",
		"question": "What is the television show whose opening theme's album is Cheers?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/album> <http://dbpedia.org/resource/Cheers> . ?uri <http://dbpedia.org/ontology/openingTheme> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/album",
			"label": "album",
			"seq": "50,54"
		}, {
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opening",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cheers",
			"label": "cheers",
			"seq": "59,64"
		}]
	},
	{
		"id": "9869859173884cf5b5ce1628b5ff947c",
		"question": "Which driver had the pole position in 1994 Spanish Grand Prix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/ontology/poleDriver> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/poleDriver",
			"label": "driver pole",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1994_Spanish_Grand_Prix",
			"label": "spanish grand prix 1994",
			"seq": "38,60"
		}]
	},
	{
		"id": "35d4c9e5bb0d403a8949fe9fb0639704",
		"question": "What are some organizations in Auckland created to do?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Auckland> . ?x <http://dbpedia.org/property/purpose> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "organizations",
			"seq": "14,26"
		}, {
			"uri": "http://dbpedia.org/property/purpose",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organizations",
			"seq": "14,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Auckland",
			"label": "auckland",
			"seq": "31,38"
		}]
	},
	{
		"id": "fe21b9172386466fb7fef8d29772878e",
		"question": "Where are the agencies headquartered at, which are under the Colorado Dept of Natural Resources?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/parentOrganisation> <http://dbpedia.org/resource/Colorado_Department_of_Natural_Resources> . ?x <http://dbpedia.org/property/headquarters> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GovernmentAgency>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentOrganisation",
			"label": "agencies",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquartered",
			"seq": "23,35"
		}, {
			"uri": "http://dbpedia.org/ontology/GovernmentAgency",
			"label": "agencies",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colorado_Department_of_Natural_Resources",
			"label": "resources colorado",
			"seq": "61,78"
		}]
	},
	{
		"id": "077d0f48ef144f898f729892e65c7e91",
		"question": "Who is the producer of album, which has the song Eclipse ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Eclipse_(song)> <http://dbpedia.org/ontology/album> ?x . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/album",
			"label": "album,",
			"seq": "23,28"
		}, {
			"uri": "http://dbpedia.org/property/producer",
			"label": "producer",
			"seq": "11,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Album",
			"label": "album,",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eclipse_(song)",
			"label": "eclipse song",
			"seq": "44,55"
		}]
	},
	{
		"id": "4bae6679286944e0ab5bae123d3b66f8",
		"question": "How many different religions have economists followed?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Economist> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "religions",
			"seq": "19,27"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "19,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Economist",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7548aa9412d4455198e5c71f7383e131",
		"question": "What is the automobile platform of Chiva bus ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/automobilePlatform",
			"label": "automobile platform",
			"seq": "12,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chiva_bus",
			"label": "chiva bus",
			"seq": "35,43"
		}]
	},
	{
		"id": "67b466a2660f466f99bcd5f3bb96785a",
		"question": "What borders siberia?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Siberia> <http://dbpedia.org/ontology/border> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/border",
			"label": "borders",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Siberia",
			"label": "siberia",
			"seq": "13,19"
		}]
	},
	{
		"id": "2c9ee30345e3457898f20d4bc672ae79",
		"question": "In which city where there is a headquarters of Orient News and also Feras Saied died?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Orient_News> <http://dbpedia.org/property/headquarters> ?uri. <http://dbpedia.org/resource/Feras_Saied> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "31,42"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "there",
			"seq": "20,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Orient_News",
			"label": "orient news",
			"seq": "47,57"
		}, {
			"uri": "http://dbpedia.org/resource/Feras_Saied",
			"label": "saied feras",
			"seq": "68,78"
		}]
	},
	{
		"id": "2d8b81a320094537aa88cb937f7b7676",
		"question": "List the producers who produced movies starring Michael Jackson.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Michael_Jackson> . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "starring",
			"seq": "39,46"
		}, {
			"uri": "http://dbpedia.org/property/producer",
			"label": "producers",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "list",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Jackson",
			"label": "michael",
			"seq": "48,54"
		}]
	},
	{
		"id": "026887c01dd8473f92d6ec1da23af18d",
		"question": "In which department does Raymond Baldwin work?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Raymond_E._Baldwin> <http://dbpedia.org/property/branch> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "raymond",
			"seq": "25,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Raymond_E._Baldwin",
			"label": "raymond baldwin",
			"seq": "25,39"
		}]
	},
	{
		"id": "b7f41cde28da47ef84c2c318244b7edd",
		"question": "What teams did the ex teamplayers of lighthouse boy club start their career with?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/Lighthouse_Boys_Club> . ?x <http://dbpedia.org/property/debutteam> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "club",
			"seq": "52,55"
		}, {
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "teams",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lighthouse_Boys_Club",
			"label": "lighthouse club",
			"seq": "37,51"
		}]
	},
	{
		"id": "204a5a67d76344009f7ee3711bb79292",
		"question": "Jeff Munn is the president of which basketball team ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Jeff_Munn>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballTeam>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "17,25"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballTeam",
			"label": "basketball team",
			"seq": "36,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jeff_Munn",
			"label": "munn jeff",
			"seq": "0,8"
		}]
	},
	{
		"id": "a7858c99b352427d9f96227ed65fe2bb",
		"question": "What is the city  of the 2015 MLS All-Star Game and birthplace of the The Okee Dokee Brothers",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/property/city> ?uri. <http://dbpedia.org/resource/The_Okee_Dokee_Brothers> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "city",
			"seq": "12,15"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birthplace",
			"seq": "52,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2015_MLS_All-Star_Game",
			"label": "all-star game 2015 mls",
			"seq": "25,46"
		}, {
			"uri": "http://dbpedia.org/resource/The_Okee_Dokee_Brothers",
			"label": "brothers dokee",
			"seq": "79,92"
		}]
	},
	{
		"id": "4ead31ba05b240b792523ee77e1c2d85",
		"question": "How many had their debut team coached by Chip Kelly?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Chip_Kelly> . ?uri <http://dbpedia.org/ontology/debutTeam> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coach",
			"label": "coached",
			"seq": "30,36"
		}, {
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debut team",
			"seq": "19,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chip_Kelly",
			"label": "kelly chip",
			"seq": "41,50"
		}]
	},
	{
		"id": "ce99d86c121449bda242a1944532331a",
		"question": "Which producer of Purvis Eureka engine is also the owner of Ford Theatre ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/property/engine> ?uri. <http://dbpedia.org/resource/Ford_Theatre> <http://dbpedia.org/property/company> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/engine",
			"label": "engine",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "owner",
			"seq": "51,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Purvis_Eureka",
			"label": "purvis eureka",
			"seq": "18,30"
		}, {
			"uri": "http://dbpedia.org/resource/Ford_Theatre",
			"label": "theatre ford",
			"seq": "60,71"
		}]
	},
	{
		"id": "2aec8ac28a254b8a8edbbb921aae4ef0",
		"question": "Did John Byrne create Emma Frost?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Emma_Frost> <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/John_Byrne_(comics)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creators",
			"label": "create",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Emma_Frost",
			"label": "frost emma",
			"seq": "22,31"
		}, {
			"uri": "http://dbpedia.org/resource/John_Byrne_(comics)",
			"label": "byrne john",
			"seq": "4,13"
		}]
	},
	{
		"id": "59a2342df2b04a22832b4b8d099295ea",
		"question": "Among the companies who has product named Chinook who has a key person as Dennis Muilenburg ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Dennis_Muilenburg> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "key",
			"seq": "60,62"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "product",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "10,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dennis_Muilenburg",
			"label": "muilenburg dennis",
			"seq": "74,90"
		}, {
			"uri": "http://dbpedia.org/resource/Boeing_CH-47_Chinook",
			"label": "chinook",
			"seq": "42,48"
		}]
	},
	{
		"id": "1916515a00a74f8b951851aa671a3b0a",
		"question": "Name the champion of National League ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/National_League> <http://dbpedia.org/property/champion> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/champion",
			"label": "champion",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_League",
			"label": "national league",
			"seq": "21,35"
		}]
	},
	{
		"id": "6cd5cdc40f6e4af8a04465a6699c16ea",
		"question": "Who gave guest appearances on the show which is the next episode after the Bombshell one?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Bombshell_(Smash)> . ?x <http://dbpedia.org/property/guests> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionEpisode>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/previousWork",
			"label": "episode",
			"seq": "57,63"
		}, {
			"uri": "http://dbpedia.org/property/guests",
			"label": "guest",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionEpisode",
			"label": "episode one",
			"seq": "57,67"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bombshell_(Smash)",
			"label": "bombshell",
			"seq": "75,83"
		}]
	},
	{
		"id": "bbc69cd1992d42deba2ecb4e218a9349",
		"question": "Miluk and Cayuse are still spoken in which part of the world?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Miluk_language> <http://dbpedia.org/property/region> ?uri. <http://dbpedia.org/resource/Cayuse_language> <http://dbpedia.org/property/region> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/region",
			"label": "in",
			"seq": "34,35"
		}, {
			"uri": "http://dbpedia.org/property/region",
			"label": "in",
			"seq": "34,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miluk_language",
			"label": "miluk",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/resource/Cayuse_language",
			"label": "cayuse",
			"seq": "10,15"
		}]
	},
	{
		"id": "4a31ab37401a4ef5ad33539030e1f079",
		"question": "What is the device whose successor's CPU is by AMD?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Advanced_Micro_Devices> . ?uri <http://dbpedia.org/ontology/successor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Device>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cpu",
			"label": "cpu",
			"seq": "37,39"
		}, {
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor's",
			"seq": "25,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Device",
			"label": "device",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Advanced_Micro_Devices",
			"label": "device",
			"seq": "12,17"
		}]
	},
	{
		"id": "0394d1d9bb67406ebe89217042530952",
		"question": "With whom is the institution of David Charles affiliated?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/David_Charles_(physician)> <http://dbpedia.org/property/workInstitutions> ?x . ?x <http://dbpedia.org/property/affiliation> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/workInstitutions",
			"label": "institution",
			"seq": "17,27"
		}, {
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliated",
			"seq": "46,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Charles_(physician)",
			"label": "charles david",
			"seq": "32,44"
		}]
	},
	{
		"id": "ce165bf79de24f10844b39944b1c118c",
		"question": "Which battle did both Steven Palazao and tony hogg fight in?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steven_Palazzo> <http://dbpedia.org/property/battles> ?uri. <http://dbpedia.org/resource/Tony_Hogg> <http://dbpedia.org/property/battles> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battle",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "battle",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steven_Palazzo",
			"label": "steven",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/resource/Tony_Hogg",
			"label": "tony hogg",
			"seq": "41,49"
		}]
	},
	{
		"id": "5be47b8830304a13bc505638e513ee8e",
		"question": "Name the TV show whose producer is Stephen E. Ambrose and company is HBO ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose> . ?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/HBO>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "producer",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/ontology/company",
			"label": "company",
			"seq": "58,64"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stephen_E._Ambrose",
			"label": "stephen ambrose",
			"seq": "35,49"
		}, {
			"uri": "http://dbpedia.org/resource/HBO",
			"label": "hbo",
			"seq": "69,71"
		}]
	},
	{
		"id": "15bff090fc0748d79b3ae1c06235f0ab",
		"question": "What are the movies whose musicians's home town is Volos?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Volos> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "musicians's",
			"seq": "26,36"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "48,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Volos",
			"label": "volos",
			"seq": "51,55"
		}]
	},
	{
		"id": "15578900e719497ea0e89f95818a753a",
		"question": "Name the fictional character whose relatives are Huey, Dewey, and Louie and is of species American Pekin duck?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . ?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "35,43"
		}, {
			"uri": "http://dbpedia.org/ontology/species",
			"label": "species",
			"seq": "82,88"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "9,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Huey,_Dewey,_and_Louie",
			"label": "dewey, louie huey,",
			"seq": "49,66"
		}, {
			"uri": "http://dbpedia.org/resource/American_Pekin_duck",
			"label": "american pekin duck",
			"seq": "90,108"
		}]
	},
	{
		"id": "05e8ba378fa84157a0c3163e2e5a29bb",
		"question": "List the school of Bobby Skinstad?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bobby_Skinstad> <http://dbpedia.org/property/school> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/school",
			"label": "school",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bobby_Skinstad",
			"label": "skinstad bobby",
			"seq": "19,32"
		}]
	},
	{
		"id": "2462f71d97294217948911559d7808a7",
		"question": "Who was the coach of marquette Golden Eagles men's basketball team-2012,13 season ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2012\u201313_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/ontology/coach> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coach",
			"label": "coach",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2012\u201313_Marquette_Golden_Eagles_men's_basketball_team",
			"label": "basketball marquette golden eagles men's",
			"seq": "21,60"
		}]
	},
	{
		"id": "2bc92d2e97e4487786a07b6f8ae592b4",
		"question": "Who authored the work illustrated by Hiroyuki Takei?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/illustrator> <http://dbpedia.org/resource/Hiroyuki_Takei> . ?x <http://dbpedia.org/property/author> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/illustrator",
			"label": "illustrated",
			"seq": "22,32"
		}, {
			"uri": "http://dbpedia.org/property/author",
			"label": "authored",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hiroyuki_Takei",
			"label": "hiroyuki takei",
			"seq": "37,50"
		}]
	},
	{
		"id": "cad47dbadca34d12a26f9f492cee5f29",
		"question": "What made Jon Speelman and Eric Schiller famous?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri. <http://dbpedia.org/resource/Eric_Schiller> <http://dbpedia.org/ontology/knownFor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/field",
			"label": "speelman",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "jon",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jon_Speelman",
			"label": "speelman jon",
			"seq": "10,21"
		}, {
			"uri": "http://dbpedia.org/resource/Eric_Schiller",
			"label": "schiller eric",
			"seq": "27,39"
		}]
	},
	{
		"id": "7b7764c0196d461999cc23dd0df6c84e",
		"question": "In which wars army men awarded with the Croix de Guerre, fought?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Croix_de_guerre_1939\u20131945_(France)> . ?x <http://dbpedia.org/property/battles> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "wars",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "the",
			"seq": "36,38"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryPerson",
			"label": "men",
			"seq": "19,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Croix_de_guerre_1939\u20131945_(France)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4d44f78d46374b24819e6cdf6753aad7",
		"question": "Which manufacturer of the Boeing B-17 Flying fortress is the manager of burro Flats Painted Caves ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Burro_Flats_Painted_Cave> <http://dbpedia.org/ontology/governingBody> ?uri. <http://dbpedia.org/resource/Boeing_B-17_Flying_Fortress> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governingBody",
			"label": "boeing",
			"seq": "26,31"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufacturer",
			"seq": "6,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Burro_Flats_Painted_Cave",
			"label": "painted flats burro",
			"seq": "72,90"
		}, {
			"uri": "http://dbpedia.org/resource/Boeing_B-17_Flying_Fortress",
			"label": "fortress flying boeing b-17",
			"seq": "26,52"
		}]
	},
	{
		"id": "893492c37b564d4d9e1ce129547ed023",
		"question": "List the saints venerated in Islam having major shrine as Tomb of Joshua ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/majorShrine> <http://dbpedia.org/resource/Tomb_of_Joshua> . ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Saint>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/majorShrine",
			"label": "shrine major",
			"seq": "42,53"
		}, {
			"uri": "http://dbpedia.org/ontology/veneratedIn",
			"label": "venerated",
			"seq": "16,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Saint",
			"label": "saints",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tomb_of_Joshua",
			"label": "joshua tomb",
			"seq": "58,68"
		}, {
			"uri": "http://dbpedia.org/resource/Islam",
			"label": "islam",
			"seq": "29,33"
		}]
	},
	{
		"id": "e6e655798ed9475796f9df8aa87c9a4e",
		"question": "How many people currently play for Stoke City F.C.?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/Stoke_City_F.C.>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "currently",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stoke_City_F.C.",
			"label": "stoke f.c. city",
			"seq": "35,49"
		}]
	},
	{
		"id": "ec75426ef9034e49baa03c7c16d57f2a",
		"question": "In how many different places can I find companies which were founded in toronto?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Toronto> . ?x <http://dbpedia.org/property/locations> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "61,67"
		}, {
			"uri": "http://dbpedia.org/property/locations",
			"label": "can",
			"seq": "29,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "22,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto",
			"label": "toronto",
			"seq": "72,78"
		}]
	},
	{
		"id": "55b86a8a22e4483d935168408545caa7",
		"question": "How many organizations own the website to which Jimmy Wales contributes?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Jimmy_Wales> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "to",
			"seq": "39,40"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "own",
			"seq": "23,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organizations",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jimmy_Wales",
			"label": "wales jimmy",
			"seq": "48,58"
		}]
	},
	{
		"id": "f65d311739804cc7b1db894c7af0704f",
		"question": "List the former team of the american football players born in Pennsylvania ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Pennsylvania> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "players",
			"seq": "46,52"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former team",
			"seq": "9,19"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football american",
			"seq": "28,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pennsylvania",
			"label": "pennsylvania",
			"seq": "62,73"
		}]
	},
	{
		"id": "5c2111f2815f4809b9548ab2c0c677d3",
		"question": "Through how many cities does the river flowing into Arkansas go?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Arkansas> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthMountain",
			"label": "through",
			"seq": "0,6"
		}, {
			"uri": "http://dbpedia.org/ontology/city",
			"label": "cities",
			"seq": "17,22"
		}, {
			"uri": "http://dbpedia.org/ontology/City",
			"label": "cities",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arkansas",
			"label": "arkansas",
			"seq": "52,59"
		}]
	},
	{
		"id": "74671972de564fbe97ece8a85fd86fcd",
		"question": "Which fictional character's relatives were made by Ted Osborne?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Ted_Osborne> . ?uri <http://dbpedia.org/property/relatives> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "relatives",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ted_Osborne",
			"label": "osborne ted",
			"seq": "51,61"
		}]
	},
	{
		"id": "c7dbb6a48a8840779ff9be16709df500",
		"question": "List the relatives of the children of Jon Voight ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Jon_Voight> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/relative> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "26,33"
		}, {
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jon_Voight",
			"label": "voight jon",
			"seq": "38,47"
		}]
	},
	{
		"id": "56eb8602184a4434af0162a88397b937",
		"question": "who are the managers of england national under 20 football team?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-20_football_team> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/managerclubs",
			"label": "managers",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England_national_under-20_football_team",
			"label": "national football england under",
			"seq": "24,54"
		}]
	},
	{
		"id": "9b8b445ddfbb463187269990961ac846",
		"question": "Which designer of RENFE also owns Renaissance Center ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/RENFE_Class_333> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/Renaissance_Center> <http://dbpedia.org/property/owner> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designer",
			"label": "designer",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owns",
			"seq": "29,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/RENFE_Class_333",
			"label": "renfe",
			"seq": "18,22"
		}, {
			"uri": "http://dbpedia.org/resource/Renaissance_Center",
			"label": "renaissance center",
			"seq": "34,51"
		}]
	},
	{
		"id": "0572e71a8200411493afdbc1072f5dc1",
		"question": "Did Jim Kiick do his highschool in New Jersey?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jim_Kiick> <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/New_Jersey> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/highSchool",
			"label": "highschool",
			"seq": "21,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jim_Kiick",
			"label": "kiick jim",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/resource/New_Jersey",
			"label": "jersey new",
			"seq": "35,44"
		}]
	},
	{
		"id": "99a06bb6d4f3448da8d9b37aec6a17fe",
		"question": "What shows are on the networks which are from the United States?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locationCountry> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCountry",
			"label": "united",
			"seq": "50,55"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "networks",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "united states",
			"seq": "50,62"
		}]
	},
	{
		"id": "2bce3f2fcdbd463ebbcd84e5b65eb439",
		"question": "Who have rented the stadium operated by Maple Leaf S&E?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/operator> <http://dbpedia.org/resource/Maple_Leaf_Sports_&_Entertainment> . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operator",
			"label": "operated",
			"seq": "28,35"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "rented",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maple_Leaf_Sports_&_Entertainment",
			"label": "maple",
			"seq": "40,44"
		}]
	},
	{
		"id": "b70fa433f4dd4ed88a72bdc33714a9fd",
		"question": "Was the song The Boy is Mine recorded in Atlanta?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Boy_Is_Mine_(song)> <http://dbpedia.org/property/recorded> <http://dbpedia.org/resource/Atlanta> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/recorded",
			"label": "recorded",
			"seq": "29,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Boy_Is_Mine_(song)",
			"label": "song mine the boy",
			"seq": "4,20"
		}, {
			"uri": "http://dbpedia.org/resource/Atlanta",
			"label": "atlanta",
			"seq": "41,47"
		}]
	},
	{
		"id": "586e586025864050b16699cda92980a7",
		"question": "Where is Snake Island located ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Snake_Island_(Black_Sea)> <http://dbpedia.org/property/locationCountry> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "located",
			"seq": "22,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Snake_Island_(Black_Sea)",
			"label": "island snake",
			"seq": "9,20"
		}]
	},
	{
		"id": "80e23668ba59456699b2f0017dc1d2f0",
		"question": "How many things do bridges designed by the UEM group go over?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/UEM_Group> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "27,34"
		}, {
			"uri": "http://dbpedia.org/property/crosses",
			"label": "bridges",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/UEM_Group",
			"label": "group uem",
			"seq": "43,51"
		}]
	},
	{
		"id": "3938c7827542407499282f308306e854",
		"question": "Who is the fictional character who portrayed in Terminator 2: Judgment Day?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_2:_Judgment_Day>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/portrayer",
			"label": "portrayed",
			"seq": "35,43"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "11,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Terminator_2:_Judgment_Day",
			"label": "terminator judgment",
			"seq": "48,66"
		}]
	},
	{
		"id": "48c8905bf346458bb8aa3e01c93dce7e",
		"question": "Name the river which flows through the closest city of Mount Raimer ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Mount_Raimer> <http://dbpedia.org/property/nearestCity> ?x . ?x <http://dbpedia.org/ontology/river> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nearestCity",
			"label": "city",
			"seq": "47,50"
		}, {
			"uri": "http://dbpedia.org/ontology/river",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mount_Raimer",
			"label": "raimer mount",
			"seq": "55,66"
		}]
	},
	{
		"id": "a4854eb52d9844c99427d80f90751a22",
		"question": "Who composed songs in the Mr Tambourine Man album?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Mr._Tambourine_Man_(album)> . ?x <http://dbpedia.org/ontology/composer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/album",
			"label": "album",
			"seq": "44,48"
		}, {
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composed",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Song",
			"label": "songs",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mr._Tambourine_Man_(album)",
			"label": "tambourine album man mr",
			"seq": "26,48"
		}]
	},
	{
		"id": "3ece33a3b26c44ba89d83c5af7910d5a",
		"question": "What are the relatives of the parliament member whose successor is Peter Thorneycroft?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Peter_Thorneycroft> . ?x <http://dbpedia.org/ontology/relation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MemberOfParliament>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "54,62"
		}, {
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/MemberOfParliament",
			"label": "parliament member",
			"seq": "30,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peter_Thorneycroft",
			"label": "thorneycroft peter",
			"seq": "67,84"
		}]
	},
	{
		"id": "149bc5e1fd2444619dd328bac52f849b",
		"question": "Which movies' music is composed by people associated with the band Yes?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Yes_(band)> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated music",
			"seq": "14,29"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composed",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "20,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Yes_(band)",
			"label": "band yes",
			"seq": "62,69"
		}]
	},
	{
		"id": "d0b29d9d5808405fa11f801b8506338d",
		"question": "What is the death place of the Marina Pankova and Viktor Ulyanich?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marina_Pankova> <http://dbpedia.org/ontology/deathPlace> ?uri. <http://dbpedia.org/resource/Viktor_Ulyanich> <http://dbpedia.org/ontology/deathPlace> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "place death",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "place death",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marina_Pankova",
			"label": "pankova marina",
			"seq": "31,44"
		}, {
			"uri": "http://dbpedia.org/resource/Viktor_Ulyanich",
			"label": "ulyanich viktor",
			"seq": "50,64"
		}]
	},
	{
		"id": "b82d8ce46e1a4a6ba75108b376994f10",
		"question": "Which american football player's current team is Michigan Wolverines and former team was  Baltimore Ravens ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentteam> <http://dbpedia.org/resource/Michigan_Wolverines> . ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/1998_Baltimore_Ravens_season>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentteam",
			"label": "current team",
			"seq": "33,44"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former team",
			"seq": "41,51"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football american",
			"seq": "6,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michigan_Wolverines",
			"label": "wolverines michigan",
			"seq": "49,67"
		}, {
			"uri": "http://dbpedia.org/resource/1998_Baltimore_Ravens_season",
			"label": "baltimore ravens",
			"seq": "90,105"
		}]
	},
	{
		"id": "6afc2e0ce3f244ce93a5bed1fab03623",
		"question": "What famous work is derived from the one whose lyrics are written by Inma Gonzales?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/lyrics> <http://dbpedia.org/resource/Inma_Gonz\u00e1lez> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/lyrics",
			"label": "lyrics",
			"seq": "47,52"
		}, {
			"uri": "http://dbpedia.org/ontology/basedOn",
			"label": "one",
			"seq": "37,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Inma_Gonz\u00e1lez",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6e341f9757994d368143a578965e0a0f",
		"question": "How many services are there of the companies whose services is Web hosting service ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Web_hosting_service> . ?x <http://dbpedia.org/property/services> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Web_hosting_service",
			"label": "service hosting",
			"seq": "9,23"
		}]
	},
	{
		"id": "7b84eeaeb31143dba0d74b20dcc60e1c",
		"question": "In which region is the rival school of Somerset, Massachusetts located?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/rival> <http://dbpedia.org/resource/Somerset,_Massachusetts> . ?x <http://dbpedia.org/ontology/region> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/rival",
			"label": "rival",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "region",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "school",
			"seq": "29,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Somerset,_Massachusetts",
			"label": "massachusetts somerset,",
			"seq": "39,61"
		}]
	},
	{
		"id": "38fa1e3c921240608e748ef6ccca70f0",
		"question": "What is the ethnicity of Linda Hogan ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Hogan> <http://dbpedia.org/property/ethnicity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/ethnicity",
			"label": "ethnicity",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Linda_Hogan",
			"label": "linda hogan",
			"seq": "25,35"
		}]
	},
	{
		"id": "18eeaa768fa343b285501be229538892",
		"question": "What are the veneration of the one for which there's a major shrine in Hebron?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/majorShrine> <http://dbpedia.org/resource/Hebron> . ?x <http://dbpedia.org/property/veneratedIn> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/majorShrine",
			"label": "shrine major",
			"seq": "55,66"
		}, {
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "veneration",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hebron",
			"label": "hebron",
			"seq": "71,76"
		}]
	},
	{
		"id": "ef3ade53eec84b978013bf8a36b43ddd",
		"question": "By which university is the literary magazine named Stone Canoe published?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stone_Canoe> <http://dbpedia.org/ontology/publisher> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "published",
			"seq": "63,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stone_Canoe",
			"label": "stone canoe",
			"seq": "51,61"
		}]
	},
	{
		"id": "069c73f4c6c84f3b8bed56b9f7dd229d",
		"question": "Who is the relative of Jim Farley (businessman) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jim_Farley_(businessman)> <http://dbpedia.org/property/relatives> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relative",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jim_Farley_(businessman)",
			"label": "(businessman) farley jim",
			"seq": "23,46"
		}]
	},
	{
		"id": "b3de1886f6a34847a46f036db7e7f0f2",
		"question": "How many politicians are in the militia?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Militia>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "many",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Militia",
			"label": "militia",
			"seq": "32,38"
		}]
	},
	{
		"id": "16b3d3743de342dbb6297978d57410bc",
		"question": "Name the rivers whose source country's capital is Lusaka?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Lusaka> . ?uri <http://dbpedia.org/ontology/sourceCountry> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "capital",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "country's",
			"seq": "29,37"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lusaka",
			"label": "lusaka",
			"seq": "50,55"
		}]
	},
	{
		"id": "a38439a78e5c4e43954ba3096b10f6c6",
		"question": "What is the source country of Water resources managemnt in EL Salvador is also the land of Jos MAra Orellana ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Water_resources_management_in_El_Salvador> <http://dbpedia.org/property/sourceCountry> ?uri. <http://dbpedia.org/resource/Jos\u00e9_Mar\u00eda_Orellana> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceCountry",
			"label": "country source",
			"seq": "12,25"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Water_resources_management_in_El_Salvador",
			"label": "resources",
			"seq": "36,44"
		}, {
			"uri": "http://dbpedia.org/resource/Jos\u00e9_Mar\u00eda_Orellana",
			"label": "orellana",
			"seq": "100,107"
		}]
	},
	{
		"id": "457b03f072e94856ae7b41637c9176a2",
		"question": "From where is Quinn Ojinnaka billed?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Quinn_Ojinnaka> <http://dbpedia.org/property/billed> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/billed",
			"label": "billed",
			"seq": "29,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Quinn_Ojinnaka",
			"label": "ojinnaka quinn",
			"seq": "14,27"
		}]
	},
	{
		"id": "13935f6f7c0546b48d83d2817eeb3a84",
		"question": "What are the movies produced by Michael Deeley?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Michael_Deeley>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "produced",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "movies",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Deeley",
			"label": "michael deeley",
			"seq": "32,45"
		}]
	},
	{
		"id": "b9b27ecb9a874649a57739e1ec0b5ab4",
		"question": "Some movies whose screenplay is done by american born people?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/screenplay> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "screenplay",
			"seq": "18,27"
		}, {
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screenplay",
			"seq": "18,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ef9ffe8b32f046acbf228229922d57c8",
		"question": "Who is the narrator of The Price of Beauty ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Price_of_Beauty> <http://dbpedia.org/ontology/narrator> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/narrator",
			"label": "narrator",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Price_of_Beauty",
			"label": "beauty price the of",
			"seq": "7,25"
		}]
	},
	{
		"id": "c45b083d0f4e4d43b3c84cbb54b3e598",
		"question": "Which colonel consort is Dolley Madison?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/rank> <http://dbpedia.org/resource/Colonel_(United_States)> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Dolley_Madison>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/rank",
			"label": "madison",
			"seq": "32,38"
		}, {
			"uri": "http://dbpedia.org/property/spouse",
			"label": "dolley",
			"seq": "25,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colonel_(United_States)",
			"label": "colonel",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/resource/Dolley_Madison",
			"label": "madison dolley",
			"seq": "25,38"
		}]
	},
	{
		"id": "f5a49295f8c54b9da9ec95751c275127",
		"question": "What is the area of the Tar Heel Sports Network which is  official residence of the Michael Nichols (photographer) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tar_Heel_Sports_Network> <http://dbpedia.org/property/area> ?uri. <http://dbpedia.org/resource/Michael_Nichols_(photographer)> <http://dbpedia.org/ontology/residence> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/area",
			"label": "area",
			"seq": "12,15"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residence",
			"seq": "67,75"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tar_Heel_Sports_Network",
			"label": "network sports heel",
			"seq": "28,46"
		}, {
			"uri": "http://dbpedia.org/resource/Michael_Nichols_(photographer)",
			"label": "(photographer) nichols michael",
			"seq": "84,113"
		}]
	},
	{
		"id": "1d50c91b6a7745c6818f2e8464d35108",
		"question": "Which company ownes stock in Dagenham turbines and Ford Motor credit?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Motor_Credit_Company> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/Dagenham_wind_turbines> <http://dbpedia.org/property/owner> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "ownes",
			"seq": "14,18"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "ownes",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Motor_Credit_Company",
			"label": "company credit motor ford",
			"seq": "6,30"
		}, {
			"uri": "http://dbpedia.org/resource/Dagenham_wind_turbines",
			"label": "turbines dagenham",
			"seq": "29,45"
		}]
	},
	{
		"id": "49882217618b4878acdbf10713ec47c8",
		"question": "Who are the writers of South Park: The Stick of Truth?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Park:_The_Stick_of_Truth> <http://dbpedia.org/property/writer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writers",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Park:_The_Stick_of_Truth",
			"label": "truth stick south park:",
			"seq": "23,45"
		}]
	},
	{
		"id": "26be0e284521464d866cfe4b6038a5fe",
		"question": "Enumerate all those who are in the Board of companies founded in New York?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_York> . ?uri <http://dbpedia.org/ontology/board> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "54,60"
		}, {
			"uri": "http://dbpedia.org/ontology/board",
			"label": "board",
			"seq": "35,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York",
			"label": "york new",
			"seq": "65,72"
		}]
	},
	{
		"id": "56262987cc8244aa8df969f4fb5a322e",
		"question": "Name the television show developed by J. Michael Straczynski and distributed by Warner Bros. Television?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Warner_Bros._Television>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "25,33"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "65,75"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/J._Michael_Straczynski",
			"label": "straczynski michael",
			"seq": "41,59"
		}, {
			"uri": "http://dbpedia.org/resource/Warner_Bros._Television",
			"label": "television warner bros.",
			"seq": "9,31"
		}]
	},
	{
		"id": "ab2e96b28d8345188ec38444b7b5d986",
		"question": "Who did Bruce Bochy play for ? ",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bruce_Bochy> <http://dbpedia.org/ontology/team> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "play",
			"seq": "20,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bruce_Bochy",
			"label": "bruce bochy",
			"seq": "8,18"
		}]
	},
	{
		"id": "9167d5c750d0472389d1ae6346e74154",
		"question": "Was Michael Schumacher a pole driver in the 1999 GP?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/1999_Japanese_Grand_Prix> <http://dbpedia.org/property/poleDriver> <http://dbpedia.org/resource/Michael_Schumacher> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/poleDriver",
			"label": "driver pole",
			"seq": "25,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1999_Japanese_Grand_Prix",
			"label": "1999",
			"seq": "44,47"
		}, {
			"uri": "http://dbpedia.org/resource/Michael_Schumacher",
			"label": "schumacher michael",
			"seq": "4,21"
		}]
	},
	{
		"id": "125b4ddfca3f45c987a4f7d3791fd239",
		"question": "How many universities participate in the NCAA Division I Football Bowl Subdivision?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/athletics",
			"label": "the",
			"seq": "37,39"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision",
			"label": "subdivision football",
			"seq": "57,76"
		}]
	},
	{
		"id": "ee9d772c72a44b26b65fd5441aca57f9",
		"question": "Who directed the albums recorded in Anaheim?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/Anaheim,_California> . ?x <http://dbpedia.org/property/director> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded",
			"seq": "24,31"
		}, {
			"uri": "http://dbpedia.org/property/director",
			"label": "directed",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Album",
			"label": "albums",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anaheim,_California",
			"label": "anaheim",
			"seq": "36,42"
		}]
	},
	{
		"id": "6deb0bfd163845caab7f56dfb4320204",
		"question": "List few Swedish language movies ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/language",
			"label": "language",
			"seq": "17,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "few",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Swedish_language",
			"label": "language swedish",
			"seq": "9,24"
		}]
	},
	{
		"id": "3b09ae63d05f4be68bc5b4f1851a85b3",
		"question": "What is the home town of the band which is the artist of Your Ice Cream's Dirty ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Your_Ice_Cream's_Dirty> <http://dbpedia.org/property/artist> ?x . ?x <http://dbpedia.org/ontology/hometown> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "47,52"
		}, {
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "29,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Your_Ice_Cream's_Dirty",
			"label": "cream's dirty your ice",
			"seq": "57,78"
		}]
	},
	{
		"id": "8eea4bb7e4f9442a8153aa8ae835ffeb",
		"question": "Which writer of the Snaman is also the writer of Neverwher ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Sandman_(Vertigo)> <http://dbpedia.org/property/writers> ?uri. <http://dbpedia.org/resource/Neverwhere_(radio_play)> <http://dbpedia.org/ontology/writer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writers",
			"label": "writer",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "writer",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Sandman_(Vertigo)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Neverwhere_(radio_play)",
			"label": "neverwher",
			"seq": "49,57"
		}]
	},
	{
		"id": "b829cf441b9c42dbb820113b2e8f0f95",
		"question": "How many religion's people have died in Malaysia?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Malaysia> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "people",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion's",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Malaysia",
			"label": "malaysia",
			"seq": "40,47"
		}]
	},
	{
		"id": "bf8962801bda4524830a4a9e93f343ae",
		"question": "How many people have managed a club which owns the Riverside Stadium?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Riverside_Stadium> . ?uri <http://dbpedia.org/ontology/managerClub> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/ground",
			"label": "owns",
			"seq": "42,45"
		}, {
			"uri": "http://dbpedia.org/ontology/managerClub",
			"label": "managed",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Riverside_Stadium",
			"label": "riverside stadium",
			"seq": "51,67"
		}]
	},
	{
		"id": "2b8a8b2d5eaf46d0b7aa820e04fefcb9",
		"question": "Which river's source mountain is Baikal Mountains and it's mouth is Lena Delta Wildlife Reserve?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Lena_Delta_Wildlife_Reserve>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceMountain",
			"label": "mountain",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "mouth",
			"seq": "59,63"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river's",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Baikal_Mountains",
			"label": "mountains baikal",
			"seq": "33,48"
		}, {
			"uri": "http://dbpedia.org/resource/Lena_Delta_Wildlife_Reserve",
			"label": "wildlife reserve delta",
			"seq": "73,94"
		}]
	},
	{
		"id": "84a295da828b427a813fe17472240251",
		"question": "Name the person whose daughter is Rohan Marley and also another children named Sharon Marley ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Rohan_Marley> . ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Sharon_Marley>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "children",
			"seq": "64,71"
		}, {
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "64,71"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rohan_Marley",
			"label": "marley rohan",
			"seq": "34,45"
		}, {
			"uri": "http://dbpedia.org/resource/Sharon_Marley",
			"label": "sharon marley",
			"seq": "40,52"
		}]
	},
	{
		"id": "a93043e0abc847e0856bff25d6507a08",
		"question": "Name the members of European Go Federation?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/European_Go_Federation> <http://dbpedia.org/property/membership> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/membership",
			"label": "members",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/European_Go_Federation",
			"label": "federation european",
			"seq": "20,38"
		}]
	},
	{
		"id": "d1cfe025d3704ab1a2fa9008bb6ee9fa",
		"question": "What is the state of origin of the person who is the successor of Tetsugen Bernard Glassman?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Tetsugen_Bernard_Glassman> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "53,61"
		}, {
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "origin state",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "35,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tetsugen_Bernard_Glassman",
			"label": "tetsugen glassman bernard",
			"seq": "66,90"
		}]
	},
	{
		"id": "eb2766085bd746d89dd712c21ee272c6",
		"question": "How many other wine region are there of the grapes whose one of the wine region is Michigan ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/wineRegion> <http://dbpedia.org/resource/Michigan> . ?x <http://dbpedia.org/ontology/wineRegion> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "region",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "region",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michigan",
			"label": "michigan",
			"seq": "83,90"
		}]
	},
	{
		"id": "20f92144bb5446848093e63a491a213f",
		"question": "Where was WiZeefa founded ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WiZeefa> <http://dbpedia.org/property/foundation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "18,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WiZeefa",
			"label": "wizeefa",
			"seq": "10,16"
		}]
	},
	{
		"id": "687c79c0439d4ae698063ce7d8192262",
		"question": "To which families does the Koolakamba belong ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Koolakamba> <http://dbpedia.org/ontology/family> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "families",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Koolakamba",
			"label": "koolakamba",
			"seq": "27,36"
		}]
	},
	{
		"id": "bf9af6758f024671b29e7786a3bd5039",
		"question": "What Orson Welles directed movie has  photography director as Gregg Toland ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Gregg_Toland> . ?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Orson_Welles>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cinematography",
			"label": "photography",
			"seq": "38,48"
		}, {
			"uri": "http://dbpedia.org/property/director",
			"label": "director",
			"seq": "50,57"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "movie",
			"seq": "27,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gregg_Toland",
			"label": "toland gregg",
			"seq": "62,73"
		}, {
			"uri": "http://dbpedia.org/resource/Orson_Welles",
			"label": "welles orson",
			"seq": "5,16"
		}]
	},
	{
		"id": "fc2b57a997ea496fa59b59645c999611",
		"question": "Which publisher of Lucifer's hammer is also known for Jo Garcia ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lucifer's_Hammer> <http://dbpedia.org/ontology/publisher> ?uri. <http://dbpedia.org/resource/Jo_Garcia> <http://dbpedia.org/ontology/knownFor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publisher",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "44,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lucifer's_Hammer",
			"label": "lucifer's hammer",
			"seq": "19,34"
		}, {
			"uri": "http://dbpedia.org/resource/Jo_Garcia",
			"label": "garcia jo",
			"seq": "54,62"
		}]
	},
	{
		"id": "7eb44afae7a540749ea01a4484cc116c",
		"question": "List the driver of SA MArino Grand Prix is also the Pole driver of Canadian Grand Proix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri. <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstDriver",
			"label": "driver",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/property/poleDriver",
			"label": "driver",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1999_San_Marino_Grand_Prix",
			"label": "marino",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/resource/1997_Canadian_Grand_Prix",
			"label": "canadian grand prix",
			"seq": "29,47"
		}]
	},
	{
		"id": "ccfb1eb8fbba41d2931dfb71598a8784",
		"question": "How many awards have screenwriters won?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Screenwriter> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "won",
			"seq": "35,37"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Screenwriter",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c7974233b0ce42da82267d5081901e7d",
		"question": "What is the local authority of the Buckhurst Hill County High School is also the birth palce of Sarah hampion ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri. <http://dbpedia.org/resource/Sarah_Champion_(presenter)> <http://dbpedia.org/property/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/localAuthority",
			"label": "authority local",
			"seq": "12,26"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "birth",
			"seq": "81,85"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Buckhurst_Hill_County_High_School",
			"label": "buckhurst school county hill high",
			"seq": "35,67"
		}, {
			"uri": "http://dbpedia.org/resource/Sarah_Champion_(presenter)",
			"label": "hampion sarah",
			"seq": "96,108"
		}]
	},
	{
		"id": "a27e4cca5be64ee1a9b027ad15d8e2d9",
		"question": "Which place founded by Penobscot Island Air is also the location fo Ellei Johndro ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Penobscot_Island_Air> <http://dbpedia.org/property/founded> ?uri. <http://dbpedia.org/resource/Ellei_Johndro> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founded",
			"label": "founded",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "place",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Penobscot_Island_Air",
			"label": "penobscot island",
			"seq": "23,38"
		}, {
			"uri": "http://dbpedia.org/resource/Ellei_Johndro",
			"label": "johndro ellei",
			"seq": "68,80"
		}]
	},
	{
		"id": "82515aca204c44bb8a57aef8e97e9753",
		"question": "List the countries through which European rout E39 and E8 passes ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/European_route_E39> <http://dbpedia.org/ontology/county> ?uri. <http://dbpedia.org/resource/European_route_E8> <http://dbpedia.org/ontology/county> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/county",
			"label": "countries",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/county",
			"label": "countries",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/European_route_E39",
			"label": "european rout",
			"seq": "33,45"
		}, {
			"uri": "http://dbpedia.org/resource/European_route_E8",
			"label": "european rout",
			"seq": "33,45"
		}]
	},
	{
		"id": "3b5cc7aa7419456797aae6a58176eea2",
		"question": "How many people work at the FBI?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Federal_Bureau_of_Investigation>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "at",
			"seq": "21,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Federal_Bureau_of_Investigation",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c83d6063d4884c32bb551e7905d704d9",
		"question": "Name the hockey team whose head coach is Alain Vigneault?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Alain_Vigneault>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HockeyTeam>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headCoach",
			"label": "coach head",
			"seq": "27,36"
		}, {
			"uri": "http://dbpedia.org/ontology/HockeyTeam",
			"label": "hockey team",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alain_Vigneault",
			"label": "vigneault alain",
			"seq": "41,55"
		}]
	},
	{
		"id": "fc6a428c69f44439b0c0594e95f8f2a8",
		"question": "In which state is Dorchester Bay (Boston Harbor) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dorchester_Bay_(Boston_Harbor)> <http://dbpedia.org/property/state> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dorchester_Bay_(Boston_Harbor)",
			"label": "dorchester harbor) (boston",
			"seq": "18,43"
		}]
	},
	{
		"id": "1211b3f99aab4dc185ce380c1579a8e0",
		"question": "To which political party do the children of Sonia Gandhi belong?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Sonia_Gandhi> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "32,39"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sonia_Gandhi",
			"label": "gandhi sonia",
			"seq": "44,55"
		}]
	},
	{
		"id": "fe726ec84eda43a7aa4725b1811e6540",
		"question": "Which religion followers are the members of Janata Dal?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Janata_Dal> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/party",
			"label": "are",
			"seq": "25,27"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Janata_Dal",
			"label": "janata dal",
			"seq": "44,53"
		}]
	},
	{
		"id": "78f8aae7da294e14b5bfdff2bb35d039",
		"question": "Count the nearest city to the historic palce whose one of the nearest city is Wisconsin ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/nearestCity> <http://dbpedia.org/resource/Wisconsin> . ?x <http://dbpedia.org/property/nearestCity> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "nearest",
			"seq": "10,16"
		}, {
			"uri": "http://dbpedia.org/property/nearestCity",
			"label": "nearest",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wisconsin",
			"label": "wisconsin",
			"seq": "78,86"
		}]
	},
	{
		"id": "5c04724cd502432197623d0c85e4cd8d",
		"question": "What is the airline company has its headquarters in Dublin Airport?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Dublin_Airport> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "36,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dublin_Airport",
			"label": "airport dublin",
			"seq": "52,65"
		}]
	},
	{
		"id": "7424ae95bf2f42f5a33391da3da194a8",
		"question": "What are the teams for which Wilfred McDonald played for?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wilfred_McDonald> <http://dbpedia.org/property/playedFor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "played for",
			"seq": "19,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wilfred_McDonald",
			"label": "mcdonald wilfred",
			"seq": "29,44"
		}]
	},
	{
		"id": "f8980026033540a6b7278aa9d07efa35",
		"question": "What are some orthonychidae birds?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Orthonychidae>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bird>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Bird",
			"label": "birds",
			"seq": "28,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Orthonychidae",
			"label": "orthonychidae",
			"seq": "14,26"
		}]
	},
	{
		"id": "13aa00a577f340fcbdb046e59b4c6be3",
		"question": "List the music played in television episode which came after The Colonel (The Americans) ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Colonel_(The_Americans)> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/property/music> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "list",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Colonel_(The_Americans)",
			"label": "americans) colonel",
			"seq": "65,82"
		}]
	},
	{
		"id": "e14a10dfcbdb4da48072fcb7256cdf88",
		"question": "Is Dave Schulz a band member of Berlin?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Berlin_(band)> <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Dave_Schulz_(musician)> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "member band",
			"seq": "17,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Berlin_(band)",
			"label": "berlin band",
			"seq": "17,27"
		}, {
			"uri": "http://dbpedia.org/resource/Dave_Schulz_(musician)",
			"label": "schulz dave",
			"seq": "3,13"
		}]
	},
	{
		"id": "d5927c0324be4e2d8fa01205bb38a09e",
		"question": "Does MSX BASIC have a license of microsoft?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> <http://dbpedia.org/resource/Microsoft> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/license",
			"label": "license",
			"seq": "22,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/MSX_BASIC",
			"label": "basic msx",
			"seq": "5,13"
		}, {
			"uri": "http://dbpedia.org/resource/Microsoft",
			"label": "microsoft",
			"seq": "33,41"
		}]
	},
	{
		"id": "ed1295a0e7e74eedae807b925a9ffc34",
		"question": "List the subsequent work of the albums whose one of the subsequent work is Planet Waves?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Planet_Waves> . ?x <http://dbpedia.org/ontology/subsequentWork> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Album",
			"label": "albums",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Planet_Waves",
			"label": "planet waves",
			"seq": "75,86"
		}]
	},
	{
		"id": "6e226915fc37413b8740c3a74cc977c5",
		"question": "In which mountain Inyo National Forest and California are located?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Inyo_National_Forest> . ?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/California> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "located",
			"seq": "58,64"
		}, {
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "located",
			"seq": "58,64"
		}, {
			"uri": "http://dbpedia.org/ontology/Mountain",
			"label": "mountain",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Inyo_National_Forest",
			"label": "national forest inyo",
			"seq": "18,37"
		}, {
			"uri": "http://dbpedia.org/resource/California",
			"label": "california",
			"seq": "43,52"
		}]
	},
	{
		"id": "16e81494f124480cb7ff4c58f496996a",
		"question": "where did Alfred Tarnowski die?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alfred_Tarnowski> <http://dbpedia.org/property/placeOfDeath> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "alfred",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alfred_Tarnowski",
			"label": "tarnowski alfred",
			"seq": "10,25"
		}]
	},
	{
		"id": "e486eea0f7ff4cf899bb864fd58f6f3a",
		"question": "What are some licensees of the stations playing in Nashville, Tennessee?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/area> <http://dbpedia.org/resource/Nashville,_Tennessee> . ?x <http://dbpedia.org/property/licensee> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/area",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/property/licensee",
			"label": "licensees",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/RadioStation",
			"label": "stations",
			"seq": "31,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nashville,_Tennessee",
			"label": "nashville, tennessee",
			"seq": "51,70"
		}]
	},
	{
		"id": "f6acd592b57c4dac95edb3c787a5980e",
		"question": "Was the Incredibles released before Finding Nemo?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Incredibles_(film_score)> <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Finding_Nemo> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/previousWork",
			"label": "incredibles",
			"seq": "8,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Incredibles_(film_score)",
			"label": "incredibles",
			"seq": "8,18"
		}, {
			"uri": "http://dbpedia.org/resource/Finding_Nemo",
			"label": "finding nemo",
			"seq": "36,47"
		}]
	},
	{
		"id": "e45f92ad9a4348f4b762dff1b9350929",
		"question": "List the American MEditerranean Sea city is also the place of death of Laszlo Bellak ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/American_Mediterranean_Sea> <http://dbpedia.org/property/cities> ?uri. <http://dbpedia.org/resource/Laszlo_Bellak> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "city",
			"seq": "36,39"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "place death",
			"seq": "53,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Mediterranean_Sea",
			"label": "mediterranean american sea",
			"seq": "9,34"
		}, {
			"uri": "http://dbpedia.org/resource/Laszlo_Bellak",
			"label": "laszlo bellak",
			"seq": "71,83"
		}]
	},
	{
		"id": "94b09d893f4549c8aa8340eebf9f2e4f",
		"question": "Which river originates from Cape Vincent and Kingston, Ontario?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Cape_Vincent,_New_York> . ?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Kingston,_Ontario> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceLocation",
			"label": "originates",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/property/sourceLocation",
			"label": "originates",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cape_Vincent,_New_York",
			"label": "vincent cape",
			"seq": "28,39"
		}, {
			"uri": "http://dbpedia.org/resource/Kingston,_Ontario",
			"label": "kingston, ontario",
			"seq": "45,61"
		}]
	},
	{
		"id": "700bcd617886425282255b4748de26f6",
		"question": "Which professional fighter, who is also a politician and was elected to House of Representatives of the Philippines?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/occupation> <http://dbpedia.org/resource/House_of_Representatives_of_the_Philippines> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/occupation",
			"label": "politician",
			"seq": "42,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/House_of_Representatives_of_the_Philippines",
			"label": "representatives philippines",
			"seq": "81,107"
		}]
	},
	{
		"id": "66867f2d03ca4db8b5d199cad01a7dee",
		"question": "Isaac Hayes has acted in which movies ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Isaac_Hayes>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "in",
			"seq": "22,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "in",
			"seq": "22,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "in",
			"seq": "22,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Isaac_Hayes",
			"label": "isaac hayes",
			"seq": "0,10"
		}]
	},
	{
		"id": "8de783323c0a490694c0e920f0ad07b8",
		"question": "How many thesis were supervised by Ernest Rutherford?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/doctoralAdvisor> <http://dbpedia.org/resource/Ernest_Rutherford>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralAdvisor",
			"label": "supervised",
			"seq": "21,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ernest_Rutherford",
			"label": "rutherford ernest",
			"seq": "35,51"
		}]
	},
	{
		"id": "1c9a76e118864c9c95e250236798f5fa",
		"question": "What is the television show whose related with  Doctor Who Confidential?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Doctor_Who_Confidential>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Doctor_Who_Confidential",
			"label": "confidential doctor",
			"seq": "48,66"
		}]
	},
	{
		"id": "c155dc611cc0417fa2b5841635593617",
		"question": "Name all those buried in a place governed by a city council.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/City_council> . ?uri <http://dbpedia.org/property/restingPlace> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governed",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/property/restingPlace",
			"label": "place",
			"seq": "27,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/City_council",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7b9e8db8a3234def93777d9786fa9db7",
		"question": "What are the last two studio albums of Moondog Matinee ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moondog_Matinee> <http://dbpedia.org/ontology/subsequentWork> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "two",
			"seq": "18,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Moondog_Matinee",
			"label": "moondog matinee",
			"seq": "39,53"
		}]
	},
	{
		"id": "54e227ff2d2e417f99bcbc650ff5d8a7",
		"question": "How many people currently play for the NYC FC?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/New_York_City_FC>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "currently",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York_City_FC",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "8a0781ae3e9644709d33491564bbab50",
		"question": "List the battles fought by Roh Tae-woo ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roh_Tae-woo> <http://dbpedia.org/property/battles> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battles",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Roh_Tae-woo",
			"label": "tae-woo roh",
			"seq": "27,37"
		}]
	},
	{
		"id": "6182dae45a7a40889fd0d2797e4209ff",
		"question": "Is Gutenberg neighbouring with Madiswil?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Madiswil> <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Gutenburg,_Switzerland> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/neighboringMunicipalities",
			"label": "neighbouring",
			"seq": "13,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Madiswil",
			"label": "madiswil",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/resource/Gutenburg,_Switzerland",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6224c64d6d3b40529a2999e42371cac2",
		"question": "Which educational institution has Kaplan, Inc as it's affiliation?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliation",
			"seq": "54,64"
		}, {
			"uri": "http://dbpedia.org/ontology/EducationalInstitution",
			"label": "institution educational",
			"seq": "6,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kaplan,_Inc.",
			"label": "kaplan, inc",
			"seq": "34,44"
		}]
	},
	{
		"id": "812fb89fca9641a4a51e6bda1fec74ca",
		"question": "Whose wife is a presenter at WWE?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/WWE> . ?uri <http://dbpedia.org/ontology/spouse> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/presenter",
			"label": "presenter",
			"seq": "16,24"
		}, {
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "whose",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WWE",
			"label": "wwe",
			"seq": "29,31"
		}]
	},
	{
		"id": "079e2720dce04b76bb7bc051f96ba21b",
		"question": "Over what do Concor holdings have a bridge?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/builder> <http://dbpedia.org/resource/Concor_Holdings> . ?x <http://dbpedia.org/property/crosses> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "over",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/property/crosses",
			"label": "over",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridge",
			"seq": "36,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Concor_Holdings",
			"label": "holdings concor",
			"seq": "13,27"
		}]
	},
	{
		"id": "541c5ade920c4308934784b55bbabc52",
		"question": "What is the parent company of company which owns Sony Bank?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Sony_Bank> <http://dbpedia.org/property/parent> ?x . ?x <http://dbpedia.org/ontology/parentCompany> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/parent",
			"label": "parent",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "company",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony_Bank",
			"label": "sony bank",
			"seq": "49,57"
		}]
	},
	{
		"id": "f301fa4d3e7043f0a10bcbd3b6fa41d3",
		"question": "What is the total number of writers whose singles are recorded in Miami?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/Miami> . ?x <http://dbpedia.org/property/writer> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded in",
			"seq": "43,53"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "writers",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miami",
			"label": "miami",
			"seq": "66,70"
		}]
	},
	{
		"id": "e35b89affcbc4e069a971dce50f9fd26",
		"question": "Daniel L D Granger and Job Durfee have based their political career in which US state?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Daniel_L._D._Granger> <http://dbpedia.org/property/state> ?uri. <http://dbpedia.org/resource/Job_Durfee> <http://dbpedia.org/property/state> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "80,84"
		}, {
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "80,84"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Daniel_L._D._Granger",
			"label": "granger daniel",
			"seq": "0,13"
		}, {
			"uri": "http://dbpedia.org/resource/Job_Durfee",
			"label": "durfee job",
			"seq": "23,32"
		}]
	},
	{
		"id": "af555bca8edd4d7ba2850d9d4b99f6e1",
		"question": "What is the common nationality of Viveka Babajee anad Ronny Vencatachellum ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Viveka_Babajee> <http://dbpedia.org/property/citizenship> ?uri. <http://dbpedia.org/resource/Ronny_Vencatachellum> <http://dbpedia.org/ontology/nationality> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/citizenship",
			"label": "nationality",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "19,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Viveka_Babajee",
			"label": "babajee viveka",
			"seq": "34,47"
		}, {
			"uri": "http://dbpedia.org/resource/Ronny_Vencatachellum",
			"label": "vencatachellum ronny",
			"seq": "54,73"
		}]
	},
	{
		"id": "7f8414559c5f475ead1ee872da7dd371",
		"question": "What is the city nearest to the historic place whose architect is Joseph Dion?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/architect> <http://dbpedia.org/resource/Joseph_Dion> . ?x <http://dbpedia.org/ontology/nearestCity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HistoricPlace>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "53,61"
		}, {
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "nearest city",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/HistoricPlace",
			"label": "historic place",
			"seq": "32,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joseph_Dion",
			"label": "joseph dion",
			"seq": "66,76"
		}]
	},
	{
		"id": "8b40533f058843bdb80b6c7f4e829f19",
		"question": "Who are the employer of Don R. Berlin?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Don_R._Berlin> <http://dbpedia.org/ontology/employer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "employer",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Don_R._Berlin",
			"label": "berlin don",
			"seq": "24,33"
		}]
	},
	{
		"id": "21aefb3be51e45ccb573c41d235eb2c4",
		"question": "How many different mascots are there of the NCAA teams?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/National_Collegiate_Athletic_Association> . ?x <http://dbpedia.org/property/mascot> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/athletics",
			"label": "the",
			"seq": "31,33"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascots",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Collegiate_Athletic_Association",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a325797e93f24edab0569ec125f0d080",
		"question": "Where do the stockholders of Pathaninaikos F.C. live?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Panathinaikos_F.C.> <http://dbpedia.org/ontology/owner> ?x . ?x <http://dbpedia.org/property/residence> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "where",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/property/residence",
			"label": "live",
			"seq": "48,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Panathinaikos_F.C.",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ac389328974d4442bd2e216aa4b43812",
		"question": "Name the office holder whose constituency is Haight-Ashbury?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "29,40"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Haight-Ashbury",
			"label": "haight-ashbury",
			"seq": "45,58"
		}]
	},
	{
		"id": "2ba1fd420a3144f68cb807b475c66dd5",
		"question": "What is the common ideology followed by Katyayana and Palang Dharma Party ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Katyayana_(Buddhist)> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Palang_Dharma_Party> <http://dbpedia.org/ontology/ideology> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religion",
			"label": "palang",
			"seq": "54,59"
		}, {
			"uri": "http://dbpedia.org/ontology/ideology",
			"label": "ideology",
			"seq": "19,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Katyayana_(Buddhist)",
			"label": "katyayana",
			"seq": "40,48"
		}, {
			"uri": "http://dbpedia.org/resource/Palang_Dharma_Party",
			"label": "palang dharma party",
			"seq": "54,72"
		}]
	},
	{
		"id": "807d486a431f48a38d65b567d7f19374",
		"question": "What is the river whose tributary is Zarqa River?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Zarqa_River>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leftTributary",
			"label": "tributary",
			"seq": "24,32"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zarqa_River",
			"label": "zarqa river",
			"seq": "12,22"
		}]
	},
	{
		"id": "4a249054ec63491c84cf76d9d1aff14e",
		"question": "How many home stadiums are there of the seasons whose chairman in Merritt Paulson?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Merritt_Paulson> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/chairman",
			"label": "chairman",
			"seq": "54,61"
		}, {
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "stadiums",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Merritt_Paulson",
			"label": "paulson merritt",
			"seq": "66,80"
		}]
	},
	{
		"id": "58c006275fb04301a88992b18018e5f8",
		"question": "Where can I find some buildings of modern architecture?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/architecturalStyle> <http://dbpedia.org/resource/Modern_architecture> . ?x <http://dbpedia.org/property/address> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architecturalStyle",
			"label": "architecture",
			"seq": "42,53"
		}, {
			"uri": "http://dbpedia.org/property/address",
			"label": "where",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/Building",
			"label": "buildings",
			"seq": "22,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Modern_architecture",
			"label": "architecture modern",
			"seq": "35,53"
		}]
	},
	{
		"id": "1b6199ceb90d4d089a7a2933476ec371",
		"question": "Name the team Ramiro Pea played for, which was also the first team of Steve Ontiveros?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steve_Ontiveros_(infielder)> <http://dbpedia.org/property/debutteam> ?uri. <http://dbpedia.org/resource/Ramiro_Pe\u00f1a> <http://dbpedia.org/ontology/team> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "team",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steve_Ontiveros_(infielder)",
			"label": "ontiveros steve",
			"seq": "70,84"
		}, {
			"uri": "http://dbpedia.org/resource/Ramiro_Pe\u00f1a",
			"label": "ramiro",
			"seq": "14,19"
		}]
	},
	{
		"id": "032949490f454dbabd4797646d3e840d",
		"question": "Give me the count of all the names of characters created by Frank Miller",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Frank_Miller_(comics)> . ?x <http://dbpedia.org/property/characterName> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creators",
			"label": "created",
			"seq": "49,55"
		}, {
			"uri": "http://dbpedia.org/property/characterName",
			"label": "characters",
			"seq": "38,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frank_Miller_(comics)",
			"label": "miller frank",
			"seq": "60,71"
		}]
	},
	{
		"id": "4af1cb3060f14095a5ac3b96593361a4",
		"question": "list the founders of Bream Bay ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bream_Bay> <http://dbpedia.org/property/founder> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founders",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bream_Bay",
			"label": "bream bay",
			"seq": "21,29"
		}]
	},
	{
		"id": "e91ada2d11fb415a90f5214a4568ae9a",
		"question": "Give me a count of bridges located in California ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/California>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "located",
			"seq": "27,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridges",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/California",
			"label": "california",
			"seq": "38,47"
		}]
	},
	{
		"id": "4973207551934a3bbfe9a31d282f7aa1",
		"question": "List the companies operating in Australia?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/regionServed> <http://dbpedia.org/resource/Australia> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "operating",
			"seq": "19,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Australia",
			"label": "australia",
			"seq": "32,40"
		}]
	},
	{
		"id": "6e3344185dfb4c5dbeed1d2254ad79fb",
		"question": "What all are in the states whose anthem is Ja, vi esker dette landet?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/anthem> <http://dbpedia.org/resource/Ja,_vi_elsker_dette_landet> . ?uri <http://dbpedia.org/ontology/country> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/anthem",
			"label": "anthem",
			"seq": "33,38"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "landet",
			"seq": "62,67"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ja,_vi_elsker_dette_landet",
			"label": "landet",
			"seq": "62,67"
		}]
	},
	{
		"id": "16031b0772124f5996cbdab932ed9852",
		"question": "Name the country whose leader's deputy is Piotr Glinski?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Piotr_Gli\u0144ski> . ?uri <http://dbpedia.org/property/leaderName> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deputy",
			"label": "deputy",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "leader's",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Piotr_Gli\u0144ski",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4b373e478fb544ff89ce330c0d13a38d",
		"question": "Which country are the players of the Atletico Petroleos de Luanda from?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/club> <http://dbpedia.org/resource/Atl\u00e9tico_Petr\u00f3leos_de_Luanda_(handball)> . ?x <http://dbpedia.org/ontology/nationality> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/club",
			"label": "luanda",
			"seq": "59,64"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "country",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "atletico",
			"seq": "37,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Atl\u00e9tico_Petr\u00f3leos_de_Luanda_(handball)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7fe19c7b8b7e4a719c02a2308891d646",
		"question": "Who owns the ford kansas assembly plant?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> <http://dbpedia.org/ontology/owningOrganisation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningOrganisation",
			"label": "owns",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant",
			"label": "assembly kansas plant ford",
			"seq": "13,38"
		}]
	},
	{
		"id": "d225159e360c4ab99b91e8064247d40a",
		"question": "Which saints were the messengers of Islam?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Saint>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/veneratedIn",
			"label": "were",
			"seq": "13,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Saint",
			"label": "saints",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Islam",
			"label": "islam",
			"seq": "36,40"
		}]
	},
	{
		"id": "3624e029fd0e45c29e54521e58359db5",
		"question": "Companies founded in Taiwan have typically which divisions?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Taiwan> . ?x <http://dbpedia.org/ontology/division> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "10,16"
		}, {
			"uri": "http://dbpedia.org/ontology/division",
			"label": "divisions",
			"seq": "49,57"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "0,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Taiwan",
			"label": "taiwan",
			"seq": "21,26"
		}]
	},
	{
		"id": "02d9f9ed093c4c9bac55160e89a71635",
		"question": "What do the relatives of James Hartness do?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/James_Hartness> . ?x <http://dbpedia.org/property/occupation> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/property/occupation",
			"label": "hartness",
			"seq": "31,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_Hartness",
			"label": "hartness james",
			"seq": "25,38"
		}]
	},
	{
		"id": "5308076f247f416480c268da88eb6df0",
		"question": "What is the debut team of ngel Escobar ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/\u00c1ngel_Escobar> <http://dbpedia.org/property/debutteam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut team",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/\u00c1ngel_Escobar",
			"label": "escobar ngel",
			"seq": "26,37"
		}]
	},
	{
		"id": "70568d51ea3b40fa9b6e40baba80e4fc",
		"question": "What is the hub airport of Pawan Hans, and is also the largest city of India?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pawan_Hans> <http://dbpedia.org/ontology/hubAirport> ?uri. <http://dbpedia.org/resource/India> <http://dbpedia.org/ontology/largestCity> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hubAirport",
			"label": "airport hub",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "55,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pawan_Hans",
			"label": "pawan",
			"seq": "27,31"
		}, {
			"uri": "http://dbpedia.org/resource/India",
			"label": "india",
			"seq": "71,75"
		}]
	},
	{
		"id": "113256a516bc4fd6b1b550678ccd7750",
		"question": "Where was the predecessor of Sevan Ross born?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Sevan_Ross> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "predecessor",
			"seq": "14,24"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "predecessor",
			"seq": "14,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sevan_Ross",
			"label": "sevan ross",
			"seq": "29,38"
		}]
	},
	{
		"id": "359b7ca38c6d488cb3ebdbb52b991c87",
		"question": "Which company produced the car which was a new version of Daewoo's Tico?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Daewoo_Tico> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "produced",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/property/parentCompany",
			"label": "company",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "the",
			"seq": "23,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Daewoo_Tico",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "68cc4d86a23e4564a5b88efbd61a347b",
		"question": "Who built the stadiums where 2014 FIFA under 17 woman's world cup took place?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/2014_FIFA_U-17_Women's_World_Cup> . ?x <http://dbpedia.org/ontology/builder> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "the",
			"seq": "10,12"
		}, {
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "under",
			"seq": "39,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2014_FIFA_U-17_Women's_World_Cup",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1230514af3324678b0f4930db7543258",
		"question": "Name the source of Raa ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ra\u0161a_(river)> <http://dbpedia.org/ontology/source> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/source",
			"label": "source",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ra\u0161a_(river)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4e66595b1889429ea3cc642a64440f99",
		"question": "In which countries does the sea lie on whose shore is the city of Cumana?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Cuman\u00e1> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "countries",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "countries",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "28,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cuman\u00e1",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a2f40f5069d544e0a258bc31e4b48533",
		"question": "What is the mascot of Galatasaray Handball Team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Galatasaray_Handball_Team> <http://dbpedia.org/property/mascot> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Galatasaray_Handball_Team",
			"label": "galatasaray handball team",
			"seq": "22,46"
		}]
	},
	{
		"id": "f64ea5a5f2dc48fd8988423ab27e5f5f",
		"question": "Was Nick Jonas a member of the Jonas Brothers?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jonas_Brothers> <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Nick_Jonas> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "member",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jonas_Brothers",
			"label": "brothers jonas",
			"seq": "9,22"
		}, {
			"uri": "http://dbpedia.org/resource/Nick_Jonas",
			"label": "jonas nick",
			"seq": "4,13"
		}]
	},
	{
		"id": "e4f65c146f2447c0b3c8147f59a837e1",
		"question": "For which teams did the Hawai graduated players play their first game?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/college> <http://dbpedia.org/resource/Hawaii> . ?x <http://dbpedia.org/ontology/debutTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/college",
			"label": "game",
			"seq": "65,68"
		}, {
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "teams",
			"seq": "10,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "the",
			"seq": "20,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hawaii",
			"label": "hawai",
			"seq": "24,28"
		}]
	},
	{
		"id": "609bdd6c95834ba0b808371bb01cb589",
		"question": "Who represent the constituencies of Noe Valley and Duboce Triangle ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Noe_Valley,_San_Francisco> . ?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Duboce_Triangle,_San_Francisco> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituencies",
			"seq": "18,31"
		}, {
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituencies",
			"seq": "18,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Noe_Valley,_San_Francisco",
			"label": "valley",
			"seq": "40,45"
		}, {
			"uri": "http://dbpedia.org/resource/Duboce_Triangle,_San_Francisco",
			"label": "triangle duboce",
			"seq": "51,65"
		}]
	},
	{
		"id": "4b43dbb1aa6943abab5354ce97147e72",
		"question": "Movie's produced by Michael Deeley has Jordan Cronenweth as director of photography",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Michael_Deeley> . ?uri <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "produced",
			"seq": "8,15"
		}, {
			"uri": "http://dbpedia.org/ontology/cinematography",
			"label": "photography",
			"seq": "72,82"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "69,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Deeley",
			"label": "michael deeley",
			"seq": "20,33"
		}, {
			"uri": "http://dbpedia.org/resource/Jordan_Cronenweth",
			"label": "cronenweth jordan",
			"seq": "39,55"
		}]
	},
	{
		"id": "5f874cdc5f2749c298a7a13fabc7859a",
		"question": "Which key person of maryland jockey club is the appointer of Joseph Clay ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joseph_Clay_(Georgia)> <http://dbpedia.org/ontology/appointer> ?uri. <http://dbpedia.org/resource/Maryland_Jockey_Club> <http://dbpedia.org/property/keyPeople> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/appointer",
			"label": "appointer",
			"seq": "48,56"
		}, {
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "key",
			"seq": "6,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joseph_Clay_(Georgia)",
			"label": "joseph clay",
			"seq": "61,71"
		}, {
			"uri": "http://dbpedia.org/resource/Maryland_Jockey_Club",
			"label": "maryland jockey club",
			"seq": "20,39"
		}]
	},
	{
		"id": "1c6538227a4d41fdbcdb11eda17bce21",
		"question": "Which cities have the river one of whose Tributary is the Missouri's big spring?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Big_Spring_(Missouri)> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/rightTributary",
			"label": "tributary",
			"seq": "41,49"
		}, {
			"uri": "http://dbpedia.org/ontology/city",
			"label": "cities",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "22,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Big_Spring_(Missouri)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a45050c81a4d44f28d5f4050ae9db959",
		"question": "Who has written works found in the Gangan comics?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/magazine> <http://dbpedia.org/resource/Gangan_Comics> . ?x <http://dbpedia.org/property/author> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/magazine",
			"label": "gangan",
			"seq": "35,40"
		}, {
			"uri": "http://dbpedia.org/property/author",
			"label": "who",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gangan_Comics",
			"label": "gangan comics",
			"seq": "35,47"
		}]
	},
	{
		"id": "3cade710572444c297c339d6443854ed",
		"question": "What is the currency of Republic of Montenegro (1992-2006) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Republic_of_Montenegro_(1992\u20132006)> <http://dbpedia.org/property/currency> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currency",
			"label": "currency",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Republic_of_Montenegro_(1992\u20132006)",
			"label": "montenegro",
			"seq": "36,45"
		}]
	},
	{
		"id": "0c03e9d597b44f8bbef68457b98bb7c1",
		"question": "Who has given guest appearances on the TV Episodes whose was music done by Mama Makes 3?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Mama_Makes_Three> . ?x <http://dbpedia.org/property/guests> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionEpisode>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "61,65"
		}, {
			"uri": "http://dbpedia.org/property/guests",
			"label": "guest",
			"seq": "14,18"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionEpisode",
			"label": "episodes",
			"seq": "42,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mama_Makes_Three",
			"label": "makes mama",
			"seq": "75,84"
		}]
	},
	{
		"id": "9cda2b2237914ed59d7fe4aae8bc2c1d",
		"question": "Which band was left by Kevin Jonas?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Kevin_Jonas>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerBandMember",
			"label": "band",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kevin_Jonas",
			"label": "kevin jonas",
			"seq": "23,33"
		}]
	},
	{
		"id": "eecf29a370f5461f864f33e580e9eaaa",
		"question": "List all the presidents of the school which had atleast one of the president as Queen Noor of Jordan ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Queen_Noor_of_Jordan> . ?x <http://dbpedia.org/ontology/president> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "school",
			"seq": "31,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Queen_Noor_of_Jordan",
			"label": "jordan queen noor",
			"seq": "80,96"
		}]
	},
	{
		"id": "9f314843488844988113ecbbe314006d",
		"question": "In which countries have the Start + Flug aircrafts originated?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Start_+_Flug> . ?x <http://dbpedia.org/property/nationalOrigin> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Aircraft>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "countries",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/property/nationalOrigin",
			"label": "originated",
			"seq": "51,60"
		}, {
			"uri": "http://dbpedia.org/ontology/Aircraft",
			"label": "aircrafts",
			"seq": "41,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Start_+_Flug",
			"label": "start flug",
			"seq": "28,37"
		}]
	},
	{
		"id": "1979785c219b4798a0610b3ffc06873b",
		"question": "return some  players who have played in the NBA?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/league> <http://dbpedia.org/resource/National_Basketball_Association> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "played",
			"seq": "30,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Basketball_Association",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "dc586a5d041844feb7a1d08718b05042",
		"question": "Name the nearest city to Tennie and Laura ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tennie_and_Laura_(schooner)> <http://dbpedia.org/property/nearestCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nearestCity",
			"label": "nearest city",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tennie_and_Laura_(schooner)",
			"label": "tennie laura",
			"seq": "25,36"
		}]
	},
	{
		"id": "a5e0d47ce7c24a0ea619a0edcaad11e8",
		"question": "Name the home Stadium of Kenya national under-20 football team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kenya_national_under-20_football_team> <http://dbpedia.org/property/homeStadium> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/homeStadium",
			"label": "stadium home",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kenya_national_under-20_football_team",
			"label": "under-20 national football kenya team",
			"seq": "25,61"
		}]
	},
	{
		"id": "00d4f5a80a1c49a1bcf053b454f4547f",
		"question": "How many have been venerateds in Islam and Judaism?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam> . ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Judaism>} ",
		"sparql_id": "107",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/veneratedIn",
			"label": "venerateds",
			"seq": "19,28"
		}, {
			"uri": "http://dbpedia.org/ontology/veneratedIn",
			"label": "venerateds",
			"seq": "19,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Islam",
			"label": "islam",
			"seq": "33,37"
		}, {
			"uri": "http://dbpedia.org/resource/Judaism",
			"label": "judaism",
			"seq": "43,49"
		}]
	},
	{
		"id": "fa9fedea238d4402b21a174c49cb2e2b",
		"question": "What is the resting place of the politician who succeeded Samuel Hayes?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Samuel_Hayes_(settler)> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "succeeded",
			"seq": "48,56"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "12,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Politician",
			"label": "politician",
			"seq": "33,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Samuel_Hayes_(settler)",
			"label": "samuel hayes",
			"seq": "58,69"
		}]
	},
	{
		"id": "297f153071e94b52b485cc7758d5bda7",
		"question": "Is Amharic the official language of Ethiopia?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ethiopia> <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Amharic> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/officialLanguage",
			"label": "official language",
			"seq": "15,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ethiopia",
			"label": "ethiopia",
			"seq": "36,43"
		}, {
			"uri": "http://dbpedia.org/resource/Amharic",
			"label": "amharic",
			"seq": "3,9"
		}]
	},
	{
		"id": "0f6a8f881bad42279b23a45e3316c4e1",
		"question": "Name the river whose mouth country is Mozambique and source region is North-Western Province, Zambia?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mouthCountry> <http://dbpedia.org/resource/Mozambique> . ?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mouthCountry",
			"label": "country mouth",
			"seq": "21,33"
		}, {
			"uri": "http://dbpedia.org/property/sourceRegion",
			"label": "source region",
			"seq": "53,65"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mozambique",
			"label": "mozambique",
			"seq": "38,47"
		}, {
			"uri": "http://dbpedia.org/resource/North-Western_Province,_Zambia",
			"label": "north-western province, zambia",
			"seq": "70,99"
		}]
	},
	{
		"id": "574ba8734196413da81a96d3ec250fcc",
		"question": "List the people who influenced the comedian who acted in Good Hair ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Good_Hair> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/ontology/influencedBy> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Comedian>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "in",
			"seq": "20,21"
		}, {
			"uri": "http://dbpedia.org/ontology/influencedBy",
			"label": "influenced",
			"seq": "20,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Comedian",
			"label": "comedian",
			"seq": "35,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Good_Hair",
			"label": "hair good",
			"seq": "57,65"
		}]
	},
	{
		"id": "adc7d53883de42c6be0600b7cace1446",
		"question": "Which religion did both anupong paochinda and udit raj follow?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Anupong_Paochinda> <http://dbpedia.org/ontology/religion> ?uri. <http://dbpedia.org/resource/Udit_Raj> <http://dbpedia.org/ontology/religion> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anupong_Paochinda",
			"label": "paochinda anupong",
			"seq": "24,40"
		}, {
			"uri": "http://dbpedia.org/resource/Udit_Raj",
			"label": "udit raj",
			"seq": "46,53"
		}]
	},
	{
		"id": "7b47485d6943488fa5e56c5987062679",
		"question": "What is the source country of reg Lake ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/\u00dc\u00fcreg_Lake> <http://dbpedia.org/ontology/sourceCountry> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "country source",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/\u00dc\u00fcreg_Lake",
			"label": "lake reg",
			"seq": "30,37"
		}]
	},
	{
		"id": "ac781ca0b046427fb17b9f7d786504b9",
		"question": "Where did the wrestler trained by Ring of Honour get billed?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Ring_of_Honor> . ?x <http://dbpedia.org/property/billed> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/trainer",
			"label": "trained",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/property/billed",
			"label": "billed",
			"seq": "53,58"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ring_of_Honor",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "34f7503c1f79416eaf15faa883428f9d",
		"question": "What is the television show whose cast members are Jeff Conaway and Jason Carter?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jeff_Conaway> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "carter",
			"seq": "74,79"
		}, {
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "carter",
			"seq": "74,79"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jeff_Conaway",
			"label": "conaway jeff",
			"seq": "51,62"
		}, {
			"uri": "http://dbpedia.org/resource/Jason_Carter_(actor)",
			"label": "carter jason",
			"seq": "68,79"
		}]
	},
	{
		"id": "7eab338cb255401796c57269d23ae776",
		"question": "Who founded the city where Pat Vincent die?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Pat_Vincent> <http://dbpedia.org/ontology/deathPlace> ?x . ?x <http://dbpedia.org/ontology/founder> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "12,14"
		}, {
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founded",
			"seq": "4,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pat_Vincent",
			"label": "vincent pat",
			"seq": "27,37"
		}]
	},
	{
		"id": "beb30f1a6feb4cb2a855e669bf3f7555",
		"question": "The successor of Ellsworth Bunker belongs to which religion?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ellsworth_Bunker> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/region> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "religion",
			"seq": "51,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ellsworth_Bunker",
			"label": "ellsworth bunker",
			"seq": "17,32"
		}]
	},
	{
		"id": "e408531d8dfb48d5af806122fb2e865b",
		"question": "Is God Save the Queen the national anthem of United Kingdom?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/United_Kingdom> <http://dbpedia.org/property/nationalAnthem> <http://dbpedia.org/resource/God_Save_the_Queen> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalAnthem",
			"label": "national anthem",
			"seq": "26,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_Kingdom",
			"label": "kingdom united",
			"seq": "45,58"
		}, {
			"uri": "http://dbpedia.org/resource/God_Save_the_Queen",
			"label": "queen save",
			"seq": "7,16"
		}]
	},
	{
		"id": "e2b55df745ed48acb96b3572ab3e72e3",
		"question": "GetTV is owned by which organisation?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentOrganisation",
			"label": "organisation",
			"seq": "24,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/GetTV",
			"label": "gettv",
			"seq": "0,4"
		}]
	},
	{
		"id": "778e7cfd62804443a18d4c3eb9a42131",
		"question": "In which wars were people from the Saudi Arabian ministry of defense involved?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Minister_of_Defense_(Saudi_Arabia)> . ?x <http://dbpedia.org/property/battles> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/office",
			"label": "of",
			"seq": "58,59"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "the",
			"seq": "31,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Minister_of_Defense_(Saudi_Arabia)",
			"label": "defense",
			"seq": "61,67"
		}]
	},
	{
		"id": "3e8b38a9e2204976a87534f098523f05",
		"question": "Name the commanders of military conflicts where Roundhead was one of the commander ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/commander> <http://dbpedia.org/resource/Roundhead_(Wyandot)> . ?x <http://dbpedia.org/ontology/commander> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/commander",
			"label": "commander",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "military",
			"seq": "23,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Roundhead_(Wyandot)",
			"label": "roundhead",
			"seq": "48,56"
		}]
	},
	{
		"id": "b75f8d3b6f504199a40530df99c12f74",
		"question": "Was saddam hussein at the rank of Mushir ever?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Saddam_Hussein> <http://dbpedia.org/property/rank> <http://dbpedia.org/resource/Mushir> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/rank",
			"label": "rank",
			"seq": "26,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saddam_Hussein",
			"label": "hussein saddam",
			"seq": "4,17"
		}, {
			"uri": "http://dbpedia.org/resource/Mushir",
			"label": "mushir",
			"seq": "34,39"
		}]
	},
	{
		"id": "ae33dcf324974e5a8a97acf8260a43ec",
		"question": "Which mountain is located in inyo National Forest and has a parent peak named Nevado de Toluca ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Inyo_National_Forest> . ?uri <http://dbpedia.org/ontology/parentMountainPeak> <http://dbpedia.org/resource/Nevado_de_Toluca>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "located",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/parentMountainPeak",
			"label": "mountain parent",
			"seq": "6,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Mountain",
			"label": "mountain",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Inyo_National_Forest",
			"label": "national forest inyo",
			"seq": "29,48"
		}, {
			"uri": "http://dbpedia.org/resource/Nevado_de_Toluca",
			"label": "toluca nevado",
			"seq": "78,90"
		}]
	},
	{
		"id": "7f0f74a296d6433abb524ea51574af2b",
		"question": "Whihc state of Timothy J. Roemer is also the location city of Dad's Root Beer ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dad's_Root_Beer> <http://dbpedia.org/property/locationCity> ?uri. <http://dbpedia.org/resource/Timothy_J._Roemer> <http://dbpedia.org/property/state> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCity",
			"label": "location",
			"seq": "45,52"
		}, {
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dad's_Root_Beer",
			"label": "dad's",
			"seq": "62,66"
		}, {
			"uri": "http://dbpedia.org/resource/Timothy_J._Roemer",
			"label": "timothy roemer",
			"seq": "15,28"
		}]
	},
	{
		"id": "d73ddbee285644de8877440e530c8c3a",
		"question": "How many factions were involved in the battles fought by Arthur St. Clair?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Arthur_St._Clair> <http://dbpedia.org/property/battles> ?x . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battles",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/property/combatant",
			"label": "battles",
			"seq": "39,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arthur_St._Clair",
			"label": "arthur clair",
			"seq": "57,68"
		}]
	},
	{
		"id": "93149b69fa094becaa9a340eee7edad7",
		"question": "List borders of the admin region bordering Arctic ocean ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/border> <http://dbpedia.org/resource/Arctic_Ocean> . ?x <http://dbpedia.org/ontology/border> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/border",
			"label": "borders",
			"seq": "5,11"
		}, {
			"uri": "http://dbpedia.org/ontology/border",
			"label": "borders",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arctic_Ocean",
			"label": "arctic ocean",
			"seq": "43,54"
		}]
	},
	{
		"id": "6138681c5c4b40edae512667d67db3cb",
		"question": "Who composed the music for Tonight's the Night ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonight's_the_Night_(2003_musical)> <http://dbpedia.org/property/music> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "17,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tonight's_the_Night_(2003_musical)",
			"label": "tonight's music the",
			"seq": "13,31"
		}]
	},
	{
		"id": "f93336205ff849d79ef737b987936d56",
		"question": "Is Giorgos Kaminis the mayor of Athens?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Athens> <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Giorgos_Kaminis> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mayor",
			"label": "mayor",
			"seq": "23,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Athens",
			"label": "athens",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/resource/Giorgos_Kaminis",
			"label": "kaminis giorgos",
			"seq": "3,17"
		}]
	},
	{
		"id": "ace6d15c16bc4a83b76485ccda9762e6",
		"question": "What are the artists that have been in the band Framptons camel?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Frampton's_Camel>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "artists",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artists",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frampton's_Camel",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f0d39660f1f94a2098c5ecae0c7159ff",
		"question": "Bantam Spectra is the publisher of which series?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Bantam_Spectra> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/publisher",
			"label": "publisher",
			"seq": "22,30"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "41,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bantam_Spectra",
			"label": "spectra bantam",
			"seq": "0,13"
		}]
	},
	{
		"id": "6da84c298eee46d9bb136c460ff99bb0",
		"question": "List the soccer players whose current team has the ground Stoke-on-Trent.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Stoke-on-Trent> . ?uri <http://dbpedia.org/property/currentclub> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/ground",
			"label": "ground",
			"seq": "51,56"
		}, {
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "current",
			"seq": "30,36"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerPlayer",
			"label": "soccer",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stoke-on-Trent",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f08fb8d368d348e482a1d9c778dd17d5",
		"question": "Who is the headcoach of 2013-14 Marquette Golden Eagles men's basketball team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2013\u201314_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/property/headcoach> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headcoach",
			"label": "headcoach",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2013\u201314_Marquette_Golden_Eagles_men's_basketball_team",
			"label": "basketball marquette golden eagles",
			"seq": "32,65"
		}]
	},
	{
		"id": "ce5909f4af904a12a1ffea92d437ff16",
		"question": "Which operator of New Sanno Hotel is also the  governing body of the Oahu Railway and Land Company ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/property/operator> ?uri. <http://dbpedia.org/resource/Oahu_Railway_and_Land_Company> <http://dbpedia.org/property/governingBody> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operator",
			"label": "operator",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governing body",
			"seq": "47,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_Sanno_Hotel",
			"label": "sanno hotel new",
			"seq": "18,32"
		}, {
			"uri": "http://dbpedia.org/resource/Oahu_Railway_and_Land_Company",
			"label": "railway company oahu land",
			"seq": "69,93"
		}]
	},
	{
		"id": "86ca35205b364789addf51963601e201",
		"question": "In which military conflict were Phm Vn ng and John McEwen commanders ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Ph\u1ea1m_V\u0103n_\u0110\u1ed3ng> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/John_McEwen> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "58,67"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "58,67"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "military conflict",
			"seq": "9,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ph\u1ea1m_V\u0103n_\u0110\u1ed3ng",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/John_McEwen",
			"label": "mcewen john",
			"seq": "46,56"
		}]
	},
	{
		"id": "7ab5eba0fa5e4d2db3867b842e966443",
		"question": "Does Air 2000 fly to the north american continent?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Air_2000> <http://dbpedia.org/ontology/destination> <http://dbpedia.org/resource/North_America> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/destination",
			"label": "does",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Air_2000",
			"label": "2000 air",
			"seq": "5,12"
		}, {
			"uri": "http://dbpedia.org/resource/North_America",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "00691ec829834dd08cec97419d51eb4c",
		"question": "List the music of Open House (American Horror Story)?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Open_House_(American_Horror_Story)> <http://dbpedia.org/property/music> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Open_House_(American_Horror_Story)",
			"label": "(american story) horror house open",
			"seq": "18,51"
		}]
	},
	{
		"id": "298ec5bdf98b4eaead3626a3d1fd8456",
		"question": "What is the predecessor of the car engine which was succeeded by  BMW M43 ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/BMW_M43> . ?x <http://dbpedia.org/property/predecessor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engine>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "predecessor",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Engine",
			"label": "engine",
			"seq": "35,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BMW_M43",
			"label": "m43 bmw",
			"seq": "66,72"
		}]
	},
	{
		"id": "5809473753f34eeab40d9ef6574a79a6",
		"question": "How many players debuted their careers from San Francisco 49ers?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/debutTeam> <http://dbpedia.org/resource/San_Francisco_49ers>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debuted",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "their",
			"seq": "25,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Francisco_49ers",
			"label": "francisco 49ers",
			"seq": "48,62"
		}]
	},
	{
		"id": "9199869451414c5da79221a37f5ffefd",
		"question": "What movies have been written by authors of Monty Python ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "written",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "41,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Monty_Python",
			"label": "python monty",
			"seq": "44,55"
		}]
	},
	{
		"id": "3fbefd4c3d514688b85789042b0b5376",
		"question": "List the things for which the relatives of Mrunalini Kunte are known?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Mrunalini_Kunte> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/property/knownFor> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "30,38"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mrunalini_Kunte",
			"label": "mrunalini kunte",
			"seq": "43,57"
		}]
	},
	{
		"id": "e8cf794706634a76b62c2aaf12adf298",
		"question": "Did Bob Dylan write the lyrics of the times they are a changin'?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/property/lyrics> <http://dbpedia.org/resource/Bob_Dylan> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/lyrics",
			"label": "lyrics",
			"seq": "24,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)",
			"label": "changin' times they",
			"seq": "38,56"
		}, {
			"uri": "http://dbpedia.org/resource/Bob_Dylan",
			"label": "dylan bob",
			"seq": "4,12"
		}]
	},
	{
		"id": "3fa147b6f8f440749b08abb421bf2035",
		"question": "To which country do gabriel paris gordillo and gustavo rojas pinilla owe their allegiance?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gabriel_Par\u00eds_Gordillo> <http://dbpedia.org/property/allegiance> ?uri. <http://dbpedia.org/resource/Gustavo_Rojas_Pinilla> <http://dbpedia.org/property/allegiance> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "79,88"
		}, {
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "79,88"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gabriel_Par\u00eds_Gordillo",
			"label": "gordillo gabriel",
			"seq": "20,35"
		}, {
			"uri": "http://dbpedia.org/resource/Gustavo_Rojas_Pinilla",
			"label": "pinilla gustavo",
			"seq": "47,61"
		}]
	},
	{
		"id": "544df16ef59d472a8e6a01d0854aa485",
		"question": "What was founded by pina Records which has name of Geography of Puerto Rico ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Geography_of_Puerto_Rico> <http://dbpedia.org/property/name> ?uri. <http://dbpedia.org/resource/Pina_Records> <http://dbpedia.org/property/founded> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/name",
			"label": "name",
			"seq": "43,46"
		}, {
			"uri": "http://dbpedia.org/property/founded",
			"label": "founded",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Geography_of_Puerto_Rico",
			"label": "geography puerto rico",
			"seq": "51,71"
		}, {
			"uri": "http://dbpedia.org/resource/Pina_Records",
			"label": "records pina",
			"seq": "20,31"
		}]
	},
	{
		"id": "3faefccf7050420780e9fac0a46abe38",
		"question": "How many saints have been venerated in Judaism?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Judaism>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Saint>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/veneratedIn",
			"label": "venerated",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/ontology/Saint",
			"label": "saints",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Judaism",
			"label": "judaism",
			"seq": "39,45"
		}]
	},
	{
		"id": "14eaf63728994ec89e6ab5dcfc7e4446",
		"question": "List the outflows of the lake which has Benu river as one of it ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Benu\u00e9_River> . ?x <http://dbpedia.org/property/outflow> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/outflow",
			"label": "outflows",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/outflow",
			"label": "outflows",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Benu\u00e9_River",
			"label": "river benu",
			"seq": "40,49"
		}]
	},
	{
		"id": "1e48900f6c1847c7832e07b1e02cb22c",
		"question": "Who is the co-founder of the city where Owen Dougherty died?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Owen_Dougherty> <http://dbpedia.org/property/placeOfDeath> ?x . ?x <http://dbpedia.org/ontology/founder> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "co-founder",
			"seq": "11,20"
		}, {
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "co-founder",
			"seq": "11,20"
		}, {
			"uri": "http://dbpedia.org/ontology/City",
			"label": "city",
			"seq": "29,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Owen_Dougherty",
			"label": "dougherty owen",
			"seq": "40,53"
		}]
	},
	{
		"id": "a1d198db24e842999eeb72b803b34c69",
		"question": "Who is a religious figure titled superior general?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Superior_general>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Religious>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/title",
			"label": "titled",
			"seq": "26,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Religious",
			"label": "religious",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Superior_general",
			"label": "superior general",
			"seq": "33,48"
		}]
	},
	{
		"id": "225b40988f164cd18ab023c044dc99d0",
		"question": "What is the military unit whose command structures are United States Department of the Navy and United States Department of Defense?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_the_Navy> . ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commandStructure",
			"label": "structures",
			"seq": "40,49"
		}, {
			"uri": "http://dbpedia.org/ontology/commandStructure",
			"label": "structures",
			"seq": "40,49"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "military unit",
			"seq": "12,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Department_of_the_Navy",
			"label": "department united states",
			"seq": "55,78"
		}, {
			"uri": "http://dbpedia.org/resource/United_States_Department_of_Defense",
			"label": "department defense united",
			"seq": "55,79"
		}]
	},
	{
		"id": "6c551ce5e8ac471295a34da950408fa8",
		"question": "Is James Wong Howe the cinematographer of Behave Yourself?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Behave_Yourself!> <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/James_Wong_Howe> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cinematography",
			"label": "cinematographer",
			"seq": "23,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Behave_Yourself!",
			"label": "yourself behave",
			"seq": "42,56"
		}, {
			"uri": "http://dbpedia.org/resource/James_Wong_Howe",
			"label": "james wong howe",
			"seq": "3,17"
		}]
	},
	{
		"id": "4ffdaa76aa994139b18edf277f905fed",
		"question": "Who are the children of Abigail Adams?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Abigail_Adams> <http://dbpedia.org/property/children> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Abigail_Adams",
			"label": "abigail adams",
			"seq": "24,36"
		}]
	},
	{
		"id": "70c8d9f0e7c64d31b9e09f06e888d0ed",
		"question": "What awards have the alumni of Academy of Fine Arts in Lodz achieved?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/training> <http://dbpedia.org/resource/Academy_of_Fine_Arts_In_\u0141\u00f3d\u017a> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/training",
			"label": "alumni",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Academy_of_Fine_Arts_In_\u0141\u00f3d\u017a",
			"label": "academy",
			"seq": "31,37"
		}]
	},
	{
		"id": "0ca6c27bc7d045a09658ba31af63d7d0",
		"question": "How many TV shows are of the company which are of company which is a subsidiary of Big  Ticket Entertainment ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Big_Ticket_Entertainment> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsidiary",
			"label": "subsidiary",
			"seq": "69,78"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Big_Ticket_Entertainment",
			"label": "entertainment ticket",
			"seq": "88,107"
		}]
	},
	{
		"id": "843e418ed3c44ed7b63ee93d377e146a",
		"question": "Which are the predecessor of Chevrolet Caprice?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chevrolet_Caprice> <http://dbpedia.org/ontology/predecessor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "14,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chevrolet_Caprice",
			"label": "chevrolet caprice",
			"seq": "29,45"
		}]
	},
	{
		"id": "4842524c47d4401f85295095f0e9c4bf",
		"question": "What was recorded by Live in Detroit, MI and also palce of birth of the Bodhin Kjolhede?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri. <http://dbpedia.org/resource/Bodhin_Kjolhede> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "birth",
			"seq": "59,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Live_in_Detroit,_MI",
			"label": "detroit, live",
			"seq": "21,33"
		}, {
			"uri": "http://dbpedia.org/resource/Bodhin_Kjolhede",
			"label": "kjolhede bodhin",
			"seq": "72,86"
		}]
	},
	{
		"id": "85880ecb1ad440bf90276a657471d64b",
		"question": "Which animal is the mascot of the 1502nd Infantry Brigade (Ready Reserve) and Galatasaray Handball Team ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1502nd_Infantry_Brigade_(Ready_Reserve)> <http://dbpedia.org/property/mascot> ?uri. <http://dbpedia.org/resource/Galatasaray_Handball_Team> <http://dbpedia.org/property/mascot> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Animal>}",
		"sparql_id": "315",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Animal",
			"label": "animal",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1502nd_Infantry_Brigade_(Ready_Reserve)",
			"label": "reserve) infantry brigade 1502nd (ready",
			"seq": "34,72"
		}, {
			"uri": "http://dbpedia.org/resource/Galatasaray_Handball_Team",
			"label": "galatasaray handball team",
			"seq": "78,102"
		}]
	},
	{
		"id": "2c23a7087748489bacf1940fc992f121",
		"question": "What are other famous works of the writer who created the Sarah Jane Adventures?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/notableworks> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "works",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "works",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writer",
			"seq": "35,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Sarah_Jane_Adventures",
			"label": "adventures sarah jane",
			"seq": "58,78"
		}]
	},
	{
		"id": "996ec9ddd3fb4c8ea7715aea366c4f9d",
		"question": "Name a person who works in Open Society Foundation and has wife named Susan Weber Soros ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/Open_Society_Foundations> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Susan_Weber_Soros>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "weber",
			"seq": "76,80"
		}, {
			"uri": "http://dbpedia.org/property/spouse",
			"label": "susan",
			"seq": "70,74"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "7,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Open_Society_Foundations",
			"label": "foundation society",
			"seq": "32,49"
		}, {
			"uri": "http://dbpedia.org/resource/Susan_Weber_Soros",
			"label": "weber susan soros",
			"seq": "70,86"
		}]
	},
	{
		"id": "571ba10a407648e387c5b247b38c3175",
		"question": "Which key person of the Clinton Foundation is also the president of Edward J. Perkins ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edward_J._Perkins> <http://dbpedia.org/ontology/president> ?uri. <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/property/keyPeople> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "55,63"
		}, {
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "key",
			"seq": "6,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edward_J._Perkins",
			"label": "perkins edward",
			"seq": "68,81"
		}, {
			"uri": "http://dbpedia.org/resource/Clinton_Foundation",
			"label": "foundation clinton",
			"seq": "24,41"
		}]
	},
	{
		"id": "dd56b34774864c2f898e20007c193984",
		"question": "Name the sports played by Fr. Agnel Multipurpose School and Junior College?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fr._Agnel_Multipurpose_School_and_Junior_College> <http://dbpedia.org/ontology/sport> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fr._Agnel_Multipurpose_School_and_Junior_College",
			"label": "multipurpose college school junior agnel",
			"seq": "30,69"
		}]
	},
	{
		"id": "c44ba26fe4574a649b78f1dc00246dfd",
		"question": "Which athletics of Jaimatu Muslim Mindano is same as the genre of the Fritz Chess ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/ontology/athletics> ?uri. <http://dbpedia.org/resource/Fritz_Chess> <http://dbpedia.org/ontology/genre> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/athletics",
			"label": "athletics",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genre",
			"seq": "57,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Fritz_Chess",
			"label": "fritz chess",
			"seq": "70,80"
		}]
	},
	{
		"id": "268bbb26a2164faf852c530fc8ae5320",
		"question": "Which are the comics characters painted by Bruce Timm and created by  Paul Dini?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Bruce_Timm> . ?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Paul_Dini>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "created",
			"seq": "58,64"
		}, {
			"uri": "http://dbpedia.org/property/creators",
			"label": "created",
			"seq": "58,64"
		}, {
			"uri": "http://dbpedia.org/ontology/ComicsCharacter",
			"label": "characters",
			"seq": "21,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bruce_Timm",
			"label": "bruce timm",
			"seq": "43,52"
		}, {
			"uri": "http://dbpedia.org/resource/Paul_Dini",
			"label": "paul dini",
			"seq": "70,78"
		}]
	},
	{
		"id": "0dbe25e3f60b4874ad6bbbde0b92db79",
		"question": "What is a common nickname given to both Lyons Township high school and the wheaton college in massachusetts?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lyons_Township_High_School> <http://dbpedia.org/property/nickname> ?uri. <http://dbpedia.org/resource/Wheaton_College_(Massachusetts)> <http://dbpedia.org/property/nickname> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "17,24"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lyons_Township_High_School",
			"label": "township school lyons high",
			"seq": "40,65"
		}, {
			"uri": "http://dbpedia.org/resource/Wheaton_College_(Massachusetts)",
			"label": "massachusetts wheaton college",
			"seq": "75,103"
		}]
	},
	{
		"id": "b381525459274ec79b5b9168839aa7b4",
		"question": "In what battles did president Park Chung-hee participate?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Park_Chung-hee>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "chung-hee",
			"seq": "35,43"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "participate",
			"seq": "45,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Park_Chung-hee",
			"label": "chung-hee park",
			"seq": "30,43"
		}]
	},
	{
		"id": "2c54bb98872f4466b6a36426db7f553d",
		"question": "Is stephanie a female?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Stephanie> <http://dbpedia.org/property/gender> <http://dbpedia.org/resource/Female> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/gender",
			"label": "stephanie",
			"seq": "3,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stephanie",
			"label": "stephanie",
			"seq": "3,11"
		}, {
			"uri": "http://dbpedia.org/resource/Female",
			"label": "female",
			"seq": "15,20"
		}]
	},
	{
		"id": "f152c9e6bda2455781b4900277175979",
		"question": "List the scientists whose doctoral advisor is Ernest Rutherford and are known for Manhattan Project?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/doctoralAdvisor> <http://dbpedia.org/resource/Ernest_Rutherford> . ?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Manhattan_Project>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralAdvisor",
			"label": "doctoral advisor",
			"seq": "26,41"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "59,67"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientists",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ernest_Rutherford",
			"label": "rutherford ernest",
			"seq": "46,62"
		}, {
			"uri": "http://dbpedia.org/resource/Manhattan_Project",
			"label": "manhattan project",
			"seq": "82,98"
		}]
	},
	{
		"id": "b109f73fd21a466b80b5e96bbd12b4a3",
		"question": "What is the layout of the automobiles whose designer company is Olivier Boulay?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/Olivier_Boulay> . ?x <http://dbpedia.org/ontology/layout> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designCompany",
			"label": "company",
			"seq": "53,59"
		}, {
			"uri": "http://dbpedia.org/ontology/layout",
			"label": "layout",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "automobiles",
			"seq": "26,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Olivier_Boulay",
			"label": "olivier boulay",
			"seq": "64,77"
		}]
	},
	{
		"id": "ac1933135e72469c8eb4faa146c394db",
		"question": "Count the number of religions followed by BJP members.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Bharatiya_Janata_Party> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/party",
			"label": "by",
			"seq": "39,40"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "20,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bharatiya_Janata_Party",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0b31ffed88a540dc80c450e15236a114",
		"question": "How many people have been the head coach for Middlesbrough FC?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Middlesbrough_F.C.> . ?x <http://dbpedia.org/ontology/manager> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/club",
			"label": "fc",
			"seq": "59,60"
		}, {
			"uri": "http://dbpedia.org/ontology/manager",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Middlesbrough_F.C.",
			"label": "middlesbrough",
			"seq": "45,57"
		}]
	},
	{
		"id": "181669e0211e4d799df81237c72d9b39",
		"question": "Who was on the boards of Freedom of the City and Royal Society?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Freedom_of_the_City> . ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Royal_Society> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/board",
			"label": "boards",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/ontology/board",
			"label": "boards",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Freedom_of_the_City",
			"label": "freedom",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/resource/Royal_Society",
			"label": "society royal",
			"seq": "49,61"
		}]
	},
	{
		"id": "f8733a59b674426dac53692d6ac50bb0",
		"question": "What games are played at universities in Lanao Del Sur?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/state> <http://dbpedia.org/resource/Lanao_del_Sur> . ?x <http://dbpedia.org/ontology/athletics> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/state",
			"label": "at",
			"seq": "2,3"
		}, {
			"uri": "http://dbpedia.org/ontology/athletics",
			"label": "games",
			"seq": "5,9"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "25,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lanao_del_Sur",
			"label": "lanao sur del",
			"seq": "41,53"
		}]
	},
	{
		"id": "07ac58be90694523be7a9ad593d82ef4",
		"question": "What is the almamater of the president whose vice president was Enrique Jos Varona?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/Enrique_Jos\u00e9_Varona> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/vicePresident",
			"label": "president",
			"seq": "29,37"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "almamater",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Enrique_Jos\u00e9_Varona",
			"label": "enrique varona jos",
			"seq": "64,81"
		}]
	},
	{
		"id": "d3c142c23fcd445e8acfe1320c5cddfb",
		"question": "What is the architecture of First National Bank and Trust Building (Lima, Ohio) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/First_National_Bank_and_Trust_Building_(Lima,_Ohio)> <http://dbpedia.org/ontology/architecturalStyle> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architecturalStyle",
			"label": "architecture",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/First_National_Bank_and_Trust_Building_(Lima,_Ohio)",
			"label": "national building (lima, trust ohio)",
			"seq": "34,69"
		}]
	},
	{
		"id": "30b207243bc34347a7cc38bb8cb88fd0",
		"question": "Directors of which movies are buried in Ronda?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Ronda> . ?uri <http://dbpedia.org/property/director> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "ronda",
			"seq": "40,44"
		}, {
			"uri": "http://dbpedia.org/property/director",
			"label": "directors",
			"seq": "0,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ronda",
			"label": "ronda",
			"seq": "40,44"
		}]
	},
	{
		"id": "c1958e8eaa264ab58264e8dbc6849720",
		"question": "In which states does the river flow whose left tributary is Toms Creek?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Toms_Creek_(Monocacy_River)> <http://dbpedia.org/ontology/leftTributary> ?x . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leftTributary",
			"label": "tributary left",
			"seq": "42,55"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "states",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toms_Creek_(Monocacy_River)",
			"label": "river creek toms",
			"seq": "25,40"
		}]
	},
	{
		"id": "093a1659d85d4b9cab08915271c4e918",
		"question": "Which animator of the The Skeleton Dance is also the director of The Haunted House (1929 film) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> ?uri. <http://dbpedia.org/resource/The_Haunted_House_(1929_film)> <http://dbpedia.org/ontology/director> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/animator",
			"label": "animator",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/director",
			"label": "director",
			"seq": "53,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Skeleton_Dance",
			"label": "skeleton dance",
			"seq": "26,39"
		}, {
			"uri": "http://dbpedia.org/resource/The_Haunted_House_(1929_film)",
			"label": "haunted house film) (1929",
			"seq": "69,93"
		}]
	},
	{
		"id": "7515efe0523a46909195354f0fb0838b",
		"question": "What basketball league's champion is Golden State Warriors",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/champion> <http://dbpedia.org/resource/Golden_State_Warriors>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballLeague>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/champion",
			"label": "champion",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballLeague",
			"label": "basketball",
			"seq": "5,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Golden_State_Warriors",
			"label": "warriors golden state",
			"seq": "37,57"
		}]
	},
	{
		"id": "190465152dd44639aab83ac6b0e1d0fa",
		"question": "Name the movie in which Vangelis gave the music and Jordan was the cinematographer ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Vangelis> . ?uri <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "42,46"
		}, {
			"uri": "http://dbpedia.org/ontology/cinematography",
			"label": "cinematographer",
			"seq": "67,81"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "in",
			"seq": "15,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vangelis",
			"label": "vangelis",
			"seq": "24,31"
		}, {
			"uri": "http://dbpedia.org/resource/Jordan_Cronenweth",
			"label": "jordan",
			"seq": "52,57"
		}]
	},
	{
		"id": "09c521f0f65e49c5b02014c8d62cb12f",
		"question": "Which high school of the Jerry Tagge also was the palce hwer Temptation Waits was recorded ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerry_Tagge> <http://dbpedia.org/property/highSchool> ?uri. <http://dbpedia.org/resource/Temptation_Waits> <http://dbpedia.org/ontology/recordedIn> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/highSchool",
			"label": "school high",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded",
			"seq": "82,89"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerry_Tagge",
			"label": "tagge jerry",
			"seq": "25,35"
		}, {
			"uri": "http://dbpedia.org/resource/Temptation_Waits",
			"label": "temptation waits",
			"seq": "61,76"
		}]
	},
	{
		"id": "a6904e9b6e164493af1fde284d08f558",
		"question": "How many people won the Gold Medal of the Royal Astronomical Society?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prizes",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society",
			"label": "astronomical society royal medal",
			"seq": "29,60"
		}]
	},
	{
		"id": "33984af5c01b4427b7af87f294ee0f1c",
		"question": "Stockholm is the HQ of how many things?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Stockholm>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "hq",
			"seq": "17,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stockholm",
			"label": "stockholm",
			"seq": "0,8"
		}]
	},
	{
		"id": "6289a18178e44e02b341c0614bad4c81",
		"question": "With whom were the engagements of Alpine Brigade Taurinense?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alpine_Brigade_Taurinense> <http://dbpedia.org/ontology/battle> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "alpine",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alpine_Brigade_Taurinense",
			"label": "taurinense brigade alpine",
			"seq": "34,58"
		}]
	},
	{
		"id": "6adadd03b3254e5386b3c4bd1680b99d",
		"question": "Who is married to Susan Weber Soros?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Susan_Weber_Soros>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "susan",
			"seq": "18,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Susan_Weber_Soros",
			"label": "weber susan soros",
			"seq": "18,34"
		}]
	},
	{
		"id": "a4572121e3a84ab491141bad9959a94e",
		"question": "In how many different places have US people died?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "places",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "places",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Location",
			"label": "in",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ac851fcc762c4a0abda96bed81bef120",
		"question": "What is the state of origin of Abbas Jafri ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Abbas_Jafri> <http://dbpedia.org/ontology/stateOfOrigin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "origin state",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Abbas_Jafri",
			"label": "jafri abbas",
			"seq": "31,41"
		}]
	},
	{
		"id": "fe5cca52ae464cf8901728f58148bac7",
		"question": "Name the battle fought by the military persons who also fought in Algeria ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Algeria> . ?x <http://dbpedia.org/property/battles> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battle",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "battle",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryPerson",
			"label": "military",
			"seq": "30,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Algeria",
			"label": "algeria",
			"seq": "66,72"
		}]
	},
	{
		"id": "8a3ce84f8932457284713d13f23eae30",
		"question": "does the journal of cancer have the creative commons license?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Journal_of_Cancer> <http://dbpedia.org/property/license> <http://dbpedia.org/resource/Creative_Commons_license> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/license",
			"label": "license",
			"seq": "53,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Journal_of_Cancer",
			"label": "journal cancer",
			"seq": "9,22"
		}, {
			"uri": "http://dbpedia.org/resource/Creative_Commons_license",
			"label": "creative license commons",
			"seq": "36,59"
		}]
	},
	{
		"id": "f38d40e812a24ed08486f86b89c75ca7",
		"question": "Terry Pratchett has written about how many topics?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Terry_Pratchett> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "about",
			"seq": "28,32"
		}, {
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "topics",
			"seq": "43,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Terry_Pratchett",
			"label": "pratchett terry",
			"seq": "0,14"
		}]
	},
	{
		"id": "43e2baff638546e2a1d68bc013f30e65",
		"question": "What is debut team of the baseball players who died in Los Angeles?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?x <http://dbpedia.org/property/debutteam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "players",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut team",
			"seq": "8,17"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballPlayer",
			"label": "baseball",
			"seq": "26,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Los_Angeles",
			"label": "angeles",
			"seq": "59,65"
		}]
	},
	{
		"id": "b4ccb08854ad40d48a962e5bc8319a51",
		"question": "Who are the associated musical artist of the  artists of band Shorty Rogers?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Shorty_Rogers> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated band",
			"seq": "12,26"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated musical artist",
			"seq": "12,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shorty_Rogers",
			"label": "shorty rogers",
			"seq": "62,74"
		}]
	},
	{
		"id": "2453d5655cc8407182387fe5d0514477",
		"question": "Martin Ferguson and Mike Kelly served under which aussie PM?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Ferguson> <http://dbpedia.org/property/primeminister> ?uri. <http://dbpedia.org/resource/Mike_Kelly_(Australian_politician)> <http://dbpedia.org/property/primeminister> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "mike",
			"seq": "20,23"
		}, {
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "mike",
			"seq": "20,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Martin_Ferguson",
			"label": "ferguson martin",
			"seq": "0,14"
		}, {
			"uri": "http://dbpedia.org/resource/Mike_Kelly_(Australian_politician)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d999286c2f1b4750b667f53ecdf21be0",
		"question": "What is the region of the ethnic group which speaks the language of Arkansas?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Arkansas> <http://dbpedia.org/ontology/language> ?x . ?x <http://dbpedia.org/property/region> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/language",
			"label": "language",
			"seq": "56,63"
		}, {
			"uri": "http://dbpedia.org/property/region",
			"label": "region",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/EthnicGroup",
			"label": "ethnic group",
			"seq": "26,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arkansas",
			"label": "arkansas",
			"seq": "68,75"
		}]
	},
	{
		"id": "e0ad5d9267d544bea41199ce7045fc36",
		"question": "Who has fought in the conflicts around the Mississippi river?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/place> <http://dbpedia.org/resource/Mississippi_River> . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/place",
			"label": "the",
			"seq": "18,20"
		}, {
			"uri": "http://dbpedia.org/property/combatant",
			"label": "conflicts",
			"seq": "22,30"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "conflicts",
			"seq": "22,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mississippi_River",
			"label": "mississippi river",
			"seq": "43,59"
		}]
	},
	{
		"id": "95ad975ecd3f4f8a96cdc1d5ad089e0a",
		"question": "List the relegion of tani University which is also the life stance of udit Raj ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/\u014ctani_University> <http://dbpedia.org/property/affiliation> ?uri. <http://dbpedia.org/resource/Udit_Raj> <http://dbpedia.org/ontology/religion> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "relegion",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "relegion",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/\u014ctani_University",
			"label": "university tani",
			"seq": "21,35"
		}, {
			"uri": "http://dbpedia.org/resource/Udit_Raj",
			"label": "udit raj",
			"seq": "70,77"
		}]
	},
	{
		"id": "33560cb70a394c659afde50ea4d2fa43",
		"question": "Does the San Macros River start in Texas?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/San_Marcos_River> <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Texas> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceMountain",
			"label": "san",
			"seq": "9,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Marcos_River",
			"label": "river",
			"seq": "20,24"
		}, {
			"uri": "http://dbpedia.org/resource/Texas",
			"label": "texas",
			"seq": "35,39"
		}]
	},
	{
		"id": "a6a548a2d1ac484d8b94cd09ecf53768",
		"question": "Which university's graduates have worked in the Quartermaster corps?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/Quartermaster_Corps_(United_States_Army)> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "university's",
			"seq": "6,17"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "graduates",
			"seq": "19,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Quartermaster_Corps_(United_States_Army)",
			"label": "quartermaster",
			"seq": "48,60"
		}]
	},
	{
		"id": "b19ab8c472b24e6b8dd6a089d1b46d61",
		"question": "What is the mascot of the military unit of David Prowse?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/David_Prowse_(politician)> <http://dbpedia.org/property/branch> ?x . ?x <http://dbpedia.org/property/mascot> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "mascot",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Prowse_(politician)",
			"label": "prowse david",
			"seq": "43,54"
		}]
	},
	{
		"id": "551b48df0734464987251916a5e96362",
		"question": "Which music band made Take Me There, and to which Tedd Riley was associated?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)> <http://dbpedia.org/ontology/musicalBand> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated",
			"seq": "65,74"
		}, {
			"uri": "http://dbpedia.org/ontology/musicalBand",
			"label": "music band",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Teddy_Riley",
			"label": "riley tedd",
			"seq": "50,59"
		}, {
			"uri": "http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "2e6a230473e948a29d59e965ed724a74",
		"question": "Mouse Morris' horses have raced in which races?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Mouse_Morris> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/trainer",
			"label": "races",
			"seq": "41,45"
		}, {
			"uri": "http://dbpedia.org/property/race",
			"label": "races",
			"seq": "41,45"
		}, {
			"uri": "http://dbpedia.org/ontology/Horse",
			"label": "horses",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mouse_Morris",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c8eb320ce07140629b07a873aa8a1f66",
		"question": "Does Silver Airways have a hub at the Washington Dulles International Airport?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Silver_Airways> <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Washington_Dulles_International_Airport> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hubAirport",
			"label": "airport hub",
			"seq": "27,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Silver_Airways",
			"label": "airways silver",
			"seq": "5,18"
		}, {
			"uri": "http://dbpedia.org/resource/Washington_Dulles_International_Airport",
			"label": "international washington airport dulles",
			"seq": "38,76"
		}]
	},
	{
		"id": "07aeedead69840918b458b085e80e817",
		"question": "What is the profession of William Luther Hill ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "profession",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Luther_Hill",
			"label": "william luther hill",
			"seq": "26,44"
		}]
	},
	{
		"id": "a47123efd7d64ca9aa928cfb92693d4d",
		"question": "What religion is Kabir Suman from?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/birthName> <http://dbpedia.org/resource/Kabir_Suman> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthName",
			"label": "kabir",
			"seq": "17,21"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "religion",
			"seq": "5,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kabir_Suman",
			"label": "suman kabir",
			"seq": "17,27"
		}]
	},
	{
		"id": "6050cd3ccfcc4dfdb3d70fce8b1c3c92",
		"question": "What are the source of the streams whose one of the source is Calera, Oklahoma?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Calera,_Oklahoma> . ?x <http://dbpedia.org/ontology/source> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stream>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/source",
			"label": "source",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/source",
			"label": "source",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Stream",
			"label": "streams",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Calera,_Oklahoma",
			"label": "oklahoma calera,",
			"seq": "62,77"
		}]
	},
	{
		"id": "7e818c143d0646119c7a6274c4471970",
		"question": "What company made the front row and distributed big top ballet?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Big_Top_Ballet> <http://dbpedia.org/property/distributor> ?uri. <http://dbpedia.org/resource/Front_Row_(software)> <http://dbpedia.org/property/developer> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "316",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "36,46"
		}, {
			"uri": "http://dbpedia.org/property/developer",
			"label": "top",
			"seq": "52,54"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Big_Top_Ballet",
			"label": "ballet top big",
			"seq": "48,61"
		}, {
			"uri": "http://dbpedia.org/resource/Front_Row_(software)",
			"label": "front row",
			"seq": "22,30"
		}]
	},
	{
		"id": "176e2c67c12547b9bad7e6dff1452cb4",
		"question": "What is the serving railway line of Rostov-Glavny ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rostov-Glavny> <http://dbpedia.org/ontology/servingRailwayLine> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/servingRailwayLine",
			"label": "serving railway",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rostov-Glavny",
			"label": "rostov-glavny",
			"seq": "36,48"
		}]
	},
	{
		"id": "7ba27bb9e46648a595380f3277ca4f2f",
		"question": "Which company is located in Harris County, Texas?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Harris_County,_Texas>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "located",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harris_County,_Texas",
			"label": "county, harris texas",
			"seq": "28,47"
		}]
	},
	{
		"id": "c588fe59d877476892d39589f6172632",
		"question": "Name the alma mater of the scientist famous for Email filtering ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Email_filtering> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "for",
			"seq": "44,46"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "27,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Email_filtering",
			"label": "filtering",
			"seq": "54,62"
		}]
	},
	{
		"id": "9b31b9b3c89f471bafa57e35da9f566b",
		"question": "What is the genre for the developer of Interplay Entertainment?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/ontology/genre> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "developer",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genre",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Interplay_Entertainment",
			"label": "entertainment interplay",
			"seq": "39,61"
		}]
	},
	{
		"id": "b01d261027ab4a75ad6a18e3a4808236",
		"question": "Name the team which is owned by Dafenham wind turbines and stood first in 1967 mexican Grand Prix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri. <http://dbpedia.org/resource/Dagenham_wind_turbines> <http://dbpedia.org/property/owner> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstTeam",
			"label": "first team",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owned",
			"seq": "23,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1967_Mexican_Grand_Prix",
			"label": "mexican grand prix 1967",
			"seq": "74,96"
		}, {
			"uri": "http://dbpedia.org/resource/Dagenham_wind_turbines",
			"label": "turbines",
			"seq": "46,53"
		}]
	},
	{
		"id": "c885120c181e4448adfcbe1da45585fb",
		"question": "Tell me the number of writers whose works have been recorded in Criteria Studios?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/Criteria_Studios> . ?x <http://dbpedia.org/property/writer> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded",
			"seq": "52,59"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "writers",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "writers",
			"seq": "22,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Criteria_Studios",
			"label": "criteria studios",
			"seq": "64,79"
		}]
	},
	{
		"id": "46b80622ce374a06a4553cc91038560a",
		"question": "What is the official residence of Sarah Kazemy ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sarah_Kazemy> <http://dbpedia.org/property/residence> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "residence",
			"seq": "21,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sarah_Kazemy",
			"label": "kazemy sarah",
			"seq": "34,45"
		}]
	},
	{
		"id": "f3576d71ce1f48a6b87e8fb5a3713b6e",
		"question": "List all crafts of the people whose one of the profession is Kingdom of Naples ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Kingdom_of_Naples> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "profession",
			"seq": "47,56"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "profession",
			"seq": "47,56"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "profession",
			"seq": "47,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kingdom_of_Naples",
			"label": "kingdom naples",
			"seq": "61,74"
		}]
	},
	{
		"id": "94437269d7074fa589ba7d6325c07e24",
		"question": "Which state of Tendaho dam is the headquarters of Ethiopian People's revolutionary democratic Front located ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ethiopian_People's_Revolutionary_Democratic_Front> <http://dbpedia.org/property/headquarters> ?uri. <http://dbpedia.org/resource/Tendaho_Dam> <http://dbpedia.org/property/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "34,45"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "revolutionary",
			"seq": "69,81"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ethiopian_People's_Revolutionary_Democratic_Front",
			"label": "revolutionary democratic ethiopian people's",
			"seq": "50,92"
		}, {
			"uri": "http://dbpedia.org/resource/Tendaho_Dam",
			"label": "tendaho dam",
			"seq": "15,25"
		}]
	},
	{
		"id": "d3f64fbb4efc4bf583de0d8ffe4be68d",
		"question": "Was Apollo 11 a mission of Niel Armstrong?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Neil_Armstrong> <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Apollo_11> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mission",
			"label": "mission",
			"seq": "16,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neil_Armstrong",
			"label": "armstrong",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/resource/Apollo_11",
			"label": "apollo 11",
			"seq": "4,12"
		}]
	},
	{
		"id": "093e9fad547341e2a4784bd946f8d8cf",
		"question": "What are the movies whose music composer uses a Hammond organ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Hammond_organ> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/instrument",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer music",
			"seq": "26,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "music",
			"seq": "26,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hammond_organ",
			"label": "hammond organ",
			"seq": "48,60"
		}]
	},
	{
		"id": "d610ad560d0a413083759ecc7b270c9e",
		"question": "Did Paul Weatherwax an editor of Behave Yourself?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Behave_Yourself!> <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Paul_Weatherwax> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editing",
			"label": "editor",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Behave_Yourself!",
			"label": "yourself behave",
			"seq": "33,47"
		}, {
			"uri": "http://dbpedia.org/resource/Paul_Weatherwax",
			"label": "weatherwax paul",
			"seq": "4,18"
		}]
	},
	{
		"id": "f2fd76539712496f89d28c3d4448d5d8",
		"question": "What ingredients are used in preparing the dish of Ragout fin?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ragout_fin> <http://dbpedia.org/ontology/ingredient> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredients",
			"seq": "5,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ragout_fin",
			"label": "ragout fin",
			"seq": "51,60"
		}]
	},
	{
		"id": "f2e6e08d863b45a0b2fde08ff71c4d93",
		"question": "What religion do the Wickramabahu Centeral College and Neungin High School both follow?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)> <http://dbpedia.org/property/religiousAffiliation> ?uri. <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religiousAffiliation",
			"label": "religion",
			"seq": "5,12"
		}, {
			"uri": "http://dbpedia.org/property/religiousAffiliation",
			"label": "religion",
			"seq": "5,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)",
			"label": "wickramabahu college",
			"seq": "21,40"
		}, {
			"uri": "http://dbpedia.org/resource/Neungin_High_School",
			"label": "neungin school high",
			"seq": "55,73"
		}]
	},
	{
		"id": "900f0ac67c2d4655b104b6664838d60c",
		"question": "How many television shows are broadcasted on Fox Broadcasting Company?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/channel",
			"label": "company",
			"seq": "62,68"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fox_Broadcasting_Company",
			"label": "broadcasting",
			"seq": "49,60"
		}]
	},
	{
		"id": "3fd0705b3a18418ca9748691d9ad8be4",
		"question": "What is the fictional character which belongs to families of Darth Vader and Padm Amidala?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/family> <http://dbpedia.org/resource/Darth_Vader> . ?uri <http://dbpedia.org/property/family> <http://dbpedia.org/resource/Padm\u00e9_Amidala> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/family",
			"label": "families",
			"seq": "49,56"
		}, {
			"uri": "http://dbpedia.org/property/family",
			"label": "families",
			"seq": "49,56"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "12,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Darth_Vader",
			"label": "vader darth",
			"seq": "61,71"
		}, {
			"uri": "http://dbpedia.org/resource/Padm\u00e9_Amidala",
			"label": "amidala padm",
			"seq": "77,88"
		}]
	},
	{
		"id": "cff31d6e2dee48de9fc46d0ecb40ced5",
		"question": "Where Everybody knows you is the theme album of which show ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name> <http://dbpedia.org/ontology/album> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/album",
			"label": "album",
			"seq": "39,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name",
			"label": "everybody where knows",
			"seq": "0,20"
		}]
	},
	{
		"id": "2d605f84b9af4256b26d59a784cee86e",
		"question": "Does Ronaldinho play in the brazil's under 23 team?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ronaldinho> <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Brazil_national_under-23_football_team> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "team",
			"seq": "46,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ronaldinho",
			"label": "ronaldinho",
			"seq": "5,14"
		}, {
			"uri": "http://dbpedia.org/resource/Brazil_national_under-23_football_team",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c37f438af3ac4daf95e2ddf9341f360d",
		"question": "What are some rivers in Zambia which have a dam on them?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/country> <http://dbpedia.org/resource/Zambia> . ?x <http://dbpedia.org/ontology/river> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Dam>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/country",
			"label": "on",
			"seq": "48,49"
		}, {
			"uri": "http://dbpedia.org/ontology/river",
			"label": "rivers",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Dam",
			"label": "dam",
			"seq": "44,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zambia",
			"label": "zambia",
			"seq": "24,29"
		}]
	},
	{
		"id": "4e26840031c64a15a7abe3e1330a50b7",
		"question": "Which office's people have died on the US Route 165?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/U.S._Route_165> . ?x <http://dbpedia.org/property/office> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "people",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/property/office",
			"label": "office's",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/U.S._Route_165",
			"label": "route 165",
			"seq": "42,50"
		}]
	},
	{
		"id": "eea52cce6ad445d8a6611b1b4d4538e7",
		"question": "Name some shows similar to the one whose theme song is made by Murray Gold.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Murray_Gold> . ?uri <http://dbpedia.org/ontology/related> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "theme",
			"seq": "41,45"
		}, {
			"uri": "http://dbpedia.org/ontology/related",
			"label": "the",
			"seq": "27,29"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "10,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Murray_Gold",
			"label": "murray",
			"seq": "63,68"
		}]
	},
	{
		"id": "5515c31e477642508f2333e66a7124e6",
		"question": "What is the order of George Frisbie Hoar?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_Frisbie_Hoar> <http://dbpedia.org/property/order> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/order",
			"label": "order",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_Frisbie_Hoar",
			"label": "frisbie george hoar",
			"seq": "21,39"
		}]
	},
	{
		"id": "db38999d5a924a30bf35df8596c3cedc",
		"question": "Who are the opponents of graduates of the Middle Temple?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/Middle_Temple> . ?x <http://dbpedia.org/ontology/opponent> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "graduates",
			"seq": "25,33"
		}, {
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponents",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Middle_Temple",
			"label": "temple middle",
			"seq": "42,54"
		}]
	},
	{
		"id": "458d42b5dd84407f9c58816fa06defdd",
		"question": "How many movies were directed by the graduate of Burbank High School ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/Burbank_High_School_(Burbank,_California)> . ?uri <http://dbpedia.org/property/director> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "graduate",
			"seq": "37,44"
		}, {
			"uri": "http://dbpedia.org/property/director",
			"label": "directed",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "46,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Burbank_High_School_(Burbank,_California)",
			"label": "burbank school high",
			"seq": "49,67"
		}]
	},
	{
		"id": "a71853071a1b40a59c6ce4714b1ef5ee",
		"question": "What is on the border of the places which fall under crook county municipality, oregon?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/municipality> <http://dbpedia.org/resource/Crook_County,_Oregon> . ?x <http://dbpedia.org/ontology/border> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/municipality",
			"label": "municipality,",
			"seq": "66,78"
		}, {
			"uri": "http://dbpedia.org/ontology/border",
			"label": "border",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Crook_County,_Oregon",
			"label": "oregon county crook",
			"seq": "53,71"
		}]
	},
	{
		"id": "4795bf86bb3c409aa3c9750d6092aa2f",
		"question": "Name the company whose products is Boeing F/A-18E/F Super Hornet and key person is Raymond Conner?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet> . ?uri <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Raymond_Conner>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "products",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet",
			"label": "hornet super",
			"seq": "52,63"
		}, {
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "person key",
			"seq": "69,78"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Raymond_Conner",
			"label": "raymond conner",
			"seq": "83,96"
		}]
	},
	{
		"id": "44960e14ef46436fbcc7c4d75318662a",
		"question": "Who are some people whose relation is hqed in Gold Base?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Gold_Base> . ?uri <http://dbpedia.org/ontology/religion> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "are",
			"seq": "4,6"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "relation",
			"seq": "26,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gold_Base",
			"label": "gold base",
			"seq": "46,54"
		}]
	},
	{
		"id": "a57fac7c18cc43cf9acdec289160a3f6",
		"question": "Name the common architecture of the Grand Serail of Aleppo and Shaheed Minar, Kolkata ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Grand_Serail_of_Aleppo> <http://dbpedia.org/ontology/architecturalStyle> ?uri. <http://dbpedia.org/resource/Shaheed_Minar,_Kolkata> <http://dbpedia.org/ontology/architecturalStyle> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architecturalStyle",
			"label": "architecture",
			"seq": "16,27"
		}, {
			"uri": "http://dbpedia.org/ontology/architecturalStyle",
			"label": "architecture",
			"seq": "16,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Grand_Serail_of_Aleppo",
			"label": "serail aleppo grand",
			"seq": "36,54"
		}, {
			"uri": "http://dbpedia.org/resource/Shaheed_Minar,_Kolkata",
			"label": "shaheed kolkata minar,",
			"seq": "63,84"
		}]
	},
	{
		"id": "f08ad0e14fc34ee599e3747215483fca",
		"question": "Which New Mexico company provides One Drive as a service ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_Mexico> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/OneDrive>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "company",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "service",
			"seq": "49,55"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "17,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_Mexico",
			"label": "mexico new",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/resource/OneDrive",
			"label": "drive one",
			"seq": "34,42"
		}]
	},
	{
		"id": "d91e9b0f8f0b4a2e8ebfa336a54bdde1",
		"question": "Name the company founded in New Mexico and provides Outlook.com as services ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_Mexico> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Outlook.com>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "67,74"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_Mexico",
			"label": "mexico new",
			"seq": "28,37"
		}, {
			"uri": "http://dbpedia.org/resource/Outlook.com",
			"label": "outlook.com",
			"seq": "52,62"
		}]
	},
	{
		"id": "8cc77d4272db4da5a60221753631cf13",
		"question": "Who operates the bridges designed by Malaysian PWD?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Malaysian_Public_Works_Department> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/ontology/maintainedBy",
			"label": "designed",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridges",
			"seq": "17,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Malaysian_Public_Works_Department",
			"label": "malaysian",
			"seq": "37,45"
		}]
	},
	{
		"id": "781e6cc08f044c428d77cc3790f657eb",
		"question": "Who edited Easy street ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Easy_Street_(film)> <http://dbpedia.org/ontology/editing> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "edited",
			"seq": "4,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Easy_Street_(film)",
			"label": "street easy",
			"seq": "11,21"
		}]
	},
	{
		"id": "8365e95b808d440cac8c8e713017ab1c",
		"question": "Among which city where Geography Club played also had the Kenticky Cycle ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Geography_Club_(play)> <http://dbpedia.org/property/place> ?uri. <http://dbpedia.org/resource/The_Kentucky_Cycle> <http://dbpedia.org/property/place> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/place",
			"label": "played",
			"seq": "38,43"
		}, {
			"uri": "http://dbpedia.org/property/place",
			"label": "played",
			"seq": "38,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Geography_Club_(play)",
			"label": "geography club",
			"seq": "23,36"
		}, {
			"uri": "http://dbpedia.org/resource/The_Kentucky_Cycle",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "13b47c5d160c4d96ad28e6814def4b42",
		"question": "Who was the animator of both Tommy Tucker's Tooth and Skeleton Dance?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tommy_Tucker's_Tooth> <http://dbpedia.org/property/animator> ?uri. <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/animator",
			"label": "animator",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/animator",
			"label": "animator",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tommy_Tucker's_Tooth",
			"label": "tucker's tooth tommy",
			"seq": "29,48"
		}, {
			"uri": "http://dbpedia.org/resource/The_Skeleton_Dance",
			"label": "skeleton dance the",
			"seq": "8,25"
		}]
	},
	{
		"id": "16bea2bafce74ca2990221d956a47fa0",
		"question": "Name everyone working for a company owned by Roman Abramovich.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Roman_Abramovich> . ?uri <http://dbpedia.org/ontology/occupation> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningCompany",
			"label": "company",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "company",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Roman_Abramovich",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1f97981f73884227b98d2e193e4793c4",
		"question": "What is the nationality of the economist who is one of the important people in the Foundation for Economic Education?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Foundation_for_Economic_Education> <http://dbpedia.org/ontology/keyPerson> ?x . ?x <http://dbpedia.org/ontology/nationality> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "people",
			"seq": "69,74"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Economist",
			"label": "economist",
			"seq": "31,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Foundation_for_Economic_Education",
			"label": "foundation education economic",
			"seq": "83,111"
		}]
	},
	{
		"id": "60918268c9dc4bc9a944056cf08df4b5",
		"question": "Name the rivers which originate from within Pittsburg?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Pittsburg,_New_Hampshire> . ?uri <http://dbpedia.org/ontology/source> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "within",
			"seq": "37,42"
		}, {
			"uri": "http://dbpedia.org/ontology/source",
			"label": "pittsburg",
			"seq": "44,52"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pittsburg,_New_Hampshire",
			"label": "pittsburg",
			"seq": "44,52"
		}]
	},
	{
		"id": "151f565ef0bc4267b5db57b098e82284",
		"question": "What is the place of death of the gymnast who was the silver medalist at the 1956 Summer Olympics Men's rings ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Gymnastics_at_the_1956_Summer_Olympics_\u2013_Men's_rings> <http://dbpedia.org/ontology/silverMedalist> ?x . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/silverMedalist",
			"label": "medalist silver",
			"seq": "54,68"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "place death",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gymnastics_at_the_1956_Summer_Olympics_\u2013_Men's_rings",
			"label": "olympics gymnast summer rings men's",
			"seq": "34,68"
		}]
	},
	{
		"id": "8b983e3a0771427fa876d31b4806a6a2",
		"question": "What religion are the characters of Absolutely Fabulous from?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/series> <http://dbpedia.org/resource/Absolutely_Fabulous> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/series",
			"label": "are",
			"seq": "14,16"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "5,12"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "characters",
			"seq": "22,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Absolutely_Fabulous",
			"label": "absolutely fabulous",
			"seq": "36,54"
		}]
	},
	{
		"id": "079c81f8aa684b9c90a281e08a9c84d5",
		"question": "Where does the river begin whose left tributary is Krapanski Potok?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Krapanski_Potok> . ?x <http://dbpedia.org/ontology/source> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leftTributary",
			"label": "tributary left",
			"seq": "33,46"
		}, {
			"uri": "http://dbpedia.org/ontology/source",
			"label": "does",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Krapanski_Potok",
			"label": "krapanski potok",
			"seq": "51,65"
		}]
	},
	{
		"id": "fe429424b0b34adda047a3ba868f0489",
		"question": "Name all the soccer players who played in a under 18 club for La Liga?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/La_Liga> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "played",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "club",
			"seq": "53,56"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerPlayer",
			"label": "soccer",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/La_Liga",
			"label": "liga la",
			"seq": "21,27"
		}]
	},
	{
		"id": "53e44c387e97481c93a92afe3bf4dd57",
		"question": "How many people have coached the players of Middlesbrough FC?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Middlesbrough_F.C.> . ?x <http://dbpedia.org/ontology/manager> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "the",
			"seq": "29,31"
		}, {
			"uri": "http://dbpedia.org/ontology/manager",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "players",
			"seq": "33,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Middlesbrough_F.C.",
			"label": "middlesbrough",
			"seq": "44,56"
		}]
	},
	{
		"id": "fc4ee0bdf9ae4487ac6fc5f5dbdf452c",
		"question": "Was Robert Burns from the Romanticist School of thought?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Robert_Burns> <http://dbpedia.org/property/movement> <http://dbpedia.org/resource/Romanticism> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/movement",
			"label": "robert",
			"seq": "4,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Burns",
			"label": "robert burns",
			"seq": "4,15"
		}, {
			"uri": "http://dbpedia.org/resource/Romanticism",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "519d34ace38b4ea093d283425bef109e",
		"question": "Name the sea whose inflow is Kemijoki and outflow is Danish straits?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/inflow> <http://dbpedia.org/resource/Kemijoki> . ?uri <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Danish_straits>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/inflow",
			"label": "inflow",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/property/outflow",
			"label": "outflow",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "9,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kemijoki",
			"label": "kemijoki",
			"seq": "29,36"
		}, {
			"uri": "http://dbpedia.org/resource/Danish_straits",
			"label": "straits danish",
			"seq": "53,66"
		}]
	},
	{
		"id": "2d254f44524040f49a25092be3e4f942",
		"question": "Count the number of region of AN/FSQ-7 Combat Direction Central?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/AN/FSQ-7_Combat_Direction_Central> <http://dbpedia.org/ontology/region> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/resource/AN/FSQ-7_Combat_Direction_Central",
			"label": "direction central combat",
			"seq": "39,62"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "region",
			"seq": "20,25"
		}],
		"entity mapping": []
	},
	{
		"id": "1f6748d64d834a7f9f8a849a841bb8fb",
		"question": "Give me a count of the services by the company which provides Data center as the services ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Data_center_services> . ?x <http://dbpedia.org/property/services> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "23,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Data_center_services",
			"label": "services center",
			"seq": "23,37"
		}]
	},
	{
		"id": "9e8d0173dbb749c3a9861e1887894afe",
		"question": "Where was Special 26 recorded ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Special_26> <http://dbpedia.org/property/recorded> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/recorded",
			"label": "recorded",
			"seq": "21,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Special_26",
			"label": "special 26",
			"seq": "10,19"
		}]
	},
	{
		"id": "ade7e2b4ed804a43a9a124fe2f3e4efc",
		"question": "List the awards won by the wife of Ingrid von Rosen.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ingrid_von_Rosen> <http://dbpedia.org/property/spouse> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "rosen.",
			"seq": "46,51"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ingrid_von_Rosen",
			"label": "ingrid",
			"seq": "35,40"
		}]
	},
	{
		"id": "6d69d75249944430948e09c0741a01b2",
		"question": "List the people with Scientology as their religious belief?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Scientology>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religious",
			"seq": "42,50"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Scientology",
			"label": "scientology",
			"seq": "21,31"
		}]
	},
	{
		"id": "3720d9f7161b4dbba314e15c50a74922",
		"question": "List common systems are developed by of the Google Videos and written by of the Google Web Toolkit ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Videos> <http://dbpedia.org/property/developer> ?uri. <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "developed",
			"seq": "24,32"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "the",
			"seq": "40,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Google_Videos",
			"label": "videos google",
			"seq": "44,56"
		}, {
			"uri": "http://dbpedia.org/resource/Google_Web_Toolkit",
			"label": "toolkit google web",
			"seq": "44,61"
		}]
	},
	{
		"id": "978a09e0cd01477cb3b794cae035132a",
		"question": "Which program was on NBC network with executive producer as Glen and Les Charles?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/NBC> . ?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Glen_and_Les_Charles>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "38,55"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "les",
			"seq": "69,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/NBC",
			"label": "nbc",
			"seq": "21,23"
		}, {
			"uri": "http://dbpedia.org/resource/Glen_and_Les_Charles",
			"label": "charles glen",
			"seq": "60,71"
		}]
	},
	{
		"id": "4311e02017fd4760a06569b9821a2411",
		"question": "Name hte builder of Baku Olympic Stadium ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Baku_Olympic_Stadium_(BOS)> <http://dbpedia.org/ontology/builder> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "builder",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Baku_Olympic_Stadium_(BOS)",
			"label": "stadium olympic baku",
			"seq": "20,39"
		}]
	},
	{
		"id": "4294fa2db28d45f1933f8c4347b84964",
		"question": "Who is the animator of Tommy Tucker's Tooth ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tommy_Tucker's_Tooth> <http://dbpedia.org/property/animator> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/animator",
			"label": "animator",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tommy_Tucker's_Tooth",
			"label": "tucker's tooth tommy",
			"seq": "23,42"
		}]
	},
	{
		"id": "f45f71305db04f20a4880e91502a2d7e",
		"question": "Is the book The Buddha and his Dhamma a book about Buddhism?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Buddha_and_His_Dhamma> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Buddhism> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/literaryGenre",
			"label": "the",
			"seq": "3,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Buddha_and_His_Dhamma",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Buddhism",
			"label": "buddhism",
			"seq": "51,58"
		}]
	},
	{
		"id": "fd1f031446b74ac481667ae2904eb14f",
		"question": "What is the national origin of Focke-Wulf Fw 260 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Focke-Wulf_Fw_260> <http://dbpedia.org/property/nationalOrigin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalOrigin",
			"label": "national origin",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Focke-Wulf_Fw_260",
			"label": "focke-wulf 260",
			"seq": "31,44"
		}]
	},
	{
		"id": "3814808bac334e5f8d76f56a99bf5403",
		"question": "Who is the person opposed  by Tom McLaury and Ike Clanton?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Tom_McLaury> . ?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Ike_Clanton> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opposed",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opposed",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tom_McLaury",
			"label": "mclaury tom",
			"seq": "30,40"
		}, {
			"uri": "http://dbpedia.org/resource/Ike_Clanton",
			"label": "clanton ike",
			"seq": "46,56"
		}]
	},
	{
		"id": "7fe6c4ee43cd4a048ae22cb336c1e62a",
		"question": "Who all have developed a cross platform software?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Cross-platform> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operatingSystem",
			"label": "platform",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "40,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cross-platform",
			"label": "platform cross",
			"seq": "25,38"
		}]
	},
	{
		"id": "e60e13c61f15439ab1d8ee9a7d9e3956",
		"question": "Who attended Great Ayton university?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Great_Ayton>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/education",
			"label": "ayton",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Great_Ayton",
			"label": "great ayton",
			"seq": "13,23"
		}]
	},
	{
		"id": "db906608706f4028b90fa657a76a2fce",
		"question": "Who is known for are War of 1812 and Battle of the Thames?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/War_of_1812> . ?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Battle_of_the_Thames> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "7,15"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "7,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/War_of_1812",
			"label": "1812 war of",
			"seq": "21,31"
		}, {
			"uri": "http://dbpedia.org/resource/Battle_of_the_Thames",
			"label": "thames battle the of",
			"seq": "25,44"
		}]
	},
	{
		"id": "b5297f4033954bbebf99e83717abf862",
		"question": "Count everything garrisoned at the pentagon?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/The_Pentagon>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/garrison",
			"label": "garrisoned",
			"seq": "17,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Pentagon",
			"label": "pentagon the",
			"seq": "31,42"
		}]
	},
	{
		"id": "96e065865fdc4334b92125a47b7afc00",
		"question": "List few schools situated in Reading, Berkshire ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Reading,_Berkshire>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "list",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Reading,_Berkshire",
			"label": "berkshire reading,",
			"seq": "29,46"
		}]
	},
	{
		"id": "2b813b2612884ca0b83b6347da69b776",
		"question": "How many rivers end in the Indian Ocean?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Indian_Ocean>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "rivers",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indian_Ocean",
			"label": "indian ocean",
			"seq": "27,38"
		}]
	},
	{
		"id": "44f0efbc081546a0be93ab03cbed3e68",
		"question": "What non fiction subjects are covered in books by Doubleday publishers?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Doubleday_(publisher)> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publishers",
			"seq": "60,69"
		}, {
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "fiction",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "41,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Doubleday_(publisher)",
			"label": "doubleday",
			"seq": "50,58"
		}]
	},
	{
		"id": "24853dbf6de64eb1951cbc2cb6673cf5",
		"question": "Find the total number of tenants of the stadium whose tenants was Toronto Marlies?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/tenants> <http://dbpedia.org/resource/Toronto_Marlies> . ?x <http://dbpedia.org/property/tenants> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/tenants",
			"label": "tenants",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/property/tenants",
			"label": "tenants",
			"seq": "25,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto_Marlies",
			"label": "toronto marlies",
			"seq": "66,80"
		}]
	},
	{
		"id": "712c9dd545ed457698ecdaee86202d3e",
		"question": "Who voiced in Peanuts Motion Comics and The Peanuts Movie?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/voice> <http://dbpedia.org/resource/Peanuts_Motion_Comics> . ?uri <http://dbpedia.org/ontology/voice> <http://dbpedia.org/resource/The_Peanuts_Movie> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/voice",
			"label": "voiced",
			"seq": "4,9"
		}, {
			"uri": "http://dbpedia.org/ontology/voice",
			"label": "voiced",
			"seq": "4,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peanuts_Motion_Comics",
			"label": "peanuts motion comics",
			"seq": "14,34"
		}, {
			"uri": "http://dbpedia.org/resource/The_Peanuts_Movie",
			"label": "peanuts movie the",
			"seq": "14,30"
		}]
	},
	{
		"id": "a12b0138676940388abb030a095b99cf",
		"question": "Is Rain Over me in the planet pit album?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Rain_Over_Me> <http://dbpedia.org/ontology/album> <http://dbpedia.org/resource/Planet_Pit> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/album",
			"label": "album",
			"seq": "34,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rain_Over_Me",
			"label": "rain over",
			"seq": "3,11"
		}, {
			"uri": "http://dbpedia.org/resource/Planet_Pit",
			"label": "planet pit",
			"seq": "23,32"
		}]
	},
	{
		"id": "04c55a217eca42488ea5a3fadb654924",
		"question": "The pope whose shrine is in St Peter's Basilica was venerated in which sects?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/majorShrine> <http://dbpedia.org/resource/St._Peter's_Basilica> . ?x <http://dbpedia.org/property/veneratedIn> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Pope>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/majorShrine",
			"label": "shrine",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "venerated",
			"seq": "52,60"
		}, {
			"uri": "http://dbpedia.org/ontology/Pope",
			"label": "pope",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/St._Peter's_Basilica",
			"label": "basilica peter's",
			"seq": "31,46"
		}]
	},
	{
		"id": "3ab803a589804dd8b296cbe19777f8dc",
		"question": "List the honorary title given to the spouse of Lillian Disney ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Lillian_Disney> <http://dbpedia.org/property/spouse> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "spouse",
			"seq": "37,42"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "honorary",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lillian_Disney",
			"label": "lillian disney",
			"seq": "47,60"
		}]
	},
	{
		"id": "7bfbc6d46c534d2bb0f4d755d9dc591b",
		"question": "For a position in which institution were both Jack Ryan and Robert sarvis both appointed?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ryan_(politician)> <http://dbpedia.org/ontology/nominee> ?uri. <http://dbpedia.org/resource/Robert_Sarvis> <http://dbpedia.org/ontology/nominee> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "315",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nominee",
			"label": "appointed",
			"seq": "79,87"
		}, {
			"uri": "http://dbpedia.org/ontology/nominee",
			"label": "appointed",
			"seq": "79,87"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "position",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jack_Ryan_(politician)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Robert_Sarvis",
			"label": "sarvis robert",
			"seq": "60,72"
		}]
	},
	{
		"id": "1c8cf55dda6444e69a79532b4cb471f2",
		"question": "What is the total number of other restingplace of the politicians whose one of the restingplace is East Norwalk Historical Cemetery?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/East_Norwalk_Historical_Cemetery> . ?x <http://dbpedia.org/property/restingplace> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "restingplace",
			"seq": "34,45"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "restingplace",
			"seq": "34,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/East_Norwalk_Historical_Cemetery",
			"label": "historical cemetery norwalk",
			"seq": "104,130"
		}]
	},
	{
		"id": "5de5a571a8944ee88bd9e7605b13f4da",
		"question": "Count the total number of conflicts people who were part of conflict in afghanisthan ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Afghanistan> . ?x <http://dbpedia.org/ontology/battle> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "total",
			"seq": "10,14"
		}, {
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "total",
			"seq": "10,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Afghanistan",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "cc4ae85ad1744fa583816c7460e19d3b",
		"question": "Which tennis players live in Kenthurst, new south wales?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Kenthurst,_New_South_Wales>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TennisPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "in",
			"seq": "26,27"
		}, {
			"uri": "http://dbpedia.org/ontology/TennisPlayer",
			"label": "tennis",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kenthurst,_New_South_Wales",
			"label": "kenthurst, wales south",
			"seq": "29,50"
		}]
	},
	{
		"id": "2afab07b2dac4282909806c34e40c6f5",
		"question": "Stan Van Gundy serves as a head coach and president for which basketball team?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Stan_Van_Gundy> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "42,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stan_Van_Gundy",
			"label": "gundy stan van",
			"seq": "0,13"
		}]
	},
	{
		"id": "ab50944245784dce87146a8d1f1cc756",
		"question": " Wringer (novel) and Maniac Magee is the notable work of which author?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/notableworks> <http://dbpedia.org/resource/Wringer_(novel)> . ?uri <http://dbpedia.org/property/notableworks> <http://dbpedia.org/resource/Maniac_Magee> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "notable work",
			"seq": "41,52"
		}, {
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "notable work",
			"seq": "41,52"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "wringer",
			"seq": "1,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wringer_(novel)",
			"label": "wringer (novel)",
			"seq": "1,15"
		}, {
			"uri": "http://dbpedia.org/resource/Maniac_Magee",
			"label": "maniac magee",
			"seq": "21,32"
		}]
	},
	{
		"id": "504cb25e8e274fb68f21b73610569d7a",
		"question": "Was Liliya Lobanova born in Ukraine?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Liliya_Lobanova> <http://dbpedia.org/property/birthplace> <http://dbpedia.org/resource/Ukraine> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthplace",
			"label": "ukraine",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Liliya_Lobanova",
			"label": "lobanova liliya",
			"seq": "4,18"
		}, {
			"uri": "http://dbpedia.org/resource/Ukraine",
			"label": "ukraine",
			"seq": "28,34"
		}]
	},
	{
		"id": "13d8d20650a94f7cbef49822770fa47f",
		"question": "Where is the head quarters of the parent company of Mall of America located?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Mall_of_America> <http://dbpedia.org/property/owned> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owned",
			"label": "located",
			"seq": "68,74"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "quarters head",
			"seq": "13,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mall_of_America",
			"label": "america mall",
			"seq": "52,63"
		}]
	},
	{
		"id": "de5d715dbba14433bd2751418749b376",
		"question": "Where was Sino-French War fought ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sino-French_War> <http://dbpedia.org/ontology/territory> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "sino-french",
			"seq": "10,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sino-French_War",
			"label": "sino-french war",
			"seq": "10,24"
		}]
	},
	{
		"id": "b3401936fc1a491ebfa11cbeeda2c9b5",
		"question": "List all the major shrines of the saints which has one of the shrines as Debre Libanos ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/majorShrine> <http://dbpedia.org/resource/Debre_Libanos> . ?x <http://dbpedia.org/ontology/majorShrine> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Saint>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrines",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrines",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Saint",
			"label": "saints",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Debre_Libanos",
			"label": "libanos debre",
			"seq": "73,85"
		}]
	},
	{
		"id": "1f6027121a154845a301780b46413756",
		"question": "Who is the owner of  Chelsea F.C. ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chelsea_F.C.",
			"label": "chelsea f.c.",
			"seq": "21,32"
		}]
	},
	{
		"id": "34f371d04a104a0d846d5cbab6231a08",
		"question": "Which associate musical artist of Carolyn Dennis is also the composer of Motorpsycho Nitemare ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carolyn_Dennis> <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri. <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associate musical artist",
			"seq": "6,29"
		}, {
			"uri": "http://dbpedia.org/property/composer",
			"label": "composer",
			"seq": "61,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carolyn_Dennis",
			"label": "carolyn dennis",
			"seq": "34,47"
		}, {
			"uri": "http://dbpedia.org/resource/Motorpsycho_Nitemare",
			"label": "motorpsycho nitemare",
			"seq": "73,92"
		}]
	},
	{
		"id": "13d323edfef5499a85c7cb144d5d4793",
		"question": "What is the political party of Arun Chandra Guha and Indira Gandhi?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arun_Chandra_Guha> <http://dbpedia.org/ontology/party> ?uri. <http://dbpedia.org/resource/Indira_Gandhi> <http://dbpedia.org/ontology/party> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "22,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arun_Chandra_Guha",
			"label": "chandra guha arun",
			"seq": "31,47"
		}, {
			"uri": "http://dbpedia.org/resource/Indira_Gandhi",
			"label": "indira gandhi",
			"seq": "53,65"
		}]
	},
	{
		"id": "f867edc1ebd04f73a619ade4c87800e0",
		"question": "How many bacterias are there whose division is Firmicutes?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/division",
			"label": "division",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Bacteria",
			"label": "bacterias",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Firmicutes",
			"label": "firmicutes",
			"seq": "47,56"
		}]
	},
	{
		"id": "a99633a7312140699f6da5ec60b3545a",
		"question": "What genre isPyChess from, which employes Craig Van Tilbury?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Craig_Van_Tilbury> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/PyChess> <http://dbpedia.org/property/genre> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "craig",
			"seq": "42,46"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "genre",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Craig_Van_Tilbury",
			"label": "tilbury craig van",
			"seq": "42,58"
		}, {
			"uri": "http://dbpedia.org/resource/PyChess",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d7d6a471f045411d88c97b34e458c2c9",
		"question": "List things developed by Autoconf ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Autoconf> <http://dbpedia.org/ontology/developer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Autoconf",
			"label": "autoconf",
			"seq": "25,32"
		}]
	},
	{
		"id": "8a63017795e246a49a5be13cbb278cc2",
		"question": "In which cities are there stations of SCOLA?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/broadcastNetwork> <http://dbpedia.org/resource/SCOLA_(TV_service)> . ?x <http://dbpedia.org/property/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/broadcastNetwork",
			"label": "stations",
			"seq": "26,33"
		}, {
			"uri": "http://dbpedia.org/property/city",
			"label": "cities",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionStation",
			"label": "stations",
			"seq": "26,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/SCOLA_(TV_service)",
			"label": "scola",
			"seq": "38,42"
		}]
	},
	{
		"id": "ccd7bfe91df242cba413e7b850bdff5e",
		"question": "Was His New Job edited by Charlie Chaplin?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/His_New_Job> <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Charlie_Chaplin> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "edited",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/His_New_Job",
			"label": "new job his",
			"seq": "4,14"
		}, {
			"uri": "http://dbpedia.org/resource/Charlie_Chaplin",
			"label": "charlie chaplin",
			"seq": "26,40"
		}]
	},
	{
		"id": "c1a70be915f046f688328bccc9b5e78c",
		"question": "Which person belongs to the board of Howard Hughes Medical Institute?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Howard_Hughes_Medical_Institute>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/board",
			"label": "board",
			"seq": "28,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Howard_Hughes_Medical_Institute",
			"label": "institute medical hughes howard",
			"seq": "37,67"
		}]
	},
	{
		"id": "2adb8b5dae3e4e8ea92922a707e6341e",
		"question": "What are some bands out to texarkana?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/origin> <http://dbpedia.org/resource/Texarkana,_Texas>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/origin",
			"label": "texarkana",
			"seq": "27,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "bands",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Texarkana,_Texas",
			"label": "texarkana",
			"seq": "27,35"
		}]
	},
	{
		"id": "61066d63cf6b4c3d9e4dfdec5c6a430c",
		"question": "What famous politician died in the Petersen House?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/Petersen_House>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "the",
			"seq": "31,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "petersen",
			"seq": "35,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Petersen_House",
			"label": "petersen house",
			"seq": "35,48"
		}]
	},
	{
		"id": "ac76f62cf58949f59c0a4e39a351a377",
		"question": "Which cover artist of the The Adventures of Tom Sawyer also the source of inspiration of The Appple Tree ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> ?uri. <http://dbpedia.org/resource/The_Apple_Tree> <http://dbpedia.org/ontology/basedOn> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coverArtist",
			"label": "artist cover",
			"seq": "6,17"
		}, {
			"uri": "http://dbpedia.org/ontology/basedOn",
			"label": "also",
			"seq": "55,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer",
			"label": "adventures sawyer",
			"seq": "30,46"
		}, {
			"uri": "http://dbpedia.org/resource/The_Apple_Tree",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e03711f1cbfc4364aed4f709337e0f46",
		"question": "Which hockey team is coached by mike babcock?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Mike_Babcock>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HockeyTeam>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headCoach",
			"label": "coached",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/HockeyTeam",
			"label": "hockey team",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mike_Babcock",
			"label": "babcock mike",
			"seq": "32,43"
		}]
	},
	{
		"id": "2b12d0b229e446478c13760e9b57a5ea",
		"question": "Where was the person born who died in Bryn Mawr Hospital?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Bryn_Mawr_Hospital> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "person",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "person",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bryn_Mawr_Hospital",
			"label": "hospital mawr bryn",
			"seq": "38,55"
		}]
	},
	{
		"id": "66ae293ce48e42c183df4a5acf2e684c",
		"question": "Name the mountain whose parent peak is located in Mexico.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/State_of_Mexico> . ?uri <http://dbpedia.org/ontology/parentMountainPeak> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "located",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/ontology/parentMountainPeak",
			"label": "mountain parent peak",
			"seq": "9,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Mountain",
			"label": "mountain",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/State_of_Mexico",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "eea1a931ec7b42c3bbcb1273d1b870cd",
		"question": "Where was Ne daj se, Nina first aired ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ne_daj_se,_Nina> <http://dbpedia.org/property/firstAired> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstAired",
			"label": "first aired",
			"seq": "26,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ne_daj_se,_Nina",
			"label": "nina se, daj ne",
			"seq": "10,24"
		}]
	},
	{
		"id": "0ef7dd290adb47cc9515959eaf8bd328",
		"question": "In which common territory did Sino French war and the Tonkin campaign take place?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sino-French_War> <http://dbpedia.org/ontology/territory> ?uri. <http://dbpedia.org/resource/Tonkin_Campaign> <http://dbpedia.org/ontology/territory> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "territory",
			"seq": "16,24"
		}, {
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "territory",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sino-French_War",
			"label": "french sino war",
			"seq": "30,44"
		}, {
			"uri": "http://dbpedia.org/resource/Tonkin_Campaign",
			"label": "campaign tonkin",
			"seq": "54,68"
		}]
	},
	{
		"id": "098a7f4275924007b358ee48cefc7b23",
		"question": "Which distributer of Glover is also the stockholde of Seattle Mariners ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Glover_(video_game)> <http://dbpedia.org/ontology/distributor> ?uri. <http://dbpedia.org/resource/Seattle_Mariners> <http://dbpedia.org/ontology/owner> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributer",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "glover",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Glover_(video_game)",
			"label": "glover",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/resource/Seattle_Mariners",
			"label": "mariners seattle",
			"seq": "54,69"
		}]
	},
	{
		"id": "85c76306bdca404d9198823c7f039b6e",
		"question": "In which state is Colemanville Covered Bridge located ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Colemanville_Covered_Bridge> <http://dbpedia.org/ontology/state> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/state",
			"label": "state",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colemanville_Covered_Bridge",
			"label": "colemanville covered bridge",
			"seq": "18,44"
		}]
	},
	{
		"id": "c0f69ac1ab584bbaaca5272c9dd4aa74",
		"question": "What are some important works of US citizens?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/nationality> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationality",
			"label": "important",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "works",
			"seq": "24,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "444b6f68ae4145c1a8e151fe606ade0a",
		"question": "How many characters were made by Paul Dini?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Paul_Dini>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creators",
			"label": "characters",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paul_Dini",
			"label": "paul dini",
			"seq": "33,41"
		}]
	},
	{
		"id": "7402ac71f855482d9acd335dbad8e3b1",
		"question": "What is the Team Name  of the Cristo Rey Jesuit High School (Chicago) and is also the nickname of the Lyons Township High School ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cristo_Rey_Jesuit_High_School_(Chicago)> <http://dbpedia.org/property/teamName> ?uri. <http://dbpedia.org/resource/Lyons_Township_High_School> <http://dbpedia.org/property/nickname> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/teamName",
			"label": "team name",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "86,93"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cristo_Rey_Jesuit_High_School_(Chicago)",
			"label": "(chicago) school jesuit cristo",
			"seq": "30,59"
		}, {
			"uri": "http://dbpedia.org/resource/Lyons_Township_High_School",
			"label": "township school lyons high",
			"seq": "48,73"
		}]
	},
	{
		"id": "c1d9817b260a4d0ead5c03372c35d776",
		"question": "What is the religion of the relatives of Ananda Weerasekara?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Ananda_Weerasekara> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "religion",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ananda_Weerasekara",
			"label": "weerasekara ananda",
			"seq": "41,58"
		}]
	},
	{
		"id": "eb019f4872c64a79b87db465172c36a8",
		"question": "Is the song Only the Good Die Young from The Stranger?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Only_the_Good_Die_Young> <http://dbpedia.org/property/fromAlbum> <http://dbpedia.org/resource/The_Stranger_(album)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/fromAlbum",
			"label": "from",
			"seq": "36,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Only_the_Good_Die_Young",
			"label": "young only good the",
			"seq": "3,21"
		}, {
			"uri": "http://dbpedia.org/resource/The_Stranger_(album)",
			"label": "stranger the",
			"seq": "3,14"
		}]
	},
	{
		"id": "ec8b9535d59d4655b5ff3f5a185c99cc",
		"question": "In which country's cuisine, ham is an important part?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Ham> . ?x <http://dbpedia.org/property/country> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainIngredient",
			"label": "important",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "country's",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ham",
			"label": "ham",
			"seq": "28,30"
		}]
	},
	{
		"id": "b34ea6d0eb0e4dc9878f34a21bde3842",
		"question": "What is the purpose of the Maharashtra Chess Association which is genere of PyChess?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maharashtra_Chess_Association> <http://dbpedia.org/property/purpose> ?uri. <http://dbpedia.org/resource/PyChess> <http://dbpedia.org/ontology/genre> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/purpose",
			"label": "purpose",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genere",
			"seq": "66,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maharashtra_Chess_Association",
			"label": "maharashtra association chess",
			"seq": "27,55"
		}, {
			"uri": "http://dbpedia.org/resource/PyChess",
			"label": "pychess",
			"seq": "76,82"
		}]
	},
	{
		"id": "8a79a42afec446ec8c50537ada39a7f3",
		"question": "Name the office holders whose successor died in Morristown, New Jersey?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Morristown,_New_Jersey> . ?uri <http://dbpedia.org/ontology/successor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "30,38"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Morristown,_New_Jersey",
			"label": "morristown, jersey",
			"seq": "48,65"
		}]
	},
	{
		"id": "9c14d984d9b44eda8acb73656552d3dc",
		"question": "What is the total number of other non-fiction subject of the books whose one of the subject is Racism?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/nonFictionSubject> <http://dbpedia.org/resource/Racism> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "non-fiction",
			"seq": "34,44"
		}, {
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "non-fiction",
			"seq": "34,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Racism",
			"label": "racism",
			"seq": "95,100"
		}]
	},
	{
		"id": "2d27c6297df54cbd99d354a61045dba8",
		"question": "What medals have been given to people who died of lung cancer?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/deathCause> <http://dbpedia.org/resource/Lung_cancer> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "have",
			"seq": "12,15"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "what",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "31,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lung_cancer",
			"label": "cancer lung",
			"seq": "50,60"
		}]
	},
	{
		"id": "9c2755a6ad1a44e6b2fae15bb6dda2fa",
		"question": "Who operates twin Cities 400 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Twin_Cities_400> <http://dbpedia.org/ontology/operatedBy> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operates",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Twin_Cities_400",
			"label": "cities twin 400",
			"seq": "13,27"
		}]
	},
	{
		"id": "67e7b4cfd56449dd8e16839eb9d8325c",
		"question": "Name the broadcast area of  Radio Philippines Network ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Radio_Philippines_Network> <http://dbpedia.org/property/area> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/area",
			"label": "area",
			"seq": "19,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Radio_Philippines_Network",
			"label": "philippines network radio",
			"seq": "28,52"
		}]
	},
	{
		"id": "d2da7d56a898475493bd3e92b6d60c91",
		"question": "Which country's engineered have studied at Aero Klub in Wroclaw?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/AeroKlub_Wroc\u0142aw> . ?x <http://dbpedia.org/property/nationality> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "studied",
			"seq": "32,38"
		}, {
			"uri": "http://dbpedia.org/property/nationality",
			"label": "country's",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/AeroKlub_Wroc\u0142aw",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "30599ffcad334bcc8b320111644de813",
		"question": "What is pitro Gruszka hometown ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Piotr_Gruszka> <http://dbpedia.org/property/hometown> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hometown",
			"label": "hometown",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Piotr_Gruszka",
			"label": "gruszka",
			"seq": "14,20"
		}]
	},
	{
		"id": "665c48a565514b8d9451667f8ac5d5cb",
		"question": "Count the drinks originated in England.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/England>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "originated",
			"seq": "17,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Beverage",
			"label": "originated",
			"seq": "17,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c44978af32a3433daf71471ea770529b",
		"question": "What place did Edwin Adams die at, which gave birth to William A Purtell?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edwin_Adams_(politician)> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/William_A._Purtell> <http://dbpedia.org/ontology/birthPlace> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "place",
			"seq": "5,9"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "place birth",
			"seq": "5,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edwin_Adams_(politician)",
			"label": "edwin adams",
			"seq": "15,25"
		}, {
			"uri": "http://dbpedia.org/resource/William_A._Purtell",
			"label": "william purtell",
			"seq": "55,69"
		}]
	},
	{
		"id": "96b3c05711324ad7b27f67b505eb0ef3",
		"question": "Is Angola Avante the anthem of Angola?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Angola> <http://dbpedia.org/ontology/anthem> <http://dbpedia.org/resource/Angola_Avante> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/anthem",
			"label": "anthem",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Angola",
			"label": "angola",
			"seq": "3,8"
		}, {
			"uri": "http://dbpedia.org/resource/Angola_Avante",
			"label": "avante angola",
			"seq": "3,15"
		}]
	},
	{
		"id": "7b4b7b0484e344288b493a941b5ccf38",
		"question": "What sport activities are available at Polytechnic University of the Philippines Bataan?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_\u2013_Bataan> <http://dbpedia.org/ontology/sport> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sport",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_\u2013_Bataan",
			"label": "polytechnic philippines university",
			"seq": "39,72"
		}]
	},
	{
		"id": "1074b9904318467e873e1d05472c6ace",
		"question": "Trainees at the national film school of Lodz have received what awards?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/training> <http://dbpedia.org/resource/National_Film_School_in_\u0141\u00f3d\u017a> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/training",
			"label": "trainees",
			"seq": "0,7"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "64,69"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Film_School_in_\u0141\u00f3d\u017a",
			"label": "national school film",
			"seq": "16,35"
		}]
	},
	{
		"id": "c53debb465374190985a381113d5e2e1",
		"question": "Is the Providence Chapel, Charlwood made in New English style of architecture?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Providence_Chapel,_Charlwood> <http://dbpedia.org/property/style> <http://dbpedia.org/resource/New_England> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/style",
			"label": "style",
			"seq": "56,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Providence_Chapel,_Charlwood",
			"label": "providence charlwood chapel,",
			"seq": "7,34"
		}, {
			"uri": "http://dbpedia.org/resource/New_England",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a0e3214b00d7484d9630cf4983167626",
		"question": "Which tema did Dough Acomb played for which is also the drafty team of Dale Mitchell ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dale_Mitchell_(ice_hockey)> <http://dbpedia.org/ontology/draftTeam> ?uri. <http://dbpedia.org/resource/Doug_Acomb> <http://dbpedia.org/property/playedFor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/draftTeam",
			"label": "drafty",
			"seq": "56,61"
		}, {
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "played for",
			"seq": "27,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dale_Mitchell_(ice_hockey)",
			"label": "mitchell dale",
			"seq": "71,83"
		}, {
			"uri": "http://dbpedia.org/resource/Doug_Acomb",
			"label": "acomb",
			"seq": "21,25"
		}]
	},
	{
		"id": "0ecf1c79d31641a3b107442ce8b8399b",
		"question": "What is the river whose origin is North-Western Province, Zambia?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceRegion",
			"label": "origin",
			"seq": "24,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North-Western_Province,_Zambia",
			"label": "north-western province, zambia",
			"seq": "34,63"
		}]
	},
	{
		"id": "3271ac84219e4f5995da87af671eaab7",
		"question": "Is Tenzing Norgay  the first person to scale Mt. Everest?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mount_Everest> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/Tenzing_Norgay> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "person first",
			"seq": "23,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mount_Everest",
			"label": "everest",
			"seq": "49,55"
		}, {
			"uri": "http://dbpedia.org/resource/Tenzing_Norgay",
			"label": "tenzing norgay",
			"seq": "3,16"
		}]
	},
	{
		"id": "2697998cbbd64b4aa7973251dcdd3b6d",
		"question": "Which awards have been given to both Ingmar Bergman and Charles LeMaire?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ingmar_Bergman> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/property/awards> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ingmar_Bergman",
			"label": "bergman ingmar",
			"seq": "37,50"
		}, {
			"uri": "http://dbpedia.org/resource/Charles_LeMaire",
			"label": "lemaire charles",
			"seq": "56,70"
		}]
	},
	{
		"id": "5d6c7cfe9fca43d7bf22d03f9f9d205e",
		"question": "What is the state of Umatilla language which is also the state of James K. Kelly ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/James_K._Kelly> <http://dbpedia.org/property/state> ?uri. <http://dbpedia.org/resource/Umatilla_language> <http://dbpedia.org/property/region> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/property/region",
			"label": "of",
			"seq": "18,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_K._Kelly",
			"label": "kelly james",
			"seq": "66,76"
		}, {
			"uri": "http://dbpedia.org/resource/Umatilla_language",
			"label": "umatilla language",
			"seq": "21,37"
		}]
	},
	{
		"id": "7cd083a1baa944fb93b2df81ca11207c",
		"question": "In which country can I find the State Academic Opera and Ballet Theater and Baku Puppet Theatre?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Azerbaijan_State_Academic_Opera_and_Ballet_Theater> <http://dbpedia.org/ontology/locationCountry> ?uri. <http://dbpedia.org/resource/Baku_Puppet_Theatre> <http://dbpedia.org/ontology/locationCountry> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "315",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCountry",
			"label": "country",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCountry",
			"label": "country",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Azerbaijan_State_Academic_Opera_and_Ballet_Theater",
			"label": "academic theater ballet",
			"seq": "38,60"
		}, {
			"uri": "http://dbpedia.org/resource/Baku_Puppet_Theatre",
			"label": "theatre puppet",
			"seq": "81,94"
		}]
	},
	{
		"id": "e4204a1a2f2040a6aadcc27f9ff9c8a0",
		"question": "What band was Afrika Baby Bam a part of, and often performed with Q Tip?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Afrika_Baby_Bam> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Q-Tip_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "band",
			"seq": "5,8"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "part",
			"seq": "32,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Afrika_Baby_Bam",
			"label": "afrika baby bam",
			"seq": "14,28"
		}, {
			"uri": "http://dbpedia.org/resource/Q-Tip_(musician)",
			"label": "tip",
			"seq": "68,70"
		}]
	},
	{
		"id": "842c6e8c6a8b49ba99364b98105af678",
		"question": "List the governers of Jimmie Lou Fisher?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jimmie_Lou_Fisher> <http://dbpedia.org/property/governor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governor",
			"label": "governers",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jimmie_Lou_Fisher",
			"label": "jimmie fisher lou",
			"seq": "22,38"
		}]
	},
	{
		"id": "daf410687a35451bbcf9909871db61f3",
		"question": "Count the water bodies that flow into the North Sea?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/North_Sea> <http://dbpedia.org/property/inflow> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/inflow",
			"label": "flow",
			"seq": "28,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North_Sea",
			"label": "north",
			"seq": "42,46"
		}]
	},
	{
		"id": "7dd6d733dada4602b5f9249a4418c0ce",
		"question": "Where has GARAGE recorded its singles?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Garbage_(band)> . ?x <http://dbpedia.org/ontology/recordedIn> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "recorded",
			"seq": "17,24"
		}, {
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded",
			"seq": "17,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Single",
			"label": "singles",
			"seq": "30,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Garbage_(band)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0d8127d7d9f94ef6ad941ee30b14e54c",
		"question": "Which employer of Manu Cornet has alsoe written Google.by ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Manu_Cornet> <http://dbpedia.org/property/employer> ?uri. <http://dbpedia.org/resource/Google.by> <http://dbpedia.org/ontology/author> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "employer",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "manu",
			"seq": "18,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Manu_Cornet",
			"label": "cornet manu",
			"seq": "18,28"
		}, {
			"uri": "http://dbpedia.org/resource/Google.by",
			"label": "google.by",
			"seq": "48,56"
		}]
	},
	{
		"id": "1c9cc2c14b38405a9af09ae095be1c88",
		"question": "What is the television show whose theme music is by Primus?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Primus_(band)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "theme music",
			"seq": "34,44"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Primus_(band)",
			"label": "primus",
			"seq": "52,57"
		}]
	},
	{
		"id": "a44e98fa4c1e4f79b3c341844a6db478",
		"question": "Which field's journals are edited by Paul Morphy?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/editor> <http://dbpedia.org/resource/Paul_Morphy> . ?x <http://dbpedia.org/property/discipline> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/editor",
			"label": "edited",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/property/discipline",
			"label": "edited",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/ontology/AcademicJournal",
			"label": "journals",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paul_Morphy",
			"label": "morphy paul",
			"seq": "37,47"
		}]
	},
	{
		"id": "f3ac616f8c0643cf88335eb3083c700d",
		"question": "Was Ne Daj Se, Nina first aired in Croatia?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ne_daj_se,_Nina> <http://dbpedia.org/property/firstAired> <http://dbpedia.org/resource/Croatia> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstAired",
			"label": "first aired",
			"seq": "20,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ne_daj_se,_Nina",
			"label": "nina se, daj",
			"seq": "7,18"
		}, {
			"uri": "http://dbpedia.org/resource/Croatia",
			"label": "croatia",
			"seq": "35,41"
		}]
	},
	{
		"id": "d945ca666231404ea5dbf05646dcc45d",
		"question": "List the sports of PATTS College of Aeronautics which are of interest of Jon Speelman ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?uri. <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/athletics",
			"label": "aeronautics",
			"seq": "36,46"
		}, {
			"uri": "http://dbpedia.org/ontology/field",
			"label": "speelman",
			"seq": "77,84"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PATTS_College_of_Aeronautics",
			"label": "aeronautics college patts",
			"seq": "19,43"
		}, {
			"uri": "http://dbpedia.org/resource/Jon_Speelman",
			"label": "speelman jon",
			"seq": "73,84"
		}]
	},
	{
		"id": "e0fcf7ea42184328aedd3b110006c43c",
		"question": "What is the military rank of the important commander of Peruvian Army?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Peruvian_Army> <http://dbpedia.org/ontology/notableCommander> ?x . ?x <http://dbpedia.org/ontology/militaryRank> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableCommander",
			"label": "commander",
			"seq": "43,51"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryRank",
			"label": "military rank",
			"seq": "12,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peruvian_Army",
			"label": "peruvian army",
			"seq": "56,68"
		}]
	},
	{
		"id": "2e8e7385936a4f1ab5740f608898155f",
		"question": "What mammals fall into the biological family Canidae?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Canidae>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "family",
			"seq": "38,43"
		}, {
			"uri": "http://dbpedia.org/ontology/Mammal",
			"label": "mammals",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canidae",
			"label": "canidae",
			"seq": "45,51"
		}]
	},
	{
		"id": "984b82270182472b9d8f250fe7d3aafc",
		"question": "Name the writer of South Park: The Stick of Truth ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Park:_The_Stick_of_Truth> <http://dbpedia.org/ontology/writer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "writer",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Park:_The_Stick_of_Truth",
			"label": "truth stick south park:",
			"seq": "19,41"
		}]
	},
	{
		"id": "57ab787a271f4c28b2a0dca69d5e9068",
		"question": "Who is the authority of Maine School of Science and Mathematics ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics> <http://dbpedia.org/ontology/authority> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/authority",
			"label": "authority",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics",
			"label": "mathematics science school maine",
			"seq": "24,55"
		}]
	},
	{
		"id": "01086492a07e4c6eb96f182023d92f9f",
		"question": "Give me the count of newspaper whose language is Sweedish and headquartered at stockholm ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language> . ?uri <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Stockholm> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/language",
			"label": "language",
			"seq": "37,44"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquartered",
			"seq": "62,74"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Swedish_language",
			"label": "language",
			"seq": "37,44"
		}, {
			"uri": "http://dbpedia.org/resource/Stockholm",
			"label": "stockholm",
			"seq": "79,87"
		}]
	},
	{
		"id": "b7d04c385e304556962dfa6f26906db4",
		"question": "In how many places are the companies founded in Canada operating?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Canada> . ?x <http://dbpedia.org/property/locations> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/property/locations",
			"label": "operating",
			"seq": "55,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canada",
			"label": "canada",
			"seq": "48,53"
		}]
	},
	{
		"id": "b049e9b6c3d84f8db89c6dad58c1b742",
		"question": "Name a person whose sucessor was Adrian A. basora and was educated at Harvard-Westlake School?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Harvard-Westlake_School> . ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "name",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/property/successor",
			"label": "sucessor",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "7,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harvard-Westlake_School",
			"label": "harvard-westlake school",
			"seq": "70,92"
		}, {
			"uri": "http://dbpedia.org/resource/Adrian_A._Basora",
			"label": "basora adrian",
			"seq": "33,45"
		}]
	},
	{
		"id": "0e64b5f73d5946c4b4e32140b22caf00",
		"question": "How many titles have been won by the beauty queens which had brown hair?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/hairColor> <http://dbpedia.org/resource/Brown_hair> . ?x <http://dbpedia.org/property/title> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hairColor",
			"label": "hair",
			"seq": "67,70"
		}, {
			"uri": "http://dbpedia.org/property/title",
			"label": "titles",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brown_hair",
			"label": "brown hair",
			"seq": "61,70"
		}]
	},
	{
		"id": "e8e40d229e4d47308482febc1c021b8d",
		"question": "Who worked at  A Goon's Deed in a Weary World and CBS?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/A_Goon's_Deed_in_a_Weary_World> . ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/CBS> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "goon's",
			"seq": "17,22"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "goon's",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A_Goon's_Deed_in_a_Weary_World",
			"label": "goon's world weary deed",
			"seq": "17,39"
		}, {
			"uri": "http://dbpedia.org/resource/CBS",
			"label": "cbs",
			"seq": "50,52"
		}]
	},
	{
		"id": "2fb9c1e8780b4dd4a0c7734363590ed6",
		"question": "How many things are manufactured by the company whose subsidiary is Sony Corporation shareholders and subsidiaries?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Sony_Corporation_shareholders_and_subsidiaries> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsidiary",
			"label": "subsidiary",
			"seq": "54,63"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "20,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony_Corporation_shareholders_and_subsidiaries",
			"label": "subsidiaries shareholders corporation",
			"seq": "73,109"
		}]
	},
	{
		"id": "a2f27d8c0508441cafed36479e7362a6",
		"question": "Ford Air Transport Service and Falcon cobra are both owned by which company?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Air_Transport_Service> <http://dbpedia.org/ontology/parentCompany> ?uri. <http://dbpedia.org/resource/Ford_Falcon_Cobra> <http://dbpedia.org/ontology/parentCompany> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "company",
			"seq": "68,74"
		}, {
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "company",
			"seq": "68,74"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Air_Transport_Service",
			"label": "transport service ford",
			"seq": "0,21"
		}, {
			"uri": "http://dbpedia.org/resource/Ford_Falcon_Cobra",
			"label": "falcon cobra ford",
			"seq": "0,16"
		}]
	},
	{
		"id": "e6e8ea74524445e38326aadc3d4a8c33",
		"question": "Name the movies directed by Stanley Kubrick and edited by Anthony Harvey?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Anthony_Harvey>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "directed",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/property/editing",
			"label": "edited",
			"seq": "48,53"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "name",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stanley_Kubrick",
			"label": "stanley kubrick",
			"seq": "28,42"
		}, {
			"uri": "http://dbpedia.org/resource/Anthony_Harvey",
			"label": "anthony harvey",
			"seq": "58,71"
		}]
	},
	{
		"id": "1330392af821465988520c7e62465234",
		"question": "Which continents can be reached by flight companies available on Gatwick Airport?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Gatwick_Airport> . ?x <http://dbpedia.org/property/destinations> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/targetAirport",
			"label": "airport",
			"seq": "73,79"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "continents",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "available",
			"seq": "52,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gatwick_Airport",
			"label": "gatwick airport",
			"seq": "65,79"
		}]
	},
	{
		"id": "bf425a8b2f6146f3b9e4bbbf61dfb270",
		"question": "Who trained the wrestlers who are billed in Wisconsin?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/billed> <http://dbpedia.org/resource/Wisconsin> . ?x <http://dbpedia.org/ontology/trainer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Wrestler>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/billed",
			"label": "billed",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/ontology/trainer",
			"label": "trained",
			"seq": "4,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Wrestler",
			"label": "wrestlers",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wisconsin",
			"label": "wisconsin",
			"seq": "44,52"
		}]
	},
	{
		"id": "c5f2208531a94e90b3704d2666657f5c",
		"question": "Who developed the software which is used as operating system of Magic Trackpad ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Magic_Trackpad> <http://dbpedia.org/ontology/operatingSystem> ?x . ?x <http://dbpedia.org/property/developer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating system",
			"seq": "44,59"
		}, {
			"uri": "http://dbpedia.org/property/developer",
			"label": "developed",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "18,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Magic_Trackpad",
			"label": "trackpad magic",
			"seq": "64,77"
		}]
	},
	{
		"id": "71f8fa4b19a547668255c9310216a8f3",
		"question": "Who is the head coach of 2009-10 Middlesbrough F.C. season ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2009\u201310_Middlesbrough_F.C._season> <http://dbpedia.org/ontology/manager> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manager",
			"label": "middlesbrough",
			"seq": "33,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2009\u201310_Middlesbrough_F.C._season",
			"label": "middlesbrough season",
			"seq": "33,52"
		}]
	},
	{
		"id": "edc54c2ea5cb4ecca8de2091fad5fbf7",
		"question": "Which builder has made concrete bridges?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/material> <http://dbpedia.org/resource/Concrete> . ?x <http://dbpedia.org/ontology/builder> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/material",
			"label": "made",
			"seq": "18,21"
		}, {
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "builder",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridges",
			"seq": "32,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Concrete",
			"label": "concrete",
			"seq": "23,30"
		}]
	},
	{
		"id": "9f26789aeb6146feaff2e24761ec083a",
		"question": "Did Umkhonto we Sizwe had Nelson Mandela as a commander?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Umkhonto_we_Sizwe> <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Nelson_Mandela> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableCommanders",
			"label": "commander",
			"seq": "46,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Umkhonto_we_Sizwe",
			"label": "umkhonto sizwe",
			"seq": "4,17"
		}, {
			"uri": "http://dbpedia.org/resource/Nelson_Mandela",
			"label": "mandela nelson",
			"seq": "26,39"
		}]
	},
	{
		"id": "5dbda61a444645df948f9da412547003",
		"question": "Whichlocation city of the Denver Broncos is the palce of birth of Steven Clark Cunningham ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri. <http://dbpedia.org/resource/Steven_Clark_Cunningham> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "whichlocation",
			"seq": "0,12"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birth",
			"seq": "57,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Denver_Broncos",
			"label": "broncos denver",
			"seq": "26,39"
		}, {
			"uri": "http://dbpedia.org/resource/Steven_Clark_Cunningham",
			"label": "cunningham steven clark",
			"seq": "66,88"
		}]
	},
	{
		"id": "11bda0b4ba6e488ca7e8255d984a7792",
		"question": "How many venues are located in the US?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/address> <http://dbpedia.org/resource/United_States>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Venue>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/address",
			"label": "are",
			"seq": "16,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Venue",
			"label": "venues",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d8dbbad92b504881bd9c0c8a1932d15e",
		"question": "Which vice president of Warren G. Harsing is also the president of Evans Hughes ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Warren_G._Harding> <http://dbpedia.org/ontology/vicePresident> ?uri. <http://dbpedia.org/resource/Charles_Evans_Hughes> <http://dbpedia.org/ontology/president> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/vicePresident",
			"label": "president",
			"seq": "11,19"
		}, {
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Warren_G._Harding",
			"label": "warren",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/resource/Charles_Evans_Hughes",
			"label": "hughes",
			"seq": "73,78"
		}]
	},
	{
		"id": "0fd9b98ee3744db6b234eecdfcbe9e70",
		"question": "in which movies have momoki kochi acted",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Momoko_K\u014dchi> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "in",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Momoko_K\u014dchi",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "954385119c2440dc9e9ee5c3b6adab5b",
		"question": "In which countries can i find broadcasted TV in southeast asia?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/broadcastArea> <http://dbpedia.org/resource/Southeast_Asia> . ?x <http://dbpedia.org/property/country> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/broadcastArea",
			"label": "broadcasted",
			"seq": "30,40"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "countries",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionStation",
			"label": "southeast",
			"seq": "48,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Southeast_Asia",
			"label": "southeast asia",
			"seq": "48,61"
		}]
	},
	{
		"id": "f6837bbaf0614048ab98cba4cad9d380",
		"question": "Where can i find teams whose coach has been Rodney Eade.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Rodney_Eade> . ?x <http://dbpedia.org/property/location> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coach",
			"label": "coach",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "can",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "17,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rodney_Eade",
			"label": "rodney",
			"seq": "44,49"
		}]
	},
	{
		"id": "44babf14274042b6a9d97382855b1f6f",
		"question": "Count all those whose youthclub performed at the 14-15 La Liga?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/season> <http://dbpedia.org/resource/2014\u201315_La_Liga> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/season",
			"label": "whose",
			"seq": "16,20"
		}, {
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youthclub",
			"seq": "22,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "the",
			"seq": "45,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2014\u201315_La_Liga",
			"label": "liga",
			"seq": "58,61"
		}]
	},
	{
		"id": "b49493ba48cb4704923543e074afb5c6",
		"question": "Name the office holder whose Governor is Charles Willing Byrd and has resting place as North Bend, Ohio?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Charles_Willing_Byrd> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/North_Bend,_Ohio>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governor",
			"label": "governor",
			"seq": "29,36"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "resting place",
			"seq": "70,82"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_Willing_Byrd",
			"label": "willing charles",
			"seq": "41,55"
		}, {
			"uri": "http://dbpedia.org/resource/North_Bend,_Ohio",
			"label": "north bend, ohio",
			"seq": "87,102"
		}]
	},
	{
		"id": "766f8af12e0948349fb3a59be11f74e5",
		"question": "What city is it where Wayne Allard governs and Juli Ashton was born?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wayne_Allard> <http://dbpedia.org/ontology/region> ?uri. <http://dbpedia.org/resource/Juli_Ashton> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/region",
			"label": "governs",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "it",
			"seq": "6,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wayne_Allard",
			"label": "allard wayne",
			"seq": "22,33"
		}, {
			"uri": "http://dbpedia.org/resource/Juli_Ashton",
			"label": "ashton juli",
			"seq": "47,57"
		}]
	},
	{
		"id": "9617ad4477da40298f1e0e562959fcc3",
		"question": "Which neighboring municipalities of Cologny has a mayor named Ester Alder ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> . ?uri <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Esther_Alder>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/neighboringMunicipalities",
			"label": "municipalities neighboring",
			"seq": "6,31"
		}, {
			"uri": "http://dbpedia.org/ontology/mayor",
			"label": "mayor",
			"seq": "50,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cologny",
			"label": "cologny",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/resource/Esther_Alder",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4d7ac749c1ed4d359c857449cd3bfcd7",
		"question": "Rostock and Oulu is the shore cities on which sea ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Rostock> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Oulu> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "46,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rostock",
			"label": "rostock",
			"seq": "0,6"
		}, {
			"uri": "http://dbpedia.org/resource/Oulu",
			"label": "oulu",
			"seq": "12,15"
		}]
	},
	{
		"id": "925fba8fe99f4fd68594b4e4ca58f5ba",
		"question": "Count the number of broadcast area of the TV stations which serves in Agalga ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/broadcastArea> <http://dbpedia.org/resource/Agal\u00e9ga> . ?x <http://dbpedia.org/property/broadcastArea> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/broadcastArea",
			"label": "broadcast area",
			"seq": "20,33"
		}, {
			"uri": "http://dbpedia.org/property/broadcastArea",
			"label": "broadcast area",
			"seq": "20,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Agal\u00e9ga",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f32a9202283b4b51a57f25e1e59661f4",
		"question": "Name the kingdom with currency Solidus (coin) and administrative headquarters in Nicomedia?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Solidus_(coin)> . ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Nicomedia>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currency",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "administrative",
			"seq": "50,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Solidus_(coin)",
			"label": "solidus (coin)",
			"seq": "31,44"
		}, {
			"uri": "http://dbpedia.org/resource/Nicomedia",
			"label": "nicomedia",
			"seq": "81,89"
		}]
	},
	{
		"id": "d80be4c2f6b7412d9bf97bfb7b793ae6",
		"question": "What are the baseball teams who belongs to  Guggenheim Partners?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Guggenheim_Partners>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "partners",
			"seq": "55,62"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballTeam",
			"label": "baseball",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Guggenheim_Partners",
			"label": "guggenheim partners",
			"seq": "44,62"
		}]
	},
	{
		"id": "7bc28b110ed544cc8e98bdcf752d9c47",
		"question": "Where did Doug Walgren and Lee Si Chen study?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lee_Si-Chen> <http://dbpedia.org/property/almaMater> ?uri. <http://dbpedia.org/resource/Doug_Walgren> <http://dbpedia.org/ontology/almaMater> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "walgren",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "walgren",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lee_Si-Chen",
			"label": "chen lee",
			"seq": "27,34"
		}, {
			"uri": "http://dbpedia.org/resource/Doug_Walgren",
			"label": "walgren doug",
			"seq": "10,21"
		}]
	},
	{
		"id": "fc9e2cac170a44a2abdca158f66cd5af",
		"question": "Where are the politicians buried who succeeded George Whitefield Davis?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/George_Whitefield_Davis> . ?x <http://dbpedia.org/property/restingplace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "605",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "george",
			"seq": "47,52"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "buried",
			"seq": "26,31"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "whitefield",
			"seq": "54,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_Whitefield_Davis",
			"label": "whitefield george davis",
			"seq": "47,69"
		}]
	},
	{
		"id": "6d88e417c33d49cd85eaa5b9dc7b1174",
		"question": "What are the television shows whose network's stockholder is Warner Bros. Television?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Warner_Bros._Television> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "warner",
			"seq": "61,66"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network's",
			"seq": "36,44"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Warner_Bros._Television",
			"label": "television warner bros.",
			"seq": "13,35"
		}]
	},
	{
		"id": "87876aa79cba44138cff493d5e2315c7",
		"question": "Is the assembly of tofa ahin ethopia?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Tofa\u015f_\u015eahin> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Ethiopia> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/assembly",
			"label": "assembly",
			"seq": "7,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tofa\u015f_\u015eahin",
			"label": "tofa ahin",
			"seq": "19,27"
		}, {
			"uri": "http://dbpedia.org/resource/Ethiopia",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4224e0b4c1b448f3b24c6ed62d2b7575",
		"question": "What are some music artists whose bands have signed up with Entertainment One Music?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Entertainment_One_Music> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "bands",
			"seq": "34,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "bands",
			"seq": "34,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Entertainment_One_Music",
			"label": "entertainment music",
			"seq": "14,32"
		}]
	},
	{
		"id": "f17ff46a28de491a93859a94e3046480",
		"question": "Do Ctenochaetus Binotatus lie in the cActinopterygii class?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ctenochaetus_binotatus> <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Actinopterygii> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/class",
			"label": "class",
			"seq": "53,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ctenochaetus_binotatus",
			"label": "ctenochaetus binotatus",
			"seq": "3,24"
		}, {
			"uri": "http://dbpedia.org/resource/Actinopterygii",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ec821782125a4c71bd3630880a66897e",
		"question": "How many food items have an ingredient from the Sapindales family?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Sapindales> . ?uri <http://dbpedia.org/ontology/ingredient> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/order",
			"label": "food",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "28,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Food",
			"label": "food",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sapindales",
			"label": "sapindales",
			"seq": "48,57"
		}]
	},
	{
		"id": "77b265d0903641b2b810680c1bd2bb67",
		"question": "How many movies have had a cinematographer who died in US?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/cinematography> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "have",
			"seq": "16,19"
		}, {
			"uri": "http://dbpedia.org/property/cinematography",
			"label": "cinematographer",
			"seq": "27,41"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "in",
			"seq": "28,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "287db86b21b143a9a561c5ba6db3d528",
		"question": "Which type of  building is Qun Thnh Temple ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Qu\u00e1n_Th\u00e1nh_Temple> <http://dbpedia.org/property/buildingType> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/buildingType",
			"label": "building type",
			"seq": "6,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Qu\u00e1n_Th\u00e1nh_Temple",
			"label": "temple",
			"seq": "36,41"
		}]
	},
	{
		"id": "bf777652c816485f8385ae21e670622b",
		"question": "Does Stanley Cavell study Shakespeare?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Stanley_Cavell> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/William_Shakespeare> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "shakespeare",
			"seq": "26,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stanley_Cavell",
			"label": "stanley cavell",
			"seq": "5,18"
		}, {
			"uri": "http://dbpedia.org/resource/William_Shakespeare",
			"label": "shakespeare",
			"seq": "26,36"
		}]
	},
	{
		"id": "9b45f5f43c2340bf8e4670188fdf164c",
		"question": "Which owner of Chelsea F.C also owns Evraz ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Evraz> <http://dbpedia.org/ontology/owningCompany> ?uri. <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningCompany",
			"label": "owns",
			"seq": "32,35"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Evraz",
			"label": "evraz",
			"seq": "37,41"
		}, {
			"uri": "http://dbpedia.org/resource/Chelsea_F.C.",
			"label": "chelsea f.c",
			"seq": "15,25"
		}]
	},
	{
		"id": "d369a9c08c2447f2b26af647610308bc",
		"question": "Who is the common distributer of Bombay Sapphire and Rev ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bombay_Sapphire> <http://dbpedia.org/property/distributor> ?uri. <http://dbpedia.org/resource/Rev_(drink)> <http://dbpedia.org/ontology/distributor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributer",
			"seq": "18,28"
		}, {
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributer",
			"seq": "18,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bombay_Sapphire",
			"label": "sapphire bombay",
			"seq": "33,47"
		}, {
			"uri": "http://dbpedia.org/resource/Rev_(drink)",
			"label": "rev",
			"seq": "53,55"
		}]
	},
	{
		"id": "635e0b878e574ae6af542fd1e1a9cdac",
		"question": "Name the largest city of the country where the body of Amit Saigal was discovered?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Amit_Saigal> <http://dbpedia.org/ontology/bodyDiscovered> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bodyDiscovered",
			"label": "discovered body",
			"seq": "47,61"
		}, {
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "29,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Amit_Saigal",
			"label": "saigal amit",
			"seq": "55,65"
		}]
	},
	{
		"id": "3f8ac10edaaa4c4cbbde422c79de3c6d",
		"question": "Where is the hometown of A Bartlett Giamatti?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A._Bartlett_Giamatti> <http://dbpedia.org/ontology/hometown> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "hometown",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A._Bartlett_Giamatti",
			"label": "giamatti bartlett",
			"seq": "27,43"
		}]
	},
	{
		"id": "101dfea643e24d1483797bfb175000f1",
		"question": "Which major shrine of Tekle haymanot is the palce of death of Haile Selassie Gugsa ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tekle_Haymanot> <http://dbpedia.org/ontology/majorShrine> ?uri. <http://dbpedia.org/resource/Haile_Selassie_Gugsa> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrine major",
			"seq": "6,17"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "death",
			"seq": "53,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tekle_Haymanot",
			"label": "haymanot tekle",
			"seq": "22,35"
		}, {
			"uri": "http://dbpedia.org/resource/Haile_Selassie_Gugsa",
			"label": "selassie haile gugsa",
			"seq": "62,81"
		}]
	},
	{
		"id": "e63144a282cb442497406a9b189093f7",
		"question": "List the ethnicity of Riley Reid?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/property/ethnicity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/ethnicity",
			"label": "ethnicity",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Riley_Reid",
			"label": "riley reid",
			"seq": "22,31"
		}]
	},
	{
		"id": "09a6fbecddd347ed8eb1e9af79aa1a07",
		"question": "List the fields of the scientists with Sanskrit as one of the interest ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/fields> <http://dbpedia.org/resource/Sanskrit> . ?x <http://dbpedia.org/property/fields> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/fields",
			"label": "fields",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/property/fields",
			"label": "fields",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientists",
			"seq": "23,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sanskrit",
			"label": "sanskrit",
			"seq": "39,46"
		}]
	},
	{
		"id": "0223d728dead415fa225cd560eb8ad33",
		"question": "Who is the headcoach of 2008-09 Marquette Golden Eagles men's basketball team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2008\u201309_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/property/headcoach> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headcoach",
			"label": "headcoach",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2008\u201309_Marquette_Golden_Eagles_men's_basketball_team",
			"label": "basketball marquette golden eagles",
			"seq": "32,65"
		}]
	},
	{
		"id": "dbd52395559b4c3cbf5446916a925b89",
		"question": "Who won the silver medal when the bronze was won by Yang Yilin?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/bronzeMedalist> <http://dbpedia.org/resource/Yang_Yilin> . ?x <http://dbpedia.org/ontology/silverMedalist> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bronzeMedalist",
			"label": "bronze medal",
			"seq": "19,30"
		}, {
			"uri": "http://dbpedia.org/ontology/silverMedalist",
			"label": "silver medal",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Yang_Yilin",
			"label": "yilin yang",
			"seq": "52,61"
		}]
	},
	{
		"id": "6f642ee5a00048ecaeff1c0e0412e4b6",
		"question": "List the work  edited by  Mark Stevens and directed by Joel Schumacher?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Joel_Schumacher>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editing",
			"label": "edited",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/ontology/director",
			"label": "directed",
			"seq": "43,50"
		}, {
			"uri": "http://dbpedia.org/ontology/Work",
			"label": "work",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mark_Stevens_(film_editor)",
			"label": "stevens mark",
			"seq": "26,37"
		}, {
			"uri": "http://dbpedia.org/resource/Joel_Schumacher",
			"label": "schumacher joel",
			"seq": "55,69"
		}]
	},
	{
		"id": "f728bbb501354155898026a4cef7730c",
		"question": "Name the office holder with associate as Marcus Calpurnius Bibulus and has a kid named Augustus?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Augustus>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associate",
			"label": "associate",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/child",
			"label": "holder",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus",
			"label": "calpurnius bibulus marcus",
			"seq": "41,65"
		}, {
			"uri": "http://dbpedia.org/resource/Augustus",
			"label": "augustus",
			"seq": "87,94"
		}]
	},
	{
		"id": "41dbdb533af748c4968df7b35a1cb8ac",
		"question": "List the popular works of the author of Luther: The Calling ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Luther:_The_Calling> <http://dbpedia.org/property/author> ?x . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "author",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "works",
			"seq": "17,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Luther:_The_Calling",
			"label": "luther: calling",
			"seq": "40,54"
		}]
	},
	{
		"id": "3f758b0a0ad24d339835902878769609",
		"question": "Who are the predecessors of John Randolph of Roanoke?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/John_Randolph_of_Roanoke>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessors",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Randolph_of_Roanoke",
			"label": "randolph roanoke john",
			"seq": "28,48"
		}]
	},
	{
		"id": "8eaed436923e4051b575c7c6b88b9797",
		"question": "In which continent do Air 2000 and Novair International airways operate?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Air_2000> <http://dbpedia.org/property/destinations> ?uri. <http://dbpedia.org/resource/Novair_International_Airways> <http://dbpedia.org/property/destinations> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Continent>}",
		"sparql_id": "315",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/destinations",
			"label": "international",
			"seq": "42,54"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "international",
			"seq": "42,54"
		}, {
			"uri": "http://dbpedia.org/ontology/Continent",
			"label": "continent",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Air_2000",
			"label": "2000 air",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/resource/Novair_International_Airways",
			"label": "international airways novair",
			"seq": "35,62"
		}]
	},
	{
		"id": "d4b5df324bec450b833f8f4c1145992c",
		"question": "Is fox belong to the phylum of Chordate?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Fox> <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/phylum",
			"label": "phylum",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fox",
			"label": "fox",
			"seq": "3,5"
		}, {
			"uri": "http://dbpedia.org/resource/Chordate",
			"label": "chordate",
			"seq": "31,38"
		}]
	},
	{
		"id": "1ef735b540d24d54a41b5f259cd99fbd",
		"question": "Who were the first drivers in Grand Prixes where the first team was Scuderia Ferrari?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/firstTeam> <http://dbpedia.org/resource/Scuderia_Ferrari> . ?x <http://dbpedia.org/ontology/firstDriver> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstTeam",
			"label": "first",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/firstDriver",
			"label": "drivers",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/GrandPrix",
			"label": "grand",
			"seq": "30,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Scuderia_Ferrari",
			"label": "scuderia ferrari",
			"seq": "68,83"
		}]
	},
	{
		"id": "5fe5d9294f7a466290ef022f51f60336",
		"question": "Does Abdelhameed Amarri currently play for Khartoum?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Abdelhameed_Amarri> <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/Khartoum> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "currently",
			"seq": "24,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Abdelhameed_Amarri",
			"label": "abdelhameed amarri",
			"seq": "5,22"
		}, {
			"uri": "http://dbpedia.org/resource/Khartoum",
			"label": "khartoum",
			"seq": "43,50"
		}]
	},
	{
		"id": "b9fce2f9e56242169dae47d4d9dbf91a",
		"question": "List the alma mater of the congressmen who attended Nashville, Tennessee ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Nashville,_Tennessee> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Congressman>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Congressman",
			"label": "congressmen",
			"seq": "27,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nashville,_Tennessee",
			"label": "nashville, tennessee",
			"seq": "52,71"
		}]
	},
	{
		"id": "9b7b817753ae40aeae2859d4023cc052",
		"question": "What are the name of the casualties affected by shooting rampage of Eric Harris and Dylan Klebold?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/deathCause> <http://dbpedia.org/resource/Eric_Harris_and_Dylan_Klebold>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "shooting",
			"seq": "48,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eric_Harris_and_Dylan_Klebold",
			"label": "klebold harris",
			"seq": "73,86"
		}]
	},
	{
		"id": "af7cd0b6cb6a40969a0ea593539894cc",
		"question": "List TV shows with producer as Erik Bork and company is DreamWorks Television ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/DreamWorks_Television> . ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Erik_Bork>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/company",
			"label": "company",
			"seq": "45,51"
		}, {
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "67,76"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/DreamWorks_Television",
			"label": "television dreamworks",
			"seq": "56,76"
		}, {
			"uri": "http://dbpedia.org/resource/Erik_Bork",
			"label": "erik bork",
			"seq": "31,39"
		}]
	},
	{
		"id": "5ffd4aac7b004bd480d28d364aeb2aa4",
		"question": "Name the awards that have been given to the writer made famous for Creature Comforts?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Creature_Comforts> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "name",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writer",
			"seq": "44,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Creature_Comforts",
			"label": "creature comforts",
			"seq": "67,83"
		}]
	},
	{
		"id": "6e94b499964c49839c36fe479f49b5ce",
		"question": "Who produces the tv series which made Scott Haran famous?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Scott_Haran> <http://dbpedia.org/ontology/knownFor> ?x . ?x <http://dbpedia.org/ontology/producer> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "who",
			"seq": "0,2"
		}, {
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "produces",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Scott_Haran",
			"label": "scott haran",
			"seq": "38,48"
		}]
	},
	{
		"id": "c0c8c5735c8c4188978cb1911173a8df",
		"question": "List all the faiths that British Columbian politicians follow?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/British_Columbia> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "british",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "politicians",
			"seq": "43,53"
		}, {
			"uri": "http://dbpedia.org/ontology/Politician",
			"label": "politicians",
			"seq": "43,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/British_Columbia",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "98482e0e16ea482f9030d6b2d9cb000f",
		"question": "Which sports are played in the alma mater of Habib Boromand Dashghapu?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Habib_Boromand_Dashghapu> <http://dbpedia.org/property/almaMater> ?x . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "31,40"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Habib_Boromand_Dashghapu",
			"label": "dashghapu boromand habib",
			"seq": "45,68"
		}]
	},
	{
		"id": "4aaaa78384af465b8af13b2217f0ef66",
		"question": "List the television shows whose network's owning company is Turner Broadcasting System?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Turner_Broadcasting_System> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningCompany",
			"label": "company owning",
			"seq": "42,55"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "network's",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Turner_Broadcasting_System",
			"label": "broadcasting turner system",
			"seq": "60,85"
		}]
	},
	{
		"id": "8a89ec10f625479ab78c031ce60bdb2e",
		"question": "Give me a count on associates of Johnny Cash?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Johnny_Cash>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "associates",
			"seq": "19,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Johnny_Cash",
			"label": "johnny cash",
			"seq": "33,43"
		}]
	},
	{
		"id": "0edab4967312457b82a5c2fc9c82b662",
		"question": "What country provides a citizenship too Newin Chidchob and Seni Pramoj?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Newin_Chidchob> <http://dbpedia.org/property/nationality> ?uri. <http://dbpedia.org/resource/Seni_Pramoj> <http://dbpedia.org/ontology/nationality> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationality",
			"label": "country",
			"seq": "5,11"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "country",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Newin_Chidchob",
			"label": "chidchob newin",
			"seq": "40,53"
		}, {
			"uri": "http://dbpedia.org/resource/Seni_Pramoj",
			"label": "pramoj seni",
			"seq": "59,69"
		}]
	},
	{
		"id": "6ba75b7096eb497b85706c1872a9dbdd",
		"question": "What are some devices made by Taiwanese companies?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/locationCity> <http://dbpedia.org/resource/Taiwan> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Device>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCity",
			"label": "companies",
			"seq": "40,48"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Device",
			"label": "devices",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Taiwan",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fb24fef4bec1494480df389bd6d410c1",
		"question": "What is a salthill?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Salthill> <http://dbpedia.org/ontology/type> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/type",
			"label": "what",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Salthill",
			"label": "salthill",
			"seq": "10,17"
		}]
	},
	{
		"id": "146cb6a075864ab787660a7fa34af21a",
		"question": "Who is the musician of Before I let you Go ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Before_I_Let_You_Go> <http://dbpedia.org/ontology/musicalArtist> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalArtist",
			"label": "musician",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Before_I_Let_You_Go",
			"label": "before you let go i",
			"seq": "4,22"
		}]
	},
	{
		"id": "26fa2c8e027f4a21a5d176e264f493db",
		"question": "Which admin center of pulau Ujong is also the largest city of Pulau Ubin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> ?uri. <http://dbpedia.org/resource/Pulau_Ujong> <http://dbpedia.org/ontology/capital> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "46,57"
		}, {
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "city",
			"seq": "54,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pulau_Ubin",
			"label": "pulau ubin",
			"seq": "22,31"
		}, {
			"uri": "http://dbpedia.org/resource/Pulau_Ujong",
			"label": "ujong pulau",
			"seq": "22,32"
		}]
	},
	{
		"id": "2bb0d338072d46e2b06b40c9f3b8f84d",
		"question": "What is the Ceremonial County of Port of Tilbury ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Port_of_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ceremonialCounty",
			"label": "ceremonial county",
			"seq": "12,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Port_of_Tilbury",
			"label": "tilbury port",
			"seq": "33,44"
		}]
	},
	{
		"id": "9a71167ed51b4c7da57c4724f82effdf",
		"question": "What is the current team of John McGuinness (motorcycle racer) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_McGuinness_(motorcycle_racer)> <http://dbpedia.org/property/currentTeam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentTeam",
			"label": "current team",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_McGuinness_(motorcycle_racer)",
			"label": "(motorcycle mcguinness racer)",
			"seq": "33,61"
		}]
	},
	{
		"id": "1231ff04697c489994c5fa0f61486d2e",
		"question": "What is the ideology of the Union of Cambodian Democrats which is also the ideology of Palang Dharma Party ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_of_Cambodian_Democrats> <http://dbpedia.org/ontology/ideology> ?uri. <http://dbpedia.org/resource/Palang_Dharma_Party> <http://dbpedia.org/ontology/ideology> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ideology",
			"label": "ideology",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/ideology",
			"label": "ideology",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Union_of_Cambodian_Democrats",
			"label": "democrats cambodian union",
			"seq": "28,52"
		}, {
			"uri": "http://dbpedia.org/resource/Palang_Dharma_Party",
			"label": "palang dharma party",
			"seq": "87,105"
		}]
	},
	{
		"id": "72496fef2635425da6c20915c894072f",
		"question": "What is the honorary title of the narrator of Everything Will Be OK?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Everything_Will_Be_OK> <http://dbpedia.org/ontology/narrator> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/narrator",
			"label": "narrator",
			"seq": "34,41"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "what",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Everything_Will_Be_OK",
			"label": "everything will",
			"seq": "46,60"
		}]
	},
	{
		"id": "9aa99d04670a49e185afbcd4d2a451f5",
		"question": "Does the white river flow into the connecticut river{u'_id': u'97e02dcf44aa43c1b7cc7a7c155b118f',",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Connecticut_River> <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/White_River_(Vermont)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/rightTributary",
			"label": "connecticut",
			"seq": "35,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Connecticut_River",
			"label": "connecticut river",
			"seq": "15,31"
		}, {
			"uri": "http://dbpedia.org/resource/White_River_(Vermont)",
			"label": "white river",
			"seq": "9,19"
		}]
	},
	{
		"id": "d8afce1fd4aa4a2580832293b1d0d318",
		"question": "Who is the famous relative of Kelly Osbourne?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Kelly_Osbourne>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relative",
			"seq": "18,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kelly_Osbourne",
			"label": "osbourne kelly",
			"seq": "30,43"
		}]
	},
	{
		"id": "cdd77de1c8c7471fa087116e8d6f3f19",
		"question": "What are some cars similar to luxury cars?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/class> <http://dbpedia.org/resource/Luxury_vehicle> . ?x <http://dbpedia.org/property/related> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/class",
			"label": "cars",
			"seq": "14,17"
		}, {
			"uri": "http://dbpedia.org/property/related",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "some",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Luxury_vehicle",
			"label": "luxury",
			"seq": "30,35"
		}]
	},
	{
		"id": "c025e34523ad4f878edcceb8291c9d56",
		"question": "What is the total number of other destinations of the airlines whose one of the destinations is Mediterranean Sea?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Mediterranean_Sea> . ?x <http://dbpedia.org/property/destinations> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/destinations",
			"label": "destinations",
			"seq": "34,45"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "destinations",
			"seq": "34,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mediterranean_Sea",
			"label": "mediterranean",
			"seq": "96,108"
		}]
	},
	{
		"id": "d8830ee89d0547a7ba604e685fe17819",
		"question": "What is the regional radio sports network associated with?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Regional_Radio_Sports_Network> <http://dbpedia.org/property/affiliations> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "associated",
			"seq": "42,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Regional_Radio_Sports_Network",
			"label": "regional network sports radio",
			"seq": "12,40"
		}]
	},
	{
		"id": "0ed54b0efa694946800d7e772920ffce",
		"question": "List the software developed by Shawn Fanning ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Shawn_Fanning>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shawn_Fanning",
			"label": "fanning shawn",
			"seq": "31,43"
		}]
	},
	{
		"id": "1b0d7ff1c88044248561bde3b1c452da",
		"question": "Count the number of things people who know linguistics are known for ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Linguistics> . ?x <http://dbpedia.org/ontology/knownFor> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known",
			"seq": "59,63"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known",
			"seq": "59,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Linguistics",
			"label": "linguistics",
			"seq": "43,53"
		}]
	},
	{
		"id": "c9d240e63ba642689eb8e646e435a6e5",
		"question": "In which state does the ambassador who is in related with J Bennett Johnston live?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/J._Bennett_Johnston> <http://dbpedia.org/ontology/relation> ?x . ?x <http://dbpedia.org/property/state> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "related",
			"seq": "45,51"
		}, {
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/J._Bennett_Johnston",
			"label": "johnston bennett",
			"seq": "60,75"
		}]
	},
	{
		"id": "5347e3d7e51348bb814413a5707b97f3",
		"question": "Who is the employer of Michael M. Sears ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_M._Sears> <http://dbpedia.org/property/employer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "employer",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_M._Sears",
			"label": "michael sears",
			"seq": "23,35"
		}]
	},
	{
		"id": "9f9eec1d2b8b4a918048a556e1a1bda5",
		"question": "Does mumbai manage the railway line going to the daund railway junction?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> <http://dbpedia.org/resource/Mumbai> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/servingRailwayLine",
			"label": "railway",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Daund_Junction_railway_station",
			"label": "junction railway daund",
			"seq": "23,44"
		}, {
			"uri": "http://dbpedia.org/resource/Mumbai",
			"label": "mumbai",
			"seq": "5,10"
		}]
	},
	{
		"id": "7f5ac3d1ae004898ac4a4452eb9f8633",
		"question": "Whihc place of birth of the Union State is also the largest city of Union Staete ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_State> <http://dbpedia.org/property/largestCity> ?uri. <http://dbpedia.org/resource/Nina_Vislova> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/largestCity",
			"label": "largest city",
			"seq": "52,63"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Union_State",
			"label": "union state",
			"seq": "28,38"
		}, {
			"uri": "http://dbpedia.org/resource/Nina_Vislova",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fbd32172a29a4fa99c58fb5f6b536bff",
		"question": "Who is the stockholder of the road tunnels operated by the Massachusetts Department of Transportation?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/operator> <http://dbpedia.org/resource/Massachusetts_Department_of_Transportation> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RoadTunnel>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operator",
			"label": "operated",
			"seq": "43,50"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "operated",
			"seq": "43,50"
		}, {
			"uri": "http://dbpedia.org/ontology/RoadTunnel",
			"label": "tunnels",
			"seq": "35,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Massachusetts_Department_of_Transportation",
			"label": "transportation massachusetts department",
			"seq": "59,97"
		}]
	},
	{
		"id": "921cd73c37684f80bc35975c857bc622",
		"question": "Through which counties does the road go which starts at the Port Klang?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/routeStart> <http://dbpedia.org/resource/Port_Klang> . ?x <http://dbpedia.org/ontology/county> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Road>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "starts",
			"seq": "46,51"
		}, {
			"uri": "http://dbpedia.org/ontology/county",
			"label": "counties",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Road",
			"label": "road",
			"seq": "32,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Port_Klang",
			"label": "klang port",
			"seq": "60,69"
		}]
	},
	{
		"id": "f3545d9f2444478d8c70f13b4ead6094",
		"question": "Under which president did some politicians live in Kensington?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Kensington,_Maryland> . ?x <http://dbpedia.org/ontology/president> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "president",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "which",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kensington,_Maryland",
			"label": "kensington",
			"seq": "51,60"
		}]
	},
	{
		"id": "d966774a4f744b009b17755dbd061e11",
		"question": "What awards were given to the producer of Chicken Little?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Chicken_Little_(1943_film)> <http://dbpedia.org/ontology/producer> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chicken_Little_(1943_film)",
			"label": "chicken little",
			"seq": "42,55"
		}]
	},
	{
		"id": "87c34662138f4e4b911440985824435c",
		"question": "What is the home stadium of the club coached by Justine Omojong?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Justine_Omojong> . ?x <http://dbpedia.org/property/homeStadium> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coach",
			"label": "coached",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/property/homeStadium",
			"label": "stadium home",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClub",
			"label": "club",
			"seq": "32,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Justine_Omojong",
			"label": "omojong justine",
			"seq": "48,62"
		}]
	},
	{
		"id": "1220a8e5611d4f3da78af05e41f06c15",
		"question": "To what companies is Dennis Muilenburg important?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Dennis_Muilenburg>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "companies",
			"seq": "8,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "8,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dennis_Muilenburg",
			"label": "muilenburg dennis",
			"seq": "21,37"
		}]
	},
	{
		"id": "db0ceedbcf0e4e1ca708191b92dc2b59",
		"question": "Whose children died in North Bend, Ohio?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/North_Bend,_Ohio> . ?uri <http://dbpedia.org/ontology/child> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "died",
			"seq": "15,18"
		}, {
			"uri": "http://dbpedia.org/ontology/child",
			"label": "children",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North_Bend,_Ohio",
			"label": "north bend, ohio",
			"seq": "23,38"
		}]
	},
	{
		"id": "732a9efd20d74796b8805987d0bcf033",
		"question": "What is the governing body of Burro Flats Painted Cave ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Burro_Flats_Painted_Cave> <http://dbpedia.org/ontology/governingBody> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governingBody",
			"label": "governing body",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Burro_Flats_Painted_Cave",
			"label": "painted flats burro cave",
			"seq": "30,53"
		}]
	},
	{
		"id": "2b1b78d738c7454dbc224bdc6ccf3ff2",
		"question": "whose is famous works are Maniac Magee and Wringer ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/notableworks> <http://dbpedia.org/resource/Maniac_Magee> . ?uri <http://dbpedia.org/property/notableworks> <http://dbpedia.org/resource/Wringer_(novel)> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "works",
			"seq": "16,20"
		}, {
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "works",
			"seq": "16,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maniac_Magee",
			"label": "maniac magee",
			"seq": "26,37"
		}, {
			"uri": "http://dbpedia.org/resource/Wringer_(novel)",
			"label": "wringer",
			"seq": "43,49"
		}]
	},
	{
		"id": "b9c19bf4a7b2452184d20d0130556a0f",
		"question": "Is Lieutenant general (United States) the superintendent of United States Air Force Academy?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/United_States_Air_Force_Academy> <http://dbpedia.org/property/superintendent> <http://dbpedia.org/resource/Lieutenant_general_(United_States)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/superintendent",
			"label": "superintendent",
			"seq": "42,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Air_Force_Academy",
			"label": "academy united states",
			"seq": "23,43"
		}, {
			"uri": "http://dbpedia.org/resource/Lieutenant_general_(United_States)",
			"label": "lieutenant states) general (united",
			"seq": "3,36"
		}]
	},
	{
		"id": "35a6ca70f4ec420db9bc0726e28369a3",
		"question": "Who operates the railway line which begins in Minneapolis?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/routeStart> <http://dbpedia.org/resource/Minneapolis> . ?x <http://dbpedia.org/ontology/operatedBy> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayLine>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "operates",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operates",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/ontology/RailwayLine",
			"label": "railway line",
			"seq": "17,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Minneapolis",
			"label": "minneapolis",
			"seq": "46,56"
		}]
	},
	{
		"id": "5f0366cd125f4976a4b7362c81b098cd",
		"question": "Who is the owner of the website which has the label Seed Eight ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Seed_Eight> <http://dbpedia.org/property/label> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Website>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "46,50"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Website",
			"label": "website",
			"seq": "24,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Seed_Eight",
			"label": "eight seed",
			"seq": "52,61"
		}]
	},
	{
		"id": "2c0f7eee1b634f1895cbd246bd8c6e3c",
		"question": "What is the venerated in of the Abraham and religion of the Saima Chowdhury",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Abraham> <http://dbpedia.org/property/veneratedIn> ?uri. <http://dbpedia.org/resource/Saima_Chowdhury> <http://dbpedia.org/property/religion> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "venerated",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "religion",
			"seq": "44,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Abraham",
			"label": "abraham",
			"seq": "32,38"
		}, {
			"uri": "http://dbpedia.org/resource/Saima_Chowdhury",
			"label": "chowdhury saima",
			"seq": "60,74"
		}]
	},
	{
		"id": "6ea80116b84f49ef9ac58da5151f1fea",
		"question": "To which label did The Producers and I pray on Christmas sign up?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Producers_(2005_film)> <http://dbpedia.org/property/label> ?uri. <http://dbpedia.org/resource/I_Pray_on_Christmas> <http://dbpedia.org/property/label> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Producers_(2005_film)",
			"label": "producers",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/resource/I_Pray_on_Christmas",
			"label": "christmas",
			"seq": "47,55"
		}]
	},
	{
		"id": "78406ab0c12f410ea4fe01eb52998c48",
		"question": "Wo which countries have the members of Ukrainian ministry of internal affairs swore their oath?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Ministry_of_Internal_Affairs_(Ukraine)> . ?x <http://dbpedia.org/property/allegiance> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "ukrainian",
			"seq": "39,47"
		}, {
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "ukrainian",
			"seq": "39,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ministry_of_Internal_Affairs_(Ukraine)",
			"label": "ministry internal affairs",
			"seq": "49,73"
		}]
	},
	{
		"id": "95206ae40dfc4899ae52dc8c2629db84",
		"question": "Where did the conflict take place in which Henri Putz fought?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Henri_Putz> <http://dbpedia.org/ontology/battle> ?x . ?x <http://dbpedia.org/ontology/territory> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "the",
			"seq": "10,12"
		}, {
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "henri",
			"seq": "43,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henri_Putz",
			"label": "henri putz",
			"seq": "43,52"
		}]
	},
	{
		"id": "dc8a5681c7d44c77b2ca46dfd4f97216",
		"question": "Which producer of  the Eristoff is also the  distributor of  Bombay Sapphire?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eristoff> <http://dbpedia.org/property/manufacturer> ?uri. <http://dbpedia.org/resource/Bombay_Sapphire> <http://dbpedia.org/property/distributor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/manufacturer",
			"label": "sapphire",
			"seq": "68,75"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributor",
			"seq": "45,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eristoff",
			"label": "eristoff",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/resource/Bombay_Sapphire",
			"label": "sapphire bombay",
			"seq": "61,75"
		}]
	},
	{
		"id": "08b90a2d429c4706bb5362d8b58190a7",
		"question": "What is the organisation whose purposes are Environmentalism and Peace?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism> . ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/purpose",
			"label": "purposes",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/property/purpose",
			"label": "purposes",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organisation",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Environmentalism",
			"label": "environmentalism",
			"seq": "44,59"
		}, {
			"uri": "http://dbpedia.org/resource/Peace",
			"label": "peace",
			"seq": "65,69"
		}]
	},
	{
		"id": "bac245d8e39a47c1829470a9261b80c3",
		"question": "Which sports by Polytechnic University of the Philippines Taguig is the discipline of The Chess Monthly ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Chess_Monthly> <http://dbpedia.org/property/discipline> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/discipline",
			"label": "discipline",
			"seq": "72,81"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Chess_Monthly",
			"label": "monthly chess the",
			"seq": "42,58"
		}, {
			"uri": "http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig",
			"label": "polytechnic philippines university",
			"seq": "16,49"
		}]
	},
	{
		"id": "93c37c563c8b4f0f9b070340f1fa1630",
		"question": "Name the series of Doctor Who: Evacuation Earth ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Doctor_Who:_Evacuation_Earth> <http://dbpedia.org/ontology/series> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Doctor_Who:_Evacuation_Earth",
			"label": "evacuation doctor earth who:",
			"seq": "19,46"
		}]
	},
	{
		"id": "fa0015d04c344e6cb138c160055c7bc6",
		"question": "Which company of Ford Theatre is the owning organization of F0ord Kansa City Assemply Plant ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> <http://dbpedia.org/ontology/owningOrganisation> ?uri. <http://dbpedia.org/resource/Ford_Theatre> <http://dbpedia.org/property/company> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningOrganisation",
			"label": "organization",
			"seq": "44,55"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Ford_Theatre",
			"label": "theatre ford",
			"seq": "17,28"
		}]
	},
	{
		"id": "daa90042f4ff4210a603ae0931b2e92d",
		"question": "Name a royalty whose one of the child is Augustus  and is associated with Publius Servilius Vatia Isauricus?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Augustus> . ?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Publius_Servilius_Vatia_Isauricus_(consul_48_BC)>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "child",
			"seq": "32,36"
		}, {
			"uri": "http://dbpedia.org/ontology/associate",
			"label": "associated",
			"seq": "58,67"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Augustus",
			"label": "augustus",
			"seq": "41,48"
		}, {
			"uri": "http://dbpedia.org/resource/Publius_Servilius_Vatia_Isauricus_(consul_48_BC)",
			"label": "servilius isauricus publius vatia",
			"seq": "74,106"
		}]
	},
	{
		"id": "ff5b48cd5c5346e19a026ec964d8fc9d",
		"question": "Is Lyndon bridge a kind of Truss bridge?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Lyndon_Bridge> <http://dbpedia.org/property/design> <http://dbpedia.org/resource/Truss_bridge> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/design",
			"label": "kind",
			"seq": "19,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lyndon_Bridge",
			"label": "lyndon bridge",
			"seq": "3,15"
		}, {
			"uri": "http://dbpedia.org/resource/Truss_bridge",
			"label": "bridge truss",
			"seq": "10,21"
		}]
	},
	{
		"id": "df292d030ce14f19904cf9e50c046181",
		"question": "Which country gave birth to the Lemberger LD20b and Start+Flug H101 aircrafts?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lemberger_LD20b> <http://dbpedia.org/property/nationalOrigin> ?uri. <http://dbpedia.org/resource/Start_+_Flug_H-101> <http://dbpedia.org/property/nationalOrigin> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalOrigin",
			"label": "start+flug",
			"seq": "52,61"
		}, {
			"uri": "http://dbpedia.org/property/nationalOrigin",
			"label": "start+flug",
			"seq": "52,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lemberger_LD20b",
			"label": "lemberger ld20b",
			"seq": "32,46"
		}, {
			"uri": "http://dbpedia.org/resource/Start_+_Flug_H-101",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "cc83b16990044389a146f6d649f878d8",
		"question": "What water bodies have primary inflows sa Kemijoki?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/inflow> <http://dbpedia.org/resource/Kemijoki> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/inflow",
			"label": "inflows",
			"seq": "31,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kemijoki",
			"label": "kemijoki",
			"seq": "42,49"
		}]
	},
	{
		"id": "07d85a1276ff4600947c0e31a1cfbdb8",
		"question": "Where is Ethiopian Parliament Building located ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ethiopian_Parliament_Building> <http://dbpedia.org/property/locationCountry> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "located",
			"seq": "39,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ethiopian_Parliament_Building",
			"label": "parliament ethiopian building",
			"seq": "9,37"
		}]
	},
	{
		"id": "dcec37f25d32481aa9f9ed53d204e888",
		"question": "In which nation does the league take place where C.D. Primeiro de Agosto play?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/C.D._Primeiro_de_Agosto_(basketball)> <http://dbpedia.org/ontology/league> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsLeague>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/league",
			"label": "league",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "nation",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsLeague",
			"label": "league",
			"seq": "25,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/C.D._Primeiro_de_Agosto_(basketball)",
			"label": "primeiro agosto",
			"seq": "54,68"
		}]
	},
	{
		"id": "83382bb589c04cbcb6617f67fc123310",
		"question": "Colin Powell was the commander of which military conflict ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Colin_Powell>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "military conflict",
			"seq": "40,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colin_Powell",
			"label": "powell colin",
			"seq": "0,11"
		}]
	},
	{
		"id": "3f4e1777926347a99cba52bdca19ce51",
		"question": "Name the garrison of the Western Naval Command and line of the Vadodara Junction railway station ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Western_Naval_Command> <http://dbpedia.org/property/garrison> ?uri. <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/property/line> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/garrison",
			"label": "garrison",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/line",
			"label": "line",
			"seq": "51,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Western_Naval_Command",
			"label": "western command naval",
			"seq": "25,45"
		}, {
			"uri": "http://dbpedia.org/resource/Vadodara_Junction_railway_station",
			"label": "vadodara junction station railway",
			"seq": "63,95"
		}]
	},
	{
		"id": "390932ca27634c5d95ed6cc8e1cc22e1",
		"question": "Enumerate the cars related to the ones assembled in Toluca?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Toluca> . ?x <http://dbpedia.org/property/related> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/assembly",
			"label": "assembled",
			"seq": "39,47"
		}, {
			"uri": "http://dbpedia.org/property/related",
			"label": "related",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toluca",
			"label": "toluca",
			"seq": "52,57"
		}]
	},
	{
		"id": "f05f216ef164453abedf0403b3b1eedc",
		"question": "Which cloud platform of Google cloud connect also provides services to 21Vianet ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/21Vianet> <http://dbpedia.org/property/services> ?uri. <http://dbpedia.org/resource/Google_Cloud_Connect> <http://dbpedia.org/ontology/computingPlatform> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "59,66"
		}, {
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "platform",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/21Vianet",
			"label": "21vianet",
			"seq": "71,78"
		}, {
			"uri": "http://dbpedia.org/resource/Google_Cloud_Connect",
			"label": "connect google cloud",
			"seq": "6,25"
		}]
	},
	{
		"id": "1151e6908881444aab1d23d7ba18118b",
		"question": "Who wrote the album coming right before Dead Man's Chest's OST?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/nextAlbum> <http://dbpedia.org/resource/Pirates_of_the_Caribbean:_Dead_Man's_Chest_(soundtrack)> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nextAlbum",
			"label": "album",
			"seq": "14,18"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "wrote",
			"seq": "4,8"
		}, {
			"uri": "http://dbpedia.org/ontology/Album",
			"label": "album",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pirates_of_the_Caribbean:_Dead_Man's_Chest_(soundtrack)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "b880859b1271437abc4a9eb3d7e1e368",
		"question": "List all areas served by the radio station serving South carolina ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/area> <http://dbpedia.org/resource/South_Carolina> . ?x <http://dbpedia.org/property/area> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/area",
			"label": "areas",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/property/area",
			"label": "areas",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/RadioStation",
			"label": "station radio",
			"seq": "29,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Carolina",
			"label": "carolina south",
			"seq": "51,64"
		}]
	},
	{
		"id": "54a6aa13eada429ab1b9d56d49a087ec",
		"question": "Malaysian highway authority has designed bridges over what things?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Malaysian_Highway_Authority> . ?x <http://dbpedia.org/property/crosses> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "32,39"
		}, {
			"uri": "http://dbpedia.org/property/crosses",
			"label": "bridges",
			"seq": "41,47"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridges",
			"seq": "41,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Malaysian_Highway_Authority",
			"label": "malaysian authority highway",
			"seq": "0,26"
		}]
	},
	{
		"id": "133cd7d5f379447cba8204eebe933035",
		"question": "Where can I find companies which originated in Canada?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Canada> . ?x <http://dbpedia.org/property/locations> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "originated",
			"seq": "33,42"
		}, {
			"uri": "http://dbpedia.org/property/locations",
			"label": "can",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "17,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canada",
			"label": "canada",
			"seq": "47,52"
		}]
	},
	{
		"id": "bed42761fb204d2d921d29f6c2f208f9",
		"question": "Which school of jack mcGregor attend which was also the training center of William Anthony ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?uri. <http://dbpedia.org/resource/William_Anthony_(artist)> <http://dbpedia.org/ontology/training> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/education",
			"label": "anthony",
			"seq": "83,89"
		}, {
			"uri": "http://dbpedia.org/ontology/training",
			"label": "training",
			"seq": "56,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jack_McGregor",
			"label": "mcgregor jack",
			"seq": "16,28"
		}, {
			"uri": "http://dbpedia.org/resource/William_Anthony_(artist)",
			"label": "william anthony",
			"seq": "75,89"
		}]
	},
	{
		"id": "3d59ca37e4b14a8cb41c75edc17b64a4",
		"question": "What is the university to which Erica Frank went, and where Ivan Toplak was a club manager?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Erica_Frank> <http://dbpedia.org/ontology/institution> ?uri. <http://dbpedia.org/resource/Ivan_Toplak> <http://dbpedia.org/ontology/managerClub> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "university",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/managerClub",
			"label": "manager club",
			"seq": "78,89"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erica_Frank",
			"label": "frank erica",
			"seq": "32,42"
		}, {
			"uri": "http://dbpedia.org/resource/Ivan_Toplak",
			"label": "toplak ivan",
			"seq": "60,70"
		}]
	},
	{
		"id": "2777b95873e84c3fb7296d2c71c9a917",
		"question": "To which party do the politicians who died in Delhi belong?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Delhi> . ?x <http://dbpedia.org/property/party> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "party",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "which",
			"seq": "3,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Delhi",
			"label": "delhi",
			"seq": "46,50"
		}]
	},
	{
		"id": "e3b7d06679344c72ad872f44eef2b7ec",
		"question": "Which appointer of William Clark is the successor of Levi Lincoln Sr ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Levi_Lincoln,_Sr.> <http://dbpedia.org/property/successor> ?uri. <http://dbpedia.org/resource/William_Clark> <http://dbpedia.org/property/appointer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "40,48"
		}, {
			"uri": "http://dbpedia.org/property/appointer",
			"label": "appointer",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Levi_Lincoln,_Sr.",
			"label": "lincoln levi",
			"seq": "53,64"
		}, {
			"uri": "http://dbpedia.org/resource/William_Clark",
			"label": "william clark",
			"seq": "19,31"
		}]
	},
	{
		"id": "a1e36ed22095495ebef02d6a2bcc945b",
		"question": "What is the hometown of the residents of Martha's vineyards?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Martha's_Vineyard> . ?x <http://dbpedia.org/ontology/hometown> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residents",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "hometown",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Martha's_Vineyard",
			"label": "martha's",
			"seq": "41,48"
		}]
	},
	{
		"id": "76748f8d6e754610ad1d151828b63d55",
		"question": "Which companies have launched a rocket from Cape Canaveral Air Force station?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Rocket>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launched",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "canaveral",
			"seq": "49,57"
		}, {
			"uri": "http://dbpedia.org/ontology/Rocket",
			"label": "rocket",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station",
			"label": "canaveral station",
			"seq": "49,65"
		}]
	},
	{
		"id": "d93f15c842c845829c54b1d588a83f82",
		"question": "What artists are associated with the members of the Catalin Maruta?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/C\u0103t\u0103lin_M\u0103ru\u021b\u0103> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated",
			"seq": "17,26"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated",
			"seq": "17,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/C\u0103t\u0103lin_M\u0103ru\u021b\u0103",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4672bed413aa4edca536b02a3e76dd48",
		"question": "Does the north carolina highway 280 end in Arden?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/North_Carolina_Highway_280> <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Arden,_North_Carolina> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "end",
			"seq": "36,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North_Carolina_Highway_280",
			"label": "carolina highway north 280",
			"seq": "9,34"
		}, {
			"uri": "http://dbpedia.org/resource/Arden,_North_Carolina",
			"label": "carolina north arden",
			"seq": "9,28"
		}]
	},
	{
		"id": "f3916ff99c6d498498ec98407decac8f",
		"question": "How many people are buried in the Mausoleum of Augustus?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Mausoleum_of_Augustus>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mausoleum_of_Augustus",
			"label": "mausoleum augustus",
			"seq": "34,51"
		}]
	},
	{
		"id": "7f1aa7621a7b4850b65ae46159adfa1b",
		"question": "How many soccer manager have been in the Spain nation football team?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Spain_national_football_team>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "nation team",
			"seq": "47,57"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerManager",
			"label": "manager soccer",
			"seq": "9,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Spain_national_football_team",
			"label": "football nation spain team",
			"seq": "41,66"
		}]
	},
	{
		"id": "243a759bcba94cc98226ca3477da618a",
		"question": "List bacteria whose order (taxonomy) is Bacillales and domain is Bacteria?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/order",
			"label": "order",
			"seq": "20,24"
		}, {
			"uri": "http://dbpedia.org/property/domain",
			"label": "domain",
			"seq": "55,60"
		}, {
			"uri": "http://dbpedia.org/ontology/Bacteria",
			"label": "bacteria",
			"seq": "5,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bacillales",
			"label": "bacillales",
			"seq": "40,49"
		}, {
			"uri": "http://dbpedia.org/resource/Bacteria",
			"label": "bacteria",
			"seq": "5,12"
		}]
	},
	{
		"id": "64a685047e5d4bee91966f92474abfdf",
		"question": "Name the writer whose one of the notable work is Adventures of Huckleberry Finn and died in Redding, Connecticut?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Adventures_of_Huckleberry_Finn> . ?uri <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Redding,_Connecticut>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "notable work",
			"seq": "33,44"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writer",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Adventures_of_Huckleberry_Finn",
			"label": "huckleberry adventures finn",
			"seq": "49,75"
		}, {
			"uri": "http://dbpedia.org/resource/Redding,_Connecticut",
			"label": "connecticut redding,",
			"seq": "92,111"
		}]
	},
	{
		"id": "e6e376c1a4f14e9abe7402a8a5f35816",
		"question": "Name the broadcast area of ITV (Thailand) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/ITV_(Thailand)> <http://dbpedia.org/property/broadcastArea> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/broadcastArea",
			"label": "broadcast area",
			"seq": "9,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/ITV_(Thailand)",
			"label": "(thailand) itv",
			"seq": "27,40"
		}]
	},
	{
		"id": "ef13c41037dc4f3a91ab5ec30d53ffa0",
		"question": "What sports are played in schools in Vashi?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Vashi> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "in",
			"seq": "23,24"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vashi",
			"label": "vashi",
			"seq": "37,41"
		}]
	},
	{
		"id": "d9a4e4e556544ea0b794d7fbab357cef",
		"question": "Who owns the radio stations in Alabama?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Alabama> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "in",
			"seq": "28,29"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owns",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/RadioStation",
			"label": "stations",
			"seq": "19,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alabama",
			"label": "alabama",
			"seq": "31,37"
		}]
	},
	{
		"id": "c766098f1479492fb8d4e687ad9ea182",
		"question": "Was Johnny Depp a member of Skull Gang?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Skull_Gang> <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Johnny_Depp> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "member",
			"seq": "18,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Skull_Gang",
			"label": "skull gang",
			"seq": "28,37"
		}, {
			"uri": "http://dbpedia.org/resource/Johnny_Depp",
			"label": "johnny depp",
			"seq": "4,14"
		}]
	},
	{
		"id": "083343f08ded4af6b8fabe50e2600b71",
		"question": "How many sports are played at the university whose president is Emanuel de Guzman?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Emanuel_de_Guzman> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sport>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "51,59"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Sport",
			"label": "sports",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Emanuel_de_Guzman",
			"label": "emanuel guzman",
			"seq": "64,77"
		}]
	},
	{
		"id": "e487c6936b554e3d8395e85c17492758",
		"question": "Scientists at the University of Queensland have won which awards?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/University_of_Queensland> . ?x <http://dbpedia.org/property/awards> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "awards",
			"seq": "58,63"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "58,63"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientists",
			"seq": "0,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/University_of_Queensland",
			"label": "university queensland",
			"seq": "18,38"
		}]
	},
	{
		"id": "80c973d818ed45dfbaaaf86dd592f053",
		"question": "Who is the owner of  Latvian Wikipedia and Wiktionary ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Latvian_Wikipedia> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Wiktionary> <http://dbpedia.org/ontology/owner> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owner",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owner",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Latvian_Wikipedia",
			"label": "wikipedia latvian",
			"seq": "21,37"
		}, {
			"uri": "http://dbpedia.org/resource/Wiktionary",
			"label": "wiktionary",
			"seq": "43,52"
		}]
	},
	{
		"id": "3c55183d437f49039e6d568fb6623c8f",
		"question": "Philadelphia City Council is the governing body of which city?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Philadelphia_City_Council> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governing body",
			"seq": "33,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Philadelphia_City_Council",
			"label": "philadelphia council city",
			"seq": "0,24"
		}]
	},
	{
		"id": "ccfbcef8a6b643ca81124ab5f600bcdd",
		"question": "What are the television shows whose Composer is Stewart Copeland?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/composer> <http://dbpedia.org/resource/Stewart_Copeland>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/composer",
			"label": "composer",
			"seq": "36,43"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stewart_Copeland",
			"label": "copeland stewart",
			"seq": "48,63"
		}]
	},
	{
		"id": "c2faa296b9ad4e5387981be381e83c53",
		"question": "What is the television show whose opening theme is Where Everybody Knows Your Name?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opening theme",
			"seq": "34,46"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name",
			"label": "everybody",
			"seq": "57,65"
		}]
	},
	{
		"id": "b3cd59226f27478faeb65afb4ba0b123",
		"question": "Who follow religions led by David Miscavige?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/David_Miscavige> . ?uri <http://dbpedia.org/ontology/religion> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "led",
			"seq": "21,23"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Miscavige",
			"label": "miscavige david",
			"seq": "28,42"
		}]
	},
	{
		"id": "72cc5d9d290e4955a73f49b22c0110b3",
		"question": "name the Glover's distributer ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Glover_(video_game)> <http://dbpedia.org/ontology/distributor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributer",
			"seq": "18,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Glover_(video_game)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "83a8ac74414c41bdb0cbf6842d12b28f",
		"question": "What nation is Hornito located in, where Jamie Bateman Cayn died too?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jaime_Bateman_Cay\u00f3n> <http://dbpedia.org/ontology/deathPlace> ?uri. <http://dbpedia.org/resource/Hornito,_Chiriqu\u00ed> <http://dbpedia.org/ontology/country> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "located",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "cayn",
			"seq": "55,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jaime_Bateman_Cay\u00f3n",
			"label": "bateman",
			"seq": "47,53"
		}, {
			"uri": "http://dbpedia.org/resource/Hornito,_Chiriqu\u00ed",
			"label": "hornito",
			"seq": "15,21"
		}]
	},
	{
		"id": "0d13e24003bc48eb9d6db732d5e11931",
		"question": "Which country had the county seats as History of Trier and Mediolanum?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/History_of_Trier> . ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Mediolanum> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "seats",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "seats",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/History_of_Trier",
			"label": "history trier",
			"seq": "38,50"
		}, {
			"uri": "http://dbpedia.org/resource/Mediolanum",
			"label": "mediolanum",
			"seq": "59,68"
		}]
	},
	{
		"id": "cd9712900aa94048b9a54b08142c25f4",
		"question": "List the Sci-fi TV shows with theme music given by Ron Grainer?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Science_fiction> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/genre",
			"label": "given",
			"seq": "42,46"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "theme music",
			"seq": "30,40"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Science_fiction",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Ron_Grainer",
			"label": "grainer ron",
			"seq": "51,61"
		}]
	},
	{
		"id": "7581b52f96f34e7cafd94f2af924760e",
		"question": "How many shows belong to the network one of whose sister station is Cartoonite?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/Cartoonito> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sisterStation",
			"label": "station sister",
			"seq": "50,63"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "network",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cartoonito",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fa725591411f4ce1ae2beceed79c3adb",
		"question": "who are all the people who have managed the England's under 20 soccer team?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/England_national_under-20_football_team> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/managerClub",
			"label": "managed",
			"seq": "32,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England_national_under-20_football_team",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6fea069c838141f8842dd0965d1d918c",
		"question": "Moscow-Kazan high speed railway starts from which station?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moscow-Kazan_high-speed_railway> <http://dbpedia.org/ontology/routeStart> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "starts",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Moscow-Kazan_high-speed_railway",
			"label": "moscow-kazan railway speed high",
			"seq": "0,30"
		}]
	},
	{
		"id": "2af11bb3bb23402891e39bffb10bc960",
		"question": "Where are all the protected areas near Bend, Oregon?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/nearestCity> <http://dbpedia.org/resource/Bend,_Oregon> . ?x <http://dbpedia.org/ontology/location> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProtectedArea>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "near",
			"seq": "34,37"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "oregon",
			"seq": "45,50"
		}, {
			"uri": "http://dbpedia.org/ontology/ProtectedArea",
			"label": "protected",
			"seq": "18,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bend,_Oregon",
			"label": "oregon bend,",
			"seq": "39,50"
		}]
	},
	{
		"id": "ede4d3ef0e754051afede4dcc6babe40",
		"question": "Does the hudson river flow into the lower manhatten?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Hudson_River> <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Lower_Manhattan> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthMountain",
			"label": "hudson",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hudson_River",
			"label": "hudson river",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/resource/Lower_Manhattan",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "229e4197d78f417ca569f31cb727d19d",
		"question": "In how many places did Julian Leow Beng Kim study?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Julian_Leow_Beng_Kim> <http://dbpedia.org/property/almaMater> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "402",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "places",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "study",
			"seq": "44,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Julian_Leow_Beng_Kim",
			"label": "julian leow beng kim",
			"seq": "23,42"
		}]
	},
	{
		"id": "f413c412b8084c02a0a9a82589b5c916",
		"question": "What is the common university iof vanderbilt Commodores and also the college of hubert Wiggs ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vanderbilt_Commodores> <http://dbpedia.org/ontology/university> ?uri. <http://dbpedia.org/resource/Hubert_Wiggs> <http://dbpedia.org/ontology/college> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/university",
			"label": "university",
			"seq": "19,28"
		}, {
			"uri": "http://dbpedia.org/ontology/college",
			"label": "college",
			"seq": "69,75"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vanderbilt_Commodores",
			"label": "vanderbilt commodores",
			"seq": "34,54"
		}, {
			"uri": "http://dbpedia.org/resource/Hubert_Wiggs",
			"label": "hubert wiggs",
			"seq": "80,91"
		}]
	},
	{
		"id": "7e85b0de27ab4b60aeca0149dd793305",
		"question": "Which royal people are buried in Rome?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "people",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "royal",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rome",
			"label": "rome",
			"seq": "33,36"
		}]
	},
	{
		"id": "a9dbfce5738c47e2bb59273f4492c7b3",
		"question": "How many movies have been directed by almunies of Parsons School of Design?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/Parsons_School_of_Design> . ?uri <http://dbpedia.org/ontology/director> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "design",
			"seq": "68,73"
		}, {
			"uri": "http://dbpedia.org/ontology/director",
			"label": "directed",
			"seq": "26,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "47,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Parsons_School_of_Design",
			"label": "parsons school design",
			"seq": "50,70"
		}]
	},
	{
		"id": "e53671fb7bb643e7a161cbd7560e68f6",
		"question": "Give me a count on scientist who are known for garrison is Tennessee ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Tennessee> . ?uri <http://dbpedia.org/property/knownFor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/garrison",
			"label": "garrison",
			"seq": "47,54"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "37,45"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "19,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tennessee",
			"label": "tennessee",
			"seq": "59,67"
		}]
	},
	{
		"id": "f107c093f6cd4143af7f686892a28d70",
		"question": "Was einstein a doctoral student of Alfred Kleiner?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Alfred_Kleiner> <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Albert_Einstein> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralStudent",
			"label": "doctoral student",
			"seq": "15,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alfred_Kleiner",
			"label": "kleiner alfred",
			"seq": "35,48"
		}, {
			"uri": "http://dbpedia.org/resource/Albert_Einstein",
			"label": "einstein",
			"seq": "4,11"
		}]
	},
	{
		"id": "36f0f09f20ba45daacd083a3e57bd8b2",
		"question": "Is the Mount St Peter Church made in the international architectural style?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mount_St._Peter_Church> <http://dbpedia.org/property/architecture> <http://dbpedia.org/resource/International_Style_(architecture)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architecture",
			"label": "architectural",
			"seq": "55,67"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mount_St._Peter_Church",
			"label": "church peter mount",
			"seq": "7,24"
		}, {
			"uri": "http://dbpedia.org/resource/International_Style_(architecture)",
			"label": "international",
			"seq": "41,53"
		}]
	},
	{
		"id": "524ba88720054e1081b4086303afd9db",
		"question": "What is the state of origin of Thomas Pfyl ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomas_Pfyl> <http://dbpedia.org/ontology/stateOfOrigin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "origin state of",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thomas_Pfyl",
			"label": "thomas pfyl",
			"seq": "31,41"
		}]
	},
	{
		"id": "e8f04ab2f1d04379945b8d384d9b4c44",
		"question": "How many movies have been cinematographed by Jordan Cronenweth?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cinematography",
			"label": "cinematographed",
			"seq": "26,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "many",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jordan_Cronenweth",
			"label": "cronenweth jordan",
			"seq": "45,61"
		}]
	},
	{
		"id": "841f3a4e3ade44b1b407f7b1382dc92a",
		"question": "For what is Abhijit Kunte known ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Abhijit_Kunte> <http://dbpedia.org/property/knownFor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "0,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Abhijit_Kunte",
			"label": "abhijit kunte",
			"seq": "12,24"
		}]
	},
	{
		"id": "7d067f0ccaed45b9b5bcb80f169566cc",
		"question": "List the language of Kunsten Museum of moder art Aalborg ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/KUNSTEN_Museum_of_Modern_Art_Aalborg> <http://dbpedia.org/ontology/language> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/language",
			"label": "language",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/KUNSTEN_Museum_of_Modern_Art_Aalborg",
			"label": "kunsten aalborg museum moder art",
			"seq": "21,52"
		}]
	},
	{
		"id": "8da4d7ea35a54979b46ddfbfc64b1b5c",
		"question": "Who owns the bank where Fabio Mercurio works?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Fabio_Mercurio> <http://dbpedia.org/property/institution> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/institution",
			"label": "mercurio",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owns",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Bank",
			"label": "bank",
			"seq": "13,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fabio_Mercurio",
			"label": "mercurio fabio",
			"seq": "24,37"
		}]
	},
	{
		"id": "2f903de0d05c4f3c9eb0fcf478f43406",
		"question": "What shows are aired on sister channels of BBC Parliaments",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/BBC_Parliament> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterNames",
			"label": "sister",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "sister",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC_Parliament",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fc8842a830044f4c9bc255c1f3031969",
		"question": "Name a military unit whose command structure is United States Department of the Navy and garrison is Arlington County, Virginia?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_the_Navy> . ?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commandStructure",
			"label": "structure command",
			"seq": "27,43"
		}, {
			"uri": "http://dbpedia.org/ontology/garrison",
			"label": "garrison",
			"seq": "89,96"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "military unit",
			"seq": "7,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Department_of_the_Navy",
			"label": "department united states",
			"seq": "48,71"
		}, {
			"uri": "http://dbpedia.org/resource/Arlington_County,_Virginia",
			"label": "arlington virginia county,",
			"seq": "101,126"
		}]
	},
	{
		"id": "00922db47d90435cb5df5903a5025450",
		"question": "Starwood operates in which places?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/operator> <http://dbpedia.org/resource/Starwood_Hotels_and_Resorts_Worldwide> . ?x <http://dbpedia.org/property/address> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operator",
			"label": "operates",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/address",
			"label": "places",
			"seq": "27,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Starwood_Hotels_and_Resorts_Worldwide",
			"label": "starwood",
			"seq": "0,7"
		}]
	},
	{
		"id": "4dc12f67b9bf40f1ad3ea69a7d6ddc7f",
		"question": "What are the things built by Eristoff ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eristoff> <http://dbpedia.org/property/manufacturer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/manufacturer",
			"label": "are",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eristoff",
			"label": "eristoff",
			"seq": "29,36"
		}]
	},
	{
		"id": "06661ab5e6804e1c8206072e2bb02395",
		"question": "List the relative of Tim Nanai-Williams ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tim_Nanai-Williams> <http://dbpedia.org/ontology/relative> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relative",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tim_Nanai-Williams",
			"label": "nanai-williams tim",
			"seq": "21,38"
		}]
	},
	{
		"id": "f14f313e8dc0452884affe033d0a04fe",
		"question": "Which fictional character portrayed by Roger barton has Padm Amidala as family ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/portrayer> <http://dbpedia.org/resource/Roger_Barton_(film_editor)> . ?uri <http://dbpedia.org/property/family> <http://dbpedia.org/resource/Padm\u00e9_Amidala>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/portrayer",
			"label": "portrayed",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/property/family",
			"label": "family",
			"seq": "72,77"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "6,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Roger_Barton_(film_editor)",
			"label": "barton roger",
			"seq": "39,50"
		}, {
			"uri": "http://dbpedia.org/resource/Padm\u00e9_Amidala",
			"label": "amidala padm",
			"seq": "56,67"
		}]
	},
	{
		"id": "b8b5452850cc482eb87779a8ed2c2159",
		"question": "Where is the station whose sister channel is the Channel 3 in Thailand?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/sisterStations> <http://dbpedia.org/resource/Channel_3_(Thailand)> . ?x <http://dbpedia.org/property/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterStations",
			"label": "station sister",
			"seq": "13,26"
		}, {
			"uri": "http://dbpedia.org/property/city",
			"label": "sister",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionStation",
			"label": "station",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Channel_3_(Thailand)",
			"label": "thailand channel",
			"seq": "34,49"
		}]
	},
	{
		"id": "9f517b6fe6cf44339df470bcabf4069d",
		"question": "Count the  origin of the beverages which have been originated in england /",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/origin> <http://dbpedia.org/resource/England> . ?x <http://dbpedia.org/property/origin> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/origin",
			"label": "origin",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/property/origin",
			"label": "origin",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England",
			"label": "england",
			"seq": "65,71"
		}]
	},
	{
		"id": "82f48c9c0f194d4090c22604bf2864c5",
		"question": "Which things have been located, where governance is Houston City Council?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Houston_City_Council> . ?uri <http://dbpedia.org/ontology/location> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governance",
			"seq": "38,47"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located,",
			"seq": "23,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Houston_City_Council",
			"label": "houston council city",
			"seq": "52,71"
		}]
	},
	{
		"id": "832739b6967a4676b06c86e5b1426922",
		"question": "What awards have been given to people schooled in the Everton park state high?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/Everton_Park_State_High_School> . ?x <http://dbpedia.org/property/awards> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "everton",
			"seq": "54,60"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "everton",
			"seq": "54,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Everton_Park_State_High_School",
			"label": "everton",
			"seq": "54,60"
		}]
	},
	{
		"id": "01df09084d764ebd8875ff3b881349f7",
		"question": "What is the alma mater of the Marshall Fletcher McCallie and has affiliation with  Vanderbilt University Medical Center ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marshall_Fletcher_McCallie> <http://dbpedia.org/property/almaMater> ?uri. <http://dbpedia.org/resource/Vanderbilt_University_Medical_Center> <http://dbpedia.org/property/affiliation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliation",
			"seq": "65,75"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marshall_Fletcher_McCallie",
			"label": "mccallie marshall fletcher",
			"seq": "30,55"
		}, {
			"uri": "http://dbpedia.org/resource/Vanderbilt_University_Medical_Center",
			"label": "vanderbilt university medical center",
			"seq": "83,118"
		}]
	},
	{
		"id": "31a8e6b4c59a4b4eac26800d28fb8078",
		"question": "Where is the south shore plaza located?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Shore_Plaza> <http://dbpedia.org/property/address> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/address",
			"label": "where",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Shore_Plaza",
			"label": "south shore plaza",
			"seq": "13,29"
		}]
	},
	{
		"id": "90876c6682394f56ba6183425f3025ba",
		"question": "What is the river that falls into North Sea and Thames Estuary?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/North_Sea> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Thames_Estuary> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North_Sea",
			"label": "north",
			"seq": "34,38"
		}, {
			"uri": "http://dbpedia.org/resource/Thames_Estuary",
			"label": "estuary thames",
			"seq": "48,61"
		}]
	},
	{
		"id": "9dc93749dd3e4b619cbd8fc34311f6d9",
		"question": "Name the university whose teams have been managed by Albertin Montoya?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Albertin_Montoya> <http://dbpedia.org/property/managerclubs> ?x . ?x <http://dbpedia.org/ontology/university> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/managerclubs",
			"label": "managed",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/ontology/university",
			"label": "university",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "26,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Albertin_Montoya",
			"label": "albertin montoya",
			"seq": "53,68"
		}]
	},
	{
		"id": "6db02b173fff4b64bb309fb45500cd93",
		"question": "Name the newspaper owned by Schibsted and headquartered at Stockholm?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/owners> <http://dbpedia.org/resource/Schibsted> . ?uri <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Stockholm>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owners",
			"label": "owned",
			"seq": "19,23"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquartered",
			"seq": "42,54"
		}, {
			"uri": "http://dbpedia.org/ontology/Newspaper",
			"label": "newspaper",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Schibsted",
			"label": "schibsted",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/resource/Stockholm",
			"label": "stockholm",
			"seq": "59,67"
		}]
	},
	{
		"id": "8e7ec89e4ed941bf8ca2d3ac48db3969",
		"question": "What is written in a programming language developed by GNOME Project?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/The_GNOME_Project> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "developed",
			"seq": "42,50"
		}, {
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "programming language",
			"seq": "21,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_GNOME_Project",
			"label": "project gnome",
			"seq": "55,67"
		}]
	},
	{
		"id": "35abbfdef65f48d399ea86f591412293",
		"question": "Count all the stateless people",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/citizenship> <http://dbpedia.org/resource/Statelessness>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Statelessness",
			"label": "stateless",
			"seq": "14,22"
		}]
	},
	{
		"id": "6ddddbe9746248c1ad7bf21a4e745094",
		"question": "State the religion of the person known for People's Bank (Sri Lanka) ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/People's_Bank_(Sri_Lanka)> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "33,41"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "10,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/People's_Bank_(Sri_Lanka)",
			"label": "people's lanka) bank (sri",
			"seq": "43,67"
		}]
	},
	{
		"id": "f296e394f71346d8835fe88f4e572782",
		"question": "Name the television show distributed by Broadcast syndication and voiced by Eliza Schneider?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Broadcast_syndication> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributed",
			"seq": "25,35"
		}, {
			"uri": "http://dbpedia.org/property/voices",
			"label": "voiced",
			"seq": "66,71"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Broadcast_syndication",
			"label": "syndication broadcast",
			"seq": "40,60"
		}, {
			"uri": "http://dbpedia.org/resource/Eliza_Schneider",
			"label": "schneider eliza",
			"seq": "76,90"
		}]
	},
	{
		"id": "18b1a0fcbd154906ad63f1310bcb8356",
		"question": "Where were Justina Machado and John Englehard born?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Justina_Machado> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/John_Englehart> <http://dbpedia.org/ontology/birthPlace> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "born",
			"seq": "46,49"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "born",
			"seq": "46,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Justina_Machado",
			"label": "machado justina",
			"seq": "11,25"
		}, {
			"uri": "http://dbpedia.org/resource/John_Englehart",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "5a5f08cd19484d219d04ef85d42c4a4f",
		"question": "Who is the successor of Quest Software ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Quest_Software> <http://dbpedia.org/property/successor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Quest_Software",
			"label": "software quest",
			"seq": "24,37"
		}]
	},
	{
		"id": "d36cd4157a5647ac96cd3a1013473247",
		"question": "What is the television show with presentator as Ryan Seacrest and theme music composer as Julian Gingell?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/presenter",
			"label": "presentator",
			"seq": "33,43"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composer theme music",
			"seq": "66,85"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ryan_Seacrest",
			"label": "seacrest ryan",
			"seq": "48,60"
		}, {
			"uri": "http://dbpedia.org/resource/Julian_Gingell",
			"label": "gingell julian",
			"seq": "90,103"
		}]
	},
	{
		"id": "8aefda4d445e431ba18e9893471a7d0e",
		"question": "River which flows into the eugene mahoney state park pass through which states?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Eugene_T._Mahoney_State_Park> . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "mahoney",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "state",
			"seq": "42,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eugene_T._Mahoney_State_Park",
			"label": "mahoney eugene state",
			"seq": "27,46"
		}]
	},
	{
		"id": "7b37e481b5fe4b1ea46954b65bbc9fc3",
		"question": "Which scientist's academic advisor is Georg Meissner and is known for invention of Anthrax ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Anthrax> . ?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "60,68"
		}, {
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "advisor",
			"seq": "27,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist's",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anthrax",
			"label": "anthrax",
			"seq": "83,89"
		}, {
			"uri": "http://dbpedia.org/resource/Georg_Meissner",
			"label": "meissner georg",
			"seq": "38,51"
		}]
	},
	{
		"id": "e3e4596a38cd41b5925a1131d75af14f",
		"question": "For how many cities's teams did David Bowens play?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/David_Bowens> <http://dbpedia.org/ontology/formerTeam> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "play",
			"seq": "45,48"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "22,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Bowens",
			"label": "bowens david",
			"seq": "32,43"
		}]
	},
	{
		"id": "ec9f7e686ab1438693a7da09f8164304",
		"question": "Who is the developer of the software which distributes Batman: Arkham City Lockdown ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Batman:_Arkham_City_Lockdown> <http://dbpedia.org/property/distributor> ?x . ?x <http://dbpedia.org/property/developer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributes",
			"seq": "43,53"
		}, {
			"uri": "http://dbpedia.org/property/developer",
			"label": "developer",
			"seq": "11,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Batman:_Arkham_City_Lockdown",
			"label": "lockdown batman: arkham city",
			"seq": "55,82"
		}]
	},
	{
		"id": "e0d7814a403041dfbdb60c84e19ff1b6",
		"question": "what are some neighboring cities of Pregny Chambsy?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/neighboringMunicipality> <http://dbpedia.org/resource/Pregny-Chamb\u00e9sy> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/neighboringMunicipality",
			"label": "neighboring",
			"seq": "14,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pregny-Chamb\u00e9sy",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "69eda413b32a4ef18311180654f38ad1",
		"question": "How many honorary title are there of the scientists who has  Australian of the Year award  ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Australian_of_the_Year> . ?x <http://dbpedia.org/ontology/award> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "84,88"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "84,88"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Australian_of_the_Year",
			"label": "australian year",
			"seq": "61,75"
		}]
	},
	{
		"id": "959815b6184e4dd9a68135af4125df83",
		"question": "What is the total number of companies who use a language designed by Bjarne Stroustrup?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Bjarne_Stroustrup> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "57,64"
		}, {
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "language",
			"seq": "48,55"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "28,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bjarne_Stroustrup",
			"label": "stroustrup bjarne",
			"seq": "69,85"
		}]
	},
	{
		"id": "a5e14b00bb094b6ba270285e1c075055",
		"question": "Which job of Irving Chernev is the non-fiction subject of the Thud ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Irving_Chernev> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "non-fiction",
			"seq": "35,45"
		}, {
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "non-fiction",
			"seq": "35,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Irving_Chernev",
			"label": "chernev irving",
			"seq": "13,26"
		}, {
			"uri": "http://dbpedia.org/resource/Thud!",
			"label": "thud",
			"seq": "62,65"
		}]
	},
	{
		"id": "2ee5f92bf7dd42e6aa5a5c2aa1848abd",
		"question": "What are the musicals of the people died in California?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/California> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "people",
			"seq": "29,34"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "musicals",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Musical",
			"label": "musicals",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/California",
			"label": "california",
			"seq": "44,53"
		}]
	},
	{
		"id": "3b865ce9d2c64aa2bf2eea2036094742",
		"question": "What is the workplace of Christopher S. Stewart ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Christopher_S._Stewart> <http://dbpedia.org/property/employer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "workplace",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christopher_S._Stewart",
			"label": "christopher stewart",
			"seq": "25,43"
		}]
	},
	{
		"id": "f7c7d94c2c7a4893a0ac5c5c40b26106",
		"question": "What is the political party of the daughter of Jawaharlal Nehru ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Jawaharlal_Nehru> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "is",
			"seq": "5,6"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "22,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jawaharlal_Nehru",
			"label": "jawaharlal nehru",
			"seq": "47,62"
		}]
	},
	{
		"id": "b52d907f0f3444b1b31e1eaadb9012e3",
		"question": "Where was david Scherman trained ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Scherman> <http://dbpedia.org/property/training> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/training",
			"label": "trained",
			"seq": "25,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Scherman",
			"label": "scherman david",
			"seq": "10,23"
		}]
	},
	{
		"id": "b12bebc48be04ef39ad59257df7b1387",
		"question": "Which units are garrisoned at Arlington County, Virginia?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/garrison",
			"label": "garrisoned",
			"seq": "16,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arlington_County,_Virginia",
			"label": "arlington virginia county,",
			"seq": "30,55"
		}]
	},
	{
		"id": "735485ac406a44709508e55720a723fc",
		"question": "What are the mountains in the Sequoia National Park?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Sequoia_National_Park>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Mountain",
			"label": "mountains",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sequoia_National_Park",
			"label": "national sequoia park",
			"seq": "30,50"
		}]
	},
	{
		"id": "2ba39b2193c84d1eaafccd6a537a338e",
		"question": "Name the city of Duwamish River ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duwamish_River> <http://dbpedia.org/ontology/city> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "city",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Duwamish_River",
			"label": "duwamish river",
			"seq": "17,30"
		}]
	},
	{
		"id": "a1526eadfd4c4d5d915dee4a3c8c1dd9",
		"question": "What is the administrative headquarters of Pulau Ujong ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ujong> <http://dbpedia.org/ontology/capital> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "administrative",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pulau_Ujong",
			"label": "ujong pulau",
			"seq": "43,53"
		}]
	},
	{
		"id": "aaa9856758804b05ae5363e65a3bd2a7",
		"question": "In which country is Sierra del Merendin?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sierra_del_Merend\u00f3n> <http://dbpedia.org/ontology/country> ?uri  . }",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sierra_del_Merend\u00f3n",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0c63debd713445eebabef107c1f94b34",
		"question": "Give me a count of everything made by the company which offers electronical manufacturing too.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/service> <http://dbpedia.org/resource/Electronics_manufacturing_services> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/service",
			"label": "electronical",
			"seq": "63,74"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufacturing",
			"seq": "76,88"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Electronics_manufacturing_services",
			"label": "manufacturing",
			"seq": "76,88"
		}]
	},
	{
		"id": "c7330887101d408296fa00ddf2262458",
		"question": "What are the other band member of the Bands whose current members is Hynief?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Hynief> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "members current",
			"seq": "50,64"
		}, {
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "member",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "19,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hynief",
			"label": "hynief",
			"seq": "69,74"
		}]
	},
	{
		"id": "cc5743cc510f4eeb9cfa516a427b3d7c",
		"question": "Who is the vice president of Jared Bernstein ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jared_Bernstein> <http://dbpedia.org/ontology/vicePresident> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/vicePresident",
			"label": "president vice",
			"seq": "11,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jared_Bernstein",
			"label": "bernstein jared",
			"seq": "29,43"
		}]
	},
	{
		"id": "86c4146411a441b9b7ae67962a14c5a7",
		"question": "What currencies are prevalent in the countries governed by the President of France?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/leaderTitle> <http://dbpedia.org/resource/President_of_France> . ?x <http://dbpedia.org/ontology/currency> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderTitle",
			"label": "are",
			"seq": "16,18"
		}, {
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currencies",
			"seq": "5,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "countries",
			"seq": "37,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/President_of_France",
			"label": "president france",
			"seq": "63,78"
		}]
	},
	{
		"id": "804153ef4a04420d9160d3b4da5a2545",
		"question": "Which teams have used the stadium whose architect was Populous ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Populous_(company)> . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architect",
			"label": "architect",
			"seq": "40,48"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "teams",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Populous_(company)",
			"label": "populous",
			"seq": "54,61"
		}]
	},
	{
		"id": "82bfaafaf5d5457190f547f5a8690190",
		"question": "What is the birthplace of Ludovic Boi which is also the residence of Fernando Augustin?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ludovic_Boi> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/Fernando_Augustin> <http://dbpedia.org/property/residence> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birthplace",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/property/residence",
			"label": "residence",
			"seq": "56,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ludovic_Boi",
			"label": "ludovic boi",
			"seq": "26,36"
		}, {
			"uri": "http://dbpedia.org/resource/Fernando_Augustin",
			"label": "fernando augustin",
			"seq": "69,85"
		}]
	},
	{
		"id": "110683d750084bc587eb5dd36775e6ef",
		"question": "How many non-fiction subject are there of the books whose one of the non-fiction subject is Ankh-Morpork City Watch ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/nonFictionSubject> <http://dbpedia.org/resource/Ankh-Morpork_City_Watch> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "non-fiction",
			"seq": "9,19"
		}, {
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "non-fiction",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ankh-Morpork_City_Watch",
			"label": "ankh-morpork watch city",
			"seq": "92,114"
		}]
	},
	{
		"id": "c8e8897629e34648b1aeb77826873038",
		"question": "Name the show whose theme composing band previously also had Bryan Mantia?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Bryan_Mantia> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerBandMember",
			"label": "band",
			"seq": "36,39"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composing",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bryan_Mantia",
			"label": "mantia bryan",
			"seq": "61,72"
		}]
	},
	{
		"id": "4b63d37cdc444e47bb79f766451d32ac",
		"question": "How many contries surround the seas on the banks of which is the city of Cancun?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Canc\u00fan> . ?x <http://dbpedia.org/ontology/country> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "contries",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "contries",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canc\u00fan",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "19f47e5edc444d50a2b75d0cffbf0bcb",
		"question": "List all the settlements which has a part named Seguin,Texas ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/part> <http://dbpedia.org/resource/Seguin,_Texas> . ?x <http://dbpedia.org/ontology/part> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/part",
			"label": "part",
			"seq": "37,40"
		}, {
			"uri": "http://dbpedia.org/ontology/part",
			"label": "part",
			"seq": "37,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Settlement",
			"label": "settlements",
			"seq": "13,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Seguin,_Texas",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1655c6bb438f414f8b6a6c12f3470473",
		"question": "List all the wine regions of the grapes whose one of the wine region is Mississippi ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/wineRegion> <http://dbpedia.org/resource/Mississippi> . ?x <http://dbpedia.org/ontology/wineRegion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "region",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "region",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Grape",
			"label": "grapes",
			"seq": "33,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mississippi",
			"label": "mississippi",
			"seq": "72,82"
		}]
	},
	{
		"id": "888e5195b6724c50955a1020e553cbf6",
		"question": "Which city was designed by saleen Pator which is also the birht location of Jimmy Diggs ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saleen_S5S_Raptor> <http://dbpedia.org/property/designer> ?uri. <http://dbpedia.org/resource/Jimmy_Diggs> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "15,22"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birht",
			"seq": "58,62"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saleen_S5S_Raptor",
			"label": "saleen",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/resource/Jimmy_Diggs",
			"label": "jimmy diggs",
			"seq": "76,86"
		}]
	},
	{
		"id": "fa48e10d45b245ad97a7c3e1691f2f85",
		"question": "Name the university whose affiliations's foundation is in Washington, D.C.?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/Washington,_D.C.> . ?uri <http://dbpedia.org/property/affiliations> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "foundation",
			"seq": "41,50"
		}, {
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliations's",
			"seq": "26,39"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Washington,_D.C.",
			"label": "washington, d.c.",
			"seq": "58,73"
		}]
	},
	{
		"id": "b7ffb05378d2452b978792c947b826e3",
		"question": "Name the office holder whose theatre is Siege of Fort Recovery and belongs to Indian territory branch ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Siege_of_Fort_Recovery> . ?uri <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Indiana_Territory>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "theatre",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "95,100"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Siege_of_Fort_Recovery",
			"label": "recovery siege",
			"seq": "40,53"
		}, {
			"uri": "http://dbpedia.org/resource/Indiana_Territory",
			"label": "territory indian",
			"seq": "78,93"
		}]
	},
	{
		"id": "6aad2feaead44d8e87827dc6c1ff9a57",
		"question": "What was the university of the rugby player who coached the Stanford rugby teams during 1906-1917?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/1906\u201317_Stanford_rugby_teams> <http://dbpedia.org/property/headcoach> ?x . ?x <http://dbpedia.org/ontology/university> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headcoach",
			"label": "coached",
			"seq": "48,54"
		}, {
			"uri": "http://dbpedia.org/ontology/university",
			"label": "university",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1906\u201317_Stanford_rugby_teams",
			"label": "stanford",
			"seq": "60,67"
		}]
	},
	{
		"id": "235bac8ebb9049149d10aec4b92b6881",
		"question": "Which sports are played at both the Polytech uni of Bataan and Taguig?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_\u2013_Bataan> <http://dbpedia.org/ontology/sport> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_\u2013_Bataan",
			"label": "polytech bataan",
			"seq": "36,50"
		}, {
			"uri": "http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig",
			"label": "polytech taguig",
			"seq": "36,50"
		}]
	},
	{
		"id": "c29965dde83947ffa5b1a736dd8ea8bf",
		"question": "Who has Kelly Osbourne and Ozzy Osbourne as relatives?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Kelly_Osbourne> . ?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Ozzy_Osbourne> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "44,52"
		}, {
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "44,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kelly_Osbourne",
			"label": "osbourne kelly",
			"seq": "8,21"
		}, {
			"uri": "http://dbpedia.org/resource/Ozzy_Osbourne",
			"label": "osbourne ozzy",
			"seq": "14,26"
		}]
	},
	{
		"id": "ee5bcfdd212b4f548f1556e3f2d442a8",
		"question": "Who were the founders of Sea Gayle Music?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sea_Gayle_Music> <http://dbpedia.org/property/founder> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founders",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sea_Gayle_Music",
			"label": "music gayle sea",
			"seq": "25,39"
		}]
	},
	{
		"id": "3de0eac5123f4e209570dffcc7b9e398",
		"question": "What layout can be found in cars similar to the Subaru Outback?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/related> <http://dbpedia.org/resource/Subaru_Outback> . ?x <http://dbpedia.org/ontology/layout> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/related",
			"label": "layout",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/layout",
			"label": "layout",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "layout",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Subaru_Outback",
			"label": "outback subaru",
			"seq": "48,61"
		}]
	},
	{
		"id": "90a0886308b64939add943ce02984650",
		"question": "Name the president who has relations with Clinton family and had a lieutenant named Winston Bryant?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Clinton_family> . ?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Winston_Bryant>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relations",
			"seq": "27,35"
		}, {
			"uri": "http://dbpedia.org/ontology/lieutenant",
			"label": "lieutenant",
			"seq": "67,76"
		}, {
			"uri": "http://dbpedia.org/ontology/President",
			"label": "president",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Clinton_family",
			"label": "clinton family",
			"seq": "42,55"
		}, {
			"uri": "http://dbpedia.org/resource/Winston_Bryant",
			"label": "winston bryant",
			"seq": "84,97"
		}]
	},
	{
		"id": "a8dde84d23764e07b345f79862bd2561",
		"question": "How many organizations work for Environmentalism?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/purpose",
			"label": "organizations",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Environmentalism",
			"label": "environmentalism",
			"seq": "32,47"
		}]
	},
	{
		"id": "1876b2c28ef241b785166c94d876c850",
		"question": "Which producer of Boeing F/A-18E/F Super Hornet has a key person Dennis Muilenburg ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Dennis_Muilenburg> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "key",
			"seq": "54,56"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "producer",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet",
			"label": "hornet super",
			"seq": "35,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dennis_Muilenburg",
			"label": "muilenburg dennis",
			"seq": "65,81"
		}]
	},
	{
		"id": "f15503debeab476e92bec7104ca5599b",
		"question": "To which uni. did  sidney c patridge and cyril hume both once went?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sidney_Catlin_Partridge> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Cyril_Hume> <http://dbpedia.org/property/education> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "to",
			"seq": "0,1"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "to",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sidney_Catlin_Partridge",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Cyril_Hume",
			"label": "cyril hume",
			"seq": "41,50"
		}]
	},
	{
		"id": "9bc2338edfc24fc7a0d8d7cfe88d0ccd",
		"question": "Who is the manager of the club whose homeground is the riverside stadium?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Riverside_Stadium> . ?uri <http://dbpedia.org/ontology/managerClub> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/ground",
			"label": "homeground",
			"seq": "37,46"
		}, {
			"uri": "http://dbpedia.org/ontology/managerClub",
			"label": "manager club",
			"seq": "11,22"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsManager",
			"label": "manager",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Riverside_Stadium",
			"label": "riverside stadium",
			"seq": "55,71"
		}]
	},
	{
		"id": "abe825df40f846beb07f2ad29ebe9e8a",
		"question": "What are the organisation founded in Texas and Dallas?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Texas> . ?uri <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Dallas> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organisation",
			"seq": "13,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Texas",
			"label": "texas",
			"seq": "37,41"
		}, {
			"uri": "http://dbpedia.org/resource/Dallas",
			"label": "dallas",
			"seq": "47,52"
		}]
	},
	{
		"id": "3893e0c34af5499f992e3e068e2b4394",
		"question": "List the members of Skull Gang?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Skull_Gang> <http://dbpedia.org/ontology/bandMember> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "members",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Skull_Gang",
			"label": "skull gang",
			"seq": "20,29"
		}]
	},
	{
		"id": "6ba161b8976648ed9d66e2ddb758f1f2",
		"question": "To which party does the politician belong, who was born in Nandurbar?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Nandurbar> . ?x <http://dbpedia.org/ontology/party> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "party",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Politician",
			"label": "politician",
			"seq": "24,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nandurbar",
			"label": "nandurbar",
			"seq": "59,67"
		}]
	},
	{
		"id": "94109f8a38244b3d8a1dc4cfb6ba55b2",
		"question": "Count the movies directed by Tim Burton and music composer Danny Elfman ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Danny_Elfman> . ?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Tim_Burton> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "44,48"
		}, {
			"uri": "http://dbpedia.org/property/director",
			"label": "directed",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Danny_Elfman",
			"label": "elfman danny",
			"seq": "59,70"
		}, {
			"uri": "http://dbpedia.org/resource/Tim_Burton",
			"label": "burton tim",
			"seq": "29,38"
		}]
	},
	{
		"id": "b6c11bc5758b40768cc7bd60cbf09fd3",
		"question": "What are the american football players whose former team's coach is Jason Maas?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Jason_Maas> . ?uri <http://dbpedia.org/ontology/formerTeam> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coach",
			"label": "coach",
			"seq": "59,63"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former",
			"seq": "45,50"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football american",
			"seq": "13,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jason_Maas",
			"label": "jason maas",
			"seq": "68,77"
		}]
	},
	{
		"id": "bae14da898b343a4a0b319d75b992c2c",
		"question": "Name the appointer of William Clark ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Clark> <http://dbpedia.org/property/appointer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/appointer",
			"label": "appointer",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Clark",
			"label": "william clark",
			"seq": "22,34"
		}]
	},
	{
		"id": "660aad2b85ce42fdbf4dd20e86dee609",
		"question": "What is the city  of the television station whose affiliations is LATV?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/LATV> . ?x <http://dbpedia.org/property/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliations",
			"seq": "50,61"
		}, {
			"uri": "http://dbpedia.org/property/city",
			"label": "city",
			"seq": "12,15"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionStation",
			"label": "television station",
			"seq": "25,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/LATV",
			"label": "latv",
			"seq": "66,69"
		}]
	},
	{
		"id": "cfcc12ca99344c948bb29580893f960e",
		"question": "People who debuted from Houston Astros have played in which clubs?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/debutTeam> <http://dbpedia.org/resource/Houston_Astros> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debuted",
			"seq": "11,17"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "debuted",
			"seq": "11,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "0,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Houston_Astros",
			"label": "houston astros",
			"seq": "24,37"
		}]
	},
	{
		"id": "0cf0d3fc76114f5bb2970fc5db230b49",
		"question": "What sport played at Islamic azad uni employes Craig Van Tilbury?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Craig_Van_Tilbury> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Islamic_Azad_University_Central_Tehran_Branch> <http://dbpedia.org/ontology/sport> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "craig",
			"seq": "47,51"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sport",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Craig_Van_Tilbury",
			"label": "tilbury craig van",
			"seq": "47,63"
		}, {
			"uri": "http://dbpedia.org/resource/Islamic_Azad_University_Central_Tehran_Branch",
			"label": "islamic azad",
			"seq": "21,32"
		}]
	},
	{
		"id": "1a1fe17b13dd4e109fdd6073577080a4",
		"question": "Where are Solidus and Aureus used?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Solidus_(coin)> . ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Aureus> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "aureus",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "aureus",
			"seq": "22,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Solidus_(coin)",
			"label": "solidus",
			"seq": "10,16"
		}, {
			"uri": "http://dbpedia.org/resource/Aureus",
			"label": "aureus",
			"seq": "22,27"
		}]
	},
	{
		"id": "c838dc07c8ba4000a51426ddb603d08d",
		"question": "Foxy Brown was associated with which band?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Foxy_Brown_(rapper)> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated band",
			"seq": "15,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Foxy_Brown_(rapper)",
			"label": "brown foxy",
			"seq": "0,9"
		}]
	},
	{
		"id": "6fb72d6e48a849faa3d1dd3d45300bf7",
		"question": "Whose military units are VMF-218 and VMF-155?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-218> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-155> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/VMF-218",
			"label": "vmf-218",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/resource/VMF-155",
			"label": "vmf-155",
			"seq": "37,43"
		}]
	},
	{
		"id": "7d875a1bbc994ad68254365c69d782e6",
		"question": "Name the team of Michael springer ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Springer> <http://dbpedia.org/property/team> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/team",
			"label": "team",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Springer",
			"label": "springer michael",
			"seq": "17,32"
		}]
	},
	{
		"id": "4a08674a7ddd496fbbc5ad26b5aed56d",
		"question": "How many non fiction topics does Thud! deals with?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "fiction",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thud!",
			"label": "thud!",
			"seq": "33,37"
		}]
	},
	{
		"id": "9787a89dac1648ee8bd80857d7c4060c",
		"question": "Is Steve Nash the chairman of Vancouver Whitecaps FC?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Vancouver_Whitecaps_FC> <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Steve_Nash> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/chairman",
			"label": "chairman",
			"seq": "18,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vancouver_Whitecaps_FC",
			"label": "whitecaps vancouver",
			"seq": "30,48"
		}, {
			"uri": "http://dbpedia.org/resource/Steve_Nash",
			"label": "steve nash",
			"seq": "3,12"
		}]
	},
	{
		"id": "62eee24679714722a6a54a0063088a1d",
		"question": "What is the origin of the musical artist of A Todo Romantic Style ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/A_Todo_Romantic_Style> <http://dbpedia.org/property/artist> ?x . ?x <http://dbpedia.org/property/origin> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/property/origin",
			"label": "origin",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A_Todo_Romantic_Style",
			"label": "romantic",
			"seq": "51,58"
		}]
	},
	{
		"id": "bd015efa79cc4cf6ace73ea181c96abd",
		"question": "Did Christian Barnard study in the University of Minnesota?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Christiaan_Barnard> <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/University_of_Minnesota> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "christian",
			"seq": "4,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christiaan_Barnard",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/University_of_Minnesota",
			"label": "university minnesota",
			"seq": "35,54"
		}]
	},
	{
		"id": "04206d63a4654e48a0f4514cbccba82f",
		"question": "Name all the products produced by the producer of United States dollar ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/United_States_dollar> . ?x <http://dbpedia.org/ontology/product> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/product",
			"label": "products",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "products",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_dollar",
			"label": "united states dollar",
			"seq": "50,69"
		}]
	},
	{
		"id": "a4cb9ae6b84c4fcd846991699d10ed7f",
		"question": "What is the affiliation of the hospital where Alfred Blalock works?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Alfred_Blalock> <http://dbpedia.org/property/workInstitutions> ?x . ?x <http://dbpedia.org/property/affiliation> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/workInstitutions",
			"label": "works",
			"seq": "61,65"
		}, {
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliation",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alfred_Blalock",
			"label": "blalock alfred",
			"seq": "46,59"
		}]
	},
	{
		"id": "873bd1108ced400a95d4ad3f59959e8f",
		"question": "Is the national anthem of Mauritius motherland?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mauritius> <http://dbpedia.org/ontology/anthem> <http://dbpedia.org/resource/Motherland_(anthem)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/anthem",
			"label": "anthem",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mauritius",
			"label": "mauritius",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/resource/Motherland_(anthem)",
			"label": "motherland anthem",
			"seq": "16,32"
		}]
	},
	{
		"id": "78242b591ed14293a5c985c9cdb0a3ab",
		"question": "What is the home town of the Rolando Gomez is the DOD of the Clyde McNeal ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rolando_Gomez> <http://dbpedia.org/property/homeTown> ?uri. <http://dbpedia.org/resource/Clyde_McNeal> <http://dbpedia.org/property/deathDate> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/homeTown",
			"label": "town home",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/property/deathDate",
			"label": "the",
			"seq": "8,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rolando_Gomez",
			"label": "rolando gomez",
			"seq": "29,41"
		}, {
			"uri": "http://dbpedia.org/resource/Clyde_McNeal",
			"label": "mcneal clyde",
			"seq": "61,72"
		}]
	},
	{
		"id": "f05d4dee977d4a7292b08b8fa40d165e",
		"question": "What software is developed by GNOWSYS and is licensed by Frontaccounting?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frontaccounting> <http://dbpedia.org/ontology/license> ?uri. <http://dbpedia.org/resource/GNOWSYS> <http://dbpedia.org/ontology/developer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/license",
			"label": "licensed",
			"seq": "45,52"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "17,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frontaccounting",
			"label": "frontaccounting",
			"seq": "57,71"
		}, {
			"uri": "http://dbpedia.org/resource/GNOWSYS",
			"label": "gnowsys",
			"seq": "30,36"
		}]
	},
	{
		"id": "b9146fbecbc9471a828508410f06ee30",
		"question": "Who was the president at the time when both Carl Stokes and Joseph Stiglitz held a position in US political framework?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carl_Stokes> <http://dbpedia.org/property/president> ?uri. <http://dbpedia.org/resource/Joseph_Stiglitz> <http://dbpedia.org/property/president> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carl_Stokes",
			"label": "stokes carl",
			"seq": "44,54"
		}, {
			"uri": "http://dbpedia.org/resource/Joseph_Stiglitz",
			"label": "stiglitz joseph",
			"seq": "60,74"
		}]
	},
	{
		"id": "8827a33491654d18998e17489e221cac",
		"question": "What is the municipality of the Homestead Grays Bridge and Roberto Clemente Bridge?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Homestead_Grays_Bridge> <http://dbpedia.org/ontology/municipality> ?uri. <http://dbpedia.org/resource/Roberto_Clemente_Bridge> <http://dbpedia.org/ontology/municipality> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/municipality",
			"label": "municipality",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/municipality",
			"label": "municipality",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Homestead_Grays_Bridge",
			"label": "homestead bridge grays",
			"seq": "32,53"
		}, {
			"uri": "http://dbpedia.org/resource/Roberto_Clemente_Bridge",
			"label": "clemente roberto bridge",
			"seq": "48,70"
		}]
	},
	{
		"id": "87b748e0d7f448dfad6f4d9e657df140",
		"question": "List the home town of the people who have Ontario as one of it ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/homeTown> <http://dbpedia.org/resource/Ontario> . ?x <http://dbpedia.org/property/homeTown> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/homeTown",
			"label": "town home",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/property/homeTown",
			"label": "town home",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ontario",
			"label": "ontario",
			"seq": "42,48"
		}]
	},
	{
		"id": "5d35202b7de94c2aa0a76efeb59ec38d",
		"question": "Name the language of I Love How You Love Me ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/I_Love_How_You_Love_Me> <http://dbpedia.org/property/language> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/language",
			"label": "language",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/I_Love_How_You_Love_Me",
			"label": "love you how",
			"seq": "23,34"
		}]
	},
	{
		"id": "1a867d312a124069949fc1d4e7e99000",
		"question": "Pennsylvania has how many american football teams?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Pennsylvania>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "many",
			"seq": "21,24"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballTeam",
			"label": "football american",
			"seq": "26,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pennsylvania",
			"label": "pennsylvania",
			"seq": "0,11"
		}]
	},
	{
		"id": "87139c01ff3a485e8daa2d80a4a8365f",
		"question": "How many teams have someone playing at the defenceman position?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Defenceman> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/position",
			"label": "position",
			"seq": "54,61"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "teams",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Defenceman",
			"label": "defenceman",
			"seq": "43,52"
		}]
	},
	{
		"id": "b2cd1f2860c74a409807a44fab5702ff",
		"question": "name the region served by Jerusalem Institue of Justice which was also the conflict region in GazaIsrael ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerusalem_Institute_of_Justice> <http://dbpedia.org/ontology/service> ?uri. <http://dbpedia.org/resource/Gaza\u2013Israel_conflict> <http://dbpedia.org/property/result> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/service",
			"label": "served",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/property/result",
			"label": "jerusalem",
			"seq": "26,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerusalem_Institute_of_Justice",
			"label": "jerusalem",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/resource/Gaza\u2013Israel_conflict",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "880132cb380144518ffc1218cb9fb11e",
		"question": "Count the number of different religions that field marshals have followed?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Field_marshal> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryRank",
			"label": "marshals",
			"seq": "51,58"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "30,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Field_marshal",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fdd2ce7fef37417499ab18df58b1e86a",
		"question": "What are the awards won by the person who wrote the screen play for Lost in Rio ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/OSS_117:_Lost_in_Rio> <http://dbpedia.org/property/screenplay> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screen play",
			"seq": "52,62"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/OSS_117:_Lost_in_Rio",
			"label": "lost rio in",
			"seq": "68,78"
		}]
	},
	{
		"id": "e4e94532543f4998a1a6bd210e7ba091",
		"question": "List the main ingredient of Pizza-ghetti ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pizza-ghetti> <http://dbpedia.org/property/mainIngredient> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainIngredient",
			"label": "ingredient main",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pizza-ghetti",
			"label": "pizza-ghetti",
			"seq": "28,39"
		}]
	},
	{
		"id": "e9551dcd2cd543ddb53914df27958278",
		"question": "What is the governing body of Fort Monroe ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fort_Monroe> <http://dbpedia.org/property/governingBody> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governing body",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fort_Monroe",
			"label": "monroe fort",
			"seq": "30,40"
		}]
	},
	{
		"id": "ff272b89f0e04ea683d6f633ea223754",
		"question": "Who wrote the singles on the Main Course?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Main_Course> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/album",
			"label": "main",
			"seq": "29,32"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "wrote",
			"seq": "4,8"
		}, {
			"uri": "http://dbpedia.org/ontology/Single",
			"label": "singles",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Main_Course",
			"label": "course main",
			"seq": "29,39"
		}]
	},
	{
		"id": "f3e6a145912e4850b3f93dbc9342c2b0",
		"question": "Did Annie Leibovitz do the cover of The Road Ahead?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Road_Ahead_(Bill_Gates_book)> <http://dbpedia.org/ontology/coverArtist> <http://dbpedia.org/resource/Annie_Leibovitz> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coverArtist",
			"label": "cover",
			"seq": "27,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Road_Ahead_(Bill_Gates_book)",
			"label": "ahead road",
			"seq": "40,49"
		}, {
			"uri": "http://dbpedia.org/resource/Annie_Leibovitz",
			"label": "leibovitz annie",
			"seq": "4,18"
		}]
	},
	{
		"id": "d4dd2c6ad55449e2974b79ecbbf14f2c",
		"question": "What is the stylistic origin of Wizard rock ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wizard_rock> <http://dbpedia.org/ontology/stylisticOrigin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stylisticOrigin",
			"label": "stylistic origin",
			"seq": "12,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wizard_rock",
			"label": "wizard rock",
			"seq": "32,42"
		}]
	},
	{
		"id": "53234a36b1e64f05834fd09948fa22bc",
		"question": "Count the  area of the radio stations whose serves in South Carolina ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/area> <http://dbpedia.org/resource/South_Carolina> . ?x <http://dbpedia.org/property/area> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/area",
			"label": "area",
			"seq": "11,14"
		}, {
			"uri": "http://dbpedia.org/property/area",
			"label": "area",
			"seq": "11,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Carolina",
			"label": "carolina south",
			"seq": "54,67"
		}]
	},
	{
		"id": "444fa4b359354a5ea47e8d33ef5d0d05",
		"question": "Who  has these major shrines  : Emmitsburg, Maryland and Shrine of St. Elizabeth Ann Bayley Seton?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/majorShrine> <http://dbpedia.org/resource/Emmitsburg,_Maryland> . ?uri <http://dbpedia.org/ontology/majorShrine> <http://dbpedia.org/resource/Shrine_of_St._Elizabeth_Ann_Bayley_Seton> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrine",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrine",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Emmitsburg,_Maryland",
			"label": "emmitsburg, maryland",
			"seq": "32,51"
		}, {
			"uri": "http://dbpedia.org/resource/Shrine_of_St._Elizabeth_Ann_Bayley_Seton",
			"label": "elizabeth",
			"seq": "71,79"
		}]
	},
	{
		"id": "000c7ab2bce24308b9e2d7886852c5ab",
		"question": "Name a few whose live in a place where Indian English is an official language",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Indian_English> . ?uri <http://dbpedia.org/ontology/residence> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/officialLanguage",
			"label": "official language",
			"seq": "60,76"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "in",
			"seq": "22,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indian_English",
			"label": "english indian",
			"seq": "39,52"
		}]
	},
	{
		"id": "9ad5c616c0cd4c3b93ceb93ad5150b11",
		"question": "What is the constituency of Santo Versace?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Santo_Versace> <http://dbpedia.org/property/constituency> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Santo_Versace",
			"label": "versace santo",
			"seq": "28,40"
		}]
	},
	{
		"id": "7cb26f57f9304355832fe7c4e7d30a8d",
		"question": "What is the television show whose developer is J. Michael Straczynski?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developer",
			"seq": "34,42"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/J._Michael_Straczynski",
			"label": "straczynski michael",
			"seq": "50,68"
		}]
	},
	{
		"id": "b1e194a22c164d3a9200e8ed3425fd1b",
		"question": "What are some Louisiana based models known for?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Louisiana> . ?x <http://dbpedia.org/property/knownFor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Model>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "louisiana",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "37,45"
		}, {
			"uri": "http://dbpedia.org/ontology/Model",
			"label": "models",
			"seq": "30,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Louisiana",
			"label": "louisiana",
			"seq": "14,22"
		}]
	},
	{
		"id": "eae36241b9974a45a5febf554a4aac80",
		"question": "Name the person who died in Fair Lane ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/Fair_Lane>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fair_Lane",
			"label": "lane fair",
			"seq": "28,36"
		}]
	},
	{
		"id": "ea43482e56b84335b891f1be6326132e",
		"question": "List the awards given to the important people of Aardman Animations?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Aardman_Animations> <http://dbpedia.org/ontology/keyPerson> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "people",
			"seq": "39,44"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Aardman_Animations",
			"label": "animations aardman",
			"seq": "49,66"
		}]
	},
	{
		"id": "d3075ce3184440eaaa8b1f8728a78053",
		"question": "List the import people of Maryland Jockey Club ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maryland_Jockey_Club> <http://dbpedia.org/property/keyPeople> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maryland_Jockey_Club",
			"label": "maryland jockey club",
			"seq": "26,45"
		}]
	},
	{
		"id": "8d0f6e4862cc499e909b0bc805585305",
		"question": "From what american football teams did Carlos Emmons play?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carlos_Emmons_(American_football)> <http://dbpedia.org/ontology/formerTeam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "28,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carlos_Emmons_(American_football)",
			"label": "football american emmons carlos",
			"seq": "10,40"
		}]
	},
	{
		"id": "bb91e0c70abe4131a829b7d72b517d80",
		"question": "Name the TV show whose company is Playtone and written by Graham Yost?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/Playtone> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Graham_Yost>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/company",
			"label": "company",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "47,53"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Playtone",
			"label": "playtone",
			"seq": "34,41"
		}, {
			"uri": "http://dbpedia.org/resource/Graham_Yost",
			"label": "graham yost",
			"seq": "58,68"
		}]
	},
	{
		"id": "c830276732964533b201803bc7dbe949",
		"question": "Where does the publisher of Kathimerini live?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Kathimerini> <http://dbpedia.org/ontology/publisher> ?x . ?x <http://dbpedia.org/property/residence> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publisher",
			"seq": "15,23"
		}, {
			"uri": "http://dbpedia.org/property/residence",
			"label": "live",
			"seq": "40,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kathimerini",
			"label": "kathimerini",
			"seq": "28,38"
		}]
	},
	{
		"id": "8db8117a78a84ce68ab1c0b38dd505fe",
		"question": "Who is the person whose alma mater is Harvard-Westlake School?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Harvard-Westlake_School>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "24,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harvard-Westlake_School",
			"label": "harvard-westlake school",
			"seq": "38,60"
		}]
	},
	{
		"id": "efb84d67dd2347d9b6b254799a4661c3",
		"question": "To which places do the flights go by airlines headquartered in the UK?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/United_Kingdom> . ?x <http://dbpedia.org/property/destinations> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquartered",
			"seq": "46,58"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "flights",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "37,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_Kingdom",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1b85b83eced84ed5bac6ce3b7641fe6b",
		"question": "Relatives of Moses used to follow which religions?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Moses> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/ontology/veneratedIn> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "0,8"
		}, {
			"uri": "http://dbpedia.org/ontology/veneratedIn",
			"label": "religions",
			"seq": "40,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Moses",
			"label": "moses",
			"seq": "13,17"
		}]
	},
	{
		"id": "e1bf04582dd24181bedaeba350fbf86e",
		"question": "What sports are played at institutes affiliated by the Association of Southeast Asian Institutes of Higher Learning?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/Association_of_Southeast_Asian_Institutions_of_Higher_Learning> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "affiliated",
			"seq": "37,46"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/EducationalInstitution",
			"label": "institutes",
			"seq": "26,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Association_of_Southeast_Asian_Institutions_of_Higher_Learning",
			"label": "association southeast",
			"seq": "55,75"
		}]
	},
	{
		"id": "86be3981c7d04ea6aa8aec6949f00bc4",
		"question": "What is the homeport of INS Viraat (R22) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/INS_Viraat_(R22)> <http://dbpedia.org/ontology/homeport> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/homeport",
			"label": "homeport",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/INS_Viraat_(R22)",
			"label": "viraat (r22) ins",
			"seq": "24,39"
		}]
	},
	{
		"id": "16c8192ee06a41f8b0849022a7a0a8d0",
		"question": "What sport amongst the one Lagos Preparatory School practices, did Willian Garne play for?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lagos_Preparatory_School> <http://dbpedia.org/ontology/sport> ?uri. <http://dbpedia.org/resource/William_Garne> <http://dbpedia.org/ontology/occupation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sport",
			"seq": "5,9"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "practices,",
			"seq": "52,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lagos_Preparatory_School",
			"label": "preparatory school lagos",
			"seq": "27,50"
		}, {
			"uri": "http://dbpedia.org/resource/William_Garne",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "356e419a3c3947e692e81dbbf4e09a69",
		"question": "Count the different places where the people died, who were born in England?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/England> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "places",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "places",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England",
			"label": "england",
			"seq": "67,73"
		}]
	},
	{
		"id": "bb2d7162c47e46b9a5ccd94bed534a92",
		"question": "With which artist did the musical artist of Groove Thang collaborated ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Groove_Thang> <http://dbpedia.org/ontology/musicalArtist> ?x . ?x <http://dbpedia.org/property/associatedActs> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalArtist",
			"label": "musical artist",
			"seq": "11,24"
		}, {
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "collaborated",
			"seq": "57,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Groove_Thang",
			"label": "groove thang",
			"seq": "44,55"
		}]
	},
	{
		"id": "e4e55365215047349dcabad761023fd4",
		"question": "Where can i find salad based food?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Salad> . ?x <http://dbpedia.org/property/country> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainIngredient",
			"label": "find",
			"seq": "12,15"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "can",
			"seq": "6,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Salad",
			"label": "salad",
			"seq": "17,21"
		}]
	},
	{
		"id": "4e7b8e865254408aa15a2e4010eda993",
		"question": "What is the name of the television show whose company is Paramount Television and theme music composer is Gary Portnoy?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Gary_Portnoy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "46,52"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composer theme music",
			"seq": "82,101"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "24,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paramount_Television",
			"label": "television paramount",
			"seq": "24,43"
		}, {
			"uri": "http://dbpedia.org/resource/Gary_Portnoy",
			"label": "portnoy gary",
			"seq": "106,117"
		}]
	},
	{
		"id": "f01521d56f7e45d38d7855d22371b453",
		"question": "In which state do darren brass and belvin perry live?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Darren_Brass> <http://dbpedia.org/ontology/residence> ?uri. <http://dbpedia.org/resource/Belvin_Perry> <http://dbpedia.org/ontology/residence> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "darren",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "darren",
			"seq": "18,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Darren_Brass",
			"label": "darren brass",
			"seq": "18,29"
		}, {
			"uri": "http://dbpedia.org/resource/Belvin_Perry",
			"label": "belvin perry",
			"seq": "35,46"
		}]
	},
	{
		"id": "f6130d29a11e4614958ebca1871f33f7",
		"question": "What is the territory of the conflict whose commander is Feng Zicai?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Feng_Zicai> . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "44,52"
		}, {
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "territory",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "conflict",
			"seq": "29,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Feng_Zicai",
			"label": "zicai feng",
			"seq": "57,66"
		}]
	},
	{
		"id": "9c6b233ade344cbfa7f26302aa1584cc",
		"question": "Which team did wolfred McDonald is also the prospect team of Milkhail Pashnin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mikhail_Pashnin> <http://dbpedia.org/property/prospectTeam> ?uri. <http://dbpedia.org/resource/Wilfred_McDonald> <http://dbpedia.org/property/playedFor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prospectTeam",
			"label": "prospect team",
			"seq": "6,18"
		}, {
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "wolfred",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mikhail_Pashnin",
			"label": "pashnin",
			"seq": "70,76"
		}, {
			"uri": "http://dbpedia.org/resource/Wilfred_McDonald",
			"label": "mcdonald",
			"seq": "23,30"
		}]
	},
	{
		"id": "7cedb64c402a4e7cacbcc2a3d3a3280a",
		"question": "Where did Andy Wyant die and Robert Rodi was born in?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_Rodi> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/Andy_Wyant> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "robert",
			"seq": "29,34"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "robert",
			"seq": "29,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Rodi",
			"label": "robert rodi",
			"seq": "29,39"
		}, {
			"uri": "http://dbpedia.org/resource/Andy_Wyant",
			"label": "wyant andy",
			"seq": "10,19"
		}]
	},
	{
		"id": "95aa0849c5cc45f18b94c5427546188b",
		"question": "Name a colonel whose resting place is Montpelier ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/rank> <http://dbpedia.org/resource/Colonel_(United_States)> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/rank",
			"label": "a",
			"seq": "1,1"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "resting place",
			"seq": "21,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colonel_(United_States)",
			"label": "colonel",
			"seq": "7,13"
		}, {
			"uri": "http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)",
			"label": "montpelier",
			"seq": "38,47"
		}]
	},
	{
		"id": "6a768d256a514c93b3a1e2afa6908be3",
		"question": "Who influenced the author of The Shooting of Dan McGrew ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Shooting_of_Dan_McGrew_(1924_film)> <http://dbpedia.org/ontology/writer> ?x . ?x <http://dbpedia.org/property/influences> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "the",
			"seq": "15,17"
		}, {
			"uri": "http://dbpedia.org/property/influences",
			"label": "influenced",
			"seq": "4,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Shooting_of_Dan_McGrew_(1924_film)",
			"label": "shooting mcgrew",
			"seq": "33,47"
		}]
	},
	{
		"id": "364043e289af4b249909ba7a1c28c8ac",
		"question": "Where did the ultimate fighter: a champion will be crowned tonight and ultimate fighter: team rousey vs team tate take place?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Ultimate_Fighter:_A_Champion_Will_Be_Crowned> <http://dbpedia.org/property/city> ?uri. <http://dbpedia.org/resource/The_Ultimate_Fighter:_Team_Rousey_vs._Team_Tate> <http://dbpedia.org/property/city> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "fighter:",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/property/city",
			"label": "fighter:",
			"seq": "23,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Ultimate_Fighter:_A_Champion_Will_Be_Crowned",
			"label": "ultimate fighter: champion",
			"seq": "14,39"
		}, {
			"uri": "http://dbpedia.org/resource/The_Ultimate_Fighter:_Team_Rousey_vs._Team_Tate",
			"label": "ultimate fighter: rousey",
			"seq": "14,37"
		}]
	},
	{
		"id": "578cf8ec42c6409aaa3c25d463a0c4e1",
		"question": "What is the parent company of the airline whose hub is in Detroit?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Detroit> . ?x <http://dbpedia.org/ontology/parentCompany> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hub",
			"seq": "48,50"
		}, {
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "company parent",
			"seq": "12,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airline",
			"seq": "34,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Detroit",
			"label": "detroit",
			"seq": "58,64"
		}]
	},
	{
		"id": "1d30861aa35d4f9b8ece033370c4e15c",
		"question": "For which band did Dave Hollister perform in the past?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Dave_Hollister> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "past",
			"seq": "49,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dave_Hollister",
			"label": "hollister dave",
			"seq": "19,32"
		}]
	},
	{
		"id": "459dcf9d415e401787e5bfb3af170b9b",
		"question": "Is The Universe in a Single Atom a book about buddhism?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Universe_in_a_Single_Atom> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Buddhism> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/literaryGenre",
			"label": "universe",
			"seq": "7,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Universe_in_a_Single_Atom",
			"label": "universe single atom",
			"seq": "7,26"
		}, {
			"uri": "http://dbpedia.org/resource/Buddhism",
			"label": "buddhism",
			"seq": "46,53"
		}]
	},
	{
		"id": "175487b495244a41974ebc41170631a9",
		"question": "Name the television show whose voice is given by  April Stewart and theme music composer is Primus (band)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/April_Stewart> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Primus_(band)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/voices",
			"label": "voice",
			"seq": "31,35"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composer theme music",
			"seq": "68,87"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/April_Stewart",
			"label": "stewart april",
			"seq": "50,62"
		}, {
			"uri": "http://dbpedia.org/resource/Primus_(band)",
			"label": "primus (band)",
			"seq": "92,104"
		}]
	},
	{
		"id": "992095c492cf4b5ab41703a61761cbab",
		"question": "Which musician was born in Harriman, NY?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Harriman,_New_York>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "born",
			"seq": "19,22"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musician",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harriman,_New_York",
			"label": "harriman,",
			"seq": "27,35"
		}]
	},
	{
		"id": "01676793d39944c3aa2728c8e59460dd",
		"question": "What are the famous Uni Toronto scientists known for?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/University_of_Toronto> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "43,51"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientists",
			"seq": "32,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/University_of_Toronto",
			"label": "toronto",
			"seq": "24,30"
		}]
	},
	{
		"id": "ccdd008db26a4b1bb06b083c9a25de17",
		"question": "How many veterans are buried in the US?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/United_States>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "buried",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryPerson",
			"label": "veterans",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d8cbe0bde1c74580876d692bc41e1096",
		"question": "Count the PhD students whose thesis are supervised by National Medal of Science winners?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/National_Medal_of_Science> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prizes",
			"label": "winners",
			"seq": "80,86"
		}, {
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "students",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Medal_of_Science",
			"label": "national science medal",
			"seq": "54,75"
		}]
	},
	{
		"id": "0b008d07b5aa42aeb3116f72525c05a2",
		"question": "Count number of people who follow a religion which has an important office in Gold Base ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Gold_Base> . ?uri <http://dbpedia.org/ontology/religion> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "has",
			"seq": "51,53"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "36,43"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gold_Base",
			"label": "gold base",
			"seq": "78,86"
		}]
	},
	{
		"id": "94ad1de3618a4ae29fd2fa2ac111f8a0",
		"question": "Name the actor of Soylent Green to which Lydia Clarke is married ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lydia_Clarke> <http://dbpedia.org/property/spouse> ?uri. <http://dbpedia.org/resource/Soylent_Green> <http://dbpedia.org/ontology/starring> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "soylent",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "married",
			"seq": "57,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lydia_Clarke",
			"label": "clarke lydia",
			"seq": "41,52"
		}, {
			"uri": "http://dbpedia.org/resource/Soylent_Green",
			"label": "soylent green",
			"seq": "18,30"
		}]
	},
	{
		"id": "9fdd8478c6d84d1291fb875beff000f6",
		"question": "Name the artist who made Dream Dancing and is often associated with Joe Pass?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joe_Pass> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Dream_Dancing_(album)> <http://dbpedia.org/property/artist> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated",
			"seq": "52,61"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joe_Pass",
			"label": "pass joe",
			"seq": "68,75"
		}, {
			"uri": "http://dbpedia.org/resource/Dream_Dancing_(album)",
			"label": "dancing dream",
			"seq": "25,37"
		}]
	},
	{
		"id": "73d747e2e00649c48cc57a5f5c1594be",
		"question": "Name the notable commanders of Army Group Oberrhein ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)> <http://dbpedia.org/property/notableCommanders> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableCommanders",
			"label": "commanders notable",
			"seq": "9,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)",
			"label": "oberrhein group army",
			"seq": "31,50"
		}]
	},
	{
		"id": "ac18c05943054b51a0b6a6c6483e24fa",
		"question": "What is the relegious affiliations of Katyayana ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Katyayana_(Buddhist)> <http://dbpedia.org/property/religion> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religion",
			"label": "relegious",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Katyayana_(Buddhist)",
			"label": "katyayana",
			"seq": "38,46"
		}]
	},
	{
		"id": "f717accc0ab04b15bed31ee97a11045f",
		"question": "In which mountain range does the Rochers De Naye lie?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/parentMountainPeak> <http://dbpedia.org/resource/Rochers_de_Naye> . ?x <http://dbpedia.org/ontology/mountainRange> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentMountainPeak",
			"label": "mountain",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountain range",
			"seq": "9,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rochers_de_Naye",
			"label": "rochers naye",
			"seq": "33,44"
		}]
	},
	{
		"id": "1baf73ee859f4a678e907f2e806738b0",
		"question": "Murray Gold has composed music for how many things?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Murray_Gold>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composed",
			"seq": "16,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Murray_Gold",
			"label": "murray gold",
			"seq": "0,10"
		}]
	},
	{
		"id": "33ffcadb8ef94c4893dfca8fa2e74e43",
		"question": "Count the number of other product of the banks whose one of the product is Wealth management ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Wealth_management> . ?x <http://dbpedia.org/ontology/product> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/product",
			"label": "product",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "product",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wealth_management",
			"label": "management wealth",
			"seq": "75,91"
		}]
	},
	{
		"id": "ae1e012a0df44d74ab74f9890661c43e",
		"question": "List the name of those who became famous for something garrisoned at Tennessee?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Tennessee> . ?uri <http://dbpedia.org/property/knownFor> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/garrison",
			"label": "garrisoned",
			"seq": "55,64"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "for",
			"seq": "41,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tennessee",
			"label": "tennessee",
			"seq": "69,77"
		}]
	},
	{
		"id": "7e7d19cbdc3d4fb7b2b4b7110f6aab4e",
		"question": "How many people have led agencies in German occupied Europe?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/jurisdiction> <http://dbpedia.org/resource/German-occupied_Europe> . ?x <http://dbpedia.org/ontology/leader> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/jurisdiction",
			"label": "europe",
			"seq": "53,58"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "led",
			"seq": "21,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/German-occupied_Europe",
			"label": "occupied german europe",
			"seq": "37,58"
		}]
	},
	{
		"id": "c3949eda0f05470ca1d7effadac95392",
		"question": "What is the citizenship of Saima Chowdhury?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saima_Chowdhury> <http://dbpedia.org/ontology/citizenship> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "citizenship",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saima_Chowdhury",
			"label": "chowdhury saima",
			"seq": "27,41"
		}]
	},
	{
		"id": "b73800c673354bf3b828496ea3a2c9d6",
		"question": "Who was the cover artist of The Adventure of Tom Sawyer also wrote mark Twain Tonight ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> ?uri. <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coverArtist",
			"label": "artist cover",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "wrote",
			"seq": "61,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer",
			"label": "adventure sawyer",
			"seq": "32,47"
		}, {
			"uri": "http://dbpedia.org/resource/Mark_Twain_Tonight",
			"label": "tonight twain",
			"seq": "72,84"
		}]
	},
	{
		"id": "c365bc2a449849d4999e1836c37e7e20",
		"question": "Who is the writer of The Sandman (Vertigo) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Sandman_(Vertigo)> <http://dbpedia.org/property/writers> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writers",
			"label": "writer",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Sandman_(Vertigo)",
			"label": "(vertigo) sandman the",
			"seq": "7,27"
		}]
	},
	{
		"id": "dea08c4d67c84b478d0adb5e063dd3c9",
		"question": "What religion do the politicians follow, who graduated from the Yokkohama Nationaal University?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Yokohama_National_University> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "graduated",
			"seq": "45,53"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "5,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Politician",
			"label": "politicians",
			"seq": "21,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Yokohama_National_University",
			"label": "university",
			"seq": "84,93"
		}]
	},
	{
		"id": "4ef62e8a57af45229de3bc04ae17a70b",
		"question": "What is the subject of the book which preceded Sagan's Cosmos?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Cosmos_(Carl_Sagan_book)> <http://dbpedia.org/ontology/previousWork> ?x . ?x <http://dbpedia.org/property/subject> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/previousWork",
			"label": "book",
			"seq": "27,30"
		}, {
			"uri": "http://dbpedia.org/property/subject",
			"label": "subject",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cosmos_(Carl_Sagan_book)",
			"label": "cosmos",
			"seq": "55,60"
		}]
	},
	{
		"id": "cb47161368654599a123ac5ecc45c968",
		"question": "What was developed by someone working in Cockroach Labs?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/Cockroach_Labs> . ?uri <http://dbpedia.org/property/author> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "developed",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/property/author",
			"label": "working",
			"seq": "30,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cockroach_Labs",
			"label": "cockroach labs",
			"seq": "41,54"
		}]
	},
	{
		"id": "add7e467bfd94a21bacd2d251e10ae2e",
		"question": "Which battles were fought under the president when Chung Won Shik was the prime minister?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Chung_Won-shik> . ?x <http://dbpedia.org/property/battles> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "minister prime",
			"seq": "74,87"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "battles",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/President",
			"label": "president",
			"seq": "36,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chung_Won-shik",
			"label": "chung shik won",
			"seq": "51,64"
		}]
	},
	{
		"id": "d47969ab783e4582a2e2fb7e0f0f5e8e",
		"question": "How did Letitia MacTavish Hargrave died ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> <http://dbpedia.org/ontology/deathCause> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "mactavish",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Letitia_MacTavish_Hargrave",
			"label": "mactavish hargrave letitia",
			"seq": "8,33"
		}]
	},
	{
		"id": "4a9e53dfc73f4627925582fac0d63ad5",
		"question": "Which are the  automobile platform whose one of the automobile platform is Dodge ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Dodge> . ?x <http://dbpedia.org/ontology/automobilePlatform> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/automobilePlatform",
			"label": "automobile",
			"seq": "15,24"
		}, {
			"uri": "http://dbpedia.org/ontology/automobilePlatform",
			"label": "automobile",
			"seq": "15,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "automobile",
			"seq": "15,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dodge",
			"label": "dodge",
			"seq": "75,79"
		}]
	},
	{
		"id": "ee822c36d62d4486b3e5bfe19c785a6d",
		"question": "Which battle of  Khalid bin Sultan was also the conflict of Steve Buyer ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Khalid_bin_Sultan> <http://dbpedia.org/property/battles> ?uri. <http://dbpedia.org/resource/Steve_Buyer> <http://dbpedia.org/ontology/battle> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battle",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "battle",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Khalid_bin_Sultan",
			"label": "sultan khalid bin",
			"seq": "17,33"
		}, {
			"uri": "http://dbpedia.org/resource/Steve_Buyer",
			"label": "steve buyer",
			"seq": "60,70"
		}]
	},
	{
		"id": "c28b4d6ba982461894b0af6413f4dae3",
		"question": "How many molluscas are there whose families are Buccinidae and Buccinoidea?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae> . ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinoidea>} ",
		"sparql_id": "107",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "families",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/ontology/family",
			"label": "families",
			"seq": "35,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Buccinidae",
			"label": "buccinidae",
			"seq": "48,57"
		}, {
			"uri": "http://dbpedia.org/resource/Buccinoidea",
			"label": "buccinoidea",
			"seq": "63,73"
		}]
	},
	{
		"id": "f8b4b4e3f56d470eaa30548567ac76bc",
		"question": "Name the islands that belong to the archipelago whose largest city is Papeete?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Papeete> . ?uri <http://dbpedia.org/property/archipelago> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "54,65"
		}, {
			"uri": "http://dbpedia.org/property/archipelago",
			"label": "archipelago",
			"seq": "36,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Papeete",
			"label": "papeete",
			"seq": "70,76"
		}]
	},
	{
		"id": "d50f136d62424735841bbbaf2f071598",
		"question": "Name the person whose parent is Pattie Mallette?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Pattie_Mallette>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parent",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pattie_Mallette",
			"label": "mallette pattie",
			"seq": "32,46"
		}]
	},
	{
		"id": "da7765ddd30747a8a4f9e56b2c133576",
		"question": "Was Mark Twain a character of Mark Twain Tonight?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/characters> <http://dbpedia.org/resource/Mark_Twain> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/characters",
			"label": "character",
			"seq": "17,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mark_Twain_Tonight",
			"label": "tonight twain mark",
			"seq": "4,21"
		}, {
			"uri": "http://dbpedia.org/resource/Mark_Twain",
			"label": "twain mark",
			"seq": "4,13"
		}]
	},
	{
		"id": "f10350d3685640838feea5fdeaf7d694",
		"question": "In how many different stadiums are the seasons of the 2015 NA Soccer league held?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/2015_North_American_Soccer_League_season> . ?x <http://dbpedia.org/ontology/ground> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/league",
			"label": "league",
			"seq": "69,74"
		}, {
			"uri": "http://dbpedia.org/ontology/ground",
			"label": "league",
			"seq": "69,74"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadiums",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2015_North_American_Soccer_League_season",
			"label": "soccer league",
			"seq": "62,74"
		}]
	},
	{
		"id": "7713d7e1c178466791f85588f6e6bc0f",
		"question": "In which countries were the Russian volleyball team players born?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Russia_women's_national_volleyball_team> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "team",
			"seq": "47,50"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "players",
			"seq": "52,58"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "the",
			"seq": "24,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Russia_women's_national_volleyball_team",
			"label": "volleyball",
			"seq": "36,45"
		}]
	},
	{
		"id": "f0b68ec815f04f8fbcfa6fb21869435b",
		"question": "What is the county of Saint Lucia national cricket team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saint_Lucia_national_cricket_team> <http://dbpedia.org/ontology/county> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/county",
			"label": "county",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saint_Lucia_national_cricket_team",
			"label": "national cricket saint lucia team",
			"seq": "22,54"
		}]
	},
	{
		"id": "f01085ed6c1646a49adc3df33bf1df55",
		"question": "Which river originate from limerick?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Limerick>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "originate",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Limerick",
			"label": "limerick",
			"seq": "27,34"
		}]
	},
	{
		"id": "b69308b751094ac1abc810fdb238f53a",
		"question": "List the destinations to which the airlines headquartered at the Gatwick Airport fly to?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Gatwick_Airport> . ?x <http://dbpedia.org/ontology/destination> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquartered",
			"seq": "44,56"
		}, {
			"uri": "http://dbpedia.org/ontology/destination",
			"label": "destinations",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "35,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gatwick_Airport",
			"label": "gatwick airport",
			"seq": "65,79"
		}]
	},
	{
		"id": "f53a548559d847459560227f6de16c73",
		"question": "Name the veneration of the monarch who is the predecessor of Solomon?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Solomon> <http://dbpedia.org/property/predecessor> ?x . ?x <http://dbpedia.org/property/veneratedIn> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "46,56"
		}, {
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "veneration",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Monarch",
			"label": "monarch",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Solomon",
			"label": "solomon",
			"seq": "61,67"
		}]
	},
	{
		"id": "7f98833cf8c94eed9fdf6fb194c481be",
		"question": "Who operates the Ganz UV?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ganz_UV> <http://dbpedia.org/ontology/operator> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operates",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ganz_UV",
			"label": "ganz uv",
			"seq": "17,23"
		}]
	},
	{
		"id": "738238521e7e47f79c03ba81880544ce",
		"question": "Who is the publisher of The Rolling Stone Album Guide ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Rolling_Stone_Album_Guide> <http://dbpedia.org/ontology/publisher> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publisher",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Rolling_Stone_Album_Guide",
			"label": "rolling stone guide album",
			"seq": "28,52"
		}]
	},
	{
		"id": "13acb5e7c9d2488ba706f3eabb8e78c0",
		"question": "In which country was GM was firt aired which is also the mouth country of Upper Neretva?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/mouthCountry> ?uri. <http://dbpedia.org/resource/G\u00fcm\u00fc\u015f_(TV_series)> <http://dbpedia.org/property/firstAired> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthCountry",
			"label": "country",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/property/firstAired",
			"label": "aired",
			"seq": "33,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Upper_Neretva",
			"label": "neretva upper",
			"seq": "74,86"
		}, {
			"uri": "http://dbpedia.org/resource/G\u00fcm\u00fc\u015f_(TV_series)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "8dcdd9886b0d4eb38b3a78d1d8f7bf55",
		"question": "What is the hometown of the volleyball player whose club is VC Lokomotiv Novosibirsk ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/club> <http://dbpedia.org/resource/VC_Lokomotiv_Novosibirsk> . ?x <http://dbpedia.org/property/hometown> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/club",
			"label": "club",
			"seq": "52,55"
		}, {
			"uri": "http://dbpedia.org/property/hometown",
			"label": "hometown",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/VolleyballPlayer",
			"label": "volleyball player",
			"seq": "28,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/VC_Lokomotiv_Novosibirsk",
			"label": "novosibirsk lokomotiv",
			"seq": "63,83"
		}]
	},
	{
		"id": "0003a5d7358848dda07272e9779abb3b",
		"question": "What are some books whose cover illustration is designed by Marshall Arisman?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/coverArtist> <http://dbpedia.org/resource/Marshall_Arisman>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coverArtist",
			"label": "cover",
			"seq": "26,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marshall_Arisman",
			"label": "marshall arisman",
			"seq": "60,75"
		}]
	},
	{
		"id": "aef45b1c0926436fbf9066333c15dd4c",
		"question": "What religion do people of the country of Mahbuba Islam Rakhi follow?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Mahbuba_Islam_Rakhi> <http://dbpedia.org/ontology/nationality> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "country",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "5,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mahbuba_Islam_Rakhi",
			"label": "mahbuba rakhi islam",
			"seq": "42,60"
		}]
	},
	{
		"id": "7bf3155c798f4ab8976ec7b18d4a3336",
		"question": "Name the people who were in a youth club managed by Luis Enrique ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/manager> <http://dbpedia.org/resource/Luis_Enrique_(footballer)> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/manager",
			"label": "managed",
			"seq": "41,47"
		}, {
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youth club",
			"seq": "30,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Luis_Enrique_(footballer)",
			"label": "enrique luis",
			"seq": "52,63"
		}]
	},
	{
		"id": "1a388e6d4b5349899a856a6c6b9c322d",
		"question": "What is the state of the administrative region where Oscoda, Michigan is located?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Oscoda,_Michigan> <http://dbpedia.org/ontology/isPartOf> ?x . ?x <http://dbpedia.org/ontology/state> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/isPartOf",
			"label": "of is",
			"seq": "5,9"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "state",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/AdministrativeRegion",
			"label": "administrative region",
			"seq": "25,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oscoda,_Michigan",
			"label": "michigan oscoda,",
			"seq": "53,68"
		}]
	},
	{
		"id": "e6b415fc865449c3bf841f09716c5099",
		"question": "Which  institution of the Alton Ochsner is the alma mater of the Michael Hahn ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alton_Ochsner> <http://dbpedia.org/ontology/institution> ?uri. <http://dbpedia.org/resource/Michael_Hahn> <http://dbpedia.org/ontology/almaMater> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "institution",
			"seq": "7,17"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "47,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alton_Ochsner",
			"label": "ochsner alton",
			"seq": "26,38"
		}, {
			"uri": "http://dbpedia.org/resource/Michael_Hahn",
			"label": "michael hahn",
			"seq": "65,76"
		}]
	},
	{
		"id": "132b8410eb304e7a89c8c7717e9ed33f",
		"question": "Which city's foundeer is John Forbes?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/John_Forbes_(British_Army_officer)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "foundeer",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/ontology/City",
			"label": "city's",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Forbes_(British_Army_officer)",
			"label": "forbes",
			"seq": "30,35"
		}]
	},
	{
		"id": "deb86e66bf6b4246b747867c3fd40564",
		"question": "How many times has Jeff Conaway been casted?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jeff_Conaway>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "many",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jeff_Conaway",
			"label": "conaway jeff",
			"seq": "19,30"
		}]
	},
	{
		"id": "0823c2c40ec44ed38548274caa96984d",
		"question": "Kendall Jenner has how many relatives?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Kendall_Jenner> <http://dbpedia.org/property/relatives> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "28,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kendall_Jenner",
			"label": "kendall jenner",
			"seq": "0,13"
		}]
	},
	{
		"id": "3cd3e5a6d4944cbe8c95808f0407e8d0",
		"question": "How many people were drafted in the LA Clippers?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/draftTeam> <http://dbpedia.org/resource/Los_Angeles_Clippers>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "drafted",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "clippers",
			"seq": "39,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Los_Angeles_Clippers",
			"label": "clippers",
			"seq": "39,46"
		}]
	},
	{
		"id": "0564d9c87b7544ec8c5ee392b68afadc",
		"question": "Where did the beverages sold by Refriango originate?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Refriango> . ?x <http://dbpedia.org/property/origin> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "refriango",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/property/origin",
			"label": "originate",
			"seq": "42,50"
		}, {
			"uri": "http://dbpedia.org/ontology/Beverage",
			"label": "beverages",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Refriango",
			"label": "refriango",
			"seq": "32,40"
		}]
	},
	{
		"id": "3bb919a7b4894ae6afc9fc796ba76554",
		"question": "In which wars did commanders born in Indochina fight?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Indochina> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "born",
			"seq": "29,32"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "18,27"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "fight",
			"seq": "47,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indochina",
			"label": "indochina",
			"seq": "37,45"
		}]
	},
	{
		"id": "605df0ddfb63418781e9a290359006e5",
		"question": "List the affiliations of Wikipedia Zero ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wikipedia_Zero> <http://dbpedia.org/property/affiliations> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliations",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wikipedia_Zero",
			"label": "wikipedia zero",
			"seq": "25,38"
		}]
	},
	{
		"id": "a121c71fd9734b5fad1cd2f9d8699b62",
		"question": "What is the region served by the governor of Stephen L.R. McNichols ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Stephen_L.R._McNichols> <http://dbpedia.org/property/governor> ?x . ?x <http://dbpedia.org/ontology/region> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governor",
			"label": "governor",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "region",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stephen_L.R._McNichols",
			"label": "mcnichols stephen l.r.",
			"seq": "45,66"
		}]
	},
	{
		"id": "858f8152827d43efa3d30f8630da9251",
		"question": "CN Atletic-Barceloneta has a stadium in Barcelona?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/CN_Atl\u00e8tic-Barceloneta> <http://dbpedia.org/ontology/stadium> <http://dbpedia.org/resource/Barcelona> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stadium",
			"label": "stadium",
			"seq": "29,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CN_Atl\u00e8tic-Barceloneta",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Barcelona",
			"label": "barcelona",
			"seq": "40,48"
		}]
	},
	{
		"id": "40311c537af740a8829bdfa1cfaef4b1",
		"question": "Is morrissey in the smiths?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Morrissey> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Smiths> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "smiths",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Morrissey",
			"label": "morrissey",
			"seq": "3,11"
		}, {
			"uri": "http://dbpedia.org/resource/The_Smiths",
			"label": "smiths the",
			"seq": "16,25"
		}]
	},
	{
		"id": "59c88192a89f429c98c06556c15f3aad",
		"question": "In how many different wars have people graduated from the Army Command and General staff college fought?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/United_States_Army_Command_and_General_Staff_College> . ?x <http://dbpedia.org/property/battles> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "graduated",
			"seq": "39,47"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "the",
			"seq": "54,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Army_Command_and_General_Staff_College",
			"label": "general command college staff",
			"seq": "63,91"
		}]
	},
	{
		"id": "c714added3ea49fd8d6f4ee3d6fd96f0",
		"question": "Who is the chancellor of the university whose campus is in Woodlane, New Jersey ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Woodlane,_New_Jersey> . ?x <http://dbpedia.org/property/chancellor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "campus",
			"seq": "46,51"
		}, {
			"uri": "http://dbpedia.org/property/chancellor",
			"label": "chancellor",
			"seq": "11,20"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "29,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Woodlane,_New_Jersey",
			"label": "woodlane, jersey",
			"seq": "59,74"
		}]
	},
	{
		"id": "4f51e2f2604c49609c5b28c6d129bf7d",
		"question": "Was the street dogs of south central narrated by Queen Latifah?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Street_Dogs_of_South_Central> <http://dbpedia.org/property/narrator> <http://dbpedia.org/resource/Queen_Latifah> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/narrator",
			"label": "narrated",
			"seq": "37,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Street_Dogs_of_South_Central",
			"label": "central street south dogs",
			"seq": "8,32"
		}, {
			"uri": "http://dbpedia.org/resource/Queen_Latifah",
			"label": "latifah queen",
			"seq": "49,61"
		}]
	},
	{
		"id": "f1deb0821db74c36b4d4e3febc19fb74",
		"question": "What fictional character's species is American Pekin duck",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/species",
			"label": "species",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Pekin_duck",
			"label": "american pekin duck",
			"seq": "38,56"
		}]
	},
	{
		"id": "2430cb5fcc7e4de09250aa3d4cf84c00",
		"question": "Name the television show whose creator is Simon Fuller and presented by Ryan Seacrest?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> . ?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "creator",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/ontology/presenter",
			"label": "presented",
			"seq": "59,67"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Simon_Fuller",
			"label": "fuller simon",
			"seq": "42,53"
		}, {
			"uri": "http://dbpedia.org/resource/Ryan_Seacrest",
			"label": "seacrest ryan",
			"seq": "72,84"
		}]
	},
	{
		"id": "1ae78ac410444930afaf70da6b8c4492",
		"question": "How many books are there whose author's tomb is in Madrid?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Madrid> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "in",
			"seq": "48,49"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "author's",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Madrid",
			"label": "madrid",
			"seq": "51,56"
		}]
	},
	{
		"id": "f0a84962196f46ad8f2bff1e5ee68e33",
		"question": "What are the bridges whose located in California?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/California>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "located",
			"seq": "27,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridges",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/California",
			"label": "california",
			"seq": "38,47"
		}]
	},
	{
		"id": "da487a9e2aa64d0d900ccb99d5eb6fc5",
		"question": "Name the common sports played at Polytechnic University of Philippines San Juan and Islamic Azad University?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_San_Juan> <http://dbpedia.org/ontology/sport> ?uri. <http://dbpedia.org/resource/Islamic_Azad_University_Central_Tehran_Branch> <http://dbpedia.org/ontology/sport> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_San_Juan",
			"label": "polytechnic philippines university",
			"seq": "33,66"
		}, {
			"uri": "http://dbpedia.org/resource/Islamic_Azad_University_Central_Tehran_Branch",
			"label": "university islamic",
			"seq": "45,62"
		}]
	},
	{
		"id": "ffdb4d5b27464d26bc824dced4615e8c",
		"question": "Who acted in the work written by Colin Brake?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Colin_Brake> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "written",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Work",
			"label": "work",
			"seq": "17,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colin_Brake",
			"label": "colin brake",
			"seq": "33,43"
		}]
	},
	{
		"id": "ccb1cb5ab424424d952a58dae998bc1f",
		"question": "Purnima Banerjee and Rishang Keishing are politicians of what party ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rishang_Keishing> <http://dbpedia.org/property/party> ?uri. <http://dbpedia.org/resource/Purnima_Banerjee> <http://dbpedia.org/ontology/party> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "62,66"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "62,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rishang_Keishing",
			"label": "keishing rishang",
			"seq": "21,36"
		}, {
			"uri": "http://dbpedia.org/resource/Purnima_Banerjee",
			"label": "banerjee purnima",
			"seq": "0,15"
		}]
	},
	{
		"id": "1c0073aa4e3142589ffd0e487b5742da",
		"question": "Ryan Seacrest has been the presenter of how many things?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/presenter",
			"label": "presenter",
			"seq": "27,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ryan_Seacrest",
			"label": "seacrest ryan",
			"seq": "0,12"
		}]
	},
	{
		"id": "7ddbd538a02143ec8dc92396be31453e",
		"question": "Give me a count of companies located in Texas ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Texas>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "located",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "19,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Texas",
			"label": "texas",
			"seq": "40,44"
		}]
	},
	{
		"id": "56f14869f43647c485fa58b23d2f9c2a",
		"question": "Did the New Way party merge in the One Israel party?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/New_Way_(Israel)> <http://dbpedia.org/ontology/mergedIntoParty> <http://dbpedia.org/resource/One_Israel> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mergedIntoParty",
			"label": "party",
			"seq": "16,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_Way_(Israel)",
			"label": "israel way new",
			"seq": "8,21"
		}, {
			"uri": "http://dbpedia.org/resource/One_Israel",
			"label": "israel one",
			"seq": "35,44"
		}]
	},
	{
		"id": "67071d7bb6a641018f186b4bab9377f8",
		"question": "Name the organization which developed iPhone OS and the XNU?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/IPhone_OS_1> <http://dbpedia.org/property/developer> ?uri. <http://dbpedia.org/resource/XNU> <http://dbpedia.org/ontology/developer> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "developed",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "28,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/IPhone_OS_1",
			"label": "iphone os",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/resource/XNU",
			"label": "xnu",
			"seq": "56,58"
		}]
	},
	{
		"id": "2d0b48018f494c26a18b0026fdf92feb",
		"question": "What are the television shows whose network is BBC HD?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC_HD",
			"label": "bbc hd",
			"seq": "47,52"
		}]
	},
	{
		"id": "14c91859f31f43e99bc47c8be8f02f16",
		"question": "What are the books written by authors who died in Madrid?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Madrid> . ?uri <http://dbpedia.org/property/author> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "written",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/property/author",
			"label": "authors",
			"seq": "30,36"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Madrid",
			"label": "madrid",
			"seq": "50,55"
		}]
	},
	{
		"id": "d3cc7a7f2f7b40afb2398e62b690580e",
		"question": "Name  some ww1 veterans?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/World_War_I>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "name",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/World_War_I",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "b8eb36910321468d898a9e2d1db1d016",
		"question": "Where can one find some quick bread in the world?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Quick_bread> . ?x <http://dbpedia.org/ontology/region> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/type",
			"label": "the",
			"seq": "39,41"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "in",
			"seq": "15,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Quick_bread",
			"label": "quick bread",
			"seq": "24,34"
		}]
	},
	{
		"id": "3ca98ea2b8ae43d6b96d28fc67c8d9ff",
		"question": "Which stadium is owned by the team whose manager is Dimitris Terezopoulos?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/manager> <http://dbpedia.org/resource/Dimitris_Terezopoulos> . ?x <http://dbpedia.org/property/stadium> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/manager",
			"label": "manager",
			"seq": "41,47"
		}, {
			"uri": "http://dbpedia.org/property/stadium",
			"label": "stadium",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dimitris_Terezopoulos",
			"label": "terezopoulos dimitris",
			"seq": "52,72"
		}]
	},
	{
		"id": "37d0eb12d3c94597911b7c985670d4c2",
		"question": "Where is Tahual located which is also the country of Ren Romano ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ren\u00e9_Romano> <http://dbpedia.org/property/citizenship> ?uri. <http://dbpedia.org/resource/Tahual> <http://dbpedia.org/property/location> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/citizenship",
			"label": "located",
			"seq": "16,22"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "16,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ren\u00e9_Romano",
			"label": "romano ren",
			"seq": "53,62"
		}, {
			"uri": "http://dbpedia.org/resource/Tahual",
			"label": "tahual",
			"seq": "9,14"
		}]
	},
	{
		"id": "9b5143de94794385973ea90f3188b781",
		"question": "Was John Muir the first one to ascend one of the peaks in the cathedral peak?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Cathedral_Peak_(California)> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "first",
			"seq": "18,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cathedral_Peak_(California)",
			"label": "cathedral peak",
			"seq": "49,62"
		}, {
			"uri": "http://dbpedia.org/resource/John_Muir",
			"label": "muir john",
			"seq": "4,12"
		}]
	},
	{
		"id": "8ebe5072325a4339b8218b2a7943e4c6",
		"question": "What is the television show whose previous work is The Spirit of Christmas (short film)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/The_Spirit_of_Christmas_(short_film)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/previousWork",
			"label": "previous work",
			"seq": "34,46"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Spirit_of_Christmas_(short_film)",
			"label": "christmas spirit (short film)",
			"seq": "55,83"
		}]
	},
	{
		"id": "927cae9531214d50b42aa1950baa9486",
		"question": "List the series of the books whose author is K. W. Jeter.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/author> <http://dbpedia.org/resource/K._W._Jeter> . ?x <http://dbpedia.org/ontology/series> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "author",
			"seq": "35,40"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "23,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/K._W._Jeter",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "331d362a310946ae8a786c98ad75d8f4",
		"question": "List the authors of the musicals whose songwriter is Richard M. Sherman.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Richard_M._Sherman> . ?x <http://dbpedia.org/ontology/author> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicBy",
			"label": "musicals",
			"seq": "24,31"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "authors",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Musical",
			"label": "musicals",
			"seq": "24,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Richard_M._Sherman",
			"label": "richard",
			"seq": "53,59"
		}]
	},
	{
		"id": "f3c826d486634c9d83b4d891f9c0eb35",
		"question": "What is the river on which the Kariba Dam and Batoka Gorge Hydroelectirc power station exist?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kariba_Dam> <http://dbpedia.org/ontology/river> ?uri. <http://dbpedia.org/resource/Batoka_Gorge_Hydroelectric_Power_Station> <http://dbpedia.org/ontology/river> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/river",
			"label": "river",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/river",
			"label": "river",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kariba_Dam",
			"label": "kariba dam",
			"seq": "31,40"
		}, {
			"uri": "http://dbpedia.org/resource/Batoka_Gorge_Hydroelectric_Power_Station",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "27b52b633c2c44e280099149146f6a9d",
		"question": "What musicians are signed up with colpix records?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Colpix_Records>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "are",
			"seq": "15,17"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musicians",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colpix_Records",
			"label": "records colpix",
			"seq": "34,47"
		}]
	},
	{
		"id": "070e0e36e87b4eeda426afc352710eae",
		"question": "What is the name of the information appliance by sony whose predecessor is PlayStation 2?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Sony> . ?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/PlayStation_2>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "appliance",
			"seq": "36,44"
		}, {
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "60,70"
		}, {
			"uri": "http://dbpedia.org/ontology/InformationAppliance",
			"label": "information appliance",
			"seq": "24,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony",
			"label": "sony",
			"seq": "49,52"
		}, {
			"uri": "http://dbpedia.org/resource/PlayStation_2",
			"label": "playstation",
			"seq": "75,85"
		}]
	},
	{
		"id": "e5ba33e4f5e84baba047469c0c00fa35",
		"question": "Is the College Sainte Marie in Mauritius?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/College_Sainte-Marie> <http://dbpedia.org/property/county> <http://dbpedia.org/resource/Mauritius> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/county",
			"label": "sainte",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/College_Sainte-Marie",
			"label": "college sainte marie",
			"seq": "7,26"
		}, {
			"uri": "http://dbpedia.org/resource/Mauritius",
			"label": "mauritius",
			"seq": "31,39"
		}]
	},
	{
		"id": "661df655b8234afdb7975e82bacf8c18",
		"question": "Who were the narrators of the albums which had Ringo Starr as one of the narrator ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/narrated> <http://dbpedia.org/resource/Ringo_Starr> . ?x <http://dbpedia.org/property/narrated> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/narrated",
			"label": "narrator",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/property/narrated",
			"label": "narrator",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Album",
			"label": "albums",
			"seq": "30,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ringo_Starr",
			"label": "starr ringo",
			"seq": "47,57"
		}]
	},
	{
		"id": "1d0e592950334df5a65998987f995496",
		"question": "What is the river whose source region is North-Western Province, Zambia and river mouth is Indian Ocean?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Indian_Ocean>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceRegion",
			"label": "source region",
			"seq": "24,36"
		}, {
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North-Western_Province,_Zambia",
			"label": "north-western province, zambia",
			"seq": "41,70"
		}, {
			"uri": "http://dbpedia.org/resource/Indian_Ocean",
			"label": "indian ocean",
			"seq": "91,102"
		}]
	},
	{
		"id": "c44d40b04a6344f0b925ae5a869a162e",
		"question": "What awards have been given to race horses bred by Bert Michell?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Bert_S._Michell> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/trainer",
			"label": "race",
			"seq": "31,34"
		}, {
			"uri": "http://dbpedia.org/ontology/honours",
			"label": "horses",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/ontology/RaceHorse",
			"label": "horses",
			"seq": "36,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bert_S._Michell",
			"label": "michell bert",
			"seq": "51,62"
		}]
	},
	{
		"id": "1f283dc1bb87433d804608abb6d42fb9",
		"question": "Danny Felice, the Gibraltarian guitarist is from which city?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Danny_Felice> <http://dbpedia.org/ontology/hometown> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "from",
			"seq": "44,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Danny_Felice",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9af0ed42078645f89b794641c5bf214f",
		"question": "How many things are people who died in St. Petersburg known for?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/Saint_Petersburg> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "people",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "54,62"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saint_Petersburg",
			"label": "petersburg",
			"seq": "43,52"
		}]
	},
	{
		"id": "1088fd5c6f2948faa4ca297bf58ca3eb",
		"question": "Where did ed podolak go to high school",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ed_Podolak> <http://dbpedia.org/ontology/highschool> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/highschool",
			"label": "school high",
			"seq": "27,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ed_Podolak",
			"label": "podolak",
			"seq": "13,19"
		}]
	},
	{
		"id": "2fe53e1ad1f348669a1f92c6c35fbb53",
		"question": "Of which countries  does Viveka Babajee have citizenship?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Viveka_Babajee> <http://dbpedia.org/property/citizenship> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/citizenship",
			"label": "citizenship",
			"seq": "45,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Viveka_Babajee",
			"label": "babajee viveka",
			"seq": "25,38"
		}]
	},
	{
		"id": "e2897f4781764c61aa25fd8a527347dd",
		"question": "Which university attended by Donn Barber and education institute of Jack McGregor ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Donn_Barber> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "education",
			"seq": "45,53"
		}, {
			"uri": "http://dbpedia.org/ontology/education",
			"label": "education",
			"seq": "45,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Donn_Barber",
			"label": "barber donn",
			"seq": "29,39"
		}, {
			"uri": "http://dbpedia.org/resource/Jack_McGregor",
			"label": "mcgregor jack",
			"seq": "68,80"
		}]
	},
	{
		"id": "c6a2f3f300014efbb98edeadddbbd5f5",
		"question": "Where is Bogobiri House located ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bogobiri_House> <http://dbpedia.org/property/locationCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCity",
			"label": "located",
			"seq": "24,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bogobiri_House",
			"label": "bogobiri house",
			"seq": "9,22"
		}]
	},
	{
		"id": "c302f010d82f40b4819adce71cf9e672",
		"question": "Count all those whose youth club was managed by Luis Enrique.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/manager> <http://dbpedia.org/resource/Luis_Enrique_(footballer)> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/manager",
			"label": "managed",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youth club",
			"seq": "22,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Luis_Enrique_(footballer)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "672bf19ac1154092909bd114c425c125",
		"question": "How many areas are led by Willem Alexander?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "alexander",
			"seq": "33,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands",
			"label": "alexander willem",
			"seq": "26,41"
		}]
	},
	{
		"id": "248fbcca0cc84ab7a183eeb56854398e",
		"question": "What sports are played in schools where Swahili is the official language?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Swahili_language> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/language",
			"label": "language",
			"seq": "64,71"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Swahili_language",
			"label": "language swahili",
			"seq": "40,55"
		}]
	},
	{
		"id": "68b2123a04bb4f809d1d4e74e6c6d5a0",
		"question": "Count the awards received by Immunologists?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/fields> <http://dbpedia.org/resource/Immunology> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/fields",
			"label": "awards",
			"seq": "10,15"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "10,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Award",
			"label": "awards",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Immunology",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "af27fd24d40c4af69bd62323f808d37f",
		"question": "Which famous horserace has seen both Fergie sutherland and the illustrious War of Attrition?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/War_Of_Attrition_(horse)> <http://dbpedia.org/property/race> ?uri. <http://dbpedia.org/resource/Fergie_Sutherland> <http://dbpedia.org/property/race> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/race",
			"label": "horserace",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/property/race",
			"label": "horserace",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/War_Of_Attrition_(horse)",
			"label": "attrition",
			"seq": "82,90"
		}, {
			"uri": "http://dbpedia.org/resource/Fergie_Sutherland",
			"label": "sutherland fergie",
			"seq": "37,53"
		}]
	},
	{
		"id": "42696b30838d4c98a18e0471fbda3572",
		"question": "Who are in the liang chow club?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Liang_Chow> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/club",
			"label": "club",
			"seq": "26,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Liang_Chow",
			"label": "liang chow",
			"seq": "15,24"
		}]
	},
	{
		"id": "1e325840e9a4488d9ab113c9cf46d4dd",
		"question": "What is the occupation of the people who are born in Iowa?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Iowa> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "8,10"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "occupation",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "30,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Iowa",
			"label": "iowa",
			"seq": "53,56"
		}]
	},
	{
		"id": "5a343f2e17ff49d3abcce067bc9113ca",
		"question": "Who holds shares in something famous for the Seven Spring Mountain Resort?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Seven_Springs_Mountain_Resort> . ?uri <http://dbpedia.org/property/owner> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "for",
			"seq": "37,39"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "for",
			"seq": "37,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Seven_Springs_Mountain_Resort",
			"label": "mountain spring resort seven",
			"seq": "45,72"
		}]
	},
	{
		"id": "bce6e73ad4d543ab9e13b7845aea8d94",
		"question": "What are the different religions followed by presidents whose prime minister was Surayud Chulanont?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Surayud_Chulanont> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "minister prime",
			"seq": "62,75"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/ontology/President",
			"label": "presidents",
			"seq": "45,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Surayud_Chulanont",
			"label": "chulanont surayud",
			"seq": "81,97"
		}]
	},
	{
		"id": "fa87970fbd454ac58ae0fd59fa7f59ea",
		"question": "Who all were involved in the wars fought by the commander Blue Jacket?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/commander> <http://dbpedia.org/resource/Blue_Jacket> . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/commander",
			"label": "commander",
			"seq": "48,56"
		}, {
			"uri": "http://dbpedia.org/property/combatant",
			"label": "commander",
			"seq": "48,56"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "jacket",
			"seq": "63,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blue_Jacket",
			"label": "jacket blue",
			"seq": "58,68"
		}]
	},
	{
		"id": "1b7009c254174184a4496ada2462fa8e",
		"question": "What are some people who are on the board of companies founded in NY?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_York_City> . ?uri <http://dbpedia.org/ontology/board> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "55,61"
		}, {
			"uri": "http://dbpedia.org/ontology/board",
			"label": "board",
			"seq": "36,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York_City",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "37341d4902c249d1a926afdf3ec6895d",
		"question": "What are some cars similar to the ones assembled at Toluca?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Toluca> . ?x <http://dbpedia.org/property/related> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/assembly",
			"label": "assembled",
			"seq": "39,47"
		}, {
			"uri": "http://dbpedia.org/property/related",
			"label": "at",
			"seq": "2,3"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "assembled",
			"seq": "39,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toluca",
			"label": "toluca",
			"seq": "52,57"
		}]
	},
	{
		"id": "edf2e6aeff7841b9bd3da7e23089514b",
		"question": "Which governer of Winston bryant is also the president of Carl Stokes ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri. <http://dbpedia.org/resource/Carl_Stokes> <http://dbpedia.org/property/president> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governor",
			"label": "governer",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "45,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Winston_Bryant",
			"label": "winston bryant",
			"seq": "18,31"
		}, {
			"uri": "http://dbpedia.org/resource/Carl_Stokes",
			"label": "stokes carl",
			"seq": "58,68"
		}]
	},
	{
		"id": "4543bb2bca244cacb770ea3f2277fef5",
		"question": "Does Heydar mean the same as a lion?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Heydar> <http://dbpedia.org/property/meaning> <http://dbpedia.org/resource/Lion> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/meaning",
			"label": "mean",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Heydar",
			"label": "heydar",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/resource/Lion",
			"label": "lion",
			"seq": "31,34"
		}]
	},
	{
		"id": "8f28ab18a0db420a9c7403df42c1e14f",
		"question": "List the fields of Sylvain Lvi ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sylvain_L\u00e9vi> <http://dbpedia.org/property/fields> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/fields",
			"label": "fields",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sylvain_L\u00e9vi",
			"label": "sylvain",
			"seq": "19,25"
		}]
	},
	{
		"id": "927df42625ef46c0a72657b93664568f",
		"question": "How many managers have managed Middlesbrough FC?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/Middlesbrough_F.C.>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/managerClub",
			"label": "managers",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Middlesbrough_F.C.",
			"label": "middlesbrough",
			"seq": "31,43"
		}]
	},
	{
		"id": "eca9dd9de8cf482bad043751461e8aac",
		"question": "What sport is Eric Schiller known for, and employes Craig Van Tibury?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eric_Schiller> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Craig_Van_Tilbury> <http://dbpedia.org/ontology/occupation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known",
			"seq": "28,32"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "craig",
			"seq": "52,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eric_Schiller",
			"label": "schiller eric",
			"seq": "14,26"
		}, {
			"uri": "http://dbpedia.org/resource/Craig_Van_Tilbury",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "eb264bdc56224986bac08332b3941a2d",
		"question": "Which minister was responsible for Kriminalpolizie?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kriminalpolizei> <http://dbpedia.org/ontology/leader> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "minister",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kriminalpolizei",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "adb59836a217439ab637233a71390377",
		"question": "In what movies did Akira Ifukube compose the music?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Akira_Ifukube>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "45,49"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "in",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Akira_Ifukube",
			"label": "ifukube akira",
			"seq": "19,31"
		}]
	},
	{
		"id": "74ba4ac20ee641e9b1373420ec67138c",
		"question": "How many awards have been awarded to people who are buried in Glendale, California?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Glendale,_California> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "people",
			"seq": "37,42"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Glendale,_California",
			"label": "california glendale,",
			"seq": "62,81"
		}]
	},
	{
		"id": "d2c55064c2b1442aa5d1e53946aaec43",
		"question": "What is the river whose mouth is in deadsea?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Dead_Sea>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river mouth",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dead_Sea",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f24f21d65b5f4fdaa1f972261523fabd",
		"question": "List all those whose relatives' nationality is United States.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nationality> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/ontology/relative> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationality",
			"label": "nationality",
			"seq": "32,42"
		}, {
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives'",
			"seq": "21,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "united",
			"seq": "47,52"
		}]
	},
	{
		"id": "90b999b08b4b48b68d0ecc7def163056",
		"question": "How many people were in a youthclub which played in the Argentine Primera Division?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/Argentine_Primera_Divisi\u00f3n> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "played",
			"seq": "42,47"
		}, {
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youthclub",
			"seq": "26,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Argentine_Primera_Divisi\u00f3n",
			"label": "argentine primera",
			"seq": "56,72"
		}]
	},
	{
		"id": "e18646f7fb64400cbcaff2210d28e040",
		"question": "Which Stanley Kubrick's movie has music by Laurie Johnson?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Stanley_Kubrick> . ?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Laurie_Johnson>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/director",
			"label": "which",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "34,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "which",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stanley_Kubrick",
			"label": "stanley",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/resource/Laurie_Johnson",
			"label": "johnson laurie",
			"seq": "43,56"
		}]
	},
	{
		"id": "6a93144b4a8a49b8b9ea07d4b5392496",
		"question": "Where does the river flows into, which starts in Gredelj?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Gredelj> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/source",
			"label": "does",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "15,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gredelj",
			"label": "gredelj",
			"seq": "49,55"
		}]
	},
	{
		"id": "6d98acc27b4e4a96ae51410061611f08",
		"question": "Did chris lebenzon edit Batman returns?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Batman_Returns> <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Chris_Lebenzon> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editing",
			"label": "edit",
			"seq": "19,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Batman_Returns",
			"label": "returns batman",
			"seq": "24,37"
		}, {
			"uri": "http://dbpedia.org/resource/Chris_Lebenzon",
			"label": "lebenzon chris",
			"seq": "4,17"
		}]
	},
	{
		"id": "c300cea324644ae39031003ca3d6aa2d",
		"question": "Name the TV show with distributor as Broadcast syndication and has theme music composed by Primus ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Broadcast_syndication> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Primus_(band)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributor",
			"seq": "22,32"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "79,86"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Broadcast_syndication",
			"label": "syndication broadcast",
			"seq": "37,57"
		}, {
			"uri": "http://dbpedia.org/resource/Primus_(band)",
			"label": "primus and",
			"seq": "59,68"
		}]
	},
	{
		"id": "dc7c910336e842419f8645864f6156fc",
		"question": "Which military unit garrison is Arlington County, Virginia and The Pentagon?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> . ?uri <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/The_Pentagon>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/garrison",
			"label": "garrison",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/property/garrison",
			"label": "garrison",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "military unit",
			"seq": "6,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arlington_County,_Virginia",
			"label": "arlington virginia county,",
			"seq": "32,57"
		}, {
			"uri": "http://dbpedia.org/resource/The_Pentagon",
			"label": "pentagon the",
			"seq": "63,74"
		}]
	},
	{
		"id": "691beaad90c049ee8b594572b8dbc124",
		"question": "What artist was associated closely with the bare necessities and rock a doodle?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Bare_Necessities> <http://dbpedia.org/ontology/artist> ?uri. <http://dbpedia.org/resource/Rock-a-Doodle> <http://dbpedia.org/ontology/starring> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/artist",
			"label": "artist",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "artist",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Bare_Necessities",
			"label": "necessities",
			"seq": "49,59"
		}, {
			"uri": "http://dbpedia.org/resource/Rock-a-Doodle",
			"label": "doodle rock",
			"seq": "65,75"
		}]
	},
	{
		"id": "24ebd4641f2a4aa9a2d94e60bf9478ec",
		"question": "Was Let it Be written by Ringo Starr?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Let_It_Be_(musical)> <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Ringo_Starr> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicBy",
			"label": "by",
			"seq": "22,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Let_It_Be_(musical)",
			"label": "let",
			"seq": "4,6"
		}, {
			"uri": "http://dbpedia.org/resource/Ringo_Starr",
			"label": "starr ringo",
			"seq": "25,35"
		}]
	},
	{
		"id": "b48a6444785e448b83e9f9120e667014",
		"question": "How many artists are signed up with Celluloid Records?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "are",
			"seq": "17,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Celluloid_Records",
			"label": "celluloid records",
			"seq": "36,52"
		}]
	},
	{
		"id": "6bd4f6e0ff164d198b28c87bbdeb06c5",
		"question": "Which country were the associates of Hilda Duhalde from?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Hilda_de_Duhalde> <http://dbpedia.org/ontology/associate> ?x . ?x <http://dbpedia.org/ontology/nationality> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associate",
			"label": "associates",
			"seq": "23,32"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "country",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hilda_de_Duhalde",
			"label": "duhalde hilda",
			"seq": "37,49"
		}]
	},
	{
		"id": "cdc7afa4efc24c619aebfe90b366a6da",
		"question": "In what tv shows did Jason Carter act?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "carter",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jason_Carter_(actor)",
			"label": "carter jason act",
			"seq": "21,36"
		}]
	},
	{
		"id": "47bc9fd86bf54061b9df63ac5d6789c1",
		"question": "Name some books by Spanish speaking authors.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Spanish_language> . ?uri <http://dbpedia.org/property/author> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/language",
			"label": "name",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/property/author",
			"label": "authors.",
			"seq": "36,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Spanish_language",
			"label": "spanish",
			"seq": "19,25"
		}]
	},
	{
		"id": "811b775c0148423ebd8f7f213fb6fafa",
		"question": "Which  siler medalist of the Tennis at the 2012 Summer Olympics  Men's singles was also the  flagbearer of the Switzerland at the 2008 Summer Olympics",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tennis_at_the_2012_Summer_Olympics_\u2013_Men's_singles> <http://dbpedia.org/ontology/silverMedalist> ?uri. <http://dbpedia.org/resource/Switzerland_at_the_2008_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/silverMedalist",
			"label": "medalist",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/property/flagbearer",
			"label": "flagbearer",
			"seq": "93,102"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tennis_at_the_2012_Summer_Olympics_\u2013_Men's_singles",
			"label": "olympics singles tennis summer",
			"seq": "29,58"
		}, {
			"uri": "http://dbpedia.org/resource/Switzerland_at_the_2008_Summer_Olympics",
			"label": "switzerland olympics summer",
			"seq": "48,74"
		}]
	},
	{
		"id": "6547856ca710456fbcb9872e8a03a4e2",
		"question": "Which television shows have been produced by Erik Bork?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Erik_Bork>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "produced",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erik_Bork",
			"label": "erik bork",
			"seq": "45,53"
		}]
	},
	{
		"id": "e162c9820c6a4768bf7ffd8afc11a55b",
		"question": "In which states are there bridges over the Pequea Creek?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/river> <http://dbpedia.org/resource/Pequea_Creek> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/river",
			"label": "over",
			"seq": "34,37"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "states",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridges",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pequea_Creek",
			"label": "pequea creek",
			"seq": "43,54"
		}]
	},
	{
		"id": "35b0181dcf4d44abbc524b41da8eb11f",
		"question": "Name the university with mascot as Aubie and president as jay Gogue ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Aubie> . ?uri <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Jay_Gogue>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "45,53"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Aubie",
			"label": "aubie",
			"seq": "35,39"
		}, {
			"uri": "http://dbpedia.org/resource/Jay_Gogue",
			"label": "gogue jay",
			"seq": "58,66"
		}]
	},
	{
		"id": "5313a4dd9c5a451ebf0c06bd24ed2b0a",
		"question": "List the birthplace of the medicians who studied in Harvard.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Harvard_Medical_School> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Medician>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "studied",
			"seq": "41,47"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birthplace",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Medician",
			"label": "medicians",
			"seq": "27,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harvard_Medical_School",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "07747709891b435d84ae5c14259e92f7",
		"question": "Name some Texas based companies ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Texas>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "companies",
			"seq": "22,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "22,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Texas",
			"label": "texas",
			"seq": "10,14"
		}]
	},
	{
		"id": "4ae6b12b53054ad29b07c61a48527249",
		"question": "What is common between genre of battle chess and purpose of New Zealand Chess ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_Chess> <http://dbpedia.org/property/genre> ?uri. <http://dbpedia.org/resource/New_Zealand_Chess_Federation> <http://dbpedia.org/property/purpose> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/genre",
			"label": "genre",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/property/purpose",
			"label": "purpose",
			"seq": "49,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Battle_Chess",
			"label": "battle chess",
			"seq": "32,43"
		}, {
			"uri": "http://dbpedia.org/resource/New_Zealand_Chess_Federation",
			"label": "zealand chess",
			"seq": "39,51"
		}]
	},
	{
		"id": "a1e1a70a1c92405e903356d3f058bda5",
		"question": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010> <http://dbpedia.org/property/incumbent> <http://dbpedia.org/resource/John_Boehner> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/incumbent",
			"label": "winner",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010",
			"label": "representatives elections house ohio 2010",
			"seq": "38,78"
		}, {
			"uri": "http://dbpedia.org/resource/John_Boehner",
			"label": "boehner john",
			"seq": "4,15"
		}]
	},
	{
		"id": "871856be77aa4a128b9fbaaad6176bb6",
		"question": "What is the alma mater of the scientist  whose PhD advisor is Jean-Claude Latombe ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/doctoralAdvisor> <http://dbpedia.org/resource/Jean-Claude_Latombe> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralAdvisor",
			"label": "advisor",
			"seq": "51,57"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "30,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jean-Claude_Latombe",
			"label": "jean-claude latombe",
			"seq": "62,80"
		}]
	},
	{
		"id": "cb24b43a6ea14f8691476c986fd94deb",
		"question": "who is the governer of New Castile?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/order> <http://dbpedia.org/resource/Governorate_of_New_Castile> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/order",
			"label": "governer",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Governorate_of_New_Castile",
			"label": "castile",
			"seq": "27,33"
		}]
	},
	{
		"id": "1a35a6119a4a482286916e22a00ff89f",
		"question": "In which country is the Baku puppet Theater located which is also the birth palce of Anar Salmanov ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Baku_Puppet_Theatre> <http://dbpedia.org/ontology/locationCountry> ?uri. <http://dbpedia.org/resource/Anar_Salmanov> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCountry",
			"label": "country",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "birth",
			"seq": "70,74"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Baku_Puppet_Theatre",
			"label": "puppet",
			"seq": "29,34"
		}, {
			"uri": "http://dbpedia.org/resource/Anar_Salmanov",
			"label": "salmanov anar",
			"seq": "85,97"
		}]
	},
	{
		"id": "a869f86cad31408eb7ce2f7ec9cc6fad",
		"question": "Which magazine's editor's official residence is Playboy Mansion?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Playboy_Mansion> . ?uri <http://dbpedia.org/property/editor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residence",
			"seq": "35,43"
		}, {
			"uri": "http://dbpedia.org/property/editor",
			"label": "editor's",
			"seq": "17,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Magazine",
			"label": "magazine's",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Playboy_Mansion",
			"label": "playboy mansion",
			"seq": "48,62"
		}]
	},
	{
		"id": "64452a48e109452f8d7c44e99d505ae8",
		"question": "What are the television shows telecasted on the network which has headquarters at Atlanta?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Atlanta> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "66,77"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "network",
			"seq": "48,54"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Atlanta",
			"label": "atlanta",
			"seq": "82,88"
		}]
	},
	{
		"id": "45ef969f39544740a00aabf182833319",
		"question": "Which military unit's  garrison is Pentagon and command structure is United States Department of Defense?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/The_Pentagon> . ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/garrison",
			"label": "garrison",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/ontology/commandStructure",
			"label": "structure command",
			"seq": "48,64"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "military",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Pentagon",
			"label": "pentagon",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/resource/United_States_Department_of_Defense",
			"label": "department defense united states",
			"seq": "69,100"
		}]
	},
	{
		"id": "560edd5735a04aed942d6c71d7d47f1f",
		"question": "Which university with athletics department in NCAA Division I Football Bowl Subdivision has nickname Tulane Green Wave ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/St._Louis> . ?uri <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Madison_River>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthMountain",
			"label": "tulane",
			"seq": "101,106"
		}, {
			"uri": "http://dbpedia.org/ontology/rightTributary",
			"label": "tulane",
			"seq": "101,106"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/St._Louis",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Madison_River",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1fe29c8d282c43c8ba68b809c317857b",
		"question": "By whom is the broadcaster network Bounce TV founded?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bounce_TV> <http://dbpedia.org/ontology/foundedBy> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "founded",
			"seq": "45,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bounce_TV",
			"label": "bounce",
			"seq": "35,40"
		}]
	},
	{
		"id": "12a72e0ad64a48f9bac59bc42cec75b8",
		"question": "Where was William anthony trained ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Anthony_(artist)> <http://dbpedia.org/property/training> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/training",
			"label": "trained",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Anthony_(artist)",
			"label": "william anthony",
			"seq": "10,24"
		}]
	},
	{
		"id": "156a0839803f4a9d9e14200615736044",
		"question": "Which countries were the first to play Gumus and Ne daj se, Nina?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/G\u00fcm\u00fc\u015f_(TV_series)> <http://dbpedia.org/property/firstAired> ?uri. <http://dbpedia.org/resource/Ne_daj_se,_Nina> <http://dbpedia.org/property/firstAired> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstAired",
			"label": "first",
			"seq": "25,29"
		}, {
			"uri": "http://dbpedia.org/property/firstAired",
			"label": "first",
			"seq": "25,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/G\u00fcm\u00fc\u015f_(TV_series)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Ne_daj_se,_Nina",
			"label": "nina se, daj ne",
			"seq": "49,63"
		}]
	},
	{
		"id": "d5315c64d719430e9602df94b8a89c09",
		"question": "Where did the people beatified by Pope Pius X die?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/beatifiedBy> <http://dbpedia.org/resource/Pope_Pius_X> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/beatifiedBy",
			"label": "beatified by",
			"seq": "21,32"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "people",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pope_Pius_X",
			"label": "pope pius",
			"seq": "34,42"
		}]
	},
	{
		"id": "f3e83f69a08e4a5183ada408fca77850",
		"question": "How many other family of the mammals exists  whose family is also Hominidae ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Hominidae> . ?x <http://dbpedia.org/ontology/family> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "family",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/ontology/family",
			"label": "family",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hominidae",
			"label": "hominidae",
			"seq": "66,74"
		}]
	},
	{
		"id": "019a5359e534491181604839d176cdff",
		"question": "Name the country with currency as Aureus ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Aureus>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currency",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Aureus",
			"label": "aureus",
			"seq": "34,39"
		}]
	},
	{
		"id": "0517011b2e174b5cb27a397265665cbd",
		"question": "Who were the pole drivers in GP when Damon hill was a first driver?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/firstDriver> <http://dbpedia.org/resource/Damon_Hill> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/firstDriver",
			"label": "driver",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/ontology/poleDriver",
			"label": "driver",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/ontology/GrandPrix",
			"label": "driver",
			"seq": "18,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Damon_Hill",
			"label": "damon hill",
			"seq": "37,46"
		}]
	},
	{
		"id": "4ed98081a2ca43378ff4dc849b61d133",
		"question": "How many awards have royal designers for industry awardwinners got?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Royal_Designers_for_Industry> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Award",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_Designers_for_Industry",
			"label": "designers industry",
			"seq": "27,44"
		}]
	},
	{
		"id": "4854b75bd8f94014ad4edb9315ad62a4",
		"question": "Where is the headquarters of the public transit system which owns Target Field, a Metro Transit Station  ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Target_Field_(Metro_Transit_station)> <http://dbpedia.org/ontology/owningOrganisation> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningOrganisation",
			"label": "station",
			"seq": "96,102"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "13,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Target_Field_(Metro_Transit_station)",
			"label": "transit station target",
			"seq": "40,61"
		}]
	},
	{
		"id": "7d303bc28df742ec80b74432bd497aff",
		"question": "List the relatives of the governor of Gabriel Slaughter?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Gabriel_Slaughter> <http://dbpedia.org/ontology/governor> ?x . ?x <http://dbpedia.org/ontology/relation> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governor",
			"label": "governor",
			"seq": "26,33"
		}, {
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gabriel_Slaughter",
			"label": "slaughter gabriel",
			"seq": "38,54"
		}]
	},
	{
		"id": "1afef26545cf4f17bb7933a2939142af",
		"question": "What continent of the world has Baja California peninsula and also has WEPG in one of it's cities?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Baja_California_Peninsula> <http://dbpedia.org/ontology/location> ?uri. <http://dbpedia.org/resource/WEPG> <http://dbpedia.org/property/city> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Continent>}",
		"sparql_id": "316",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "california",
			"seq": "37,46"
		}, {
			"uri": "http://dbpedia.org/property/city",
			"label": "cities",
			"seq": "91,96"
		}, {
			"uri": "http://dbpedia.org/ontology/Continent",
			"label": "continent",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Baja_California_Peninsula",
			"label": "california peninsula",
			"seq": "37,56"
		}, {
			"uri": "http://dbpedia.org/resource/WEPG",
			"label": "wepg",
			"seq": "71,74"
		}]
	},
	{
		"id": "412afcb751c4440083508ff2aa23abe8",
		"question": "Which party won both the general electoin and the andhra pradesh election in 2004?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indian_general_election,_2004_(Delhi)> <http://dbpedia.org/ontology/affiliation> ?uri. <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "election",
			"seq": "65,72"
		}, {
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "election",
			"seq": "65,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indian_general_election,_2004_(Delhi)",
			"label": "election general",
			"seq": "25,40"
		}, {
			"uri": "http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)",
			"label": "election pradesh general",
			"seq": "25,48"
		}]
	},
	{
		"id": "876a44de32e64aaa9855928c078039df",
		"question": "How many games are released for virtual consoles?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Virtual_Console>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "consoles",
			"seq": "40,47"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Virtual_Console",
			"label": "virtual",
			"seq": "32,38"
		}]
	},
	{
		"id": "5b45dc70c91a4476b7bfee1e7fcd372f",
		"question": "Which airlines fly to Gimhae International Airport?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Gimhae_International_Airport> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/targetAirport",
			"label": "airport",
			"seq": "43,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gimhae_International_Airport",
			"label": "international airport gimhae",
			"seq": "22,49"
		}]
	},
	{
		"id": "e3a7059770184b25a4d9b0398742786f",
		"question": "To what political party do the politicians graduated from Somerville college, Oxford belong to?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Somerville_College,_Oxford> . ?x <http://dbpedia.org/ontology/party> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "graduated",
			"seq": "43,51"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "18,22"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "oxford",
			"seq": "78,83"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Somerville_College,_Oxford",
			"label": "somerville college, oxford",
			"seq": "58,83"
		}]
	},
	{
		"id": "8e08009e99dc455d922ce7a0ada9717a",
		"question": "Where did Wallace Dollase die?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wallace_Dollase> <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "wallace",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wallace_Dollase",
			"label": "wallace dollase",
			"seq": "10,24"
		}]
	},
	{
		"id": "b73c98e1a1cc4ebeb320c1268ec30b4e",
		"question": "Where did the people canonized by John Paul II die?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_John_Paul_II> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/canonizedBy",
			"label": "canonized by",
			"seq": "21,32"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "people",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pope_John_Paul_II",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "39963beccde446c8944047f4d4cb3b84",
		"question": "Where did the editor of Charlie Mensuel die ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Charlie_Mensuel> <http://dbpedia.org/property/editor> ?x . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editor",
			"label": "editor",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "editor",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charlie_Mensuel",
			"label": "mensuel charlie",
			"seq": "24,38"
		}]
	},
	{
		"id": "05f59024c9ca4d59bc0dd7c19ebdc90c",
		"question": "What is the alma mater of K. Terry Dornbush ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/K._Terry_Dornbush> <http://dbpedia.org/property/almaMater> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/K._Terry_Dornbush",
			"label": "dornbush terry",
			"seq": "29,42"
		}]
	},
	{
		"id": "617982e40b1c40909cdb633c1b374e5f",
		"question": "Where is Denver Broncos located ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "located",
			"seq": "24,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Denver_Broncos",
			"label": "broncos denver",
			"seq": "9,22"
		}]
	},
	{
		"id": "5cbde32223b249669ebf4fdde7f3ead9",
		"question": "Which country has the Carmel Winery and the Teperberg 1870 winery ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carmel_Winery> <http://dbpedia.org/property/locationCountry> ?uri. <http://dbpedia.org/resource/Teperberg_1870> <http://dbpedia.org/property/locationCountry> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "country",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "country",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carmel_Winery",
			"label": "winery carmel",
			"seq": "22,34"
		}, {
			"uri": "http://dbpedia.org/resource/Teperberg_1870",
			"label": "teperberg 1870",
			"seq": "44,57"
		}]
	},
	{
		"id": "3fab7450096d4585bd162a32f10f08f9",
		"question": "What is the birthplace of Adugna Deyas and the place where Fiq is located?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fiq,_Ethiopia> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Adugna_Deyas> <http://dbpedia.org/property/birthPlace> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/country",
			"label": "adugna",
			"seq": "26,31"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "birthplace",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fiq,_Ethiopia",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Adugna_Deyas",
			"label": "adugna deyas",
			"seq": "26,37"
		}]
	},
	{
		"id": "aa76b402511940a2887da5d4f704c9f3",
		"question": "Name the river whose source is located in Itasca State Park and mouth is located in Pilottown, Louisiana?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Itasca_State_Park> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Pilottown,_Louisiana>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceLocation",
			"label": "source",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "mouth",
			"seq": "64,68"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Itasca_State_Park",
			"label": "itasca state park",
			"seq": "42,58"
		}, {
			"uri": "http://dbpedia.org/resource/Pilottown,_Louisiana",
			"label": "pilottown, louisiana",
			"seq": "84,103"
		}]
	},
	{
		"id": "4c617796ad264521bad275ed96e3e71b",
		"question": "What is the river which comes from Southend-on-Sea mountain?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Southend-on-Sea>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthMountain",
			"label": "mountain",
			"seq": "51,58"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Southend-on-Sea",
			"label": "southend-on-sea",
			"seq": "35,49"
		}]
	},
	{
		"id": "4c49002c50c740b69b9e310bb96d4c13",
		"question": "Where did Meg McGuffin graduated ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Meg_McGuffin> <http://dbpedia.org/ontology/education> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/education",
			"label": "graduated",
			"seq": "23,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Meg_McGuffin",
			"label": "mcguffin meg",
			"seq": "10,21"
		}]
	},
	{
		"id": "dc81947e16094c54835cf356fa78365b",
		"question": "Where is the team of Abdel Boucker located ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Abdel_Bouckar> <http://dbpedia.org/property/team> ?x . ?x <http://dbpedia.org/ontology/location> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/team",
			"label": "team",
			"seq": "13,16"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "35,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Abdel_Bouckar",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "cd70ac27443f476991974aca030f0ff2",
		"question": "Name the movies for which music was given by  Geoffrey Burgon and distributed by  Cinema International Corporation?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Geoffrey_Burgon> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "26,30"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "66,76"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "cinema",
			"seq": "82,87"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Geoffrey_Burgon",
			"label": "geoffrey burgon",
			"seq": "46,60"
		}, {
			"uri": "http://dbpedia.org/resource/Cinema_International_Corporation",
			"label": "international corporation cinema",
			"seq": "82,113"
		}]
	},
	{
		"id": "ee4e4eda446b49beaab2d615cfcec423",
		"question": "Count the total number of academic discipline of the journals whose one of the academic discipline is Neuroimaging ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/academicDiscipline> <http://dbpedia.org/resource/Neuroimaging> . ?x <http://dbpedia.org/ontology/academicDiscipline> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "discipline",
			"seq": "35,44"
		}, {
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "discipline",
			"seq": "35,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neuroimaging",
			"label": "neuroimaging",
			"seq": "102,113"
		}]
	},
	{
		"id": "cf59b2f2f22e46d1af44c855e60632fe",
		"question": "Count the different religions practiced by people who are in the Malaysian and Chinese association.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Malaysian_Chinese_Association> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/party",
			"label": "are",
			"seq": "54,56"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "20,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Malaysian_Chinese_Association",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c9e971b03aac43bcba9df9779256b126",
		"question": "Name few companies where don berlin and michael sears have worked together?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Don_R._Berlin> <http://dbpedia.org/ontology/employer> ?uri. <http://dbpedia.org/resource/Michael_M._Sears> <http://dbpedia.org/ontology/employer> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "together",
			"seq": "66,73"
		}, {
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "together",
			"seq": "66,73"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Don_R._Berlin",
			"label": "berlin don",
			"seq": "25,34"
		}, {
			"uri": "http://dbpedia.org/resource/Michael_M._Sears",
			"label": "michael sears",
			"seq": "40,52"
		}]
	},
	{
		"id": "e89c7b6d4201411dadea15fc7a9138db",
		"question": "To which country is Svetlana Navasardyan from?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Svetlana_Navasardyan> <http://dbpedia.org/property/origin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/origin",
			"label": "country",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Svetlana_Navasardyan",
			"label": "navasardyan svetlana",
			"seq": "20,39"
		}]
	},
	{
		"id": "4d7bec0dba5d42e0982d9832d3a78971",
		"question": "What is the faith of the Ajith Perera and religious affiliation of the Neungin High School?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ajith_Perera> <http://dbpedia.org/ontology/religion> ?uri. <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religious",
			"seq": "42,50"
		}, {
			"uri": "http://dbpedia.org/property/religiousAffiliation",
			"label": "affiliation religious",
			"seq": "42,62"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ajith_Perera",
			"label": "perera ajith",
			"seq": "25,36"
		}, {
			"uri": "http://dbpedia.org/resource/Neungin_High_School",
			"label": "neungin school high",
			"seq": "71,89"
		}]
	},
	{
		"id": "3fa4525f3018491aa2d9184c48896159",
		"question": "What is the mascot of the Royal Australian Air Force and Austin College?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Royal_Australian_Air_Force> <http://dbpedia.org/property/mascot> ?uri. <http://dbpedia.org/resource/Austin_College> <http://dbpedia.org/property/mascot> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_Australian_Air_Force",
			"label": "australian",
			"seq": "32,41"
		}, {
			"uri": "http://dbpedia.org/resource/Austin_College",
			"label": "college austin",
			"seq": "57,70"
		}]
	},
	{
		"id": "a294972b904444408a89d3e753d73332",
		"question": "Who managed England national under-20 football team and Middlesbrough F.C.?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-20_football_team> . ?uri <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/Middlesbrough_F.C.>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/managerclubs",
			"label": "managed",
			"seq": "4,10"
		}, {
			"uri": "http://dbpedia.org/ontology/managerClub",
			"label": "managed",
			"seq": "4,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England_national_under-20_football_team",
			"label": "under-20 national football england team",
			"seq": "12,50"
		}, {
			"uri": "http://dbpedia.org/resource/Middlesbrough_F.C.",
			"label": "middlesbrough f.c.",
			"seq": "56,73"
		}]
	},
	{
		"id": "cfa6884352b444d8add91a623bbab10f",
		"question": "What is the religion of the ethnic group to which Clara Ng belongs?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Clara_Ng> <http://dbpedia.org/ontology/ethnicity> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ethnicity",
			"label": "ethnic",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/EthnicGroup",
			"label": "ethnic group",
			"seq": "28,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Clara_Ng",
			"label": "clara ng",
			"seq": "50,57"
		}]
	},
	{
		"id": "973615440e0f471487e7bb99d0e2084c",
		"question": "What are the awards won by the film director of Saraband ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Saraband> <http://dbpedia.org/ontology/director> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "director",
			"seq": "36,43"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saraband",
			"label": "saraband",
			"seq": "48,55"
		}]
	},
	{
		"id": "7ccf7bd3fd714601ac25679451fd3649",
		"question": "Was John of Damascus canonized by Anglican Communion?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/John_of_Damascus> <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Anglican_Communion> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/canonizedBy",
			"label": "canonized",
			"seq": "21,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_of_Damascus",
			"label": "damascus john of",
			"seq": "4,19"
		}, {
			"uri": "http://dbpedia.org/resource/Anglican_Communion",
			"label": "communion anglican",
			"seq": "34,51"
		}]
	},
	{
		"id": "55bc4c30a46549d99ab814a0d7c38eb0",
		"question": "Who owns the horses which have won the Timeform award?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Timeform> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "award",
			"seq": "48,52"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owns",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Horse",
			"label": "horses",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Timeform",
			"label": "timeform",
			"seq": "39,46"
		}]
	},
	{
		"id": "8e47a69cb3824a16a86d9f02afd2a593",
		"question": "Which distributer of Bombay Sapphire also makes Grewy goose ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Grey_Goose_(vodka)> <http://dbpedia.org/property/manufacturer> ?uri. <http://dbpedia.org/resource/Bombay_Sapphire> <http://dbpedia.org/property/distributor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/manufacturer",
			"label": "makes",
			"seq": "42,46"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributer",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Grey_Goose_(vodka)",
			"label": "goose",
			"seq": "54,58"
		}, {
			"uri": "http://dbpedia.org/resource/Bombay_Sapphire",
			"label": "sapphire bombay",
			"seq": "21,35"
		}]
	},
	{
		"id": "a05ef1ad73414574abe88a1bd70f5530",
		"question": "Was George Cash in the western australian parliament?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/George_Cash> <http://dbpedia.org/property/parliament> <http://dbpedia.org/resource/Western_Australia> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/parliament",
			"label": "parliament",
			"seq": "42,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_Cash",
			"label": "george cash",
			"seq": "4,14"
		}, {
			"uri": "http://dbpedia.org/resource/Western_Australia",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "679e1082fff84c878024ee1d62389f0b",
		"question": "Name the TV show broadcasted by Fox and presented by Ryan Seacrest ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest> . ?uri <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/presenter",
			"label": "presented",
			"seq": "40,48"
		}, {
			"uri": "http://dbpedia.org/ontology/channel",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ryan_Seacrest",
			"label": "seacrest ryan",
			"seq": "53,65"
		}, {
			"uri": "http://dbpedia.org/resource/Fox_Broadcasting_Company",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fe42aff9ce524c13950df850ed4d0737",
		"question": "Which university has affiliations to Graham Holdings and Kaplan, Inc.?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Graham_Holdings_Company> . ?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliations",
			"seq": "21,32"
		}, {
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliations",
			"seq": "21,32"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Graham_Holdings_Company",
			"label": "holdings graham",
			"seq": "37,51"
		}, {
			"uri": "http://dbpedia.org/resource/Kaplan,_Inc.",
			"label": "kaplan, inc.",
			"seq": "57,68"
		}]
	},
	{
		"id": "be9459f9eae64f38be49cf3573dc58c6",
		"question": "What are the notableworks of Russell T Davies?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/property/notableworks> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "notableworks",
			"seq": "13,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Russell_T_Davies",
			"label": "russell davies",
			"seq": "29,42"
		}]
	},
	{
		"id": "ec4218ce66a54c50ad5b8d8fc802f0e7",
		"question": "Name the person who was educated at Harvard-Westlake and won the Screen Actor Guild Life Achievement Award ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Harvard-Westlake_School> . ?uri <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Screen_Actors_Guild_Life_Achievement_Award>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "name",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "101,105"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harvard-Westlake_School",
			"label": "harvard-westlake",
			"seq": "36,51"
		}, {
			"uri": "http://dbpedia.org/resource/Screen_Actors_Guild_Life_Achievement_Award",
			"label": "achievement screen guild award actor",
			"seq": "65,100"
		}]
	},
	{
		"id": "18f4530b96d3413c887a761ef3de1cf0",
		"question": "What is the place of birth of the badminton player who is the bronze medalist of Badminton at the 2012 Summer Olympics  Women's doubles ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Badminton_at_the_2012_Summer_Olympics_\u2013_Women's_doubles> <http://dbpedia.org/ontology/bronzeMedalist> ?x . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BadmintonPlayer>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bronzeMedalist",
			"label": "medalist bronze",
			"seq": "62,76"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/BadmintonPlayer",
			"label": "badminton",
			"seq": "34,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Badminton_at_the_2012_Summer_Olympics_\u2013_Women's_doubles",
			"label": "badminton olympics women's doubles",
			"seq": "34,67"
		}]
	},
	{
		"id": "fc455f282c6549adaa1614637ae68991",
		"question": "Where do bachelor of arts live?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Bachelor_of_Arts> . ?x <http://dbpedia.org/ontology/residence> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "bachelor",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "live",
			"seq": "26,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bachelor_of_Arts",
			"label": "bachelor arts",
			"seq": "9,21"
		}]
	},
	{
		"id": "1cf3ba4382444e65880adff73f7125e7",
		"question": "How many people live in the Beverly Hills, California?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Beverly_Hills,_California>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "in",
			"seq": "21,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Beverly_Hills,_California",
			"label": "california beverly hills,",
			"seq": "28,52"
		}]
	},
	{
		"id": "b1f5915a9e9043c0b787d37137909a5a",
		"question": "Horses grandsired by Sundridge  have won which awards?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/grandsire> <http://dbpedia.org/resource/Sundridge_(horse)> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/grandsire",
			"label": "grandsired",
			"seq": "7,16"
		}, {
			"uri": "http://dbpedia.org/ontology/honours",
			"label": "horses",
			"seq": "0,5"
		}, {
			"uri": "http://dbpedia.org/ontology/Horse",
			"label": "horses",
			"seq": "0,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sundridge_(horse)",
			"label": "sundridge",
			"seq": "21,29"
		}]
	},
	{
		"id": "9f3ba1ac5940461a82d87b74d861d913",
		"question": "What is the nickname of the home stadium of Angels Toru?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Angels_Toru\u0144> <http://dbpedia.org/ontology/homeStadium> ?x . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "stadium home",
			"seq": "28,39"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Angels_Toru\u0144",
			"label": "angels toru",
			"seq": "44,54"
		}]
	},
	{
		"id": "00eb2acadaaa4344a0fff0a57e7ff91f",
		"question": "What are the bands associated with the artists of My Favorite Girl  ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/My_Favorite_Girl_(Dave_Hollister_song)> <http://dbpedia.org/property/artist> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artists",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated",
			"seq": "19,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/My_Favorite_Girl_(Dave_Hollister_song)",
			"label": "favorite",
			"seq": "53,60"
		}]
	},
	{
		"id": "0ca28cd660a3450a9c67766dfe3ce288",
		"question": "What is the layout of Subaru Legacy (second generation) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Subaru_Legacy_(second_generation)> <http://dbpedia.org/ontology/layout> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/layout",
			"label": "layout",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Subaru_Legacy_(second_generation)",
			"label": "generation) (second subaru legacy",
			"seq": "22,54"
		}]
	},
	{
		"id": "08165fd11c3f4e49bdd932736db1e9c3",
		"question": "Which religion do the people follow, whose constituency is Jadavpur?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Jadavpur_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "43,54"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "religion",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "22,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jadavpur_(Lok_Sabha_constituency)",
			"label": "constituency jadavpur",
			"seq": "43,63"
		}]
	},
	{
		"id": "fb89e5eaefbd45b6abc72a2de3f1a88d",
		"question": "Name an American football player whose debuted in Chicago Bears and former team is 1998 Baltimore Ravens season?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/debutteam> <http://dbpedia.org/resource/Chicago_Bears> . ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/1998_Baltimore_Ravens_season>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debuted",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former team",
			"seq": "68,78"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football american player",
			"seq": "8,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chicago_Bears",
			"label": "chicago bears",
			"seq": "50,62"
		}, {
			"uri": "http://dbpedia.org/resource/1998_Baltimore_Ravens_season",
			"label": "baltimore season ravens",
			"seq": "88,110"
		}]
	},
	{
		"id": "cc70615cda2f4cd19a95e83f87285f3d",
		"question": "What other things are provided by the producer of Office 365?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/service> <http://dbpedia.org/resource/Office_365> . ?x <http://dbpedia.org/property/services> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/service",
			"label": "provided",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "provided",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Office_365",
			"label": "office 365",
			"seq": "50,59"
		}]
	},
	{
		"id": "2151bdd827224e77930d58070e08c1c6",
		"question": "What is the deathplace of the Anatoly Kharlampiyev which is also the death place of  Lyudmila Buldakova?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Anatoly_Kharlampiyev> <http://dbpedia.org/property/deathPlace> ?uri. <http://dbpedia.org/resource/Lyudmila_Buldakova> <http://dbpedia.org/property/deathPlace> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "deathplace",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "deathplace",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anatoly_Kharlampiyev",
			"label": "kharlampiyev anatoly",
			"seq": "30,49"
		}, {
			"uri": "http://dbpedia.org/resource/Lyudmila_Buldakova",
			"label": "buldakova lyudmila",
			"seq": "85,102"
		}]
	},
	{
		"id": "50ba41d267374555bc6bf5c1cf570b75",
		"question": "Who are the people who died in a place architected by Jens Jensen",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Jens_Jensen_(landscape_architect)> . ?uri <http://dbpedia.org/ontology/deathPlace> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architect",
			"label": "architected",
			"seq": "39,49"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "place",
			"seq": "33,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jens_Jensen_(landscape_architect)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "452343f0f60b42b399b7d2cb29d6bb91",
		"question": "What are the software whose programming language are Multilingual?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Multilingualism> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/language",
			"label": "language",
			"seq": "40,47"
		}, {
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "programming language",
			"seq": "28,47"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Multilingualism",
			"label": "multilingual",
			"seq": "53,64"
		}]
	},
	{
		"id": "882d32179f904be8b3678aa0b25fb3c7",
		"question": "What is the political party of the person succeeded by A.K. Singh?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/A._K._Singh> . ?x <http://dbpedia.org/property/party> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "succeeded",
			"seq": "42,50"
		}, {
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "35,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A._K._Singh",
			"label": "singh",
			"seq": "60,64"
		}]
	},
	{
		"id": "8fcd17645d854494af5b6bbf9d11cc54",
		"question": "What are the professions of Frederick Frelinghuysen (general) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frederick_Frelinghuysen_(general)> <http://dbpedia.org/property/occupation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/occupation",
			"label": "professions",
			"seq": "13,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frederick_Frelinghuysen_(general)",
			"label": "frelinghuysen frederick (general)",
			"seq": "28,60"
		}]
	},
	{
		"id": "1b967dc18818484ba213913e39ac2215",
		"question": "What tv show is created by Brian Graden?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Brian_Graden>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "graden",
			"seq": "33,38"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "8,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brian_Graden",
			"label": "graden brian",
			"seq": "27,38"
		}]
	},
	{
		"id": "3d3c7cde66874980a0a5e54a7375ea1f",
		"question": "List the starring of the movies whose label is T-Series ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/T-Series> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "38,42"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "starring",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "18,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/T-Series",
			"label": "t-series",
			"seq": "47,54"
		}]
	},
	{
		"id": "2cbe6f6028204f2db497e7aa21514cae",
		"question": "Which operator of ganz UV is also the nationality of the Gza Horvth ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ganz_UV> <http://dbpedia.org/ontology/operator> ?uri. <http://dbpedia.org/resource/G\u00e9za_Horv\u00e1th> <http://dbpedia.org/ontology/nationality> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operator",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "38,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ganz_UV",
			"label": "ganz uv",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/resource/G\u00e9za_Horv\u00e1th",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9e4c63f453514fb8b3ebf0531dfa0cd7",
		"question": "What was the career of some people who have committed suicide?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathCause",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "what",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Suicide",
			"label": "suicide",
			"seq": "54,60"
		}]
	},
	{
		"id": "5771b7d643f54d72a32152580a3e246a",
		"question": "Is Pittsburgh Steelers the former team of Marv McFadden?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Marv_McFadden> <http://dbpedia.org/property/pastteams> <http://dbpedia.org/resource/Pittsburgh_Steelers> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastteams",
			"label": "team",
			"seq": "34,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marv_McFadden",
			"label": "mcfadden marv",
			"seq": "42,54"
		}, {
			"uri": "http://dbpedia.org/resource/Pittsburgh_Steelers",
			"label": "pittsburgh steelers",
			"seq": "3,21"
		}]
	},
	{
		"id": "53b5c75907db4603977bf8ecd7de7eb9",
		"question": "What is the ideology of Palang Dharma Party ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Palang_Dharma_Party> <http://dbpedia.org/ontology/ideology> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ideology",
			"label": "ideology",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Palang_Dharma_Party",
			"label": "palang dharma party",
			"seq": "24,42"
		}]
	},
	{
		"id": "4ff9b452822549048ab6fb060739559c",
		"question": "Name the institute of Alton Ochsner ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alton_Ochsner> <http://dbpedia.org/ontology/institution> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "institute",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alton_Ochsner",
			"label": "ochsner alton",
			"seq": "22,34"
		}]
	},
	{
		"id": "9d360f44420b41f5af982a515dfc7fa6",
		"question": "Name the common record label of I pray on Christmas and Next Thing ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/I_Pray_on_Christmas> <http://dbpedia.org/property/label> ?uri. <http://dbpedia.org/resource/Next_Thing> <http://dbpedia.org/ontology/recordLabel> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "record label",
			"seq": "16,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/I_Pray_on_Christmas",
			"label": "christmas pray",
			"seq": "34,47"
		}, {
			"uri": "http://dbpedia.org/resource/Next_Thing",
			"label": "thing next",
			"seq": "56,65"
		}]
	},
	{
		"id": "19a01f4fb64d4746969d681e2913f645",
		"question": "Who won the general elections in India in 2009, and had also won the AP elections in 2004 ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri. <http://dbpedia.org/resource/Indian_general_election,_2009> <http://dbpedia.org/ontology/affiliation> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "elections",
			"seq": "20,28"
		}, {
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "elections",
			"seq": "20,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Indian_general_election,_2009",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d0c96c44212d47e1b3ebd9752421d1f7",
		"question": "What is the common palce of study for jack McGregor and Philip W. Pillsbury ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?uri. <http://dbpedia.org/resource/Philip_W._Pillsbury> <http://dbpedia.org/property/education> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/education",
			"label": "common",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "common",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jack_McGregor",
			"label": "mcgregor jack",
			"seq": "38,50"
		}, {
			"uri": "http://dbpedia.org/resource/Philip_W._Pillsbury",
			"label": "pillsbury philip",
			"seq": "56,71"
		}]
	},
	{
		"id": "c124e98b0ceb4a70a62e4f8655c08c56",
		"question": "Is Ian Thorpe the bronze medalist of Swimming at the 2004 Summer Olympics  Men's 100 metre freestyle?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Swimming_at_the_2004_Summer_Olympics_\u2013_Men's_100_metre_freestyle> <http://dbpedia.org/ontology/bronzeMedalist> <http://dbpedia.org/resource/Ian_Thorpe> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bronzeMedalist",
			"label": "medalist bronze",
			"seq": "18,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Swimming_at_the_2004_Summer_Olympics_\u2013_Men's_100_metre_freestyle",
			"label": "freestyle swimming olympics summer",
			"seq": "37,70"
		}, {
			"uri": "http://dbpedia.org/resource/Ian_Thorpe",
			"label": "thorpe",
			"seq": "7,12"
		}]
	},
	{
		"id": "7a21a6d6f21d47d0b60283006ff13a51",
		"question": "How many cities are around the sea in which the ionian sea flows?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ionian_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/outflow",
			"label": "flows",
			"seq": "59,63"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "31,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ionian_Sea",
			"label": "ionian sea",
			"seq": "31,40"
		}]
	},
	{
		"id": "95b3fafcb14440d895c1336ced355494",
		"question": "Where can I find people whose hometown is Ann Arbour in Michigan?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/homeTown> <http://dbpedia.org/resource/Ann_Arbor,_Michigan> . ?x <http://dbpedia.org/ontology/residence> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/homeTown",
			"label": "hometown",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "in",
			"seq": "13,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ann_Arbor,_Michigan",
			"label": "michigan",
			"seq": "56,63"
		}]
	},
	{
		"id": "bb4e3f8507444b49894b8b309c5a3f0d",
		"question": "Which television show's theme music composer is Gary Portnoy and subsequent work is Frasier?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Gary_Portnoy> . ?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Frasier>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composer theme music",
			"seq": "24,43"
		}, {
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "65,79"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gary_Portnoy",
			"label": "portnoy gary",
			"seq": "48,59"
		}, {
			"uri": "http://dbpedia.org/resource/Frasier",
			"label": "frasier",
			"seq": "84,90"
		}]
	},
	{
		"id": "5ad1ae78dccc48cf8191cdc793ed60b5",
		"question": "Name the licensee of the TV station whose one of the licensee is Incorporation ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/licensee> <http://dbpedia.org/resource/Incorporation_(business)> . ?x <http://dbpedia.org/property/licensee> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/licensee",
			"label": "licensee",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/licensee",
			"label": "licensee",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionStation",
			"label": "station",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Incorporation_(business)",
			"label": "incorporation",
			"seq": "65,77"
		}]
	},
	{
		"id": "dd1825b14155469b8f2931245fe6c188",
		"question": "Was James maker in the band Noko?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Noko> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/James_Maker> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "band",
			"seq": "23,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Noko",
			"label": "noko",
			"seq": "28,31"
		}, {
			"uri": "http://dbpedia.org/resource/James_Maker",
			"label": "maker james",
			"seq": "4,14"
		}]
	},
	{
		"id": "baf5c96273684029beba9ba7d893203e",
		"question": "Which awards did the parents of Anna Bergman win ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Anna_Bergman> <http://dbpedia.org/ontology/parent> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parents",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anna_Bergman",
			"label": "bergman anna",
			"seq": "32,43"
		}]
	},
	{
		"id": "503e2359a25a4b54a614650a40b1ab55",
		"question": "Where did the wrestler die who was billed in Norman, Oklahoma?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/billed> <http://dbpedia.org/resource/Norman,_Oklahoma> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Wrestler>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/billed",
			"label": "billed",
			"seq": "35,40"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "10,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Wrestler",
			"label": "wrestler",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Norman,_Oklahoma",
			"label": "oklahoma norman,",
			"seq": "45,60"
		}]
	},
	{
		"id": "f30e5b31cebd42fca8e78aee5f693598",
		"question": "How many different genres of games can I find which are compatible with the Commodore 64?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Commodore_64> . ?x <http://dbpedia.org/property/genre> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "compatible",
			"seq": "56,65"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "genres",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Commodore_64",
			"label": "commodore",
			"seq": "76,84"
		}]
	},
	{
		"id": "6b5ad23d383444478ce3e8e1acbbc649",
		"question": "Where did the relatives of David Hume study?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/David_Hume> . ?x <http://dbpedia.org/property/education> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "relatives",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Hume",
			"label": "david hume",
			"seq": "27,36"
		}]
	},
	{
		"id": "1534fc10e4894ed2b6b0d699ae7dd80c",
		"question": "Which producer of Boeing F/A has Dennis Muilenburg as an important person ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet> . ?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Dennis_Muilenburg>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/product",
			"label": "producer",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet",
			"label": "person",
			"seq": "67,72"
		}, {
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "person",
			"seq": "67,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dennis_Muilenburg",
			"label": "muilenburg dennis",
			"seq": "33,49"
		}]
	},
	{
		"id": "f67fb0a1674440259432e6bf7019bf1a",
		"question": "Name the constituency of Jonas Gahr where Sverre Krogh was born ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jonas_Gahr_St\u00f8re> <http://dbpedia.org/property/constituency> ?uri. <http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8> <http://dbpedia.org/property/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "the",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jonas_Gahr_St\u00f8re",
			"label": "jonas gahr",
			"seq": "25,34"
		}, {
			"uri": "http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8",
			"label": "sverre krogh",
			"seq": "42,53"
		}]
	},
	{
		"id": "477fee2dbaf14427a27647739e512878",
		"question": "Does Lionel Messi play in the Argentina National Football Team?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Lionel_Messi> <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Argentina_national_football_team> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "national team",
			"seq": "40,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lionel_Messi",
			"label": "lionel messi",
			"seq": "5,16"
		}, {
			"uri": "http://dbpedia.org/resource/Argentina_national_football_team",
			"label": "argentina national football team",
			"seq": "30,61"
		}]
	},
	{
		"id": "fef9e0b2920a4196a4fb2a73724a9af3",
		"question": "Does the owyhee river flow into oregon?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Owyhee_River> <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Oregon> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthMountain",
			"label": "oregon",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Owyhee_River",
			"label": "owyhee river",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/resource/Oregon",
			"label": "oregon",
			"seq": "32,37"
		}]
	},
	{
		"id": "959ab2e634754cfaa81e52b342c5d1c8",
		"question": "Was X the Unknown edited by James needs?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/X_the_Unknown> <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/James_Needs> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "edited",
			"seq": "18,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/X_the_Unknown",
			"label": "unknown the x",
			"seq": "4,16"
		}, {
			"uri": "http://dbpedia.org/resource/James_Needs",
			"label": "needs james",
			"seq": "28,38"
		}]
	},
	{
		"id": "46ae4963123144699d4f6d11784e7bf9",
		"question": "Which company owns Sony bank ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sony_Bank> <http://dbpedia.org/ontology/owningCompany> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningCompany",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony_Bank",
			"label": "sony bank",
			"seq": "19,27"
		}]
	},
	{
		"id": "bb54180751be476bb26a39120b330d55",
		"question": "Martin AN/GSG-5 is a part of the building in which city?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/part> <http://dbpedia.org/resource/Martin_AN/GSG-5_Battery_Integration_and_Radar_Display_Equipment> . ?x <http://dbpedia.org/property/district> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/part",
			"label": "part",
			"seq": "21,24"
		}, {
			"uri": "http://dbpedia.org/resource/Martin_AN/GSG-5_Battery_Integration_and_Radar_Display_Equipment",
			"label": "an/gsg-5",
			"seq": "7,14"
		}, {
			"uri": "http://dbpedia.org/property/district",
			"label": "is",
			"seq": "16,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Building",
			"label": "building",
			"seq": "33,40"
		}],
		"entity mapping": []
	},
	{
		"id": "a883dc6214124d909e2ec7f7cbd9729c",
		"question": "Who is the president of United World College of Costa Rica ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_World_College_of_Costa_Rica> <http://dbpedia.org/ontology/president> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_World_College_of_Costa_Rica",
			"label": "college united world costa rica",
			"seq": "24,54"
		}]
	},
	{
		"id": "b091da8838fe41e0967e92add727c27d",
		"question": "What party was in majority of Fourth Legislative Assembly of Delhi?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fourth_Legislative_Assembly_of_Delhi> <http://dbpedia.org/property/party> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fourth_Legislative_Assembly_of_Delhi",
			"label": "legislative assembly fourth delhi",
			"seq": "30,62"
		}]
	},
	{
		"id": "e0394ddbda3d42f994117e6e1ef5a131",
		"question": "What is the venue of Indy PopCon ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indy_PopCon> <http://dbpedia.org/property/venue> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/venue",
			"label": "venue",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indy_PopCon",
			"label": "popcon indy",
			"seq": "21,31"
		}]
	},
	{
		"id": "a2bd883db228481cb81969ed59dc68e8",
		"question": "Which non fictional subject of Thud is the athletics of PATTS College of Aeronautics ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri. <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "subject",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/property/athletics",
			"label": "athletics",
			"seq": "43,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thud!",
			"label": "thud",
			"seq": "31,34"
		}, {
			"uri": "http://dbpedia.org/resource/PATTS_College_of_Aeronautics",
			"label": "aeronautics",
			"seq": "73,83"
		}]
	},
	{
		"id": "39562e37dcd645e8aa5d083018173381",
		"question": "Where is the birthplace of Ferrel Harris ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ferrel_Harris> <http://dbpedia.org/property/birthplace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthplace",
			"label": "birthplace",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ferrel_Harris",
			"label": "harris ferrel",
			"seq": "27,39"
		}]
	},
	{
		"id": "0898b1c260b643f8be620cea3ccb7bbd",
		"question": "who was the president under whom winston bryant served as a lieutenant?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Winston_Bryant> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/lieutenant",
			"label": "lieutenant",
			"seq": "60,69"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Winston_Bryant",
			"label": "winston bryant",
			"seq": "33,46"
		}]
	},
	{
		"id": "d30babe0e611482a8158fd9a37eabe35",
		"question": "Is Essex the Ceremonial County of West Tilbury?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/West_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> <http://dbpedia.org/resource/Essex> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ceremonialCounty",
			"label": "ceremonial county",
			"seq": "13,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/West_Tilbury",
			"label": "tilbury west",
			"seq": "34,45"
		}, {
			"uri": "http://dbpedia.org/resource/Essex",
			"label": "essex",
			"seq": "3,7"
		}]
	},
	{
		"id": "1635d75bc91149baba817e3b941d67db",
		"question": "What are the airlines whose hub airport is Los Angeles International Airport?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Los_Angeles_International_Airport>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hubAirport",
			"label": "airport",
			"seq": "32,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Los_Angeles_International_Airport",
			"label": "international angeles airport los",
			"seq": "32,64"
		}]
	},
	{
		"id": "9615aa0561ce4e4a960d23ede56fc21a",
		"question": "Count all the books written by an author buried in the Convent of Barefoot Trinitarians?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Convent_of_the_Barefoot_Trinitarians> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "trinitarians",
			"seq": "75,86"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "author",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Convent_of_the_Barefoot_Trinitarians",
			"label": "trinitarians barefoot convent",
			"seq": "55,83"
		}]
	},
	{
		"id": "2a96555f9e0048bbb838499c8484797b",
		"question": "Which director of On deadly Ground also released Mojo Priest ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mojo_Priest> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/On_Deadly_Ground> <http://dbpedia.org/property/director> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "priest",
			"seq": "54,59"
		}, {
			"uri": "http://dbpedia.org/property/director",
			"label": "director",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mojo_Priest",
			"label": "priest mojo",
			"seq": "49,59"
		}, {
			"uri": "http://dbpedia.org/resource/On_Deadly_Ground",
			"label": "ground deadly",
			"seq": "21,33"
		}]
	},
	{
		"id": "615091ae47f447b2996f509c01cc4b6f",
		"question": "Who were some governmental heads in Nazi Germany?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/jurisdiction> <http://dbpedia.org/resource/Nazi_Germany> . ?x <http://dbpedia.org/ontology/leader> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/jurisdiction",
			"label": "in",
			"seq": "33,34"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "heads",
			"seq": "27,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nazi_Germany",
			"label": "germany nazi",
			"seq": "36,47"
		}]
	},
	{
		"id": "0e5778a4027c4c21981d48f093bad188",
		"question": "Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georgina_Theodora_Wood> <http://dbpedia.org/ontology/nationality> ?uri. <http://dbpedia.org/resource/Akwasi_Oppong_Fosu> <http://dbpedia.org/ontology/nationality> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "16,26"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "16,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Georgina_Theodora_Wood",
			"label": "theodora georgina wood",
			"seq": "31,52"
		}, {
			"uri": "http://dbpedia.org/resource/Akwasi_Oppong_Fosu",
			"label": "oppong akwasi fosu",
			"seq": "58,75"
		}]
	},
	{
		"id": "3722e91c57c84a39bac14bfe89532583",
		"question": "What are some TV shows whose voice actors are from Truckee, California, US?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Truckee,_California> . ?uri <http://dbpedia.org/property/voices> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "voice",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/property/voices",
			"label": "voice",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "17,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Truckee,_California",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ebace02293c84cddabf5803a707d140d",
		"question": "What is the total number of office holders who preceded the people working under president bill clinton?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Bill_Clinton> . ?uri <http://dbpedia.org/property/successor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "81,89"
		}, {
			"uri": "http://dbpedia.org/property/successor",
			"label": "under",
			"seq": "75,79"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bill_Clinton",
			"label": "clinton bill",
			"seq": "91,102"
		}]
	},
	{
		"id": "bdf590911bf74c79ab82b8964a16d3d2",
		"question": "What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dafydd_Benfras> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Jasmine_Lowson> <http://dbpedia.org/ontology/citizenship> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/country",
			"label": "lowson",
			"seq": "64,69"
		}, {
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "citizen",
			"seq": "79,85"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dafydd_Benfras",
			"label": "benfras dafydd",
			"seq": "35,48"
		}, {
			"uri": "http://dbpedia.org/resource/Jasmine_Lowson",
			"label": "jasmine lowson",
			"seq": "56,69"
		}]
	},
	{
		"id": "f3a26b9c5fb84504821433f49a62d31c",
		"question": "What are the nicknames given to the characters of The Wolves of the Mercy Falls?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/List_of_The_Wolves_of_Mercy_Falls_characters> <http://dbpedia.org/property/nickname> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nicknames",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/List_of_The_Wolves_of_Mercy_Falls_characters",
			"label": "characters wolves mercy falls",
			"seq": "36,64"
		}]
	},
	{
		"id": "7d87576a21984b83898106db13ed5ae6",
		"question": "How many people are buried in the Winchester Cathedral?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Winchester_Cathedral>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Winchester_Cathedral",
			"label": "winchester cathedral",
			"seq": "34,53"
		}]
	},
	{
		"id": "0ca53bf56bcb4b5f8a270a98c9c1c205",
		"question": "What is the colour of Red Marauder ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Red_Marauder> <http://dbpedia.org/ontology/colour> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/colour",
			"label": "colour",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Red_Marauder",
			"label": "marauder red",
			"seq": "22,33"
		}]
	},
	{
		"id": "853f4ee49ca64a6394f25dbcb0998674",
		"question": "List the territory of Tonkin Campaign ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonkin_Campaign> <http://dbpedia.org/ontology/territory> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "territory",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tonkin_Campaign",
			"label": "campaign tonkin",
			"seq": "22,36"
		}]
	},
	{
		"id": "4d16a08db93348988792d0efc91d6ae6",
		"question": "Is wizard rock inspired from Harry potter?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Wizard_rock> <http://dbpedia.org/ontology/stylisticOrigin> <http://dbpedia.org/resource/Harry_Potter> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stylisticOrigin",
			"label": "is",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wizard_rock",
			"label": "wizard rock",
			"seq": "3,13"
		}, {
			"uri": "http://dbpedia.org/resource/Harry_Potter",
			"label": "potter harry",
			"seq": "29,40"
		}]
	},
	{
		"id": "2578f19d55494d34b4c2cb71b5c72674",
		"question": "What is the route start of Capitol 400 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Capitol_400> <http://dbpedia.org/ontology/routeStart> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "start route",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Capitol_400",
			"label": "capitol 400",
			"seq": "27,37"
		}]
	},
	{
		"id": "ae24568ec2e94bb3b2c5de7ef38478e5",
		"question": "Who made the Y block engine and the SHO V8 engine?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Y-block_engine> <http://dbpedia.org/ontology/manufacturer> ?uri. <http://dbpedia.org/resource/Ford_SHO_V8_engine> <http://dbpedia.org/ontology/manufacturer> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "made",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "made",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Y-block_engine",
			"label": "engine block",
			"seq": "15,26"
		}, {
			"uri": "http://dbpedia.org/resource/Ford_SHO_V8_engine",
			"label": "engine sho v8",
			"seq": "21,33"
		}]
	},
	{
		"id": "df2c6434c7714725be5766e707866ba8",
		"question": "What other awards have been given to Golden Globe winners?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Golden_Globe_Award> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Golden_Globe_Award",
			"label": "golden globe",
			"seq": "37,48"
		}]
	},
	{
		"id": "5c9545bdb6fa49c694b4e18b35e6bf8b",
		"question": "With which musical artist is the music group which sung Mind Blowin' related to ?  ",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Mind_Blowin'_(Smooth_song)> <http://dbpedia.org/ontology/musicalArtist> ?x . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalArtist",
			"label": "musical artist",
			"seq": "11,24"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "musical artist",
			"seq": "11,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mind_Blowin'_(Smooth_song)",
			"label": "blowin'",
			"seq": "61,67"
		}]
	},
	{
		"id": "7b67e23763bd4b55a7a2c6e9ad44b195",
		"question": "How many subjects have been covered in fantasy novels?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Fantasy> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/literaryGenre",
			"label": "been",
			"seq": "23,26"
		}, {
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "subjects",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fantasy",
			"label": "fantasy",
			"seq": "39,45"
		}]
	},
	{
		"id": "4bc850d823374bc79417ccaedbc85cc5",
		"question": "List the universities with athletics NCAA Division I Football Bowl Subdivision ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/athletics",
			"label": "athletics",
			"seq": "27,35"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision",
			"label": "subdivision football",
			"seq": "53,72"
		}]
	},
	{
		"id": "ef89ea65fb1e475d87bfd0d41dc3df4b",
		"question": "In which races does Coneygree compete?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Coneygree> <http://dbpedia.org/property/race> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/race",
			"label": "races",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Coneygree",
			"label": "coneygree",
			"seq": "20,28"
		}]
	},
	{
		"id": "0e401e47838c4dba988eda6a6838e8fe",
		"question": "Who was the designer of john madden Football '92 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Madden_Football_'92> <http://dbpedia.org/property/designer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "designer",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Madden_Football_'92",
			"label": "football madden john '92",
			"seq": "24,47"
		}]
	},
	{
		"id": "3f8912118a034abd8267bab919afc00f",
		"question": "Which ancient country had capital as Nicomedia and History of Trier?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Nicomedia> . ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/History_of_Trier> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "capital",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "capital",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nicomedia",
			"label": "nicomedia",
			"seq": "37,45"
		}, {
			"uri": "http://dbpedia.org/resource/History_of_Trier",
			"label": "history trier",
			"seq": "51,63"
		}]
	},
	{
		"id": "3a34f7c15c0e48bba64cbc21b231ee6b",
		"question": "Name the tenants of MAsterCard center wich is also the draft team of Antoine Bibeau?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri. <http://dbpedia.org/resource/Antoine_Bibeau> <http://dbpedia.org/property/draftTeam> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/tenants",
			"label": "tenants",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "draft team",
			"seq": "55,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/MasterCard_Centre",
			"label": "mastercard",
			"seq": "20,29"
		}, {
			"uri": "http://dbpedia.org/resource/Antoine_Bibeau",
			"label": "antoine bibeau",
			"seq": "69,82"
		}]
	},
	{
		"id": "d5c6186b35e84d629ac4471b606ac5ea",
		"question": "Which teams participate in the football seasons headed by Patricia Amorim?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Patr\u00edcia_Amorim> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/chairman",
			"label": "in",
			"seq": "24,25"
		}, {
			"uri": "http://dbpedia.org/property/name",
			"label": "teams",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsSeason",
			"label": "seasons",
			"seq": "40,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Patr\u00edcia_Amorim",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "49a721669f7342a6babb0b2875943b45",
		"question": "Which sports are played in schools founded by Fr Almeida?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Fr._Almeida> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founded",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fr._Almeida",
			"label": "almeida fr",
			"seq": "46,55"
		}]
	},
	{
		"id": "826719619f624cc08c74945255b6df1d",
		"question": "In which wars did Percy Fitzwallace fight?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Percy_Fitzwallace> <http://dbpedia.org/property/battles> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "wars",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Percy_Fitzwallace",
			"label": "fitzwallace percy",
			"seq": "18,34"
		}]
	},
	{
		"id": "dc720b39588c4852a3086c7b106edad0",
		"question": "In which state is the alma mater of Ben Ysursa located ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ben_Ysursa> <http://dbpedia.org/property/almaMater> ?x . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "22,31"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "state",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ben_Ysursa",
			"label": "ysursa ben",
			"seq": "36,45"
		}]
	},
	{
		"id": "c1cec6b2504746e5b9e0a84cca31840d",
		"question": "Players from how many teams have participated in the National Hockey League?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/National_Hockey_League> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "league",
			"seq": "69,74"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "teams",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "22,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Hockey_League",
			"label": "national league hockey",
			"seq": "53,74"
		}]
	},
	{
		"id": "c07f906674b1433bbb4e9555d8ff28a4",
		"question": "Who are some US colonels?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/rank> <http://dbpedia.org/resource/Colonel_(United_States)>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/rank",
			"label": "are",
			"seq": "4,6"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colonel_(United_States)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ccaaf32b5f0f46d699458212fd57221a",
		"question": "How many places were ruled by Elizabeth II?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Elizabeth_II>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "were",
			"seq": "16,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elizabeth_II",
			"label": "elizabeth",
			"seq": "30,38"
		}]
	},
	{
		"id": "009195815bfe4b2da02ac6c1f612ce32",
		"question": "Who is on the board of Kate Spade and company?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Kate_Spade_&_Company>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/board",
			"label": "board",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kate_Spade_&_Company",
			"label": "company spade kate",
			"seq": "23,40"
		}]
	},
	{
		"id": "76434a3de4eb4e23946721c8976f33eb",
		"question": "Which awards have been given to scientists that graduated from NKU athens?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/National_and_Kapodistrian_University_of_Athens> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "graduated",
			"seq": "48,56"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientists",
			"seq": "32,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_and_Kapodistrian_University_of_Athens",
			"label": "athens",
			"seq": "67,72"
		}]
	},
	{
		"id": "5a6ec3749e5e4c7ab7af6a94563ea793",
		"question": "What is the rank of Julius C. Burrows politically?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Julius_C._Burrows> <http://dbpedia.org/property/order> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/order",
			"label": "burrows",
			"seq": "30,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Julius_C._Burrows",
			"label": "burrows julius",
			"seq": "20,33"
		}]
	},
	{
		"id": "8d63fe63027947458a867a5902c1c0e0",
		"question": "Name the club of Julie Hastings ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Julie_Hastings> <http://dbpedia.org/ontology/club> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/club",
			"label": "club",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Julie_Hastings",
			"label": "hastings julie",
			"seq": "17,30"
		}]
	},
	{
		"id": "0af37d7da2d44dad82fdc851c7e9c38f",
		"question": "What is the death location of the scientist who is the known authority of Hallopus ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Hallopus> <http://dbpedia.org/ontology/binomialAuthority> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/binomialAuthority",
			"label": "authority",
			"seq": "61,69"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "death",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "34,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hallopus",
			"label": "hallopus",
			"seq": "74,81"
		}]
	},
	{
		"id": "5bc9919a43db4252ba6316057cf3b8e0",
		"question": "Artists trained at art students league NY are buried where?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/training> <http://dbpedia.org/resource/Art_Students_League_of_New_York> . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/training",
			"label": "trained",
			"seq": "8,14"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "trained",
			"seq": "8,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artists",
			"seq": "0,6"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Art_Students_League_of_New_York",
			"label": "students league",
			"seq": "23,37"
		}]
	},
	{
		"id": "536bed978e9d4db1bc5789baf5d939d0",
		"question": "Whose creators are Jerry Seinfeld and Larry David?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Jerry_Seinfeld> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Larry_David> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "creators",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "creators",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerry_Seinfeld",
			"label": "seinfeld jerry",
			"seq": "19,32"
		}, {
			"uri": "http://dbpedia.org/resource/Larry_David",
			"label": "larry david",
			"seq": "38,48"
		}]
	},
	{
		"id": "3aab103841c348e199c10879fa2b70d5",
		"question": "Who are the people who played for San Francisco 49ers?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/San_Francisco_49ers>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "the",
			"seq": "8,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Francisco_49ers",
			"label": "francisco 49ers san",
			"seq": "34,52"
		}]
	},
	{
		"id": "bb90c58c414a4f819154ecb33586121d",
		"question": "What is the Nickname of the school where Jeff Hornacek studied  ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Jeff_Hornacek> <http://dbpedia.org/property/highschool> ?x . ?x <http://dbpedia.org/property/nickname> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/highschool",
			"label": "school",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "school",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jeff_Hornacek",
			"label": "hornacek jeff",
			"seq": "41,53"
		}]
	},
	{
		"id": "dc3403a37b77457aafadb0b90e8ed62a",
		"question": "Which artist married to Lee Krasner?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Lee_Krasner>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "krasner",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artist",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lee_Krasner",
			"label": "krasner lee",
			"seq": "24,34"
		}]
	},
	{
		"id": "3c710b7cf9c740f1ab2af4ee8e84d4db",
		"question": "Which country of Montaas Mayas Chiquibul is the birth place of Jos Bernardo Escobar?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Monta\u00f1as_Mayas_Chiquibul> <http://dbpedia.org/property/country> ?uri. <http://dbpedia.org/resource/Jos\u00e9_Bernardo_Escobar> <http://dbpedia.org/property/birthPlace> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/country",
			"label": "country",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "place birth",
			"seq": "48,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Monta\u00f1as_Mayas_Chiquibul",
			"label": "chiquibul",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/resource/Jos\u00e9_Bernardo_Escobar",
			"label": "bernardo escobar",
			"seq": "67,82"
		}]
	},
	{
		"id": "8cd244d8962b4f808264a0ce811cf46a",
		"question": "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Francisco_Pizarro> <http://dbpedia.org/ontology/monarch> <http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/monarch",
			"label": "monarch",
			"seq": "29,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Francisco_Pizarro",
			"label": "francisco pizarro",
			"seq": "4,20"
		}, {
			"uri": "http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor",
			"label": "charles roman",
			"seq": "40,52"
		}]
	},
	{
		"id": "a2bb1b6a34864a0fa79b65de6dcbe19b",
		"question": "Name all the doctoral student of the scientist who also supervised Mary Ainsworth ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Mary_Ainsworth> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "doctoral student",
			"seq": "13,28"
		}, {
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "doctoral student",
			"seq": "13,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "37,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mary_Ainsworth",
			"label": "ainsworth mary",
			"seq": "67,80"
		}]
	},
	{
		"id": "5edb220b2251465ba6759abfe2fe6e4f",
		"question": "Who was in youth clubs of FC Barcelona and Newell's Old Boys?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/FC_Barcelona> . ?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/Newell's_Old_Boys> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youth clubs",
			"seq": "11,21"
		}, {
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youth clubs",
			"seq": "11,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/FC_Barcelona",
			"label": "barcelona fc",
			"seq": "26,37"
		}, {
			"uri": "http://dbpedia.org/resource/Newell's_Old_Boys",
			"label": "newell's boys old",
			"seq": "43,59"
		}]
	},
	{
		"id": "288a095b6d584ca9be2d37ee510ddb4f",
		"question": "Which river's mouth is located in Gulf of Mexico and has source location as Itasca State Park ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Gulf_of_Mexico> . ?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Itasca_State_Park>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "mouth",
			"seq": "14,18"
		}, {
			"uri": "http://dbpedia.org/property/sourceLocation",
			"label": "location source",
			"seq": "57,71"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river's",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gulf_of_Mexico",
			"label": "mexico gulf",
			"seq": "34,44"
		}, {
			"uri": "http://dbpedia.org/resource/Itasca_State_Park",
			"label": "itasca state park",
			"seq": "76,92"
		}]
	},
	{
		"id": "948bff1369c74f2e80829f55fe947179",
		"question": "Whose youth clubs used to participate in Argentine Primera Division?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/Argentine_Primera_Divisi\u00f3n> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "used",
			"seq": "18,21"
		}, {
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "youth clubs",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Argentine_Primera_Divisi\u00f3n",
			"label": "argentine primera",
			"seq": "41,57"
		}]
	},
	{
		"id": "8a54f285292b4890929cead57276b9b1",
		"question": "Which prime ministers were served by the governor who appointed Murray Gleeson?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Murray_Gleeson> <http://dbpedia.org/ontology/appointer> ?x . ?x <http://dbpedia.org/ontology/primeMinister> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/appointer",
			"label": "appointed",
			"seq": "54,62"
		}, {
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "ministers",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Murray_Gleeson",
			"label": "gleeson murray",
			"seq": "64,77"
		}]
	},
	{
		"id": "632fe10298ad4842bb28ca3404eec4b1",
		"question": "What are the movies whose music composer is Akira Ifukube?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Akira_Ifukube>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer music",
			"seq": "26,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "41,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Akira_Ifukube",
			"label": "ifukube akira",
			"seq": "44,56"
		}]
	},
	{
		"id": "10e015b4b65b4de88ae622de46899157",
		"question": "Which adminstrative region of Lawrence F. Cafero is also the resting place of Samuel Keeler ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lawrence_F._Cafero> <http://dbpedia.org/ontology/region> ?uri. <http://dbpedia.org/resource/Samuel_Keeler> <http://dbpedia.org/ontology/restingPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/region",
			"label": "region",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "61,73"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lawrence_F._Cafero",
			"label": "lawrence cafero",
			"seq": "30,44"
		}, {
			"uri": "http://dbpedia.org/resource/Samuel_Keeler",
			"label": "samuel keeler",
			"seq": "78,90"
		}]
	},
	{
		"id": "51652f5c18314876bfd28f3a00e53203",
		"question": "Who appointed both John Drayton and William Clark to their respective offices?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Drayton> <http://dbpedia.org/property/appointer> ?uri. <http://dbpedia.org/resource/William_Clark> <http://dbpedia.org/property/appointer> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/appointer",
			"label": "appointed",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/property/appointer",
			"label": "appointed",
			"seq": "4,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Drayton",
			"label": "drayton john",
			"seq": "19,30"
		}, {
			"uri": "http://dbpedia.org/resource/William_Clark",
			"label": "william clark",
			"seq": "36,48"
		}]
	},
	{
		"id": "0e126d0d57d94ac59b74706ee95d40ef",
		"question": "What is the mouth mountain of Current River (Missouri) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Current_River_(Missouri)> <http://dbpedia.org/ontology/mouthMountain> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthMountain",
			"label": "mountain mouth",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Current_River_(Missouri)",
			"label": "(missouri) current river",
			"seq": "30,53"
		}]
	},
	{
		"id": "dc0fc69c4c2449c4a1a5b337f699d91c",
		"question": "Who all did their high school in Denbigh high School?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/Denbigh_High_School_(Newport_News,_Virginia)> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/highSchool",
			"label": "school",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Denbigh_High_School_(Newport_News,_Virginia)",
			"label": "denbigh school high",
			"seq": "18,36"
		}]
	},
	{
		"id": "7a206da5629442c7a1853a9b62464368",
		"question": "In which part of the world will I find Kim Sawchuk and Vuelta Mexico Telmex?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kim_Sawchuk> <http://dbpedia.org/property/region> ?uri. <http://dbpedia.org/resource/Vuelta_Mexico_Telmex> <http://dbpedia.org/property/region> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/region",
			"label": "mexico",
			"seq": "62,67"
		}, {
			"uri": "http://dbpedia.org/property/region",
			"label": "mexico",
			"seq": "62,67"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kim_Sawchuk",
			"label": "sawchuk kim",
			"seq": "39,49"
		}, {
			"uri": "http://dbpedia.org/resource/Vuelta_Mexico_Telmex",
			"label": "vuelta telmex mexico",
			"seq": "55,74"
		}]
	},
	{
		"id": "9c31f5b82f7345a08d1845c0744d8eac",
		"question": "List everything written in languages developed by EXperimental Computing Facility?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/EXperimental_Computing_Facility> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "facility",
			"seq": "73,80"
		}, {
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "languages",
			"seq": "27,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Work",
			"label": "written",
			"seq": "16,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/EXperimental_Computing_Facility",
			"label": "experimental computing facility",
			"seq": "50,80"
		}]
	},
	{
		"id": "5e40045c1ab34eae8400e7bb2de5784d",
		"question": "Who is the singer of the album which has a song Me and My arrow ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Me_and_My_Arrow> <http://dbpedia.org/ontology/album> ?x . ?x <http://dbpedia.org/property/narrated> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/album",
			"label": "album",
			"seq": "25,29"
		}, {
			"uri": "http://dbpedia.org/property/narrated",
			"label": "arrow",
			"seq": "58,62"
		}, {
			"uri": "http://dbpedia.org/ontology/Album",
			"label": "album",
			"seq": "25,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Me_and_My_Arrow",
			"label": "arrow and my me",
			"seq": "48,62"
		}]
	},
	{
		"id": "8e279a9971084cb08ecf32bc378053d2",
		"question": "Is Azerbaijan the membership of European Go Federation?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/European_Go_Federation> <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Azerbaijan> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/membership",
			"label": "membership",
			"seq": "18,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/European_Go_Federation",
			"label": "federation european",
			"seq": "32,50"
		}, {
			"uri": "http://dbpedia.org/resource/Azerbaijan",
			"label": "azerbaijan",
			"seq": "3,12"
		}]
	},
	{
		"id": "00a5ab1c4748474ab4f686de85c41cb9",
		"question": "Who debuted their career in a team coached by Chip Kelly?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Chip_Kelly> . ?uri <http://dbpedia.org/ontology/debutTeam> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coach",
			"label": "coached",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debuted",
			"seq": "4,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chip_Kelly",
			"label": "kelly chip",
			"seq": "46,55"
		}]
	},
	{
		"id": "f08d139cd5f1417a98264657c0c71637",
		"question": "How many albums did the maker of The Band produce?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/The_Band> . ?x <http://dbpedia.org/ontology/subsequentWork> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/artist",
			"label": "maker",
			"seq": "24,28"
		}, {
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "band",
			"seq": "37,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Album",
			"label": "albums",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Band",
			"label": "band the",
			"seq": "20,27"
		}]
	},
	{
		"id": "b846e29b2bb74db29610cdbbbc7b1740",
		"question": "What is the religious affiliation of Hong Kong Taoist Association Tang Hin Memorial Secondary School ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hong_Kong_Taoist_Association_Tang_Hin_Memorial_Secondary_School> <http://dbpedia.org/property/religiousAffiliation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religiousAffiliation",
			"label": "affiliation religious",
			"seq": "12,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hong_Kong_Taoist_Association_Tang_Hin_Memorial_Secondary_School",
			"label": "association secondary memorial",
			"seq": "54,83"
		}]
	},
	{
		"id": "cbfdaaad592b4ef7b08d5ad4d0d0ac09",
		"question": "Did Joe Namath did his highschool in Beaver Falls High School?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Joe_Namath> <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/Beaver_Falls_High_School> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/highSchool",
			"label": "highschool",
			"seq": "23,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joe_Namath",
			"label": "namath joe",
			"seq": "4,13"
		}, {
			"uri": "http://dbpedia.org/resource/Beaver_Falls_High_School",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "bedb3683384446c4af8fa5348c967363",
		"question": "Which work is both Neil Cross and Lars Pearson both known for ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neil_Cross> <http://dbpedia.org/ontology/notableWork> ?uri. <http://dbpedia.org/resource/Lars_Pearson> <http://dbpedia.org/ontology/notableWork> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "work",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "work",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neil_Cross",
			"label": "cross neil",
			"seq": "19,28"
		}, {
			"uri": "http://dbpedia.org/resource/Lars_Pearson",
			"label": "pearson lars",
			"seq": "34,45"
		}]
	},
	{
		"id": "42fdd268b8604dadbb164492ae3450eb",
		"question": "What are some non fiction subjects dealt with in fantasy novels?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Fantasy> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/literaryGenre",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "fiction",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "non",
			"seq": "14,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fantasy",
			"label": "fantasy",
			"seq": "49,55"
		}]
	},
	{
		"id": "9f4d4fc45aaf46dda67ad836f45ecb66",
		"question": "Which predecessor of the PlayStation 4 is also the developer of Oddworld: Munch's Oddysee?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PlayStation_4> <http://dbpedia.org/property/predecessor> ?uri. <http://dbpedia.org/resource/Oddworld:_Munch's_Oddysee> <http://dbpedia.org/ontology/developer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developer",
			"seq": "51,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PlayStation_4",
			"label": "playstation",
			"seq": "25,35"
		}, {
			"uri": "http://dbpedia.org/resource/Oddworld:_Munch's_Oddysee",
			"label": "oddworld: oddysee munch's",
			"seq": "64,88"
		}]
	},
	{
		"id": "d3d3ee30a3314e28bcebf4cbac9d53e8",
		"question": "Name few movies directed by Tim Burton ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Tim_Burton>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/director",
			"label": "directed",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "tim",
			"seq": "28,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tim_Burton",
			"label": "burton tim",
			"seq": "28,37"
		}]
	},
	{
		"id": "14ded43faabe4a51af41cfafc21363c2",
		"question": "Who has fought in wars under commander Arthur St Clair?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "29,37"
		}, {
			"uri": "http://dbpedia.org/property/combatant",
			"label": "commander",
			"seq": "29,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arthur_St._Clair",
			"label": "arthur clair",
			"seq": "39,50"
		}]
	},
	{
		"id": "61573482fe9745b38c65109394bdc050",
		"question": "Which awards have been given to immunologists?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/fields> <http://dbpedia.org/resource/Immunology> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/fields",
			"label": "given",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Immunology",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0f04c3c74476410791c8a43465ba6918",
		"question": "What are the awards won by the producer of Puss in Boots (film)?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Puss_in_Boots_(1922_film)> <http://dbpedia.org/ontology/producer> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Puss_in_Boots_(1922_film)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f0ce6eff38b647919c395acd2a7f7451",
		"question": "Name the college of the Allama Matthews which also has affiliation with  Monroe Carell Jr. Children's Hospital at Vanderbilt",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allama_Matthews> <http://dbpedia.org/ontology/college> ?uri. <http://dbpedia.org/resource/Monroe_Carell_Jr._Children's_Hospital_at_Vanderbilt> <http://dbpedia.org/property/affiliation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/college",
			"label": "college",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliation",
			"seq": "55,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Allama_Matthews",
			"label": "matthews allama",
			"seq": "24,38"
		}, {
			"uri": "http://dbpedia.org/resource/Monroe_Carell_Jr._Children's_Hospital_at_Vanderbilt",
			"label": "vanderbilt children's hospital",
			"seq": "91,120"
		}]
	},
	{
		"id": "02172a58699f46568edf1ba7690b144d",
		"question": "Name the debut team of Butch Metzger ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Butch_Metzger> <http://dbpedia.org/ontology/debutTeam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debut team",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Butch_Metzger",
			"label": "metzger butch",
			"seq": "23,35"
		}]
	},
	{
		"id": "e91032d570294b618d1f2611d193276f",
		"question": "Name the common distributing label of the Chinga Chang Records and StandBy Records ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chinga_Chang_Records> <http://dbpedia.org/ontology/distributingLabel> ?uri. <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/ontology/distributingLabel> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributingLabel",
			"label": "distributing label",
			"seq": "16,33"
		}, {
			"uri": "http://dbpedia.org/ontology/distributingLabel",
			"label": "distributing label",
			"seq": "16,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chinga_Chang_Records",
			"label": "records chinga chang",
			"seq": "42,61"
		}, {
			"uri": "http://dbpedia.org/resource/StandBy_Records",
			"label": "standby records",
			"seq": "55,69"
		}]
	},
	{
		"id": "9e78a9d215f249178b9f58cab8cb0fd5",
		"question": "What are some relatives of the spouse of Uncle henry from Oz?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Uncle_Henry_(Oz)> . ?uri <http://dbpedia.org/ontology/relative> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "spouse",
			"seq": "31,36"
		}, {
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Uncle_Henry_(Oz)",
			"label": "uncle henry oz",
			"seq": "41,54"
		}]
	},
	{
		"id": "784c77a5d9a64f6fbb7878e159ba6549",
		"question": "Which line of the Vadodara Junction railway station is the route end of Mumbai Vadodara Expressway ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/property/line> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "route end",
			"seq": "59,67"
		}, {
			"uri": "http://dbpedia.org/property/line",
			"label": "line",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mumbai_Vadodara_Expressway",
			"label": "expressway vadodara mumbai",
			"seq": "18,43"
		}, {
			"uri": "http://dbpedia.org/resource/Vadodara_Junction_railway_station",
			"label": "vadodara junction station railway",
			"seq": "18,50"
		}]
	},
	{
		"id": "785671e67373470d82a70c72bbe1184d",
		"question": "Foxconn makes how many things?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Foxconn>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "many",
			"seq": "18,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Foxconn",
			"label": "foxconn",
			"seq": "0,6"
		}]
	},
	{
		"id": "87b5dbafb34246f28c50d4db01d2f791",
		"question": "In which racing championships did Bobby Beasley and Martin Molony participate?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bobby_Beasley> <http://dbpedia.org/ontology/race> ?uri. <http://dbpedia.org/resource/Martin_Molony> <http://dbpedia.org/ontology/race> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/race",
			"label": "racing",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/race",
			"label": "racing",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bobby_Beasley",
			"label": "beasley bobby",
			"seq": "34,46"
		}, {
			"uri": "http://dbpedia.org/resource/Martin_Molony",
			"label": "molony martin",
			"seq": "52,64"
		}]
	},
	{
		"id": "b46c1b706504419494f4cccf84754e62",
		"question": "What is telecasted on the network where Deborah Turness holds important position?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Deborah_Turness> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "position",
			"seq": "72,79"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Deborah_Turness",
			"label": "turness deborah",
			"seq": "40,54"
		}]
	},
	{
		"id": "da4845645dbf4dd5b072c54980634196",
		"question": "Which actors have performed in plays performed in New York?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/place> <http://dbpedia.org/resource/New_York_City> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Play>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/place",
			"label": "plays",
			"seq": "31,35"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "in",
			"seq": "28,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Play",
			"label": "plays",
			"seq": "31,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York_City",
			"label": "york new",
			"seq": "50,57"
		}]
	},
	{
		"id": "dcae078ebdd74499a63310fa184928ff",
		"question": "What currencies are used in the countries which have been governed by Francois Hollande?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Fran\u00e7ois_Hollande> . ?x <http://dbpedia.org/ontology/currency> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "hollande",
			"seq": "79,86"
		}, {
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currencies",
			"seq": "5,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "countries",
			"seq": "32,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fran\u00e7ois_Hollande",
			"label": "hollande",
			"seq": "79,86"
		}]
	},
	{
		"id": "6119ae45be054c5b8898d10978eae65d",
		"question": "Name the ground of Al-Rayan SC ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Al-Rayan_SC> <http://dbpedia.org/ontology/ground> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ground",
			"label": "ground",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Al-Rayan_SC",
			"label": "al-rayan sc",
			"seq": "19,29"
		}]
	},
	{
		"id": "9776c037c6cd401c9c3234960d164750",
		"question": "Who is the owner of the bank which owns Bloomberg Radio?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Bloomberg_Radio> <http://dbpedia.org/ontology/owner> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owner",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Bank",
			"label": "bank",
			"seq": "24,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bloomberg_Radio",
			"label": "bloomberg radio",
			"seq": "40,54"
		}]
	},
	{
		"id": "52e919158ffa4ce9bdb2817cebd96da5",
		"question": "Where did the office holder died who also have faith in Episcopal Church ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Episcopal_Church_(United_States)> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "in",
			"seq": "53,54"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "10,12"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "14,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Episcopal_Church_(United_States)",
			"label": "episcopal church",
			"seq": "56,71"
		}]
	},
	{
		"id": "821d1baa1d594333a5e79d50c16efcb4",
		"question": "Is Another Lonely Night in New York by the musical band Robin Gibb?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Another_Lonely_Night_in_New_York> <http://dbpedia.org/ontology/musicalBand> <http://dbpedia.org/resource/Robin_Gibb> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalBand",
			"label": "musical band",
			"seq": "43,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Another_Lonely_Night_in_New_York",
			"label": "another lonely night york",
			"seq": "3,27"
		}, {
			"uri": "http://dbpedia.org/resource/Robin_Gibb",
			"label": "robin gibb",
			"seq": "56,65"
		}]
	},
	{
		"id": "e60963b2ce1644e5859606046cdd4e4a",
		"question": "List all the developers of the Oddworld series?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/Oddworld> . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "40,45"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developers",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oddworld",
			"label": "oddworld",
			"seq": "31,38"
		}]
	},
	{
		"id": "7b7798e7120d496ba5b75daea48b5038",
		"question": "To which political party does the successor of Radhabinod Koijam belong?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Radhabinod_Koijam> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/party> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "34,42"
		}, {
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Radhabinod_Koijam",
			"label": "radhabinod koijam",
			"seq": "47,63"
		}]
	},
	{
		"id": "d9360f5cca484dbbb1187e1348211288",
		"question": "Which builder of Edwin Andrews Air Base isalso place of birth of the Akinoumi Setsuo ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edwin_Andrews_Air_Base> <http://dbpedia.org/ontology/builder> ?uri. <http://dbpedia.org/resource/Akinoumi_Setsuo> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "builder",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "47,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edwin_Andrews_Air_Base",
			"label": "andrews edwin base",
			"seq": "17,34"
		}, {
			"uri": "http://dbpedia.org/resource/Akinoumi_Setsuo",
			"label": "akinoumi setsuo",
			"seq": "69,83"
		}]
	},
	{
		"id": "ff7902dec19b42b6b2c0de2b2ddef72c",
		"question": "is ANYway in the Quack album?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/ANYway> <http://dbpedia.org/ontology/album> <http://dbpedia.org/resource/Quack_(album)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/album",
			"label": "album",
			"seq": "23,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/ANYway",
			"label": "anyway",
			"seq": "3,8"
		}, {
			"uri": "http://dbpedia.org/resource/Quack_(album)",
			"label": "quack album",
			"seq": "17,27"
		}]
	},
	{
		"id": "d7c709165e3246d1b9cbeb191dd2c877",
		"question": "What are the political parties whose leaders have lived in the Prime Minister's House?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Prime_Minister's_House_(Colombo)> . ?uri <http://dbpedia.org/ontology/leader> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "prime",
			"seq": "63,67"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leaders",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/ontology/PoliticalParty",
			"label": "political",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Prime_Minister's_House_(Colombo)",
			"label": "minister's prime house",
			"seq": "63,84"
		}]
	},
	{
		"id": "0225eb44cdbd4c7891e3d609bc8534cf",
		"question": "What is a common ingredient used in boyt Blodpalt and Kaszanka ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blodpalt> <http://dbpedia.org/ontology/ingredient> ?uri. <http://dbpedia.org/resource/Kaszanka> <http://dbpedia.org/ontology/ingredient> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "17,26"
		}, {
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "17,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blodpalt",
			"label": "blodpalt",
			"seq": "41,48"
		}, {
			"uri": "http://dbpedia.org/resource/Kaszanka",
			"label": "kaszanka",
			"seq": "54,61"
		}]
	},
	{
		"id": "be2a715e677a435cabaf67c8f17f8a02",
		"question": "Name a TV show judged by Jennifier Lopez and presented by Brian Dunkleman ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez> . ?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Brian_Dunkleman>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/judges",
			"label": "judged",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/property/presenter",
			"label": "presented",
			"seq": "45,53"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "10,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jennifer_Lopez",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Brian_Dunkleman",
			"label": "dunkleman brian",
			"seq": "58,72"
		}]
	},
	{
		"id": "92cd517187c04052aa28c65e8e7ba93e",
		"question": "Is the Chiva Bus by the Ford Motor Company?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Ford_Motor_Company> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/automobilePlatform",
			"label": "motor",
			"seq": "29,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chiva_bus",
			"label": "chiva bus",
			"seq": "7,15"
		}, {
			"uri": "http://dbpedia.org/resource/Ford_Motor_Company",
			"label": "company motor ford",
			"seq": "24,41"
		}]
	},
	{
		"id": "13648ac67f4843b3ad93c7137fcb34bd",
		"question": "From how many different places have participants of Breeders's Cup Turf come?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/race> <http://dbpedia.org/resource/Breeders'_Cup_Turf> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/race",
			"label": "places",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "places",
			"seq": "24,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Breeders'_Cup_Turf",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "3e2b19f37e1342c5a7856184624b9fd1",
		"question": "Was Lionel Messi a member  of the 2009 FIFA World Cup squads?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/2009_FIFA_Club_World_Cup_squads> <http://dbpedia.org/ontology/currentMember> <http://dbpedia.org/resource/Lionel_Messi> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currentMember",
			"label": "member",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2009_FIFA_Club_World_Cup_squads",
			"label": "squads world fifa 2009",
			"seq": "34,55"
		}, {
			"uri": "http://dbpedia.org/resource/Lionel_Messi",
			"label": "lionel messi",
			"seq": "4,15"
		}]
	},
	{
		"id": "30679d014e3749319a88ec1614bdb393",
		"question": "Name the company founded by Jim Harris located in Harris County, Texas ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> . ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Harris_County,_Texas>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "founded",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "located",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jim_Harris_(entrepreneur)",
			"label": "harris jim",
			"seq": "28,37"
		}, {
			"uri": "http://dbpedia.org/resource/Harris_County,_Texas",
			"label": "county, harris texas",
			"seq": "32,51"
		}]
	},
	{
		"id": "b9faf98cfa3b43fb928d2b9eb258ae41",
		"question": "Which video game composed by Hirokazu Tanaka can be played on virtual Console ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Virtual_Console> . ?uri <http://dbpedia.org/property/composer> <http://dbpedia.org/resource/Hirokazu_Tanaka>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "composed",
			"seq": "17,24"
		}, {
			"uri": "http://dbpedia.org/property/composer",
			"label": "composed",
			"seq": "17,24"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "video game",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Virtual_Console",
			"label": "virtual console",
			"seq": "62,76"
		}, {
			"uri": "http://dbpedia.org/resource/Hirokazu_Tanaka",
			"label": "hirokazu tanaka",
			"seq": "29,43"
		}]
	},
	{
		"id": "7901e474e8734da4b709fb1cae144d23",
		"question": "Give me the count of tenants of the stadia whose one of the tenants is Toronto Furies?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/tenants> <http://dbpedia.org/resource/Toronto_Furies> . ?x <http://dbpedia.org/property/tenants> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/tenants",
			"label": "tenants",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/property/tenants",
			"label": "tenants",
			"seq": "21,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto_Furies",
			"label": "toronto furies",
			"seq": "71,84"
		}]
	},
	{
		"id": "84f0e1da1e174000b08ae2510b0bf079",
		"question": "what kind of things play on WBIG FM?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WBIG-FM> <http://dbpedia.org/ontology/programmeFormat> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/programmeFormat",
			"label": "of",
			"seq": "10,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WBIG-FM",
			"label": "wbig fm",
			"seq": "28,34"
		}]
	},
	{
		"id": "2da5041948fd42298c8b577eb241332c",
		"question": "What is the serving railway line of Warwick railway station, Perth ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Warwick_railway_station,_Perth> <http://dbpedia.org/ontology/servingRailwayLine> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/servingRailwayLine",
			"label": "serving railway",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Warwick_railway_station,_Perth",
			"label": "station, warwick railway perth",
			"seq": "20,49"
		}]
	},
	{
		"id": "ae588c3050cf4a769d629c8c2ecc8893",
		"question": "Who was the prime minister under which the predecessor of Derick Heathcoat Amory served?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Derick_Heathcoat-Amory,_1st_Viscount_Amory> . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "predecessor",
			"seq": "43,53"
		}, {
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "minister prime",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Derick_Heathcoat-Amory,_1st_Viscount_Amory",
			"label": "heathcoat derick",
			"seq": "58,73"
		}]
	},
	{
		"id": "f6576ee287fd4a29b03077da31e64c44",
		"question": "Who wrote the subsequent work of One Day at a Time (Em's Version) ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/One_Day_at_a_Time_(Em's_Version)> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/ontology/writer> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "14,28"
		}, {
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "wrote",
			"seq": "4,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/One_Day_at_a_Time_(Em's_Version)",
			"label": "version) (em's time one day",
			"seq": "33,59"
		}]
	},
	{
		"id": "bac4ecaac8954b3d83266bf1363bd5c8",
		"question": "What are the birth place of the people who are the star of Dhoondte Reh Jaaoge?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Dhoondte_Reh_Jaaoge!_(1998_film)> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "star",
			"seq": "51,54"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "place birth",
			"seq": "13,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dhoondte_Reh_Jaaoge!_(1998_film)",
			"label": "dhoondte jaaoge",
			"seq": "59,73"
		}]
	},
	{
		"id": "9464454dd9bc489387bee11d1e7cd022",
		"question": "Who is the architect of Red House, London ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Red_House,_London> <http://dbpedia.org/property/architect> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Red_House,_London",
			"label": "london house, red",
			"seq": "24,40"
		}]
	},
	{
		"id": "3dcb4c11af2d4976b986ba6a9a9c1a47",
		"question": "Count the number of tenants whose one of the tenant is Toronto Phantoms ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Toronto_Phantoms> . ?x <http://dbpedia.org/ontology/tenant> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenant",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenant",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto_Phantoms",
			"label": "phantoms toronto",
			"seq": "55,70"
		}]
	},
	{
		"id": "7507c5dcd77b4a1f8662415059e43340",
		"question": "Which relative of George Madison is the appointer of John Drayton ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Drayton> <http://dbpedia.org/property/appointer> ?uri. <http://dbpedia.org/resource/George_Madison> <http://dbpedia.org/ontology/relation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/appointer",
			"label": "appointer",
			"seq": "40,48"
		}, {
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relative",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Drayton",
			"label": "drayton john",
			"seq": "53,64"
		}, {
			"uri": "http://dbpedia.org/resource/George_Madison",
			"label": "madison george",
			"seq": "18,31"
		}]
	},
	{
		"id": "73d555e5b42f4fc1bb26a2e517a69e83",
		"question": "Which company manufactured Delta III?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Delta_III> <http://dbpedia.org/ontology/manufacturer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "14,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Delta_III",
			"label": "delta iii",
			"seq": "27,35"
		}]
	},
	{
		"id": "0881b71d464e4be09d6650e2467d8008",
		"question": "List the movies edited by Julian Doyle in which music was composed by Geoffrey Brugon ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Geoffrey_Burgon> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Julian_Doyle_(filmmaker)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "48,52"
		}, {
			"uri": "http://dbpedia.org/property/editing",
			"label": "edited",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "in",
			"seq": "39,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Geoffrey_Burgon",
			"label": "geoffrey",
			"seq": "70,77"
		}, {
			"uri": "http://dbpedia.org/resource/Julian_Doyle_(filmmaker)",
			"label": "julian doyle",
			"seq": "26,37"
		}]
	},
	{
		"id": "491d86b9710241a78858ac924c0174bb",
		"question": "Name the river whose mouth mountain is Essex and river mouth is North Sea?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Essex> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/North_Sea>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthMountain",
			"label": "mountain mouth",
			"seq": "21,34"
		}, {
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Essex",
			"label": "essex",
			"seq": "39,43"
		}, {
			"uri": "http://dbpedia.org/resource/North_Sea",
			"label": "north",
			"seq": "64,68"
		}]
	},
	{
		"id": "dac617c2755144f597bf2de202f99777",
		"question": "Who is the owner of Bloomberg L.P. ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bloomberg_L.P.> <http://dbpedia.org/property/owner> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bloomberg_L.P.",
			"label": "bloomberg l.p.",
			"seq": "20,33"
		}]
	},
	{
		"id": "02d3e516190a49e19e0908eb2fa74bfe",
		"question": "List the houses of Parliament of India ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Parliament_of_India> <http://dbpedia.org/property/houses> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/houses",
			"label": "houses",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Parliament_of_India",
			"label": "parliament india",
			"seq": "19,34"
		}]
	},
	{
		"id": "f397d4e121954f05be803892461d82f9",
		"question": "Richard Gant did a guest appearance on which series?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Richard_Gant> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/guests",
			"label": "guest",
			"seq": "19,23"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "45,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Richard_Gant",
			"label": "richard gant",
			"seq": "0,11"
		}]
	},
	{
		"id": "f2231eb580854604aa08fc3651038117",
		"question": "What is the home stadium of the soccer club seasons whose chairman is Merritt Paulson?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Merritt_Paulson> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/chairman",
			"label": "chairman",
			"seq": "58,65"
		}, {
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "stadium home",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClubSeason",
			"label": "soccer",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Merritt_Paulson",
			"label": "paulson merritt",
			"seq": "70,84"
		}]
	},
	{
		"id": "3379d870f89c4e929e3ac6e1ab1a1301",
		"question": "What is the government type of Kumta ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/property/governmentType> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governmentType",
			"label": "government type",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kumta",
			"label": "kumta",
			"seq": "31,35"
		}]
	},
	{
		"id": "692a622dfa204b6faf27d4609436b8ae",
		"question": "What genres of games are available on the Commodore 64?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Commodore_64> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "commodore",
			"seq": "42,50"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "genres",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "15,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Commodore_64",
			"label": "commodore 64",
			"seq": "42,53"
		}]
	},
	{
		"id": "dd2d9d77fea94fe9ad8bf7478cb2bc1d",
		"question": "What is the protected area whose nearest city is Kenya?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/nearestCity> <http://dbpedia.org/resource/Kenya>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProtectedArea>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "nearest city",
			"seq": "33,44"
		}, {
			"uri": "http://dbpedia.org/ontology/ProtectedArea",
			"label": "protected area",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kenya",
			"label": "kenya",
			"seq": "49,53"
		}]
	},
	{
		"id": "bdf990ee5daf4f10a200bcfd984e01f6",
		"question": "How many companies have launched their rockets from the Vandenerg Air base?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Vandenberg_Air_Force_Base> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launched",
			"seq": "24,31"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "launched",
			"seq": "24,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vandenberg_Air_Force_Base",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7c64644ddbc24062b9a8133945fb5e7f",
		"question": "Is Anne Hidalgo the mayor of Paris?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Paris> <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Anne_Hidalgo> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mayor",
			"label": "mayor",
			"seq": "20,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paris",
			"label": "paris",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/resource/Anne_Hidalgo",
			"label": "hidalgo anne",
			"seq": "3,14"
		}]
	},
	{
		"id": "0486c904f3684e70a2e91846a6e53640",
		"question": "Name the driver who was at pole in 1997 Canadian Grand Prix and also 1994 Spanish Grand Prix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri. <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/ontology/poleDriver> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/poleDriver",
			"label": "driver pole",
			"seq": "9,19"
		}, {
			"uri": "http://dbpedia.org/ontology/poleDriver",
			"label": "driver pole",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1997_Canadian_Grand_Prix",
			"label": "canadian grand prix",
			"seq": "40,58"
		}, {
			"uri": "http://dbpedia.org/resource/1994_Spanish_Grand_Prix",
			"label": "spanish grand",
			"seq": "49,61"
		}]
	},
	{
		"id": "90502631e5e7485cb032ce25c7048d48",
		"question": "Which college has been attended  by both Mr. Hubert Wiggs and Mr. Alvin Bell?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hubert_Wiggs> <http://dbpedia.org/ontology/college> ?uri. <http://dbpedia.org/resource/Alvin_Bell> <http://dbpedia.org/ontology/college> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/college",
			"label": "college",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/college",
			"label": "college",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hubert_Wiggs",
			"label": "hubert wiggs",
			"seq": "45,56"
		}, {
			"uri": "http://dbpedia.org/resource/Alvin_Bell",
			"label": "alvin bell",
			"seq": "66,75"
		}]
	},
	{
		"id": "2e984fcd973d4c79ae9ab371222218af",
		"question": "In which city of Pittsburg Steelers was the Congress of Inductrial Organization founded ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Congress_of_Industrial_Organizations> <http://dbpedia.org/property/founded> ?uri. <http://dbpedia.org/resource/Pittsburgh_Steelers> <http://dbpedia.org/property/city> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founded",
			"label": "founded",
			"seq": "80,86"
		}, {
			"uri": "http://dbpedia.org/property/city",
			"label": "city",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Congress_of_Industrial_Organizations",
			"label": "organization",
			"seq": "67,78"
		}, {
			"uri": "http://dbpedia.org/resource/Pittsburgh_Steelers",
			"label": "pittsburg steelers",
			"seq": "17,34"
		}]
	},
	{
		"id": "7994a53ef73c46c1bfd20f5cc8bf85c6",
		"question": "What is the academic discipline of the Journal of Cerebral Blood Flow & Metabolism and also an ingredient of the Ragout fin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Journal_of_Cerebral_Blood_Flow_&_Metabolism> <http://dbpedia.org/ontology/academicDiscipline> ?uri. <http://dbpedia.org/resource/Ragout_fin> <http://dbpedia.org/ontology/ingredient> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "discipline academic",
			"seq": "12,30"
		}, {
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "95,104"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Journal_of_Cerebral_Blood_Flow_&_Metabolism",
			"label": "metabolism cerebral journal",
			"seq": "39,65"
		}, {
			"uri": "http://dbpedia.org/resource/Ragout_fin",
			"label": "ragout fin",
			"seq": "113,122"
		}]
	},
	{
		"id": "fdb525be2aca4cfda57372b41b1b6b79",
		"question": "Was Duanne Allman famous for playing the Gibson SG?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Duane_Allman> <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Gibson_SG> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableInstruments",
			"label": "allman",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Duane_Allman",
			"label": "allman",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/resource/Gibson_SG",
			"label": "gibson",
			"seq": "41,46"
		}]
	},
	{
		"id": "7d51f1bf12ac4424b780213dac02bcb2",
		"question": "List the people casted in Betsy's Wedding and 16 candles?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Betsy's_Wedding> <http://dbpedia.org/ontology/starring> ?uri. <http://dbpedia.org/resource/Sixteen_Candles> <http://dbpedia.org/property/starring> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "316",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "wedding",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "wedding",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Betsy's_Wedding",
			"label": "wedding betsy's",
			"seq": "26,40"
		}, {
			"uri": "http://dbpedia.org/resource/Sixteen_Candles",
			"label": "candles",
			"seq": "49,55"
		}]
	},
	{
		"id": "c86cb51bad5142dab46c6951545c296d",
		"question": "Is Maldives a member ofof South Asia Subregional Economic Cooperation?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/South_Asia_Subregional_Economic_Cooperation> <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Maldives> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/membership",
			"label": "member",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Asia_Subregional_Economic_Cooperation",
			"label": "subregional cooperation economic south asia",
			"seq": "26,68"
		}, {
			"uri": "http://dbpedia.org/resource/Maldives",
			"label": "maldives",
			"seq": "3,10"
		}]
	},
	{
		"id": "42cba0deb5884d97a7585b227afb2f03",
		"question": "What are the settlements whose neighboring municipalities is Lancy?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Lancy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/neighboringMunicipalities",
			"label": "municipalities neighboring",
			"seq": "31,56"
		}, {
			"uri": "http://dbpedia.org/ontology/Settlement",
			"label": "settlements",
			"seq": "13,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lancy",
			"label": "lancy",
			"seq": "61,65"
		}]
	},
	{
		"id": "77907c919f714ac4ac233e3c93545099",
		"question": "For how many things are people famous, who were born in Nebraska?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Nebraska> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "people",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "for",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nebraska",
			"label": "nebraska",
			"seq": "56,63"
		}]
	},
	{
		"id": "e7f54b79284844b194bfdd2380efe154",
		"question": "What currencies are used in the country whose capital is Podgorica?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Podgorica> . ?x <http://dbpedia.org/property/currency> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "capital",
			"seq": "46,52"
		}, {
			"uri": "http://dbpedia.org/property/currency",
			"label": "currencies",
			"seq": "5,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Podgorica",
			"label": "podgorica",
			"seq": "57,65"
		}]
	},
	{
		"id": "01e2a4fa1cc04ea397cb1d14132317a8",
		"question": "What is the political party of the Satish Kumar Sharma which is also the political party of Manthena Venkata Raju?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Satish_Kumar_Sharma> <http://dbpedia.org/ontology/party> ?uri. <http://dbpedia.org/resource/Manthena_Venkata_Raju> <http://dbpedia.org/ontology/party> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "22,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Satish_Kumar_Sharma",
			"label": "sharma satish kumar",
			"seq": "35,53"
		}, {
			"uri": "http://dbpedia.org/resource/Manthena_Venkata_Raju",
			"label": "manthena venkata raju",
			"seq": "92,112"
		}]
	},
	{
		"id": "3d55c35bafda4d048cec814081b7a280",
		"question": "Which shows theme music is composed by a band which has Larry Lalonde in it?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Larry_LaLonde> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "band",
			"seq": "41,44"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "27,34"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Larry_LaLonde",
			"label": "lalonde larry",
			"seq": "56,68"
		}]
	},
	{
		"id": "436413f766614075bd1ac508ff48ff64",
		"question": "Which rivers start from the Provinces of Zambia?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/settlementType> <http://dbpedia.org/resource/Provinces_of_Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/settlementType",
			"label": "start",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/sourceRegion",
			"label": "rivers",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Provinces_of_Zambia",
			"label": "provinces zambia",
			"seq": "28,43"
		}]
	},
	{
		"id": "418aec71a0ad4d5594d5667a98921501",
		"question": "Name a famous relative of barry voight",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Barry_Voight>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relative",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Barry_Voight",
			"label": "voight barry",
			"seq": "26,37"
		}]
	},
	{
		"id": "4f48838e3be94cb18dedb19550dae9de",
		"question": "Which company developed both Dart and Go?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dart_(programming_language)> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/Go_(programming_language)> <http://dbpedia.org/ontology/developer> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dart_(programming_language)",
			"label": "dart",
			"seq": "29,32"
		}, {
			"uri": "http://dbpedia.org/resource/Go_(programming_language)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4b6587fe43824a6385cac583915ac1cc",
		"question": "Georg Meissner was doctoral supervisor of which scientist ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "doctoral",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "48,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Georg_Meissner",
			"label": "meissner georg",
			"seq": "0,13"
		}]
	},
	{
		"id": "9d4bc4521629455eae2f5b6be2f76dc2",
		"question": "What awards have been given to some screenwriters?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Screenwriter> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "to",
			"seq": "28,29"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Screenwriter",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "723b13ce8be84e718d521789fae00823",
		"question": "Which city near Nihoa is the place of death of jim Brady ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nihoa> <http://dbpedia.org/property/nearestCity> ?uri. <http://dbpedia.org/resource/Jim_Brady_(quarterback)> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nearestCity",
			"label": "near city",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "place death",
			"seq": "29,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nihoa",
			"label": "nihoa",
			"seq": "16,20"
		}, {
			"uri": "http://dbpedia.org/resource/Jim_Brady_(quarterback)",
			"label": "brady jim",
			"seq": "47,55"
		}]
	},
	{
		"id": "f581bcd6971a4e1b85ef5da858b30163",
		"question": "List the people who were the first one to climb a mountain in California?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/California> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "california",
			"seq": "62,71"
		}, {
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "first",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Mountain",
			"label": "mountain",
			"seq": "50,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/California",
			"label": "california",
			"seq": "62,71"
		}]
	},
	{
		"id": "b38a612b13ec49d4b8be8365b8a0d89b",
		"question": "Where is the spouse of Henry Bourchier of Essex buried?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Henry_Bourchier,_1st_Earl_of_Essex> . ?x <http://dbpedia.org/property/placeOfBurial> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "spouse",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "buried",
			"seq": "48,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henry_Bourchier,_1st_Earl_of_Essex",
			"label": "bourchier henry essex",
			"seq": "23,43"
		}]
	},
	{
		"id": "5b08973e5ea1470fb3ce5ac04de8c3d6",
		"question": "Who are the local authority of Buckhurst Hill County High School ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/localAuthority",
			"label": "authority local",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Buckhurst_Hill_County_High_School",
			"label": "buckhurst school county hill high",
			"seq": "31,63"
		}]
	},
	{
		"id": "ef0ebaaa120f45e8a4db2e06afd28d56",
		"question": "Which peak was first scaled by Krzysztof Wielicki?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/Krzysztof_Wielicki> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "first",
			"seq": "15,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Krzysztof_Wielicki",
			"label": "krzysztof wielicki",
			"seq": "31,48"
		}]
	},
	{
		"id": "20c51164ad5a4b42acd9a417f6770edc",
		"question": "How many movies have a screenplay located in the States?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/screenplay> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "45,47"
		}, {
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screenplay",
			"seq": "23,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "in",
			"seq": "42,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "states",
			"seq": "49,54"
		}]
	},
	{
		"id": "691ab450f3054f89b7b59afe0c27f96f",
		"question": "Which companies were behind the renovation of McKechnie Field ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/McKechnie_Field> <http://dbpedia.org/property/architect> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architect",
			"label": "which",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/McKechnie_Field",
			"label": "mckechnie field",
			"seq": "46,60"
		}]
	},
	{
		"id": "38d02dcbf93a42ab8f3f03c2a8c8f30b",
		"question": "What teams have Avangard Omsk's players played for?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/playedFor> <http://dbpedia.org/resource/Avangard_Omsk> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "played",
			"seq": "40,45"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Avangard_Omsk",
			"label": "avangard",
			"seq": "16,23"
		}]
	},
	{
		"id": "16a0b3c7cec84354940128b8d6b555b0",
		"question": "What is the location country of Teperberg 1870 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teperberg_1870> <http://dbpedia.org/property/locationCountry> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "location country",
			"seq": "12,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Teperberg_1870",
			"label": "teperberg 1870",
			"seq": "32,45"
		}]
	},
	{
		"id": "d241c139de3a4bc08b233c5dcd18e3b7",
		"question": "Name the rivers in the hudson highlands state parts?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hudson_Highlands_State_Park> <http://dbpedia.org/property/river> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/river",
			"label": "rivers",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hudson_Highlands_State_Park",
			"label": "highlands hudson state",
			"seq": "23,44"
		}]
	},
	{
		"id": "6e4e6be9a3bd45b187c37dd99ee4284c",
		"question": "Is Ingo Steuer the formercoach of Stanislav Morozov?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Stanislav_Morozov> <http://dbpedia.org/property/formercoach> <http://dbpedia.org/resource/Ingo_Steuer> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/formercoach",
			"label": "formercoach",
			"seq": "19,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stanislav_Morozov",
			"label": "stanislav morozov",
			"seq": "34,50"
		}, {
			"uri": "http://dbpedia.org/resource/Ingo_Steuer",
			"label": "steuer ingo",
			"seq": "3,13"
		}]
	},
	{
		"id": "4c7eac160c0d49c49f815792513f1c21",
		"question": "How many cars can I find related to the cars which have a V8 engine?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/engine> <http://dbpedia.org/resource/V8_engine> . ?x <http://dbpedia.org/property/related> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/engine",
			"label": "engine",
			"seq": "61,66"
		}, {
			"uri": "http://dbpedia.org/property/related",
			"label": "related",
			"seq": "25,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/V8_engine",
			"label": "engine v8",
			"seq": "58,66"
		}]
	},
	{
		"id": "39c73d39a7fb4e7bbf4b1b656e76ee22",
		"question": "Which destinations of the Air 2000 is also the location continent of the Falken Tire ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Air_2000> <http://dbpedia.org/property/destinations> ?uri. <http://dbpedia.org/resource/Falken_Tire> <http://dbpedia.org/ontology/locationCountry> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/destinations",
			"label": "destinations",
			"seq": "6,17"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCountry",
			"label": "location",
			"seq": "47,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Air_2000",
			"label": "2000 air",
			"seq": "26,33"
		}, {
			"uri": "http://dbpedia.org/resource/Falken_Tire",
			"label": "falken tire",
			"seq": "73,83"
		}]
	},
	{
		"id": "c1aabd659ada47e2b412d630a3a3814b",
		"question": "what cities are close by LoDaisKa ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/LoDaisKa_Site> <http://dbpedia.org/ontology/nearestCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "are",
			"seq": "12,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/LoDaisKa_Site",
			"label": "lodaiska",
			"seq": "25,32"
		}]
	},
	{
		"id": "7d39f4c231f744dfb4e0f7f5f4f15b7f",
		"question": "Why did Letita McTavish Hargrave and Sextus Barbour die?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> <http://dbpedia.org/ontology/deathCause> ?uri. <http://dbpedia.org/resource/Sextus_Barbour> <http://dbpedia.org/property/deathCause> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "letita",
			"seq": "8,13"
		}, {
			"uri": "http://dbpedia.org/property/deathCause",
			"label": "letita",
			"seq": "8,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Letitia_MacTavish_Hargrave",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Sextus_Barbour",
			"label": "barbour sextus",
			"seq": "37,50"
		}]
	},
	{
		"id": "b8845f4e32974bfca57abbacda4140bc",
		"question": "What show has Sirius XM Holdings and Fox Sports Radio as channels ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/Sirius_XM_Holdings> . ?uri <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/Fox_Sports_Radio> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/channel",
			"label": "channels",
			"seq": "57,64"
		}, {
			"uri": "http://dbpedia.org/ontology/channel",
			"label": "channels",
			"seq": "57,64"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sirius_XM_Holdings",
			"label": "holdings sirius",
			"seq": "14,28"
		}, {
			"uri": "http://dbpedia.org/resource/Fox_Sports_Radio",
			"label": "sports radio fox",
			"seq": "37,52"
		}]
	},
	{
		"id": "404f0de8f6fe44649c68a7f991618244",
		"question": "What are Breann McGregor and Anika Knudsen, both known for?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Breann_McGregor> <http://dbpedia.org/property/knownFor> ?uri. <http://dbpedia.org/resource/Anika_Knudsen> <http://dbpedia.org/property/knownFor> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "49,57"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "49,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Breann_McGregor",
			"label": "mcgregor breann",
			"seq": "9,23"
		}, {
			"uri": "http://dbpedia.org/resource/Anika_Knudsen",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "29584b2edbec44168d3adb4cd1d3f20f",
		"question": "List the softwares which runs on Microsoft Windows and has license as Software as a service?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> . ?uri <http://dbpedia.org/ontology/license> <http://dbpedia.org/resource/Software_as_a_service>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "service",
			"seq": "84,90"
		}, {
			"uri": "http://dbpedia.org/ontology/license",
			"label": "license",
			"seq": "59,65"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Windows",
			"label": "microsoft windows",
			"seq": "33,49"
		}, {
			"uri": "http://dbpedia.org/resource/Software_as_a_service",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ada933daf3c04f8093383e9131a06d2f",
		"question": "List the movies produced by Michael Deeley ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Michael_Deeley>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "produced",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "list",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Deeley",
			"label": "michael deeley",
			"seq": "28,41"
		}]
	},
	{
		"id": "a6de49d9743f440db28ce26337d15730",
		"question": "What are the TV shows whose network is also known as the CW?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/The_CW> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterNames",
			"label": "is",
			"seq": "36,37"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "network",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "16,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_CW",
			"label": "the cw",
			"seq": "9,14"
		}]
	},
	{
		"id": "ce328b878c624b718d5f92fe48d01626",
		"question": "What are some tv shows created by Simon Fuller?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "created",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "simon",
			"seq": "34,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Simon_Fuller",
			"label": "fuller simon",
			"seq": "34,45"
		}]
	},
	{
		"id": "f250fdf5363442e1a68b1575a75f7649",
		"question": "Count the number of sports played by the universities whose one of the sports is baketball ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/athletics> <http://dbpedia.org/resource/Basketball> . ?x <http://dbpedia.org/property/athletics> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/athletics",
			"label": "the",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/property/athletics",
			"label": "the",
			"seq": "6,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Basketball",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c5ad9696ccbc49d48f66061c12d9fce0",
		"question": "Where was the engineer born who manufactured EP R.E.P. 1?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Esnault-Pelterie_R.E.P._1> <http://dbpedia.org/property/manufacturer> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/manufacturer",
			"label": "manufactured",
			"seq": "32,43"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Esnault-Pelterie_R.E.P._1",
			"label": "r.e.p.",
			"seq": "48,53"
		}]
	},
	{
		"id": "41d0346f044a40d4b92151328c691244",
		"question": "In which state is the team, which has John Roeslein?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/John_Roeslein> <http://dbpedia.org/ontology/team> ?x . ?x <http://dbpedia.org/property/state> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team,",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Roeslein",
			"label": "roeslein john",
			"seq": "38,50"
		}]
	},
	{
		"id": "91fac607c06844458a5a93efbc30e6cb",
		"question": "Where has the employee of Columbia Records  worked ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/Columbia_Records> . ?x <http://dbpedia.org/ontology/employer> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "employee",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "employee",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Columbia_Records",
			"label": "columbia records",
			"seq": "26,41"
		}]
	},
	{
		"id": "afe5031d98294f048dbf9373e03f719b",
		"question": "Which sport at Polytechnic University of the Philippines Taguig is the field of Jon speelman ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/field",
			"label": "field",
			"seq": "71,75"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sport",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jon_Speelman",
			"label": "speelman jon",
			"seq": "80,91"
		}, {
			"uri": "http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig",
			"label": "polytechnic philippines university taguig",
			"seq": "15,55"
		}]
	},
	{
		"id": "574c7a40663240129e6f74a6c30fa086",
		"question": "What are the sports played by the universities who also plays taekwondo ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/Taekwondo> . ?x <http://dbpedia.org/property/athletics> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/athletics",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/property/athletics",
			"label": "the",
			"seq": "9,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Taekwondo",
			"label": "taekwondo",
			"seq": "62,70"
		}]
	},
	{
		"id": "8c4f8820a2574a60b70e80603a9af302",
		"question": "Which senator served in military units VMF-155 and VMF-218?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-155> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-218> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military",
			"seq": "24,31"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military",
			"seq": "24,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Senator",
			"label": "senator",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/VMF-155",
			"label": "vmf-155",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/resource/VMF-218",
			"label": "vmf-218",
			"seq": "51,57"
		}]
	},
	{
		"id": "b895b7cc207c4aab8ca0c0bbf388a9a2",
		"question": "How many members are there of the organization headquartered at Amstelveen?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Amstelveen> . ?x <http://dbpedia.org/property/membership> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquartered",
			"seq": "47,59"
		}, {
			"uri": "http://dbpedia.org/property/membership",
			"label": "members",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Amstelveen",
			"label": "amstelveen",
			"seq": "64,73"
		}]
	},
	{
		"id": "1ac63487cbae44b6a9aa9350ab7302de",
		"question": "Does the Ontario International Airport serve the Inland Empire?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Ontario_International_Airport> <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/Inland_Empire> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cityServed",
			"label": "serve",
			"seq": "39,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ontario_International_Airport",
			"label": "international ontario airport",
			"seq": "9,37"
		}, {
			"uri": "http://dbpedia.org/resource/Inland_Empire",
			"label": "inland empire",
			"seq": "49,61"
		}]
	},
	{
		"id": "5f766cb18b93417495ec541e7749269c",
		"question": "Under which scientist did doctoral students erban ieica and Erich Bagge study?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/\u0218erban_\u021ai\u021beica> . ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Erich_Bagge> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "students doctoral",
			"seq": "26,42"
		}, {
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "students doctoral",
			"seq": "26,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/\u0218erban_\u021ai\u021beica",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Erich_Bagge",
			"label": "erich bagge",
			"seq": "60,70"
		}]
	},
	{
		"id": "c34a5952b1a648adbac30cc484fc4092",
		"question": "Who did the associated act which is a Peter Frampton production ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Peter_Frampton> . ?uri <http://dbpedia.org/property/associatedActs> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "production",
			"seq": "53,62"
		}, {
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "associated act",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peter_Frampton",
			"label": "frampton peter",
			"seq": "38,51"
		}]
	},
	{
		"id": "47d731bad7474102bd95407a15b6f410",
		"question": "Give me list of people who were the first to climb a peak in the Yosemite park?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Yosemite_National_Park> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "were",
			"seq": "27,30"
		}, {
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "first",
			"seq": "36,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Yosemite_National_Park",
			"label": "yosemite park",
			"seq": "65,77"
		}]
	},
	{
		"id": "330a20b1b264498c86abcbd8608ab422",
		"question": "Who is the film director of Alice's Wonderland ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alice's_Wonderland> <http://dbpedia.org/ontology/director> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "director",
			"seq": "16,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alice's_Wonderland",
			"label": "wonderland alice's",
			"seq": "28,45"
		}]
	},
	{
		"id": "dbaca158d01d472baadbee2830f573d4",
		"question": "Who is the builder of Estadio Nacional de Costa Rica (2011) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Estadio_Nacional_de_Costa_Rica_(2011)> <http://dbpedia.org/ontology/builder> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "builder",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Estadio_Nacional_de_Costa_Rica_(2011)",
			"label": "nacional estadio (2011) costa",
			"seq": "22,50"
		}]
	},
	{
		"id": "2e30a3d7ccb84d08a52974770eae393f",
		"question": "What is the common award won by Charles LeMaire and Eric Roth",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Eric_Roth> <http://dbpedia.org/ontology/award> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "award",
			"seq": "19,23"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_LeMaire",
			"label": "lemaire charles",
			"seq": "32,46"
		}, {
			"uri": "http://dbpedia.org/resource/Eric_Roth",
			"label": "roth eric",
			"seq": "52,60"
		}]
	},
	{
		"id": "6611d96f0da74bd29467f037c7bc8e9c",
		"question": "Where does the river end which starts in Richmond Park?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Richmond_Park> . ?x <http://dbpedia.org/property/mouthLocation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stream>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourcePlace",
			"label": "park",
			"seq": "50,53"
		}, {
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "starts",
			"seq": "31,36"
		}, {
			"uri": "http://dbpedia.org/ontology/Stream",
			"label": "starts",
			"seq": "31,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Richmond_Park",
			"label": "richmond park",
			"seq": "41,53"
		}]
	},
	{
		"id": "10db28c2f3964aa78fae4f3291f87ec4",
		"question": "Count the number of first drivers in all the GPs where Mika Hakkinen was a first driver?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/poleDriver> <http://dbpedia.org/resource/Mika_H\u00e4kkinen> . ?x <http://dbpedia.org/ontology/firstDriver> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/poleDriver",
			"label": "driver",
			"seq": "26,31"
		}, {
			"uri": "http://dbpedia.org/ontology/firstDriver",
			"label": "driver",
			"seq": "26,31"
		}, {
			"uri": "http://dbpedia.org/ontology/RacingDriver",
			"label": "driver",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mika_H\u00e4kkinen",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fc606b3fc3404643a264ed538a54c5c2",
		"question": "Is the Kia Sportage similar to the Hyundai Lavita?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/relatedMeanOfTransportation> <http://dbpedia.org/resource/Kia_Sportage> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relatedMeanOfTransportation",
			"label": "sportage",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hyundai_Lavita",
			"label": "hyundai lavita",
			"seq": "35,48"
		}, {
			"uri": "http://dbpedia.org/resource/Kia_Sportage",
			"label": "sportage kia",
			"seq": "7,18"
		}]
	},
	{
		"id": "bfffa1add5f64e0285af31cba61b8114",
		"question": "Which river has its roots in Baikal Mountains?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceMountain",
			"label": "mountains",
			"seq": "36,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Baikal_Mountains",
			"label": "mountains baikal",
			"seq": "29,44"
		}]
	},
	{
		"id": "3778cf6328e9432b8c36e0c47ae65f85",
		"question": "How many nations' volleyball players have played for the Russian women volleyball team?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Russia_women's_national_volleyball_team> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "nations'",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "players",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "for",
			"seq": "49,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Russia_women's_national_volleyball_team",
			"label": "volleyball",
			"seq": "18,27"
		}]
	},
	{
		"id": "1db09b3583d54788bc6313956b79499f",
		"question": "Which garrison of East Indies Station is also the route end of Mumbai Vadodara Express ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/East_Indies_Station> <http://dbpedia.org/ontology/garrison> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "route end",
			"seq": "50,58"
		}, {
			"uri": "http://dbpedia.org/ontology/garrison",
			"label": "garrison",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mumbai_Vadodara_Expressway",
			"label": "vadodara express mumbai",
			"seq": "63,85"
		}, {
			"uri": "http://dbpedia.org/resource/East_Indies_Station",
			"label": "station indies",
			"seq": "23,36"
		}]
	},
	{
		"id": "ae2e45495c164835a9538dec49cb3cd3",
		"question": "Name the tiemzone of Banlung ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Banlung> <http://dbpedia.org/ontology/timeZone> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/timeZone",
			"label": "tiemzone",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Banlung",
			"label": "banlung",
			"seq": "21,27"
		}]
	},
	{
		"id": "fccee4f131814d4c999faf99f9c8a641",
		"question": "Who made the engine whose predecessor is the SHO V6?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Ford_SHO_V6_engine> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engine>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "26,36"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "made",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Engine",
			"label": "engine",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_SHO_V6_engine",
			"label": "engine sho",
			"seq": "13,22"
		}]
	},
	{
		"id": "1d52560a0c664dd69770aed6f1cd971b",
		"question": "Does Mauritius follow a parliamentary republic?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mauritius> <http://dbpedia.org/property/governmentType> <http://dbpedia.org/resource/Parliamentary_republic> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governmentType",
			"label": "parliamentary",
			"seq": "24,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mauritius",
			"label": "mauritius",
			"seq": "5,13"
		}, {
			"uri": "http://dbpedia.org/resource/Parliamentary_republic",
			"label": "parliamentary republic",
			"seq": "24,45"
		}]
	},
	{
		"id": "a44318040305431cb237c6809f2a8e7c",
		"question": "In how many places was the album of King Crimson recorded?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/King_Crimson> . ?x <http://dbpedia.org/ontology/recordedIn> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/artist",
			"label": "crimson",
			"seq": "41,47"
		}, {
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded",
			"seq": "49,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/King_Crimson",
			"label": "crimson king",
			"seq": "36,47"
		}]
	},
	{
		"id": "e776aeb7245e4e648fb5d4c4b61dbad6",
		"question": "Which musical artist collaborated with Tony Allen (musician) and label is Victor Entertainment?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Tony_Allen_(musician)> . ?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Victor_Entertainment>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "musical artist",
			"seq": "6,19"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "65,69"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical artist",
			"seq": "6,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tony_Allen_(musician)",
			"label": "(musician)",
			"seq": "50,59"
		}, {
			"uri": "http://dbpedia.org/resource/Victor_Entertainment",
			"label": "entertainment victor",
			"seq": "74,93"
		}]
	},
	{
		"id": "907d667fb8614bfdbc8a5ce883fa99bd",
		"question": "In how many teams have people previously played who play as defencemen?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Defenceman> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/position",
			"label": "in",
			"seq": "0,1"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Defenceman",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fbc34fb8d1464bec93cab57479d2ee9e",
		"question": "What is the total number of regions served by the companies which also serves Australia?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/regionServed> <http://dbpedia.org/resource/Australia> . ?x <http://dbpedia.org/ontology/regionServed> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "regions served",
			"seq": "28,41"
		}, {
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "regions served",
			"seq": "28,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Australia",
			"label": "australia",
			"seq": "78,86"
		}]
	},
	{
		"id": "57f94e194bbf47d2bc8df0b967c56d74",
		"question": "Whose children are married to Fredric Joliot-Curie?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Fr\u00e9d\u00e9ric_Joliot-Curie> . ?uri <http://dbpedia.org/property/children> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "whose",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fr\u00e9d\u00e9ric_Joliot-Curie",
			"label": "joliot-curie",
			"seq": "38,49"
		}]
	},
	{
		"id": "e2ec831eeb1f4e64a787efc386939af6",
		"question": "Count the number of important works done by the writers of The Second Coming?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/The_Second_Coming_(TV_serial)> <http://dbpedia.org/ontology/author> ?x . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "the",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "works",
			"seq": "30,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Second_Coming_(TV_serial)",
			"label": "second coming",
			"seq": "63,75"
		}]
	},
	{
		"id": "b82af01a7505419ea2a82b7f08f96650",
		"question": "Who is the composer of Girl from the North Country ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Girl_from_the_North_Country> <http://dbpedia.org/ontology/composer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composer",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Girl_from_the_North_Country",
			"label": "country north girl from the",
			"seq": "7,33"
		}]
	},
	{
		"id": "ba2effd8c834439e8eaf7dbfdf385fa5",
		"question": "who owns the ship Victoria?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Victoria_(ship)> <http://dbpedia.org/ontology/owner> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owns",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Victoria_(ship)",
			"label": "victoria ship",
			"seq": "13,25"
		}]
	},
	{
		"id": "1c76c6e7767f4aaf90c5a8e69371517f",
		"question": "What is the base currency of the Benelux and is also used as money in Kerguelen Islands?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Benelux> <http://dbpedia.org/property/currency> ?uri. <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currency",
			"label": "currency",
			"seq": "17,24"
		}, {
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currency",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Benelux",
			"label": "benelux",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/resource/Kerguelen_Islands",
			"label": "kerguelen islands",
			"seq": "70,86"
		}]
	},
	{
		"id": "3609e1969825458f81798bea8a86a387",
		"question": "What is the name of Mary's divine child?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Mary_(mother_of_Jesus)>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "what",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mary_(mother_of_Jesus)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6f35f83223854b9685bd0d658725f1a7",
		"question": "List the places where the relatives of Mark Donaldson died ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Mark_Donaldson_(rugby_player)> <http://dbpedia.org/property/relatives> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "places",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mark_Donaldson_(rugby_player)",
			"label": "donaldson mark",
			"seq": "39,52"
		}]
	},
	{
		"id": "69c43006a66746dcaf96ba9e7229912c",
		"question": "Which appointer of the Joseph Clay (Georgia) is also the  President of the William Carmichael (diplomat) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joseph_Clay_(Georgia)> <http://dbpedia.org/ontology/appointer> ?uri. <http://dbpedia.org/resource/William_Carmichael_(diplomat)> <http://dbpedia.org/property/president> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/appointer",
			"label": "appointer",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "58,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joseph_Clay_(Georgia)",
			"label": "(georgia) joseph",
			"seq": "23,38"
		}, {
			"uri": "http://dbpedia.org/resource/William_Carmichael_(diplomat)",
			"label": "carmichael (diplomat) william",
			"seq": "75,103"
		}]
	},
	{
		"id": "44e437e237a94b7abe806fcc1f7ae2e4",
		"question": "Among which sitcoms in which theme music is composed by Gary Portnoy is located in Massachusetts ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Massachusetts> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Gary_Portnoy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "72,78"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "44,51"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "sitcoms",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Massachusetts",
			"label": "massachusetts",
			"seq": "83,95"
		}, {
			"uri": "http://dbpedia.org/resource/Gary_Portnoy",
			"label": "portnoy gary",
			"seq": "56,67"
		}]
	},
	{
		"id": "3dd19cd66683497889c840e33ab0e00d",
		"question": "Over which rivers, does a cable stayed bridge exists?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/design> <http://dbpedia.org/resource/Cable-stayed_bridge> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/design",
			"label": "does",
			"seq": "19,22"
		}, {
			"uri": "http://dbpedia.org/property/crosses",
			"label": "does",
			"seq": "19,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cable-stayed_bridge",
			"label": "stayed bridge cable",
			"seq": "26,44"
		}]
	},
	{
		"id": "3dbc2bb2e2064e068bbd736158623ba3",
		"question": "Give me everything owned by networks which is lead by Steve Burke?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Steve_Burke_(businessman)> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "everything",
			"seq": "8,17"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "networks",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steve_Burke_(businessman)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "471a1edfae9f4e0b86d10cce7f064dd3",
		"question": "Ontario's ice hockey players have been a part of which teams?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Ontario> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/IceHockeyPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "players",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "teams",
			"seq": "55,59"
		}, {
			"uri": "http://dbpedia.org/ontology/IceHockeyPlayer",
			"label": "hockey",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ontario",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a08a81d7bc32418fa69f9ee7611d119c",
		"question": "For which teams did Ryan Powell play for?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ryan_Powell_(lacrosse)> <http://dbpedia.org/ontology/team> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "teams",
			"seq": "10,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ryan_Powell_(lacrosse)",
			"label": "powell ryan",
			"seq": "20,30"
		}]
	},
	{
		"id": "39b773349eeb4776848bd72b621b281a",
		"question": "List the battles in which alumni of US Army Command and General Staff College fought?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/United_States_Army_Command_and_General_Staff_College> . ?x <http://dbpedia.org/property/battles> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "alumni",
			"seq": "26,31"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "battles",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Army_Command_and_General_Staff_College",
			"label": "general command college staff",
			"seq": "44,72"
		}]
	},
	{
		"id": "c0f5e4506a7246bd925820748e927766",
		"question": "Name the military units whose command structure's headquarters is The Pentagon?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/The_Pentagon> . ?uri <http://dbpedia.org/ontology/commandStructure> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "50,61"
		}, {
			"uri": "http://dbpedia.org/ontology/commandStructure",
			"label": "structure's",
			"seq": "38,48"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "military",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Pentagon",
			"label": "pentagon the",
			"seq": "5,16"
		}]
	},
	{
		"id": "928515f8deaa4a1b9982acd9bd90e877",
		"question": "Name the city with leader as Esther Alder and neighboring municipality as Pregny-Chambsy?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Esther_Alder> . ?uri <http://dbpedia.org/ontology/neighboringMunicipality> <http://dbpedia.org/resource/Pregny-Chamb\u00e9sy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mayor",
			"label": "alder",
			"seq": "36,40"
		}, {
			"uri": "http://dbpedia.org/ontology/neighboringMunicipality",
			"label": "municipality neighboring",
			"seq": "46,69"
		}, {
			"uri": "http://dbpedia.org/ontology/Location",
			"label": "and",
			"seq": "42,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Esther_Alder",
			"label": "esther alder",
			"seq": "29,40"
		}, {
			"uri": "http://dbpedia.org/resource/Pregny-Chamb\u00e9sy",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "05514a08a6864dee82dff5c0b774d1cb",
		"question": "What is the mascot of Celal Bayar University ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Celal_Bayar_University> <http://dbpedia.org/property/mascot> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Celal_Bayar_University",
			"label": "university celal bayar",
			"seq": "22,43"
		}]
	},
	{
		"id": "3720fc28f3f94a57bdf95083816cdf8a",
		"question": "List all the mmebers of  Mekong River Commission?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mekong_River_Commission> <http://dbpedia.org/property/membership> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/membership",
			"label": "mmebers",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mekong_River_Commission",
			"label": "commission mekong river",
			"seq": "25,47"
		}]
	},
	{
		"id": "588f69a6c10c4bfca7c6ecf3d36b73f0",
		"question": "What are the academic interests of the advisor of Paul Demiville ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Paul_Demi\u00e9ville> <http://dbpedia.org/ontology/academicAdvisor> ?x . ?x <http://dbpedia.org/property/fields> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicAdvisor",
			"label": "academic advisor",
			"seq": "13,28"
		}, {
			"uri": "http://dbpedia.org/property/fields",
			"label": "interests",
			"seq": "22,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paul_Demi\u00e9ville",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6ded3670f2964a83a919b06c23de2ba6",
		"question": "How many other ingredient are there in the foods whihh have one of the ingredient as Potato ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Potato> . ?x <http://dbpedia.org/ontology/ingredient> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "15,24"
		}, {
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "15,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Potato",
			"label": "potato",
			"seq": "85,90"
		}]
	},
	{
		"id": "2fe30687c5644f9096c50927e10ec2fe",
		"question": "Who is the founder of the trade union which affiliates Amalgamated Association of Iron and Steel Workers?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Amalgamated_Association_of_Iron_and_Steel_Workers> <http://dbpedia.org/ontology/affiliation> ?x . ?x <http://dbpedia.org/property/founded> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TradeUnion>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "affiliates",
			"seq": "44,53"
		}, {
			"uri": "http://dbpedia.org/property/founded",
			"label": "founder",
			"seq": "11,17"
		}, {
			"uri": "http://dbpedia.org/ontology/TradeUnion",
			"label": "union trade",
			"seq": "26,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Amalgamated_Association_of_Iron_and_Steel_Workers",
			"label": "association amalgamated workers",
			"seq": "55,85"
		}]
	},
	{
		"id": "c8578e413e244216a605fd070fa1096b",
		"question": "What royalties's sepulchre is Mausoleum of Augustus?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Mausoleum_of_Augustus> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "sepulchre",
			"seq": "17,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mausoleum_of_Augustus",
			"label": "mausoleum augustus",
			"seq": "30,47"
		}]
	},
	{
		"id": "e670b9053f4948428c08a9c6aa03f7e8",
		"question": "Who are the founders of Iskra ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Iskra> <http://dbpedia.org/ontology/foundedBy> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "founders",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Iskra",
			"label": "iskra",
			"seq": "24,28"
		}]
	},
	{
		"id": "67c9424bca4a4f17b443bab40503c9e8",
		"question": "What is the location country of the bank whose successor is Mauritius Bank ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Mauritius_Bank> . ?x <http://dbpedia.org/property/locationCountry> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "47,55"
		}, {
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "location country",
			"seq": "12,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Bank",
			"label": "bank",
			"seq": "36,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mauritius_Bank",
			"label": "mauritius bank",
			"seq": "36,49"
		}]
	},
	{
		"id": "611a7b738e4741f4af9e5b803c5e3183",
		"question": "Who is the manufacturer of engine of Jeep Forward Control ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Jeep_Forward_Control> <http://dbpedia.org/property/engine> ?x . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/engine",
			"label": "engine",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufacturer",
			"seq": "11,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jeep_Forward_Control",
			"label": "forward control jeep",
			"seq": "37,56"
		}]
	},
	{
		"id": "be173cd13f024163b5777d971acdbe58",
		"question": "What sports are played at Vishwajyot High School?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vishwajyot_High_School> <http://dbpedia.org/ontology/sport> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vishwajyot_High_School",
			"label": "vishwajyot school high",
			"seq": "26,47"
		}]
	},
	{
		"id": "47c0b19e99344c79b588ce726af7b675",
		"question": "Who is the person whose parent is Ptolemy XII Auletes?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ptolemy_XII_Auletes>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parent",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ptolemy_XII_Auletes",
			"label": "ptolemy auletes",
			"seq": "34,48"
		}]
	},
	{
		"id": "e2d4df3f532942f8947a0ead70798b87",
		"question": "How many cars are similar to the ones assembled in the Jefferson North Assembly?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Jefferson_North_Assembly> . ?x <http://dbpedia.org/property/related> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/assembly",
			"label": "assembly",
			"seq": "71,78"
		}, {
			"uri": "http://dbpedia.org/property/related",
			"label": "the",
			"seq": "29,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jefferson_North_Assembly",
			"label": "jefferson assembly",
			"seq": "55,72"
		}]
	},
	{
		"id": "583ab0d388bd4c158b0862155dc190de",
		"question": "What does the river flow into, whose left tributary is Bukovica?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Bukovica_(river)> . ?x <http://dbpedia.org/ontology/mouthCountry> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leftTributary",
			"label": "tributary left",
			"seq": "37,50"
		}, {
			"uri": "http://dbpedia.org/ontology/mouthCountry",
			"label": "tributary",
			"seq": "42,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bukovica_(river)",
			"label": "bukovica river",
			"seq": "14,27"
		}]
	},
	{
		"id": "7804405f8cd849a4acb60cf3df9a287c",
		"question": "Who are in the board of Jimmy Wales ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jimmy_Wales> <http://dbpedia.org/ontology/board> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/board",
			"label": "board",
			"seq": "15,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jimmy_Wales",
			"label": "wales jimmy",
			"seq": "24,34"
		}]
	},
	{
		"id": "e3b7065032d74fe2b8b5956c42315e02",
		"question": "What is the leading party in Baraily which Chandra Shekhar too is associated with?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Baraily> <http://dbpedia.org/ontology/leaderName> ?uri. <http://dbpedia.org/resource/Chandra_Shekhar> <http://dbpedia.org/ontology/otherParty> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "leading",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/otherParty",
			"label": "party",
			"seq": "20,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Baraily",
			"label": "baraily",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/resource/Chandra_Shekhar",
			"label": "shekhar chandra",
			"seq": "43,57"
		}]
	},
	{
		"id": "a4aaefe71b4c47fb82c079c3ec2cf474",
		"question": "which astronaut's mission was Apollo 11?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Apollo_11> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mission",
			"label": "mission",
			"seq": "18,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Apollo_11",
			"label": "apollo 11",
			"seq": "30,38"
		}]
	},
	{
		"id": "76af8656dedf4ec2bf0348b2eddf906b",
		"question": "What came before  PlayStation 4 and uses PlayStation 3 system software as OS?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/PlayStation_4> . ?uri <http://dbpedia.org/property/os> <http://dbpedia.org/resource/PlayStation_3_system_software>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "uses",
			"seq": "36,39"
		}, {
			"uri": "http://dbpedia.org/property/os",
			"label": "os",
			"seq": "74,75"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PlayStation_4",
			"label": "playstation",
			"seq": "18,28"
		}, {
			"uri": "http://dbpedia.org/resource/PlayStation_3_system_software",
			"label": "playstation software system",
			"seq": "18,44"
		}]
	},
	{
		"id": "a789b3608b9a427f9908d49aed80ea50",
		"question": "What are the tenants of Mercedes-Benz Superdome?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mercedes-Benz_Superdome> <http://dbpedia.org/ontology/tenant> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenants",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mercedes-Benz_Superdome",
			"label": "mercedes-benz superdome",
			"seq": "24,46"
		}]
	},
	{
		"id": "70f91098717e416c895d2d98eab6355c",
		"question": "Was elizabeth ann seton beatified by Pope John XXIII?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Elizabeth_Ann_Seton> <http://dbpedia.org/property/beatifiedBy> <http://dbpedia.org/resource/Pope_John_XXIII> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/beatifiedBy",
			"label": "beatified by",
			"seq": "24,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elizabeth_Ann_Seton",
			"label": "elizabeth seton",
			"seq": "4,18"
		}, {
			"uri": "http://dbpedia.org/resource/Pope_John_XXIII",
			"label": "xxiii pope john",
			"seq": "37,51"
		}]
	},
	{
		"id": "1462640075fb4176a9db74b1e76bb1eb",
		"question": "Give me a count of all the producers of all the movies whose music was done by James Horner?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/James_Horner> . ?x <http://dbpedia.org/property/producer> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "61,65"
		}, {
			"uri": "http://dbpedia.org/property/producer",
			"label": "producers",
			"seq": "27,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_Horner",
			"label": "horner james",
			"seq": "79,90"
		}]
	},
	{
		"id": "316b176330564acfb5633baade63b8d7",
		"question": "Name the musical artists whose label is given by Kobalt Label Services?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Kobalt_Label_Services>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "31,35"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kobalt_Label_Services",
			"label": "services kobalt label",
			"seq": "31,51"
		}]
	},
	{
		"id": "19df3475de1a4ac0acb04e6252268f44",
		"question": "Count everyone who was in the military unit which is structured like the Marine Aircraft Group 13 ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/commandStructure> <http://dbpedia.org/resource/Marine_Aircraft_Group_13> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/commandStructure",
			"label": "structured",
			"seq": "53,62"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military unit",
			"seq": "30,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marine_Aircraft_Group_13",
			"label": "aircraft marine group",
			"seq": "73,93"
		}]
	},
	{
		"id": "f848f4e81e654fe4b04988ba7a828da0",
		"question": "Which state does Jerome B. Chaffee belong ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerome_B._Chaffee> <http://dbpedia.org/property/state> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerome_B._Chaffee",
			"label": "chaffee jerome b.",
			"seq": "17,33"
		}]
	},
	{
		"id": "0f029e1473eb473db6af6662d3cb6fa4",
		"question": "List the common sports played by Polytechnic University of the Philippines Bataan and Jamiatu Muslim Mindanao ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_\u2013_Bataan> <http://dbpedia.org/ontology/sport> ?uri. <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/ontology/athletics> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/ontology/athletics",
			"label": "the",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_\u2013_Bataan",
			"label": "polytechnic philippines university bataan",
			"seq": "33,73"
		}, {
			"uri": "http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao",
			"label": "mindanao jamiatu muslim",
			"seq": "86,108"
		}]
	},
	{
		"id": "6dabffad323d44009367b7eaaf220c21",
		"question": "List down all the cast members of Tony n' Tina's Wedding ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tony_n'_Tina's_Wedding> <http://dbpedia.org/property/starring> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "tina's",
			"seq": "42,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tony_n'_Tina's_Wedding",
			"label": "wedding tina's tony n'",
			"seq": "34,55"
		}]
	},
	{
		"id": "ec1040a967d34f71a0082b96d8a3a4a1",
		"question": "Who is the writer of Neverwhere (radio play) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neverwhere_(radio_play)> <http://dbpedia.org/ontology/writer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "writer",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neverwhere_(radio_play)",
			"label": "neverwhere (radio play)",
			"seq": "21,43"
		}]
	},
	{
		"id": "1715062de00d44c4aefdcff294846af4",
		"question": "What is the musical whose music is by Jose Luis Narom,  based upon?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Jos\u00e9_Luis_Narom> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicBy",
			"label": "music",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/basedOn",
			"label": "based",
			"seq": "56,60"
		}, {
			"uri": "http://dbpedia.org/ontology/Musical",
			"label": "musical",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jos\u00e9_Luis_Narom",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "17069693f36e48c2b403ea5ec4def682",
		"question": "List the bacterias whose division is Firmicutes and domain is bacteria?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes> . ?uri <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/division",
			"label": "division",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/property/domain",
			"label": "domain",
			"seq": "52,57"
		}, {
			"uri": "http://dbpedia.org/ontology/Bacteria",
			"label": "bacteria",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Firmicutes",
			"label": "firmicutes",
			"seq": "37,46"
		}, {
			"uri": "http://dbpedia.org/resource/Bacteria",
			"label": "bacteria",
			"seq": "9,16"
		}]
	},
	{
		"id": "5536ce539f2548709a11af855d2ca5c5",
		"question": "How many TV shows' networks are headquarterd in NY?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/New_York> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarterd",
			"seq": "32,43"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "networks",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows'",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "78aa880b91524dc297c804a6d91e1682",
		"question": "What is the university whose affiliations is Graham Holdings Company?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Graham_Holdings_Company>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliations",
			"seq": "29,40"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Graham_Holdings_Company",
			"label": "holdings company graham",
			"seq": "45,67"
		}]
	},
	{
		"id": "f8412d27be264040b18097376e40aa6f",
		"question": "What are some seas inside europe ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Europe>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "what",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "seas",
			"seq": "14,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Europe",
			"label": "europe",
			"seq": "26,31"
		}]
	},
	{
		"id": "30c6fa7e60404d89919aadfe483c66cc",
		"question": "Name the basketball player who played for Phoenix Suns and Los Angeles Clippers was his draft team?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Phoenix_Suns> . ?uri <http://dbpedia.org/property/draftTeam> <http://dbpedia.org/resource/Los_Angeles_Clippers>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "94,97"
		}, {
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "draft team",
			"seq": "88,97"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballPlayer",
			"label": "basketball player",
			"seq": "9,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Phoenix_Suns",
			"label": "phoenix suns",
			"seq": "42,53"
		}, {
			"uri": "http://dbpedia.org/resource/Los_Angeles_Clippers",
			"label": "clippers angeles los",
			"seq": "59,78"
		}]
	},
	{
		"id": "50201a37de8648bb9cce96d0b4df557a",
		"question": "Who are the key people of FWD.us?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/FWD.us> <http://dbpedia.org/property/keyPeople> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people key",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/FWD.us",
			"label": "fwd.us",
			"seq": "26,31"
		}]
	},
	{
		"id": "6780d5fc98994413b8244e37868d361f",
		"question": "What is the birth place of the successor of Ella T. Grasso ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ella_T._Grasso> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "place birth",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ella_T._Grasso",
			"label": "grasso ella",
			"seq": "44,54"
		}]
	},
	{
		"id": "6c76c96b0fa54b84a967935d0fa16694",
		"question": "Where do the politicians, Blanche Bruce and John Franklin Miller work?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blanche_Bruce> <http://dbpedia.org/property/office> ?uri. <http://dbpedia.org/resource/John_Franklin_Miller_(senator)> <http://dbpedia.org/property/office> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/office",
			"label": "bruce",
			"seq": "34,38"
		}, {
			"uri": "http://dbpedia.org/property/office",
			"label": "bruce",
			"seq": "34,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blanche_Bruce",
			"label": "blanche bruce",
			"seq": "26,38"
		}, {
			"uri": "http://dbpedia.org/resource/John_Franklin_Miller_(senator)",
			"label": "franklin miller john",
			"seq": "44,63"
		}]
	},
	{
		"id": "5bf931b59fb94b8c9cf432d2911170df",
		"question": "Which country is the birth place of Marcus Samuelsson and Samuel of Waldebba ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marcus_Samuelsson> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/Samuel_of_Waldebba> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "place birth",
			"seq": "21,31"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "21,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marcus_Samuelsson",
			"label": "samuelsson marcus",
			"seq": "36,52"
		}, {
			"uri": "http://dbpedia.org/resource/Samuel_of_Waldebba",
			"label": "waldebba",
			"seq": "68,75"
		}]
	},
	{
		"id": "3e1f362c96fe4cc592bfd13bfb855659",
		"question": "What is the television show whose executive producer is Steven Peterman?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/executiveProducer> <http://dbpedia.org/resource/Steven_Peterman>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/executiveProducer",
			"label": "executive producer",
			"seq": "34,51"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steven_Peterman",
			"label": "peterman steven",
			"seq": "56,70"
		}]
	},
	{
		"id": "87a4b9a543cc448e89f2ed926a6144e1",
		"question": "Which river's source place is Gloucestershire and mouth in North Sea?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Gloucestershire> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/North_Sea>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourcePlace",
			"label": "source place",
			"seq": "14,25"
		}, {
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "mouth",
			"seq": "50,54"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river's",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gloucestershire",
			"label": "gloucestershire",
			"seq": "30,44"
		}, {
			"uri": "http://dbpedia.org/resource/North_Sea",
			"label": "north sea",
			"seq": "59,67"
		}]
	},
	{
		"id": "f49d08f78f3a4c64a3963126cb43d7e9",
		"question": "What region was Gloria Schaffer born in, which also contains Newington?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gloria_Schaffer> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/Newington,_Connecticut> <http://dbpedia.org/ontology/isPartOf> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "what",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/isPartOf",
			"label": "schaffer",
			"seq": "23,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gloria_Schaffer",
			"label": "schaffer gloria",
			"seq": "16,30"
		}, {
			"uri": "http://dbpedia.org/resource/Newington,_Connecticut",
			"label": "newington",
			"seq": "61,69"
		}]
	},
	{
		"id": "169a1ce1f8ac4c5ba9a92103237113c6",
		"question": "which award has been won by Claudia Moro?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Claudia_Moro> <http://dbpedia.org/property/title> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/title",
			"label": "been",
			"seq": "16,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Claudia_Moro",
			"label": "claudia moro",
			"seq": "28,39"
		}]
	},
	{
		"id": "0f2e35e2a21b45d1a22ba4c50b76c832",
		"question": "How many schools have a bison as their mascot?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Bison>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "39,44"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bison",
			"label": "bison",
			"seq": "24,28"
		}]
	},
	{
		"id": "311bb63ae12d4dd999e195d827cf60d2",
		"question": "Where was Henri, Duke of Rohan laid to rest?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> <http://dbpedia.org/ontology/placeOfBurial> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/placeOfBurial",
			"label": "laid",
			"seq": "31,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henri,_Duke_of_Rohan",
			"label": "henri, rohan duke",
			"seq": "10,26"
		}]
	},
	{
		"id": "cb7ccfb1dddd4933883fb1176660d821",
		"question": "Which institution of the Alton Ochsner is also the alma mater of John Michael Seabright ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alton_Ochsner> <http://dbpedia.org/ontology/institution> ?uri. <http://dbpedia.org/resource/John_Michael_Seabright> <http://dbpedia.org/ontology/almaMater> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "institution",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "51,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alton_Ochsner",
			"label": "ochsner alton",
			"seq": "25,37"
		}, {
			"uri": "http://dbpedia.org/resource/John_Michael_Seabright",
			"label": "seabright michael",
			"seq": "70,86"
		}]
	},
	{
		"id": "176d35f9dad648dea853a6c7b831c5c9",
		"question": "Who did the person whose predecessor is Arthur Slaght, play for?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Arthur_Slaght> . ?x <http://dbpedia.org/property/playedFor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "25,35"
		}, {
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "play",
			"seq": "55,58"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arthur_Slaght",
			"label": "arthur",
			"seq": "40,45"
		}]
	},
	{
		"id": "363f13c9bc2242038c131f095d4c866d",
		"question": "Does the lena river flow into the Laptev Sea?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Lena_River> <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Laptev_Sea> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthMountain",
			"label": "the",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lena_River",
			"label": "river lena",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/resource/Laptev_Sea",
			"label": "laptev sea",
			"seq": "34,43"
		}]
	},
	{
		"id": "1c8b342278e246f6a44fa8f398c21094",
		"question": "How many ideologies do the political party of Boonchu Rojanastien hold?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Boonchu_Rojanastien> <http://dbpedia.org/property/party> ?x . ?x <http://dbpedia.org/ontology/ideology> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "37,41"
		}, {
			"uri": "http://dbpedia.org/ontology/ideology",
			"label": "ideologies",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/PoliticalParty",
			"label": "political party",
			"seq": "27,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Boonchu_Rojanastien",
			"label": "rojanastien boonchu",
			"seq": "46,64"
		}]
	},
	{
		"id": "3227b935ac2943ed9f5433d7109f816f",
		"question": "Who owns a bridge in Boston?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Boston> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "boston",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owns",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridge",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Boston",
			"label": "boston",
			"seq": "21,26"
		}]
	},
	{
		"id": "97c00c9886914a6ea5d5a811a4e1b225",
		"question": "Count the different types of Flatbread ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Flatbread>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/type",
			"label": "types",
			"seq": "20,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Flatbread",
			"label": "flatbread",
			"seq": "29,37"
		}]
	},
	{
		"id": "543d46f942c04924bcee5a4c54543c6b",
		"question": "Who is married to Gerard Piqu?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Gerard_Piqu\u00e9>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/partner",
			"label": "married",
			"seq": "7,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gerard_Piqu\u00e9",
			"label": "gerard piqu",
			"seq": "18,28"
		}]
	},
	{
		"id": "a2f49798a84244cd9bf1dd675795ccb7",
		"question": "Which city near to Elliott Bay was the death place of George F. Moore ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elliott_Bay> <http://dbpedia.org/ontology/nearestCity> ?uri. <http://dbpedia.org/resource/George_F._Moore_(lieutenant_governor)> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "near city",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "place death",
			"seq": "39,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elliott_Bay",
			"label": "elliott bay",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/resource/George_F._Moore_(lieutenant_governor)",
			"label": "george moore",
			"seq": "54,65"
		}]
	},
	{
		"id": "5aa02b6827bf4e9590a49a469b64904a",
		"question": "List the things for which people of New Orleans are famous for?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/New_Orleans> . ?x <http://dbpedia.org/property/knownFor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "list",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "for",
			"seq": "16,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_Orleans",
			"label": "orleans",
			"seq": "40,46"
		}]
	},
	{
		"id": "2165408d4ec94d15a8cd6d639dffcfdc",
		"question": "The Other Side has hosted how many guests?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/The_Other_Side_(The_Outer_Limits)> <http://dbpedia.org/property/guests> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/guests",
			"label": "guests",
			"seq": "35,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Other_Side_(The_Outer_Limits)",
			"label": "other",
			"seq": "4,8"
		}]
	},
	{
		"id": "96c1a8fa851c4e83b2444ba219f5352b",
		"question": "What is the deathplace of the rugby player who is the relatives of Anton Oliver ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Anton_Oliver> <http://dbpedia.org/property/relatives> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "54,62"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "deathplace",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anton_Oliver",
			"label": "oliver anton",
			"seq": "67,78"
		}]
	},
	{
		"id": "73ba87c4b9fb40ee968f00a20022e04f",
		"question": "Who have children named James Roosevelt and Franklin Delano Roosevelt, Jr.?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/James_Roosevelt> . ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Franklin_Delano_Roosevelt,_Jr.> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_Roosevelt",
			"label": "roosevelt",
			"seq": "30,38"
		}, {
			"uri": "http://dbpedia.org/resource/Franklin_Delano_Roosevelt,_Jr.",
			"label": "roosevelt, franklin delano",
			"seq": "44,69"
		}]
	},
	{
		"id": "9195104b821e430d93b815182ea75c44",
		"question": "Which scientist advised a doctoral student named Erban Ieica?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/\u0218erban_\u021ai\u021beica>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "doctoral student",
			"seq": "26,41"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/\u0218erban_\u021ai\u021beica",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "64641fa005c74f08b24a64c47b15f3be",
		"question": "Which artist was taught by Jos Ruiz y Blasco?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/training> <http://dbpedia.org/resource/Jos\u00e9_Ruiz_y_Blasco>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/training",
			"label": "taught",
			"seq": "17,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artist",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jos\u00e9_Ruiz_y_Blasco",
			"label": "blasco ruiz jos",
			"seq": "27,41"
		}]
	},
	{
		"id": "c84631401cb74a8483377f954e5989cd",
		"question": "What are the houses of the Parliament Security Services and Parliament of India ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Parliament_Security_Services> <http://dbpedia.org/property/houses> ?uri. <http://dbpedia.org/resource/Parliament_of_India> <http://dbpedia.org/property/houses> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/houses",
			"label": "houses",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/property/houses",
			"label": "houses",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Parliament_Security_Services",
			"label": "parliament services security",
			"seq": "27,54"
		}, {
			"uri": "http://dbpedia.org/resource/Parliament_of_India",
			"label": "parliament india",
			"seq": "27,42"
		}]
	},
	{
		"id": "7e2d4902f5374b70b03c59179b9e2ac1",
		"question": "Was Zachary taylor a major general?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Zachary_Taylor> <http://dbpedia.org/property/rank> <http://dbpedia.org/resource/Major_general_(United_States)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/rank",
			"label": "a",
			"seq": "1,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zachary_Taylor",
			"label": "zachary taylor",
			"seq": "4,17"
		}, {
			"uri": "http://dbpedia.org/resource/Major_general_(United_States)",
			"label": "general major",
			"seq": "21,33"
		}]
	},
	{
		"id": "2874d474d7134582be3c5ad5c4600b92",
		"question": "For which team did both Butch Metzger and Brian Horwitz debuted ? ",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Butch_Metzger> <http://dbpedia.org/ontology/debutTeam> ?uri. <http://dbpedia.org/resource/Brian_Horwitz> <http://dbpedia.org/ontology/debutTeam> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debuted",
			"seq": "56,62"
		}, {
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debuted",
			"seq": "56,62"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Butch_Metzger",
			"label": "metzger butch",
			"seq": "24,36"
		}, {
			"uri": "http://dbpedia.org/resource/Brian_Horwitz",
			"label": "horwitz brian",
			"seq": "42,54"
		}]
	},
	{
		"id": "7c500d33868d4336a446b69df7d357c0",
		"question": "Name the TV shows with network as NBC and company as Paramount Television ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/NBC> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "63,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/NBC",
			"label": "nbc",
			"seq": "34,36"
		}, {
			"uri": "http://dbpedia.org/resource/Paramount_Television",
			"label": "television paramount",
			"seq": "53,72"
		}]
	},
	{
		"id": "5cc4f7f24686439c9c74aa24e81b5414",
		"question": "Who has composed songs produced by Terry Melcher?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Terry_Melcher> . ?x <http://dbpedia.org/ontology/composer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "produced",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composed",
			"seq": "8,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Song",
			"label": "songs",
			"seq": "17,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Terry_Melcher",
			"label": "melcher terry",
			"seq": "35,47"
		}]
	},
	{
		"id": "60f077d104bb416caff97689ba8b4506",
		"question": "List down the cinematographers of Mickey's Mellerdrammer?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mickey's_Mellerdrammer> <http://dbpedia.org/property/cinematography> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cinematography",
			"label": "cinematographers",
			"seq": "14,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mickey's_Mellerdrammer",
			"label": "mellerdrammer mickey's",
			"seq": "34,55"
		}]
	},
	{
		"id": "8b827358accc43048f434244318b58c5",
		"question": "Which country's people have graduated from Ghana School of Law?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Ghana_School_of_Law> . ?x <http://dbpedia.org/ontology/nationality> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "graduated",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "country's",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ghana_School_of_Law",
			"label": "school ghana law",
			"seq": "43,58"
		}]
	},
	{
		"id": "37f1ac3a34a64c90ab93ffe69af727ca",
		"question": "What awards have been given to the dude who made Shaun the Sheep?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/notableworks> <http://dbpedia.org/resource/Shaun_the_Sheep> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "awards",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "been",
			"seq": "17,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shaun_the_Sheep",
			"label": "sheep shaun the",
			"seq": "31,45"
		}]
	},
	{
		"id": "aab7be38505a4ecdb2689be99d9d9de4",
		"question": "Where is  Dofinivka Estuary  located ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dofinivka_Estuary> <http://dbpedia.org/property/location> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "29,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dofinivka_Estuary",
			"label": "dofinivka estuary",
			"seq": "10,26"
		}]
	},
	{
		"id": "dcb880946a53419fbc8f9ae1d09a35be",
		"question": "Bridge that starts at Seberang Perai crosses over what?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/routeStart> <http://dbpedia.org/resource/Seberang_Perai> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "starts",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/property/crosses",
			"label": "crosses",
			"seq": "37,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Seberang_Perai",
			"label": "seberang perai",
			"seq": "22,35"
		}]
	},
	{
		"id": "3a4fadbc37434b5fb38032e9e21e5a9e",
		"question": "Where was the deadbody discovered of one of the alumni of General Educational Development?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/General_Educational_Development> . ?x <http://dbpedia.org/property/bodyDiscovered> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "educational",
			"seq": "66,76"
		}, {
			"uri": "http://dbpedia.org/property/bodyDiscovered",
			"label": "discovered",
			"seq": "23,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/General_Educational_Development",
			"label": "educational development general",
			"seq": "58,88"
		}]
	},
	{
		"id": "cf9cd4c9f5d64639ac21b712b3ead2e4",
		"question": "To which senator did military unit VMF-155 belong?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-155>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military unit",
			"seq": "21,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Senator",
			"label": "senator",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/VMF-155",
			"label": "vmf-155",
			"seq": "35,41"
		}]
	},
	{
		"id": "b063dd30941243b2836623934589c121",
		"question": "What awards did Jos Rivera (playwright) win?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jos\u00e9_Rivera_(playwright)> <http://dbpedia.org/property/awards> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jos\u00e9_Rivera_(playwright)",
			"label": "(playwright) rivera jos",
			"seq": "16,38"
		}]
	},
	{
		"id": "1ec578b785684d0cbde64684ee3c7fbf",
		"question": "Who discovered Callisto ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Callisto_(moon)> <http://dbpedia.org/ontology/discoverer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/discoverer",
			"label": "discovered",
			"seq": "4,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Callisto_(moon)",
			"label": "callisto",
			"seq": "15,22"
		}]
	},
	{
		"id": "ef36454fc013444f981fe8a7069ceee8",
		"question": "Does Shaun Thong a member of Audi?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Shaun_Thong> <http://dbpedia.org/property/currentTeam> <http://dbpedia.org/resource/Audi> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentTeam",
			"label": "a",
			"seq": "7,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shaun_Thong",
			"label": "thong shaun",
			"seq": "5,15"
		}, {
			"uri": "http://dbpedia.org/resource/Audi",
			"label": "audi",
			"seq": "29,32"
		}]
	},
	{
		"id": "c6d4e596834546d09a59e92ba09dc966",
		"question": "Give me a list of computers whose CPU is in the US.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/locationCity> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/ontology/cpu> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCity",
			"label": "list",
			"seq": "10,13"
		}, {
			"uri": "http://dbpedia.org/ontology/cpu",
			"label": "cpu",
			"seq": "34,36"
		}, {
			"uri": "http://dbpedia.org/ontology/InformationAppliance",
			"label": "me",
			"seq": "5,6"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fe996e9ac1574a1aa94ab07621bcc9f4",
		"question": "Which musical artist associated with Tony Allen has label with Celluloid Records ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Tony_Allen_(musician)> . ?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated musical artist",
			"seq": "6,30"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "52,56"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical artist",
			"seq": "6,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tony_Allen_(musician)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Celluloid_Records",
			"label": "celluloid records",
			"seq": "63,79"
		}]
	},
	{
		"id": "01b888b9a2c541569160d22ed502b036",
		"question": "Whose labels are Victor Entertainment and Celluloid Records?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Victor_Entertainment> . ?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "labels",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "labels",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Victor_Entertainment",
			"label": "entertainment victor",
			"seq": "17,36"
		}, {
			"uri": "http://dbpedia.org/resource/Celluloid_Records",
			"label": "celluloid records",
			"seq": "42,58"
		}]
	},
	{
		"id": "e65463440f1f4b59b6d0163ad10c490e",
		"question": "Where does the river end, into which the Rakitnica flows?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Rakitnica> . ?x <http://dbpedia.org/ontology/mouthCountry> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/rightTributary",
			"label": "river",
			"seq": "15,19"
		}, {
			"uri": "http://dbpedia.org/ontology/mouthCountry",
			"label": "the",
			"seq": "11,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rakitnica",
			"label": "rakitnica",
			"seq": "41,49"
		}]
	},
	{
		"id": "1f6fd444f7bb47f3a2d9b177207bd93b",
		"question": "Where is the tombstone of the parliament members who served with James Roberts as the Vice President, US?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/James_Roberts_(trade_unionist)> . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MemberOfParliament>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/vicePresident",
			"label": "president,",
			"seq": "91,100"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "president,",
			"seq": "91,100"
		}, {
			"uri": "http://dbpedia.org/ontology/MemberOfParliament",
			"label": "parliament",
			"seq": "30,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_Roberts_(trade_unionist)",
			"label": "roberts",
			"seq": "71,77"
		}]
	},
	{
		"id": "b4b6b1d0dcab4cbb934923e070092d67",
		"question": "Do the west coast airlines fly to seattle?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/West_Coast_Airlines> <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Seattle> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/targetAirport",
			"label": "seattle",
			"seq": "34,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/West_Coast_Airlines",
			"label": "airlines coast west",
			"seq": "7,25"
		}, {
			"uri": "http://dbpedia.org/resource/Seattle",
			"label": "seattle",
			"seq": "34,40"
		}]
	},
	{
		"id": "333d5cd5059b45d3962c5df06c13b5a8",
		"question": "Which school teams are there in schools of Arlington Heights, Illinois?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Arlington_Heights,_Illinois> . ?x <http://dbpedia.org/property/teamName> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "in",
			"seq": "29,30"
		}, {
			"uri": "http://dbpedia.org/property/teamName",
			"label": "teams",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "school",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arlington_Heights,_Illinois",
			"label": "arlington illinois heights,",
			"seq": "43,69"
		}]
	},
	{
		"id": "ec0ca62208e240c396994de301d25f2b",
		"question": "Who was the silver medalist of Gymnastics at the 2008 Summer Olympics  Women's artistic individual all-around ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gymnastics_at_the_2008_Summer_Olympics_\u2013_Women's_artistic_individual_all-around> <http://dbpedia.org/ontology/silverMedalist> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/silverMedalist",
			"label": "medalist silver",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gymnastics_at_the_2008_Summer_Olympics_\u2013_Women's_artistic_individual_all-around",
			"label": "individual gymnastics all-around olympics artistic",
			"seq": "31,80"
		}]
	},
	{
		"id": "5c3207ee849d4e9cb44f0ee1d698b602",
		"question": "Who  works  at the American Magazine and New York Post?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/The_American_Magazine> . ?uri <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/New_York_Post> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "american",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "american",
			"seq": "19,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_American_Magazine",
			"label": "magazine american the",
			"seq": "15,35"
		}, {
			"uri": "http://dbpedia.org/resource/New_York_Post",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "5f0af10a644a420ebcd9811b94687f7d",
		"question": "Which past members of the The Conglomerate (American group) also sang Take Me There (Blackstreet & Ma song)?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Conglomerate_(American_group)> <http://dbpedia.org/property/pastMembers> ?uri. <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)> <http://dbpedia.org/ontology/musicalBand> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "members past",
			"seq": "6,17"
		}, {
			"uri": "http://dbpedia.org/ontology/musicalBand",
			"label": "(american",
			"seq": "43,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Conglomerate_(American_group)",
			"label": "conglomerate (american group)",
			"seq": "30,58"
		}, {
			"uri": "http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)",
			"label": "(blackstreet",
			"seq": "84,95"
		}]
	},
	{
		"id": "829a21985c7e487794927252d84f61ea",
		"question": "List the academic discipline of the journals whose publisher is SAGE Publications.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/SAGE_Publications> . ?x <http://dbpedia.org/ontology/academicDiscipline> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/publisher",
			"label": "publisher",
			"seq": "51,59"
		}, {
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "discipline academic",
			"seq": "9,27"
		}, {
			"uri": "http://dbpedia.org/ontology/AcademicJournal",
			"label": "academic",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/SAGE_Publications",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7f55bf607c9e490aae4ff2f9f40a27e2",
		"question": "Collaborators of Demis Roussos have composed music for which movies?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Demis_Roussos> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "movies",
			"seq": "61,66"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composed",
			"seq": "36,43"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "14,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Demis_Roussos",
			"label": "roussos demis",
			"seq": "17,29"
		}]
	},
	{
		"id": "66e01d57a2df4c9f85521c5217cd6e8b",
		"question": "Who is the producer of  Frampton's Camel ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frampton's_Camel> <http://dbpedia.org/property/producer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "producer",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frampton's_Camel",
			"label": "frampton's camel",
			"seq": "24,39"
		}]
	},
	{
		"id": "77ff380ac54845299a3af128262d754e",
		"question": "Who founded the city at the end of the Pittsburgh Line route?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Pittsburgh_Line> <http://dbpedia.org/ontology/routeEnd> ?x . ?x <http://dbpedia.org/ontology/founder> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "route end",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founded",
			"seq": "4,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pittsburgh_Line",
			"label": "pittsburgh line",
			"seq": "39,53"
		}]
	},
	{
		"id": "ab9baa98e6fb4a059714923fda2f04d5",
		"question": "How many developers were involved in creating games whose score is composed by Gerard Marino?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composed",
			"seq": "67,74"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developers",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gerard_Marino",
			"label": "marino gerard",
			"seq": "79,91"
		}]
	},
	{
		"id": "2130571cb0394b1b82ad2a8c6f4f159f",
		"question": "Where did these popular aeroplanes - Focke Wulf 260 and Start+Flug H 101 originate?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Focke-Wulf_Fw_260> <http://dbpedia.org/property/nationalOrigin> ?uri. <http://dbpedia.org/resource/Start_+_Flug_H-101> <http://dbpedia.org/property/nationalOrigin> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalOrigin",
			"label": "originate",
			"seq": "73,81"
		}, {
			"uri": "http://dbpedia.org/property/nationalOrigin",
			"label": "originate",
			"seq": "73,81"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Focke-Wulf_Fw_260",
			"label": "focke wulf 260",
			"seq": "37,50"
		}, {
			"uri": "http://dbpedia.org/resource/Start_+_Flug_H-101",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "da0c3ca5edfb4bad9ef869c38119a10e",
		"question": "Which source of river Raa is the sovereign state of Adriatic sea ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ra\u0161a_(river)> <http://dbpedia.org/ontology/source> ?uri. <http://dbpedia.org/resource/Adriatic_Sea> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/source",
			"label": "source",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "source",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ra\u0161a_(river)",
			"label": "river",
			"seq": "16,20"
		}, {
			"uri": "http://dbpedia.org/resource/Adriatic_Sea",
			"label": "adriatic sea",
			"seq": "52,63"
		}]
	},
	{
		"id": "7929405db86045639c914a7ee9838ebe",
		"question": "Count the key people of the Clinton Foundation?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/property/keyPeople> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people key",
			"seq": "10,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Clinton_Foundation",
			"label": "foundation clinton",
			"seq": "28,45"
		}]
	},
	{
		"id": "dcf0ebac4929414587aae36086a4e6e1",
		"question": "Give me someone on the board of trinity house?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Trinity_House>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/board",
			"label": "board",
			"seq": "23,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Trinity_House",
			"label": "trinity house",
			"seq": "32,44"
		}]
	},
	{
		"id": "b4c8a3b66e0e4e5f84d3b105133a1a76",
		"question": "Count  the journals in the field of Philosophy.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/discipline> <http://dbpedia.org/resource/Philosophy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/discipline",
			"label": "in",
			"seq": "20,21"
		}, {
			"uri": "http://dbpedia.org/ontology/AcademicJournal",
			"label": "journals",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Philosophy",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f0b3be48f76141be802e4a2acc00e427",
		"question": "Which former team of the Harry Parker (baseball) is the  debut team of the Carl Sitton?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Harry_Parker_(baseball)> <http://dbpedia.org/ontology/formerTeam> ?uri. <http://dbpedia.org/resource/Carl_Sitton> <http://dbpedia.org/property/debutteam> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former team",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut team",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harry_Parker_(baseball)",
			"label": "(baseball) parker harry",
			"seq": "25,47"
		}, {
			"uri": "http://dbpedia.org/resource/Carl_Sitton",
			"label": "sitton carl",
			"seq": "75,85"
		}]
	},
	{
		"id": "8989b26f786b4644a8bd2c8d966c59a7",
		"question": "Who designed the bridge over the Valaichchenai lagoon?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/crosses> <http://dbpedia.org/resource/Valaichchenai_Lagoon> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/crosses",
			"label": "over",
			"seq": "24,27"
		}, {
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridge",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Valaichchenai_Lagoon",
			"label": "valaichchenai lagoon",
			"seq": "33,52"
		}]
	},
	{
		"id": "a82a76ab3a4e43b4b970a48f9341fa82",
		"question": "List all the artist of the TV shows which has McClain as one of the artist ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/McClain_(band)> . ?x <http://dbpedia.org/property/artist> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "30,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/McClain_(band)",
			"label": "mcclain",
			"seq": "46,52"
		}]
	},
	{
		"id": "8a6304978223453caa7f58e579290646",
		"question": "Which fictional character is portrayed by Roger Barton (film editor)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/portrayer> <http://dbpedia.org/resource/Roger_Barton_(film_editor)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/portrayer",
			"label": "portrayed",
			"seq": "29,37"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "6,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Roger_Barton_(film_editor)",
			"label": "editor) barton roger (film",
			"seq": "42,67"
		}]
	},
	{
		"id": "0cd31fba24c240f588c0916b021f4d63",
		"question": "Where did the film director of Kala Pani die?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Kala_Pani_(1958_film)> <http://dbpedia.org/ontology/director> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "director",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kala_Pani_(1958_film)",
			"label": "pani kala film",
			"seq": "14,27"
		}]
	},
	{
		"id": "18e1b907a21644199bcf31fb9629f79c",
		"question": "Does Timothy Morton study Buddhism?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Timothy_Morton> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Buddhism> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "morton",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Timothy_Morton",
			"label": "timothy morton",
			"seq": "5,18"
		}, {
			"uri": "http://dbpedia.org/resource/Buddhism",
			"label": "buddhism",
			"seq": "26,33"
		}]
	},
	{
		"id": "81ced9f9e10b4380a691a73a17095c6e",
		"question": "Name a queen whose parent is Ptolemy XII Auletes and consort is Ptolemy XIII Theos Philopator?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ptolemy_XII_Auletes> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parent",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/property/spouse",
			"label": "whose",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "auletes",
			"seq": "41,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ptolemy_XII_Auletes",
			"label": "ptolemy auletes",
			"seq": "29,43"
		}, {
			"uri": "http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator",
			"label": "philopator ptolemy theos",
			"seq": "29,52"
		}]
	},
	{
		"id": "c3fb5965d89548719ebf83511d9e262a",
		"question": "Which universit's affiliation is with Kalpan, Inc. and has campus at Iowa ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.> . ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Iowa>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliation",
			"seq": "18,28"
		}, {
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "campus",
			"seq": "59,64"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universit's",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kaplan,_Inc.",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Iowa",
			"label": "iowa",
			"seq": "69,72"
		}]
	},
	{
		"id": "14b649e758114f038de6c1dad6027728",
		"question": "Name the nearest city to the historic place which has Englewood, Colorado as one of them ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/nearestCity> <http://dbpedia.org/resource/Englewood,_Colorado> . ?x <http://dbpedia.org/ontology/nearestCity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HistoricPlace>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nearestCity",
			"label": "nearest city",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "nearest city",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/ontology/HistoricPlace",
			"label": "historic place",
			"seq": "29,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Englewood,_Colorado",
			"label": "englewood, colorado",
			"seq": "54,72"
		}]
	},
	{
		"id": "b4a89e8c9b55499eaa9963fe4b9d6152",
		"question": "Which movies have someone on their cast from Shelby County in Tennessee?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Shelby_County,_Tennessee> . ?uri <http://dbpedia.org/property/starring> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "someone",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "in",
			"seq": "59,60"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "from",
			"seq": "40,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shelby_County,_Tennessee",
			"label": "tennessee shelby county",
			"seq": "45,67"
		}]
	},
	{
		"id": "91aee5e1ffe6462bac764925234764de",
		"question": "Which area operataed by the South Side Elevated Railroad is also the palce of death of the Sakari Suzuki ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Sakari_Suzuki> <http://dbpedia.org/property/deathPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operataed",
			"seq": "11,19"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "death",
			"seq": "78,82"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Side_Elevated_Railroad",
			"label": "railroad elevated",
			"seq": "39,55"
		}, {
			"uri": "http://dbpedia.org/resource/Sakari_Suzuki",
			"label": "suzuki sakari",
			"seq": "91,103"
		}]
	},
	{
		"id": "1a7b4ab5c3674875a82e577a3fcb3a55",
		"question": "Which venues are located at places governed by John Roberts?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/John_Roberts> . ?uri <http://dbpedia.org/property/address> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Venue>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "places",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/property/address",
			"label": "are",
			"seq": "13,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Venue",
			"label": "venues",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Roberts",
			"label": "roberts john",
			"seq": "47,58"
		}]
	},
	{
		"id": "7abaec31e6094f6eac72313b8dd8dc32",
		"question": "How many people are in the continental army?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Continental_Army>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "many",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Continental_Army",
			"label": "continental army",
			"seq": "27,42"
		}]
	},
	{
		"id": "6a4481eea53441dd93ec930653e08be0",
		"question": "List all the former partners of the figure skater whose one of the former partner was Andrea poapst ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/formerPartner> <http://dbpedia.org/resource/Andrea_Poapst> . ?x <http://dbpedia.org/ontology/formerPartner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FigureSkater>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerPartner",
			"label": "partner",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/formerPartner",
			"label": "partner",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/FigureSkater",
			"label": "skater figure",
			"seq": "36,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Andrea_Poapst",
			"label": "poapst andrea",
			"seq": "86,98"
		}]
	},
	{
		"id": "98ad740059cf4598828aa46f80707524",
		"question": "What river originates in the Connecticut Lakes?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Connecticut_Lakes>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/source",
			"label": "originates",
			"seq": "11,20"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Connecticut_Lakes",
			"label": "connecticut lakes",
			"seq": "29,45"
		}]
	},
	{
		"id": "9463f20554d74722b20e3d92a0afb024",
		"question": "Which band made the song Take me There, and has collaborated with Blayse in the past?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)> <http://dbpedia.org/ontology/musicalBand> ?uri. <http://dbpedia.org/resource/Blayse> <http://dbpedia.org/ontology/associatedBand> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalBand",
			"label": "band",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "band",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Blayse",
			"label": "blayse",
			"seq": "66,71"
		}]
	},
	{
		"id": "602d5f8103c345b1bf3b59a8f4fbcb01",
		"question": "How many things are aired on BBC HD?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/network",
			"label": "on",
			"seq": "26,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC_HD",
			"label": "bbc hd",
			"seq": "29,34"
		}]
	},
	{
		"id": "b8635fcc40054be7ab13c01967f64197",
		"question": "How many have order (taxonomy) as Bacillales and division as Firmicutes are there?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/order",
			"label": "order",
			"seq": "14,18"
		}, {
			"uri": "http://dbpedia.org/ontology/division",
			"label": "division",
			"seq": "49,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bacillales",
			"label": "bacillales",
			"seq": "34,43"
		}, {
			"uri": "http://dbpedia.org/resource/Firmicutes",
			"label": "firmicutes",
			"seq": "61,70"
		}]
	},
	{
		"id": "010e9f9ec10d4cf5bd9455353215d507",
		"question": "In which countries are there banks which came after the National Commercial Bank of Mauritius?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/National_Commercial_Bank_Mauritius> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/locationCountry> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "countries",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "countries",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Bank",
			"label": "bank",
			"seq": "29,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Commercial_Bank_Mauritius",
			"label": "commercial mauritius national",
			"seq": "56,84"
		}]
	},
	{
		"id": "f7ac133498534de782ec5fb02ef8a8f2",
		"question": "How many have company as Paramount Television and network as NBC are there?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/NBC> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network",
			"seq": "50,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paramount_Television",
			"label": "television paramount",
			"seq": "25,44"
		}, {
			"uri": "http://dbpedia.org/resource/NBC",
			"label": "nbc",
			"seq": "61,63"
		}]
	},
	{
		"id": "d73d838df73b44d0a6ddab13ae678fc9",
		"question": "What is the birthplace of the office holder who is the predecessor of Brian Peddle ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Brian_Peddle> <http://dbpedia.org/property/predecessor> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "55,65"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "birthplace",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "30,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brian_Peddle",
			"label": "peddle brian",
			"seq": "70,81"
		}]
	},
	{
		"id": "86f65bd1385144dfb07dd940f6dc77de",
		"question": "What is the hometown of John Speraw ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Speraw> <http://dbpedia.org/property/hometown> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hometown",
			"label": "hometown",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Speraw",
			"label": "speraw john",
			"seq": "24,34"
		}]
	},
	{
		"id": "53ffec1f77474312b866a1ef550836ec",
		"question": "What is the affiliation of Vanderbilt University Medical Center ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vanderbilt_University_Medical_Center> <http://dbpedia.org/property/affiliation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliation",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vanderbilt_University_Medical_Center",
			"label": "vanderbilt university medical center",
			"seq": "27,62"
		}]
	},
	{
		"id": "9a35da4952d244529b72c489a452b9d1",
		"question": "Which awards has been given to both michel hazanavicius and geoffrey rush?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michel_Hazanavicius> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Geoffrey_Rush> <http://dbpedia.org/property/awards> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michel_Hazanavicius",
			"label": "hazanavicius michel",
			"seq": "36,54"
		}, {
			"uri": "http://dbpedia.org/resource/Geoffrey_Rush",
			"label": "geoffrey rush",
			"seq": "60,72"
		}]
	},
	{
		"id": "9f0073c478fd4bf6a6bc808734ee4d21",
		"question": "What is the mascot of the rival school of Sullivan Central High?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Sullivan_Central_High_School> <http://dbpedia.org/property/rival> ?x . ?x <http://dbpedia.org/property/mascot> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/rival",
			"label": "rival",
			"seq": "26,30"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sullivan_Central_High_School",
			"label": "sullivan central school high",
			"seq": "32,59"
		}]
	},
	{
		"id": "5a15996c69764d78950ee50018ff8de5",
		"question": "Which Paramount TV show was produced by Glen and Les Charles ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Glen_and_Les_Charles> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "produced",
			"seq": "28,35"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "and",
			"seq": "45,47"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "19,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Glen_and_Les_Charles",
			"label": "charles glen and",
			"seq": "40,55"
		}, {
			"uri": "http://dbpedia.org/resource/Paramount_Television",
			"label": "paramount",
			"seq": "6,14"
		}]
	},
	{
		"id": "9b92048679a944be937dd4f049c925cb",
		"question": "How many airlines have a hub at an airport run by LA World Airports?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Los_Angeles_World_Airports> . ?uri <http://dbpedia.org/ontology/hubAirport> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "at",
			"seq": "29,30"
		}, {
			"uri": "http://dbpedia.org/ontology/hubAirport",
			"label": "airport",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Los_Angeles_World_Airports",
			"label": "airports world",
			"seq": "53,66"
		}]
	},
	{
		"id": "3e2e7e2477ca4d47a63eae5961eb232f",
		"question": "What are the main interests of Timothy Morton?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Timothy_Morton> <http://dbpedia.org/property/mainInterests> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "interests main",
			"seq": "13,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Timothy_Morton",
			"label": "timothy morton",
			"seq": "31,44"
		}]
	},
	{
		"id": "2c7b634c43f94007bee6aa23f424829c",
		"question": "Whose network's parent organisation is Comcast?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentOrganisation> <http://dbpedia.org/resource/Comcast> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentOrganisation",
			"label": "organisation parent",
			"seq": "16,34"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network's",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Comcast",
			"label": "comcast",
			"seq": "39,45"
		}]
	},
	{
		"id": "186bdaf5fbc04890bd2dcb3041776050",
		"question": "List all the locations of the companies whose are also located in Rancho Cucamonga, California ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/locationCountry> <http://dbpedia.org/resource/Rancho_Cucamonga,_California> . ?x <http://dbpedia.org/ontology/locationCountry> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "locations",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCountry",
			"label": "locations",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "30,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rancho_Cucamonga,_California",
			"label": "cucamonga, california rancho",
			"seq": "66,93"
		}]
	},
	{
		"id": "4fc2bcb888944f50969d6131075914e7",
		"question": "Name the common editor of Easy Street (film) and Work (film)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Easy_Street_(film)> <http://dbpedia.org/ontology/editing> ?uri. <http://dbpedia.org/resource/Work_(film)> <http://dbpedia.org/ontology/editing> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "editor",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "editor",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Easy_Street_(film)",
			"label": "street (film) easy",
			"seq": "26,43"
		}, {
			"uri": "http://dbpedia.org/resource/Work_(film)",
			"label": "(film) work",
			"seq": "38,48"
		}]
	},
	{
		"id": "383f41d0dcfb442f8a4606d5de36ac08",
		"question": "Which are the television show which have been created by Donald Wilson?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Donald_Wilson_(writer_and_producer)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "created",
			"seq": "46,52"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "14,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Donald_Wilson_(writer_and_producer)",
			"label": "wilson donald",
			"seq": "57,69"
		}]
	},
	{
		"id": "5b273f2881264b6f9ad4004f1b82b9f4",
		"question": "Whose successors are Robert P. Smith and Adrian A. Basora?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Robert_P._Smith> . ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successors",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/property/successor",
			"label": "successors",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_P._Smith",
			"label": "robert smith p.",
			"seq": "21,35"
		}, {
			"uri": "http://dbpedia.org/resource/Adrian_A._Basora",
			"label": "basora adrian",
			"seq": "41,53"
		}]
	},
	{
		"id": "9a5eae5ceec54a8e97a3c8d7ecdb1149",
		"question": "Who is the mayor of the city under which is the constituency of Zora Singh Maan?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Zora_Singh_Maan> <http://dbpedia.org/property/constituency> ?x . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "48,59"
		}, {
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "under",
			"seq": "29,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zora_Singh_Maan",
			"label": "singh zora maan",
			"seq": "64,78"
		}]
	},
	{
		"id": "b7900ed86fb84fd7a7f479831e72bfcb",
		"question": "Did Jerry Siegel create Lois Lane?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Lois_Lane> <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Jerry_Siegel> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creators",
			"label": "create",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lois_Lane",
			"label": "lois lane",
			"seq": "24,32"
		}, {
			"uri": "http://dbpedia.org/resource/Jerry_Siegel",
			"label": "siegel jerry",
			"seq": "4,15"
		}]
	},
	{
		"id": "4b03656d18b848c5830c2015fa4a9cdd",
		"question": "Which awards did the writer, who is  the creator of Creature Comforts, won ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Creature_Comforts> <http://dbpedia.org/property/creator> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "creator",
			"seq": "41,47"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writer,",
			"seq": "21,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Creature_Comforts",
			"label": "creature",
			"seq": "52,59"
		}]
	},
	{
		"id": "240ab1b4acb848ce816bdc5a4660b11b",
		"question": "Who is the incumbent of Al Gore presidential campaign of 2000 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Al_Gore_presidential_campaign,_2000> <http://dbpedia.org/ontology/incumbent> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/incumbent",
			"label": "incumbent",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Al_Gore_presidential_campaign,_2000",
			"label": "presidential campaign gore 2000",
			"seq": "27,57"
		}]
	},
	{
		"id": "0ea3f7d690c9488d82d9805a2e705cdc",
		"question": "Which team did Wilfred McDonalds and Cam Plante play for?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wilfred_McDonald> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/Cam_Plante> <http://dbpedia.org/property/playedFor> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "play",
			"seq": "48,51"
		}, {
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "play",
			"seq": "48,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wilfred_McDonald",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Cam_Plante",
			"label": "plante cam",
			"seq": "37,46"
		}]
	},
	{
		"id": "74c48daf3f3e40b8b2a9075494203130",
		"question": "Who is the former partner of the figure skater which was the former partner of Brynn Carman ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Brynn_Carman> <http://dbpedia.org/ontology/formerPartner> ?x . ?x <http://dbpedia.org/ontology/formerPartner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FigureSkater>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerPartner",
			"label": "partner",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/formerPartner",
			"label": "partner",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/FigureSkater",
			"label": "skater figure",
			"seq": "33,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brynn_Carman",
			"label": "carman brynn",
			"seq": "79,90"
		}]
	},
	{
		"id": "563b1fefc10e4618a5b680d3baa31037",
		"question": "England is the origin of how many things?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/origin> <http://dbpedia.org/resource/England>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/origin",
			"label": "origin",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England",
			"label": "england",
			"seq": "0,6"
		}]
	},
	{
		"id": "2502d9f7189e473992f6091f18a256fe",
		"question": "What is the common debut team of the Butch Metzger and Dan Otero?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Butch_Metzger> <http://dbpedia.org/ontology/debutTeam> ?uri. <http://dbpedia.org/resource/Dan_Otero> <http://dbpedia.org/ontology/debutTeam> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debut team",
			"seq": "19,28"
		}, {
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debut team",
			"seq": "19,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Butch_Metzger",
			"label": "metzger butch",
			"seq": "37,49"
		}, {
			"uri": "http://dbpedia.org/resource/Dan_Otero",
			"label": "otero dan",
			"seq": "55,63"
		}]
	},
	{
		"id": "bd1de460e21d4db4bf8e5065934b8bc6",
		"question": "What religion is followed by the commander of Defense Security Command?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Defense_Security_Command> <http://dbpedia.org/ontology/notableCommander> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableCommander",
			"label": "commander",
			"seq": "33,41"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "5,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Defense_Security_Command",
			"label": "security defense command",
			"seq": "33,56"
		}]
	},
	{
		"id": "1604b4deca8f4b089da3546474871043",
		"question": "Is Albert P Clark buried in Colorado?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Albert_P._Clark> <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Colorado> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeofburial",
			"label": "buried",
			"seq": "18,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Albert_P._Clark",
			"label": "albert clark",
			"seq": "3,14"
		}, {
			"uri": "http://dbpedia.org/resource/Colorado",
			"label": "colorado",
			"seq": "28,35"
		}]
	},
	{
		"id": "c373b33ce50b4f15976673862387f06d",
		"question": "Who is  office holder of constituencies Duboce Triangle and Noe Valley ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Duboce_Triangle,_San_Francisco> . ?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Noe_Valley,_San_Francisco> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituencies",
			"seq": "25,38"
		}, {
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituencies",
			"seq": "25,38"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "8,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Duboce_Triangle,_San_Francisco",
			"label": "triangle duboce",
			"seq": "40,54"
		}, {
			"uri": "http://dbpedia.org/resource/Noe_Valley,_San_Francisco",
			"label": "valley",
			"seq": "64,69"
		}]
	},
	{
		"id": "a473965ed74b45298f4f8082bca57f56",
		"question": "For how many things are americans famous for?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "americans",
			"seq": "24,32"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "for",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ac238bf4d1e14571a3b37e506efd4240",
		"question": "Which politician was succeeded by someone who graduated from the Instituts d'tudes politiques?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Instituts_d'\u00e9tudes_politiques> . ?uri <http://dbpedia.org/property/successor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "graduated",
			"seq": "46,54"
		}, {
			"uri": "http://dbpedia.org/property/successor",
			"label": "succeeded",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "someone",
			"seq": "34,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Instituts_d'\u00e9tudes_politiques",
			"label": "politiques instituts",
			"seq": "65,84"
		}]
	},
	{
		"id": "e83b9ec4abef418585e8a76f2dae15f4",
		"question": "Where was Al-Muzaffar Umar buried ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Al-Muzaffar_Umar> <http://dbpedia.org/property/placeOfBurial> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "buried",
			"seq": "27,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Al-Muzaffar_Umar",
			"label": "al-muzaffar umar",
			"seq": "10,25"
		}]
	},
	{
		"id": "ebfe588dc9854e4db5a96b4bb467c612",
		"question": "Who created the world series of Poker?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/World_Series_of_Poker> <http://dbpedia.org/property/founded> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founded",
			"label": "world",
			"seq": "16,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/World_Series_of_Poker",
			"label": "series world poker",
			"seq": "16,33"
		}]
	},
	{
		"id": "ffc8b63b6f384ab18b8f65a4d3dd31d4",
		"question": "Is the Hyundai Lavita assembled in Ulsan?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Ulsan> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/assembly",
			"label": "assembled",
			"seq": "22,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hyundai_Lavita",
			"label": "hyundai lavita",
			"seq": "7,20"
		}, {
			"uri": "http://dbpedia.org/resource/Ulsan",
			"label": "ulsan",
			"seq": "35,39"
		}]
	},
	{
		"id": "e15981cdcc5a4f23935cf46e161ee0c0",
		"question": "Which countries came together to serve a greater purpose and founded South Asia Subregional Economic Cooperation?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Asia_Subregional_Economic_Cooperation> <http://dbpedia.org/property/membership> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/membership",
			"label": "greater",
			"seq": "41,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Asia_Subregional_Economic_Cooperation",
			"label": "subregional cooperation economic south",
			"seq": "69,106"
		}]
	},
	{
		"id": "004432a58e614e89a30c84e3df4164e0",
		"question": "Which musical artists have collaborated with Waylon Jennings?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Waylon_Jennings>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "musical",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Waylon_Jennings",
			"label": "jennings waylon",
			"seq": "45,59"
		}]
	},
	{
		"id": "5bc7320186b842359a554f9fe14298dd",
		"question": "where did soccer bowl take place in 76?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Soccer_Bowl_'76> <http://dbpedia.org/ontology/city> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "in",
			"seq": "33,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Soccer_Bowl_'76",
			"label": "soccer bowl 76",
			"seq": "10,23"
		}]
	},
	{
		"id": "2a705d023eea446eb1e7b31a390a4146",
		"question": "Which owner of Drop.io made Sean Parker famous?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Drop.io> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/Sean_Parker> <http://dbpedia.org/ontology/knownFor> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "owner",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Drop.io",
			"label": "drop.io",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/resource/Sean_Parker",
			"label": "parker sean",
			"seq": "28,38"
		}]
	},
	{
		"id": "443a00fd2e584e189bc1bd31ac97b83f",
		"question": "How many movies were cinematographed by Jordan Cronenweth?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cinematography",
			"label": "cinematographed",
			"seq": "21,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "many",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jordan_Cronenweth",
			"label": "cronenweth jordan",
			"seq": "40,56"
		}]
	},
	{
		"id": "813f18d7591b4b3f89070f3f5831e627",
		"question": "Which kmascot od seneca Academy is also the species of The Fox and the Cat ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Fox_and_the_Cat> <http://dbpedia.org/property/species> ?uri. <http://dbpedia.org/resource/Seneca_Academy_and_Circle_School> <http://dbpedia.org/property/mascot> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/species",
			"label": "species",
			"seq": "44,50"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "kmascot",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Fox_and_the_Cat",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Seneca_Academy_and_Circle_School",
			"label": "academy seneca",
			"seq": "17,30"
		}]
	},
	{
		"id": "19d1d7a22c4a4cbc8b813fc291a6142f",
		"question": "Who is the producer of album which has the song Money?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Money_(Pink_Floyd_song)> <http://dbpedia.org/property/album> ?x . ?x <http://dbpedia.org/property/producer> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/album",
			"label": "album",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/property/producer",
			"label": "producer",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Money_(Pink_Floyd_song)",
			"label": "money song",
			"seq": "43,52"
		}]
	},
	{
		"id": "dd1b888f16a14a13b8be3e662804a5d9",
		"question": "Which tv show was preceded by The spirit of Christmas and voice to the character was given by Mona Marshall ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/The_Spirit_of_Christmas_(short_film)> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/previousWork",
			"label": "preceded",
			"seq": "18,25"
		}, {
			"uri": "http://dbpedia.org/property/voices",
			"label": "voice",
			"seq": "58,62"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Spirit_of_Christmas_(short_film)",
			"label": "christmas spirit",
			"seq": "34,49"
		}, {
			"uri": "http://dbpedia.org/resource/Mona_Marshall",
			"label": "marshall mona",
			"seq": "94,106"
		}]
	},
	{
		"id": "3d5efd9583804ec4b72267a23374e76c",
		"question": "Give me a count of airlines whose hub airport is Los Angeles International Airport?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Los_Angeles_International_Airport>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hubAirport",
			"label": "airport",
			"seq": "38,44"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "19,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Los_Angeles_International_Airport",
			"label": "international angeles airport los",
			"seq": "38,70"
		}]
	},
	{
		"id": "e3a008c553da49fd876ece5a7c775750",
		"question": "Did Alexandre Tichonov study at the Moscow university?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Alexandre_Tichonov> <http://dbpedia.org/property/university> <http://dbpedia.org/resource/Moscow> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/university",
			"label": "university",
			"seq": "43,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alexandre_Tichonov",
			"label": "alexandre tichonov",
			"seq": "4,21"
		}, {
			"uri": "http://dbpedia.org/resource/Moscow",
			"label": "moscow",
			"seq": "36,41"
		}]
	},
	{
		"id": "9909bc6ab5e94d539ff2c98c952e5800",
		"question": "Name the river whose source place is Gloucestershire and mouth place is Southend-on-Sea ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Gloucestershire> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Southend-on-Sea>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourcePlace",
			"label": "source place",
			"seq": "21,32"
		}, {
			"uri": "http://dbpedia.org/ontology/mouthPlace",
			"label": "place",
			"seq": "28,32"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gloucestershire",
			"label": "gloucestershire",
			"seq": "37,51"
		}, {
			"uri": "http://dbpedia.org/resource/Southend-on-Sea",
			"label": "southend-on-sea",
			"seq": "72,86"
		}]
	},
	{
		"id": "1f086bdd8ed24312b65cf9f137499a64",
		"question": "How many members are there in the European Go Federation?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/European_Go_Federation> <http://dbpedia.org/property/membership> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/membership",
			"label": "members",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/European_Go_Federation",
			"label": "federation european",
			"seq": "34,52"
		}]
	},
	{
		"id": "612fd54a14cf4ea1bd327ac4ab6a3475",
		"question": "Momoko Kchi has acted in which movie ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Momoko_K\u014dchi>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "in",
			"seq": "22,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "in",
			"seq": "22,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Momoko_K\u014dchi",
			"label": "momoko",
			"seq": "0,5"
		}]
	},
	{
		"id": "2380fcd83c494a80927f6825ba436c94",
		"question": "List all the notable works of  Russell T Davies?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "notable",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Russell_T_Davies",
			"label": "russell davies",
			"seq": "31,44"
		}]
	},
	{
		"id": "7320bf155b9b4a90b729bd36263698da",
		"question": "Jimmie Fisher and Winston Bryant were governors under which president?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jimmie_Lou_Fisher> <http://dbpedia.org/property/governor> ?uri. <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governor",
			"label": "governors",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/property/governor",
			"label": "governors",
			"seq": "38,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jimmie_Lou_Fisher",
			"label": "jimmie fisher",
			"seq": "0,12"
		}, {
			"uri": "http://dbpedia.org/resource/Winston_Bryant",
			"label": "winston bryant",
			"seq": "18,31"
		}]
	},
	{
		"id": "65de0b27d7cf414daa73bab1546dfaab",
		"question": "Which shows are similar to the ones produced by Phil Collinson?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Phil_Collinson> . ?uri <http://dbpedia.org/ontology/related> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "produced",
			"seq": "36,43"
		}, {
			"uri": "http://dbpedia.org/ontology/related",
			"label": "the",
			"seq": "27,29"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Phil_Collinson",
			"label": "collinson phil",
			"seq": "48,61"
		}]
	},
	{
		"id": "398001dda0f745a3a783b7916f2b2376",
		"question": "How many movies did Michael Deeley produce?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Michael_Deeley>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "produce",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "did",
			"seq": "16,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Deeley",
			"label": "michael deeley",
			"seq": "20,33"
		}]
	},
	{
		"id": "f06758ad9c714bf490f784dcceb3ba90",
		"question": "Which college of the Luke List (golfer) is the alma mater of the Park Trammell ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Luke_List_(golfer)> <http://dbpedia.org/property/college> ?uri. <http://dbpedia.org/resource/Park_Trammell> <http://dbpedia.org/ontology/almaMater> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/college",
			"label": "college",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "47,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Luke_List_(golfer)",
			"label": "(golfer) luke list",
			"seq": "21,38"
		}, {
			"uri": "http://dbpedia.org/resource/Park_Trammell",
			"label": "trammell park",
			"seq": "65,77"
		}]
	},
	{
		"id": "daa582dfaf1a4472bddfa0b0a4deb1e5",
		"question": "Spanish harlem incident was composed by whom ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spanish_Harlem_Incident> <http://dbpedia.org/ontology/composer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composed",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Spanish_Harlem_Incident",
			"label": "incident spanish harlem",
			"seq": "0,22"
		}]
	},
	{
		"id": "65a7bbb407e44d46825ede7581db9462",
		"question": "Who is the fictional character who starred in The Dognapper?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/voice> <http://dbpedia.org/resource/The_Dognapper>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/voice",
			"label": "is",
			"seq": "4,5"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "11,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Dognapper",
			"label": "dognapper the",
			"seq": "7,19"
		}]
	},
	{
		"id": "ef08c3edfb5e4c85ba7a33a77a5f0119",
		"question": "Count the movies edited by  Mark Stevens (film editor) and were directed by Joel Schumacher?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Joel_Schumacher> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editing",
			"label": "edited",
			"seq": "17,22"
		}, {
			"uri": "http://dbpedia.org/ontology/director",
			"label": "directed",
			"seq": "64,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mark_Stevens_(film_editor)",
			"label": "stevens editor) (film mark",
			"seq": "28,53"
		}, {
			"uri": "http://dbpedia.org/resource/Joel_Schumacher",
			"label": "schumacher joel",
			"seq": "76,90"
		}]
	},
	{
		"id": "613c74a4ec09400a94fd8ede2e063e5c",
		"question": "Enumerate all the first teams of the GPs which were held in Watkins Glen, NY?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Watkins_Glen,_New_York> . ?x <http://dbpedia.org/property/firstTeam> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "watkins",
			"seq": "60,66"
		}, {
			"uri": "http://dbpedia.org/property/firstTeam",
			"label": "first",
			"seq": "18,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Watkins_Glen,_New_York",
			"label": "watkins glen,",
			"seq": "60,72"
		}]
	},
	{
		"id": "707d9bdd0d8e44a1bae79286521ce0fc",
		"question": "List some songwriters whose work has been recorded in Miami?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/Miami> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded",
			"seq": "42,49"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "songwriters",
			"seq": "10,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Work",
			"label": "work",
			"seq": "28,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miami",
			"label": "miami",
			"seq": "54,58"
		}]
	},
	{
		"id": "d5c3a119f9f8443584725cba541904f6",
		"question": "Which fictional character portrayed by Roger barton has Darth Vader as family member ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/family> <http://dbpedia.org/resource/Darth_Vader> . ?uri <http://dbpedia.org/property/portrayer> <http://dbpedia.org/resource/Roger_Barton_(film_editor)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/family",
			"label": "family",
			"seq": "71,76"
		}, {
			"uri": "http://dbpedia.org/property/portrayer",
			"label": "portrayed",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "6,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Darth_Vader",
			"label": "vader darth",
			"seq": "56,66"
		}, {
			"uri": "http://dbpedia.org/resource/Roger_Barton_(film_editor)",
			"label": "barton roger",
			"seq": "39,50"
		}]
	},
	{
		"id": "3375a4f07f5548d1ae047a3fa248dd11",
		"question": "Elizabeth Alexander and Jared Bernstein served under which Vice President?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elizabeth_Alexander_(press_secretary)> <http://dbpedia.org/ontology/vicePresident> ?uri. <http://dbpedia.org/resource/Jared_Bernstein> <http://dbpedia.org/ontology/vicePresident> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/vicePresident",
			"label": "president vice",
			"seq": "59,72"
		}, {
			"uri": "http://dbpedia.org/ontology/vicePresident",
			"label": "president vice",
			"seq": "59,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elizabeth_Alexander_(press_secretary)",
			"label": "elizabeth alexander",
			"seq": "0,18"
		}, {
			"uri": "http://dbpedia.org/resource/Jared_Bernstein",
			"label": "bernstein jared",
			"seq": "24,38"
		}]
	},
	{
		"id": "c43db2cba5e24a05bdfa5d77aa3667ed",
		"question": "To which country does Peter Blay owe his allegiance?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peter_Blay> <http://dbpedia.org/property/allegiance> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "41,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peter_Blay",
			"label": "peter blay",
			"seq": "22,31"
		}]
	},
	{
		"id": "ce5857e30c24478bacad831b90eb559c",
		"question": "Which citys mayor is anne hidalgo?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Anne_Hidalgo>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mayor",
			"label": "mayor",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anne_Hidalgo",
			"label": "hidalgo anne",
			"seq": "21,32"
		}]
	},
	{
		"id": "9993c21e0dba4189a4d49112ea149a76",
		"question": "Count the number of movies whose distributor is RKO Pictures and director of photography is Gregg Toland?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/RKO_Pictures> . ?uri <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Gregg_Toland> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributor",
			"seq": "33,43"
		}, {
			"uri": "http://dbpedia.org/ontology/cinematography",
			"label": "photography",
			"seq": "77,87"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/RKO_Pictures",
			"label": "pictures",
			"seq": "52,59"
		}, {
			"uri": "http://dbpedia.org/resource/Gregg_Toland",
			"label": "toland gregg",
			"seq": "92,103"
		}]
	},
	{
		"id": "90065788c32f4906aa5614759fb3917e",
		"question": "What is the division of Serbia national American football team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Serbia_national_American_football_team> <http://dbpedia.org/ontology/division> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/division",
			"label": "division",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Serbia_national_American_football_team",
			"label": "national football american serbia team",
			"seq": "24,61"
		}]
	},
	{
		"id": "5bf4a1c66058437cb656e5b1c6588eac",
		"question": "Who has allegiance is Colony of Virginia and buried in Montpelier?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/allegiance> <http://dbpedia.org/resource/Colony_of_Virginia> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "8,17"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "virginia",
			"seq": "32,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colony_of_Virginia",
			"label": "virginia colony",
			"seq": "22,36"
		}, {
			"uri": "http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)",
			"label": "montpelier virginia",
			"seq": "32,50"
		}]
	},
	{
		"id": "6b40bf5e283244129850be2446ce0074",
		"question": "Give me the list of cars which are the predecessor of Full Sized Cars?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/class> <http://dbpedia.org/resource/Full-size_car> . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/class",
			"label": "cars",
			"seq": "20,23"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "39,49"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "me",
			"seq": "5,6"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Full-size_car",
			"label": "full",
			"seq": "54,57"
		}]
	},
	{
		"id": "22086cbb41ac4acc823ba66b6334f11d",
		"question": "Who served a vice president buried in United First Parish Church?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/United_First_Parish_Church> . ?uri <http://dbpedia.org/ontology/vicePresident> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "president",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/ontology/vicePresident",
			"label": "president vice",
			"seq": "13,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_First_Parish_Church",
			"label": "united parish church first",
			"seq": "38,63"
		}]
	},
	{
		"id": "9d6b44c745cc4b13a87b0664f5ba8a0b",
		"question": "Does Cohoes a junction on the NY State Route 470?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/New_York_State_Route_470> <http://dbpedia.org/ontology/routeJunction> <http://dbpedia.org/resource/Cohoes,_New_York> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeJunction",
			"label": "junction route",
			"seq": "14,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York_State_Route_470",
			"label": "state route 470",
			"seq": "33,47"
		}, {
			"uri": "http://dbpedia.org/resource/Cohoes,_New_York",
			"label": "cohoes",
			"seq": "5,10"
		}]
	},
	{
		"id": "22b3592acd354c4d99ea51f040e1cd0f",
		"question": "List the regions served by the company which serves in Pacific Ocean ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/regionServed> <http://dbpedia.org/resource/Pacific_Ocean> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "regions served",
			"seq": "9,22"
		}, {
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "regions served",
			"seq": "9,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "31,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pacific_Ocean",
			"label": "pacific ocean",
			"seq": "55,67"
		}]
	},
	{
		"id": "320124cd584843c6908f36b25c0bb181",
		"question": "Who are the biological parents of Dannielynn Birkhead?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dannielynn_Birkhead> <http://dbpedia.org/ontology/parent> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parents",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dannielynn_Birkhead",
			"label": "dannielynn birkhead",
			"seq": "34,52"
		}]
	},
	{
		"id": "10c98449b32b44b2bc010f8eb7df50b0",
		"question": "Was Morrissey a member of the Smiths?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Smiths> <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Morrissey> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerBandMember",
			"label": "member",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Smiths",
			"label": "smiths the",
			"seq": "26,35"
		}, {
			"uri": "http://dbpedia.org/resource/Morrissey",
			"label": "morrissey",
			"seq": "4,12"
		}]
	},
	{
		"id": "f928abbb8f11455eb05de0b4ec4c82d0",
		"question": "Who are the producers of Marie Sisters?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marie_Sisters> <http://dbpedia.org/property/producer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "producers",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marie_Sisters",
			"label": "sisters marie",
			"seq": "25,37"
		}]
	},
	{
		"id": "232324046fea420f9ef510ab09298d99",
		"question": "Name the river with source as Columbia Lake and river mouth is located in Clatsop Country ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Clatsop_County,_Oregon> . ?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Columbia_Lake>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/source",
			"label": "source",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Clatsop_County,_Oregon",
			"label": "clatsop",
			"seq": "74,80"
		}, {
			"uri": "http://dbpedia.org/resource/Columbia_Lake",
			"label": "columbia lake",
			"seq": "30,42"
		}]
	},
	{
		"id": "587c7b022e6f43c58d30747018299a1f",
		"question": "Give me a count of movies whose music composer is Bernard Herrmann?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Bernard_Herrmann>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer music",
			"seq": "32,45"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "16,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bernard_Herrmann",
			"label": "herrmann bernard",
			"seq": "50,65"
		}]
	},
	{
		"id": "1dabbe38304b45038e9853ea185a6280",
		"question": "Is my truly truly fair the band of mitch miller?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/My_Truly,_Truly_Fair> <http://dbpedia.org/ontology/musicalBand> <http://dbpedia.org/resource/Mitch_Miller> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalBand",
			"label": "band",
			"seq": "27,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/My_Truly,_Truly_Fair",
			"label": "truly fair",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/resource/Mitch_Miller",
			"label": "miller mitch",
			"seq": "35,46"
		}]
	},
	{
		"id": "eb14dd948f6f4df8b68c0a0f036a8957",
		"question": "What is the common product of the Apple Productivity Experience Group and services of the 21Vianet ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Apple_Productivity_Experience_Group> <http://dbpedia.org/ontology/product> ?uri. <http://dbpedia.org/resource/21Vianet> <http://dbpedia.org/property/services> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/product",
			"label": "product",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "74,81"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Apple_Productivity_Experience_Group",
			"label": "productivity experience group apple",
			"seq": "34,68"
		}, {
			"uri": "http://dbpedia.org/resource/21Vianet",
			"label": "21vianet",
			"seq": "90,97"
		}]
	},
	{
		"id": "e1e158c4b3c5462c9f9254f77b33ebde",
		"question": "List the comic characters created by Joe Shuster ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Joe_Shuster>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creators",
			"label": "created",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/ComicsCharacter",
			"label": "characters",
			"seq": "15,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joe_Shuster",
			"label": "shuster joe",
			"seq": "37,47"
		}]
	},
	{
		"id": "09b5ed743c6440648ec7e00b30bbeb60",
		"question": "Name the sovereign state of Wallington railway station ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wallington_railway_station> <http://dbpedia.org/ontology/country> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/country",
			"label": "railway",
			"seq": "39,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wallington_railway_station",
			"label": "wallington station railway",
			"seq": "28,53"
		}]
	},
	{
		"id": "295609af44de49ffadaa466cfbfbc719",
		"question": "Which TV show's theme was composed by a band in which Todd Huth used to perform?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Todd_Huth> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerBandMember",
			"label": "band",
			"seq": "40,43"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "26,33"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show's",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Todd_Huth",
			"label": "todd huth",
			"seq": "54,62"
		}]
	},
	{
		"id": "44f1c8f9f2544b208b2f41cb608b27ab",
		"question": "Count all the Colonels?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/rank> <http://dbpedia.org/resource/Colonel_(United_States)>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/rank",
			"label": "all",
			"seq": "6,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colonel_(United_States)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fb9f45d8a2c24892b3e90b56c7fe8b34",
		"question": "Where is the main ground of soccer seasons whose chairman is Ronaldo?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Ronaldo> . ?x <http://dbpedia.org/ontology/ground> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/chairman",
			"label": "chairman",
			"seq": "49,56"
		}, {
			"uri": "http://dbpedia.org/ontology/ground",
			"label": "ground",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClubSeason",
			"label": "soccer",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ronaldo",
			"label": "ronaldo",
			"seq": "61,67"
		}]
	},
	{
		"id": "95d1d72d4de845859f814f734b971bd0",
		"question": "Who was on the first team in the GPs that were held at Watkins Glen, NY?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Watkins_Glen,_New_York> . ?x <http://dbpedia.org/property/firstTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "watkins",
			"seq": "55,61"
		}, {
			"uri": "http://dbpedia.org/property/firstTeam",
			"label": "first team",
			"seq": "15,24"
		}, {
			"uri": "http://dbpedia.org/ontology/GrandPrix",
			"label": "gps",
			"seq": "33,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Watkins_Glen,_New_York",
			"label": "watkins glen,",
			"seq": "55,67"
		}]
	},
	{
		"id": "63f44ae612544346aa0fe59e52be8806",
		"question": "Which destination of the Novair International Airway is the source origin of Spaghetti squash ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Novair_International_Airways> <http://dbpedia.org/ontology/destination> ?uri. <http://dbpedia.org/resource/Spaghetti_squash> <http://dbpedia.org/ontology/origin> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/destination",
			"label": "destination",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "origin",
			"seq": "67,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Novair_International_Airways",
			"label": "international",
			"seq": "32,44"
		}, {
			"uri": "http://dbpedia.org/resource/Spaghetti_squash",
			"label": "spaghetti squash",
			"seq": "77,92"
		}]
	},
	{
		"id": "86de244495ad4682bba72845f387f090",
		"question": "Who all have been canonized by Pope Paul VI",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_Paul_VI> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/canonizedBy",
			"label": "canonized by",
			"seq": "18,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pope_Paul_VI",
			"label": "pope paul vi",
			"seq": "31,42"
		}]
	},
	{
		"id": "f51a76363b8a4f4289af2e25cf5ae7c5",
		"question": "Who are the parent  of the people that  has POD as Redding, Connecticut ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Redding,_Connecticut> . ?x <http://dbpedia.org/ontology/parent> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "people",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parent",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Redding,_Connecticut",
			"label": "connecticut redding,",
			"seq": "51,70"
		}]
	},
	{
		"id": "7ee73bf122af4474ab57198183ee3f32",
		"question": "Who produces the trains operated by the MTR?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/MTR> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Train>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operated",
			"seq": "24,31"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "mtr",
			"seq": "40,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Train",
			"label": "trains",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/MTR",
			"label": "mtr",
			"seq": "40,42"
		}]
	},
	{
		"id": "06cd798687b746528a43245de0c8ab00",
		"question": "What religion did the spouse of Richie Aprile follow?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Richie_Aprile> <http://dbpedia.org/property/spouse> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "spouse",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "5,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Richie_Aprile",
			"label": "richie aprile",
			"seq": "32,44"
		}]
	},
	{
		"id": "8a4ee894762240cbaa743c2639734575",
		"question": "Name the agency of Election Commission of Thailand ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Election_Commission_of_Thailand> <http://dbpedia.org/property/agencyName> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/agencyName",
			"label": "agency name",
			"seq": "0,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Election_Commission_of_Thailand",
			"label": "commission thailand election of",
			"seq": "16,46"
		}]
	},
	{
		"id": "f8fbc5bc7c8a4272bcfeae43342ee9b0",
		"question": "What is the second track list of Dschinghis Khan (song) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dschinghis_Khan_(song)> <http://dbpedia.org/ontology/subsequentWork> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "track",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dschinghis_Khan_(song)",
			"label": "dschinghis (song) khan",
			"seq": "33,54"
		}]
	},
	{
		"id": "afccda799b6b41138bb5203359ad1618",
		"question": "Which writer of Tales of Suspense is also the writer of karakuri Dji Ultimo ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tales_of_Suspense> <http://dbpedia.org/property/writers> ?uri. <http://dbpedia.org/resource/Karakuri_D\u00f4ji_Ultimo> <http://dbpedia.org/property/author> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writers",
			"label": "writer",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/author",
			"label": "ultimo",
			"seq": "69,74"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tales_of_Suspense",
			"label": "suspense tales",
			"seq": "16,29"
		}, {
			"uri": "http://dbpedia.org/resource/Karakuri_D\u00f4ji_Ultimo",
			"label": "karakuri ultimo",
			"seq": "56,70"
		}]
	},
	{
		"id": "a759221f4e9b4ea3a2b9d8654e1bc7cd",
		"question": "Who was the influencer of Dave Attel who also starred in Adios Amigo?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dave_Attell> <http://dbpedia.org/ontology/influencedBy> ?uri. <http://dbpedia.org/resource/Adi\u00f3s_Amigo> <http://dbpedia.org/ontology/starring> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/influencedBy",
			"label": "influencer",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "starred",
			"seq": "46,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dave_Attell",
			"label": "attel dave",
			"seq": "26,35"
		}, {
			"uri": "http://dbpedia.org/resource/Adi\u00f3s_Amigo",
			"label": "amigo",
			"seq": "63,67"
		}]
	},
	{
		"id": "b270a1df7e304d6bbec623691016b511",
		"question": "Who is the producer of the album, after which A Nice pair was released ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/A_Nice_Pair> <http://dbpedia.org/ontology/previousWork> ?x . ?x <http://dbpedia.org/property/producer> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/previousWork",
			"label": "producer",
			"seq": "11,18"
		}, {
			"uri": "http://dbpedia.org/property/producer",
			"label": "producer",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A_Nice_Pair",
			"label": "pair nice",
			"seq": "48,56"
		}]
	},
	{
		"id": "ccd5a59625d24531920a585c93e208e3",
		"question": "Who developed games based on the Cars series?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/series> <http://dbpedia.org/resource/Cars_(film)> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/series",
			"label": "series",
			"seq": "38,43"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cars_(film)",
			"label": "cars",
			"seq": "33,36"
		}]
	},
	{
		"id": "6b036672b009486aba8ca22f384a054b",
		"question": "Which politicians live in a city led by T.S. Thakur?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/T._S._Thakur> . ?uri <http://dbpedia.org/ontology/residence> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "led",
			"seq": "33,35"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "in",
			"seq": "23,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/T._S._Thakur",
			"label": "thakur",
			"seq": "45,50"
		}]
	},
	{
		"id": "c453adcc2e0940139832c62258fcdaa2",
		"question": "Who is the military general buried in St Mary's Church, Battersea?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/St_Mary's_Church,_Battersea>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeofburial",
			"label": "buried",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryPerson",
			"label": "military",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/St_Mary's_Church,_Battersea",
			"label": "battersea church, mary's",
			"seq": "41,64"
		}]
	},
	{
		"id": "4bd7ce92e5834b2b9f27c18942dd990c",
		"question": "Which wars were fought when the commanders involved served under PM Choi Tu Son?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Choi_Tu-son> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "commanders",
			"seq": "32,41"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "32,41"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "choi",
			"seq": "68,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Choi_Tu-son",
			"label": "choi son tu",
			"seq": "68,78"
		}]
	},
	{
		"id": "e0d8fe804adf4feab999453c822c20e4",
		"question": "Give me the count of artist in the company whose Artist is Jean- Fran\u00e7ois Cot\u00e9 ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Jean-Fran\u00e7ois_Cot\u00e9> . ?x <http://dbpedia.org/property/artist> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jean-Fran\u00e7ois_Cot\u00e9",
			"label": "fran\u00e7ois jean-",
			"seq": "59,72"
		}]
	},
	{
		"id": "53137c944cee49bea72f3c3542173081",
		"question": "How many universities are located in a country led by Olemic Thommessen?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Olemic_Thommessen> . ?uri <http://dbpedia.org/ontology/country> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "led",
			"seq": "47,49"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Olemic_Thommessen",
			"label": "thommessen olemic",
			"seq": "54,70"
		}]
	},
	{
		"id": "6aa8a3b5ed004373b608912919fe9db9",
		"question": "Give me a list of everyone who manages the famous rock art sites?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/architecture> <http://dbpedia.org/resource/Rock_art> . ?x <http://dbpedia.org/ontology/governingBody> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architecture",
			"label": "art",
			"seq": "55,57"
		}, {
			"uri": "http://dbpedia.org/ontology/governingBody",
			"label": "everyone",
			"seq": "18,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rock_art",
			"label": "rock art",
			"seq": "50,57"
		}]
	},
	{
		"id": "9c1ea109b00f4f5aba49d87f8fac3deb",
		"question": "Did Jerry Rice study in Oktoc Mississippi?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jerry_Rice> <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/Oktoc,_Mississippi> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/highSchool",
			"label": "rice",
			"seq": "10,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerry_Rice",
			"label": "jerry rice",
			"seq": "4,13"
		}, {
			"uri": "http://dbpedia.org/resource/Oktoc,_Mississippi",
			"label": "mississippi oktoc",
			"seq": "24,40"
		}]
	},
	{
		"id": "26da9117036746eaa136ee24f55908f5",
		"question": "To which family does korean fox belongs to ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Korean_fox> <http://dbpedia.org/ontology/family> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "family",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Korean_fox",
			"label": "korean fox",
			"seq": "21,30"
		}]
	},
	{
		"id": "77e5540b4af34b73b9c43dd62c69c556",
		"question": "Food in which countries has shallot in it?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Shallot> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "it",
			"seq": "39,40"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "countries",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Food",
			"label": "food",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shallot",
			"label": "shallot",
			"seq": "28,34"
		}]
	},
	{
		"id": "30f137f544404a14b30465f5c542a71c",
		"question": "Who is the compiler of British Gazette whose prime minister is also Peter Thorneycroft ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/British_Gazette> <http://dbpedia.org/property/editor> ?uri. <http://dbpedia.org/resource/Peter_Thorneycroft> <http://dbpedia.org/property/primeminister> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editor",
			"label": "peter",
			"seq": "68,72"
		}, {
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "minister prime",
			"seq": "45,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/British_Gazette",
			"label": "gazette british",
			"seq": "23,37"
		}, {
			"uri": "http://dbpedia.org/resource/Peter_Thorneycroft",
			"label": "thorneycroft peter",
			"seq": "68,85"
		}]
	},
	{
		"id": "aaa9ab64e1524e34b7451782aca41736",
		"question": "What is the route end of NorthSouth Transport Corridor ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/North\u2013South_Transport_Corridor> <http://dbpedia.org/ontology/routeEnd> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "route end",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North\u2013South_Transport_Corridor",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "351b32db9d724cfd823b5948b2ced6dd",
		"question": "What is the country which lies on the European route E8, and where Ragnhild Jolson was born?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/European_route_E8> <http://dbpedia.org/ontology/county> ?uri. <http://dbpedia.org/resource/Ragnhild_J\u00f8lsen> <http://dbpedia.org/property/birthplace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/county",
			"label": "country",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/property/birthplace",
			"label": "the",
			"seq": "8,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/European_route_E8",
			"label": "european route",
			"seq": "38,51"
		}, {
			"uri": "http://dbpedia.org/resource/Ragnhild_J\u00f8lsen",
			"label": "ragnhild",
			"seq": "67,74"
		}]
	},
	{
		"id": "f5e9009261864d4a998a4815dabb3404",
		"question": "What are the television shows whose distributer is HBO?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/HBO>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributer",
			"seq": "36,46"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/HBO",
			"label": "hbo",
			"seq": "51,53"
		}]
	},
	{
		"id": "b95b28576f18419c894ce4f86851e7c4",
		"question": "Did Carolyn Heinrich study at the Vanderbilt?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Carolyn_Heinrich> <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Vanderbilt_University> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "study",
			"seq": "21,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carolyn_Heinrich",
			"label": "heinrich carolyn",
			"seq": "4,19"
		}, {
			"uri": "http://dbpedia.org/resource/Vanderbilt_University",
			"label": "vanderbilt",
			"seq": "34,43"
		}]
	},
	{
		"id": "3816603ac6fd4377a4f32806c3821255",
		"question": "What are the musical performances whose label is Celluloid Records?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "40,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Celluloid_Records",
			"label": "celluloid records",
			"seq": "49,65"
		}]
	},
	{
		"id": "df9d1c5e29c84fbe86c5e6135265ba82",
		"question": "To which company is Michael Dell a father company? ",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Michael_Dell>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningCompany",
			"label": "company",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Dell",
			"label": "michael dell",
			"seq": "20,31"
		}]
	},
	{
		"id": "1dc65e5b1efd45e997dab9d523cfc041",
		"question": "How many cars succeeded the cars which were similar to Cadillac Fleetwood?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Cadillac_Fleetwood> <http://dbpedia.org/property/related> ?x . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/related",
			"label": "the",
			"seq": "24,26"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "succeeded",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "similar",
			"seq": "44,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cadillac_Fleetwood",
			"label": "fleetwood cadillac",
			"seq": "55,72"
		}]
	},
	{
		"id": "980685643c634f59b6a8c2114e5f6b75",
		"question": "What is the common region of the braod cast area of ITV and nationality of Ajahn Thate ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/ITV_(Thailand)> <http://dbpedia.org/property/broadcastArea> ?uri. <http://dbpedia.org/resource/Ajahn_Thate> <http://dbpedia.org/ontology/nationality> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/broadcastArea",
			"label": "cast area",
			"seq": "39,47"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "60,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/ITV_(Thailand)",
			"label": "itv and",
			"seq": "52,58"
		}, {
			"uri": "http://dbpedia.org/resource/Ajahn_Thate",
			"label": "thate ajahn",
			"seq": "75,85"
		}]
	},
	{
		"id": "f41a1ab1a8a64e70891750e378d66e93",
		"question": "Which person won Screen actors Guild Life Time Achievement award and has resting palce in Palo Alto, California ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Palo_Alto,_California> . ?uri <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Screen_Actors_Guild_Life_Achievement_Award>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingPlace",
			"label": "resting",
			"seq": "73,79"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "59,63"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Palo_Alto,_California",
			"label": "california alto, palo",
			"seq": "90,110"
		}, {
			"uri": "http://dbpedia.org/resource/Screen_Actors_Guild_Life_Achievement_Award",
			"label": "achievement screen actors",
			"seq": "17,41"
		}]
	},
	{
		"id": "900ed9da86ce4991a9cef44d4e61b24f",
		"question": "Give me a list of all the people driving at pole positions in the Grand Prixes where Renault was a first team?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/firstTeam> <http://dbpedia.org/resource/Renault_in_Formula_One> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstTeam",
			"label": "first team",
			"seq": "99,108"
		}, {
			"uri": "http://dbpedia.org/ontology/poleDriver",
			"label": "pole",
			"seq": "44,47"
		}, {
			"uri": "http://dbpedia.org/ontology/GrandPrix",
			"label": "grand",
			"seq": "66,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Renault_in_Formula_One",
			"label": "renault",
			"seq": "85,91"
		}]
	},
	{
		"id": "0518e52148a646b18bab0d50998ab176",
		"question": "Which mainter of  Cheasty Boulevard South is also the county seat of the King County, Washingtonsu ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cheasty_Boulevard_South> <http://dbpedia.org/ontology/maintainedBy> ?uri. <http://dbpedia.org/resource/King_County,_Washington> <http://dbpedia.org/ontology/countySeat> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/maintainedBy",
			"label": "mainter",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/countySeat",
			"label": "county",
			"seq": "54,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cheasty_Boulevard_South",
			"label": "boulevard cheasty south",
			"seq": "18,40"
		}, {
			"uri": "http://dbpedia.org/resource/King_County,_Washington",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0551936fa2424f109acea056733b00bf",
		"question": "What work has been directed by Orson Welles and distributed by  RKO Pictures?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Orson_Welles> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/RKO_Pictures>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/director",
			"label": "directed",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "48,58"
		}, {
			"uri": "http://dbpedia.org/ontology/Work",
			"label": "work",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Orson_Welles",
			"label": "welles orson",
			"seq": "31,42"
		}, {
			"uri": "http://dbpedia.org/resource/RKO_Pictures",
			"label": "pictures rko",
			"seq": "64,75"
		}]
	},
	{
		"id": "3668ef04a8a54a4b8d0c17338d67b95a",
		"question": "Was andy warhol a part of Pop Art movement?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Andy_Warhol> <http://dbpedia.org/property/movement> <http://dbpedia.org/resource/Pop_art> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/movement",
			"label": "movement",
			"seq": "34,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Andy_Warhol",
			"label": "warhol andy",
			"seq": "4,14"
		}, {
			"uri": "http://dbpedia.org/resource/Pop_art",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fbd5f953b14447ef811cb0338ee88e8e",
		"question": "Name the sea located near Europe and has a nearby city as Rostock ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Rostock> . ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Europe>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "city",
			"seq": "50,53"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "9,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rostock",
			"label": "rostock",
			"seq": "58,64"
		}, {
			"uri": "http://dbpedia.org/resource/Europe",
			"label": "europe",
			"seq": "26,31"
		}]
	},
	{
		"id": "8146bc4b31d649cf8c5a1f34417b8be4",
		"question": "Which nearest city of LoDaisKa Site is also the location of Oskar Blues Brewery ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/LoDaisKa_Site> <http://dbpedia.org/ontology/nearestCity> ?uri. <http://dbpedia.org/resource/Oskar_Blues_Brewery> <http://dbpedia.org/property/location> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "nearest city",
			"seq": "6,17"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "location",
			"seq": "48,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/LoDaisKa_Site",
			"label": "lodaiska site",
			"seq": "22,34"
		}, {
			"uri": "http://dbpedia.org/resource/Oskar_Blues_Brewery",
			"label": "brewery oskar blues",
			"seq": "60,78"
		}]
	},
	{
		"id": "6b924d982c704745af8ea66d7f15e044",
		"question": "What city is the place of birth of Alexander Morozevich which is also the official residence of Dmitri Nossov ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alexander_Morozevich> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/Dmitri_Nossov> <http://dbpedia.org/property/residence> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "place birth",
			"seq": "17,27"
		}, {
			"uri": "http://dbpedia.org/property/residence",
			"label": "residence",
			"seq": "83,91"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alexander_Morozevich",
			"label": "morozevich alexander",
			"seq": "35,54"
		}, {
			"uri": "http://dbpedia.org/resource/Dmitri_Nossov",
			"label": "nossov dmitri",
			"seq": "96,108"
		}]
	},
	{
		"id": "6310baf4b9d740f5a47f9ae2e0b34b5d",
		"question": "Which team's players have played in the national hockey league?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/National_Hockey_League> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "league",
			"seq": "56,61"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team's",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "the",
			"seq": "36,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Hockey_League",
			"label": "national league hockey",
			"seq": "40,61"
		}]
	},
	{
		"id": "814c2cbb08a04c3ebd6aff1b47275883",
		"question": "Which founder of European School, karlsruhe is also the jursdiction of Eurpoean Border of Coast guard ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/European_Border_and_Coast_Guard> <http://dbpedia.org/property/jurisdiction> ?uri. <http://dbpedia.org/resource/European_School,_Karlsruhe> <http://dbpedia.org/property/founder> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/jurisdiction",
			"label": "jursdiction",
			"seq": "56,66"
		}, {
			"uri": "http://dbpedia.org/property/founder",
			"label": "founder",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/European_Border_and_Coast_Guard",
			"label": "european",
			"seq": "17,24"
		}, {
			"uri": "http://dbpedia.org/resource/European_School,_Karlsruhe",
			"label": "karlsruhe european school,",
			"seq": "17,42"
		}]
	},
	{
		"id": "14307a9d57c5428a9076bc5d123a7434",
		"question": "What is that show whose theme was composed by Joel Goodman?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Joel_Goodman> . ?x <http://dbpedia.org/property/showName> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "34,41"
		}, {
			"uri": "http://dbpedia.org/property/showName",
			"label": "show",
			"seq": "13,16"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show is",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joel_Goodman",
			"label": "goodman joel",
			"seq": "46,57"
		}]
	},
	{
		"id": "ced7ff32a8304b9f8c8ae77c3386bdc0",
		"question": "What is the academic discipline of Journal of Cerebral Blood Flow & Metabolism ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Journal_of_Cerebral_Blood_Flow_&_Metabolism> <http://dbpedia.org/ontology/academicDiscipline> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "discipline academic",
			"seq": "12,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Journal_of_Cerebral_Blood_Flow_&_Metabolism",
			"label": "metabolism cerebral journal",
			"seq": "35,61"
		}]
	},
	{
		"id": "6e5cd8ecf19a490b8da0b62c0e2a9a30",
		"question": "Trevor Peacock has narrated in which movie?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/narrator> <http://dbpedia.org/resource/Trevor_Peacock>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/narrator",
			"label": "narrated",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "in",
			"seq": "28,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Trevor_Peacock",
			"label": "peacock trevor",
			"seq": "0,13"
		}]
	},
	{
		"id": "d33e78b19afd4676bd77c8ed990b9982",
		"question": "What are some gymnasts coached by Amanda Reddin?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headcoach> <http://dbpedia.org/resource/Amanda_Reddin>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Gymnast>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headcoach",
			"label": "coached",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Gymnast",
			"label": "gymnasts",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Amanda_Reddin",
			"label": "reddin amanda",
			"seq": "34,46"
		}]
	},
	{
		"id": "862ee1ccae36438fa2850a2dad3471f7",
		"question": "What team has Sam Keller and Jim McMilin played for?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sam_Keller> <http://dbpedia.org/ontology/formerTeam> ?uri. <http://dbpedia.org/resource/Jim_McMillin> <http://dbpedia.org/ontology/team> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "team for",
			"seq": "5,12"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sam_Keller",
			"label": "keller sam",
			"seq": "14,23"
		}, {
			"uri": "http://dbpedia.org/resource/Jim_McMillin",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "b32f0ffff06741eab6c71835a504396d",
		"question": "Which TV show whose theme is composed by someone signed up with ATO records?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/ATO_Records> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "records",
			"seq": "68,74"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "29,36"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/ATO_Records",
			"label": "records ato",
			"seq": "64,74"
		}]
	},
	{
		"id": "0467f0dd444c4584994587e88693f8e9",
		"question": "Which gadgets are made by companies of New Taipei City?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/locationCity> <http://dbpedia.org/resource/New_Taipei_City> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCity",
			"label": "city",
			"seq": "50,53"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "are",
			"seq": "14,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_Taipei_City",
			"label": "taipei city new",
			"seq": "39,53"
		}]
	},
	{
		"id": "a24560d63e05412bb56c5fac0df13755",
		"question": "Which work institutions of the Andrew Schally is the  alma mater of the Mara Eugenia Rojas Correa ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Andrew_Schally> <http://dbpedia.org/property/workInstitutions> ?uri. <http://dbpedia.org/resource/Mar\u00eda_Eugenia_Rojas_Correa> <http://dbpedia.org/property/almaMater> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/workInstitutions",
			"label": "institutions work",
			"seq": "6,22"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "54,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Andrew_Schally",
			"label": "schally andrew",
			"seq": "31,44"
		}, {
			"uri": "http://dbpedia.org/resource/Mar\u00eda_Eugenia_Rojas_Correa",
			"label": "eugenia correa rojas",
			"seq": "77,96"
		}]
	},
	{
		"id": "ee3ee4db6ae94b3d9abdf399e280c592",
		"question": "What religions do diplomats typically follow?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Diplomacy> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "religions",
			"seq": "5,13"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "religions",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Diplomacy",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "84b711ae9a0341ab8a7187c256dfcd33",
		"question": "What are the universities where athletics is regulated by National Collegiate Athletic Association?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/athletics> <http://dbpedia.org/resource/National_Collegiate_Athletic_Association>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/athletics",
			"label": "athletics",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "13,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Collegiate_Athletic_Association",
			"label": "association collegiate",
			"seq": "67,88"
		}]
	},
	{
		"id": "fe9e7f00884542aebb30f18c996e0f9b",
		"question": "Who is the owner of Ford Motor Credit comapny which is also the builder of FORD SHO V8 engine ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Motor_Credit_Company> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/Ford_SHO_V8_engine> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "owner",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Motor_Credit_Company",
			"label": "credit",
			"seq": "31,36"
		}, {
			"uri": "http://dbpedia.org/resource/Ford_SHO_V8_engine",
			"label": "engine ford sho",
			"seq": "20,34"
		}]
	},
	{
		"id": "1ddd01b8170e460bb30fdd9e80c7c495",
		"question": "Was Don't Bring Me Down recorded in West Germany?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Don't_Bring_Me_Down> <http://dbpedia.org/property/recorded> <http://dbpedia.org/resource/West_Germany> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/recorded",
			"label": "recorded",
			"seq": "24,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Don't_Bring_Me_Down",
			"label": "don't bring down",
			"seq": "4,19"
		}, {
			"uri": "http://dbpedia.org/resource/West_Germany",
			"label": "germany west",
			"seq": "36,47"
		}]
	},
	{
		"id": "38300a71b0e74bfaa7606386e0d846b5",
		"question": "Name the person whose relation is Dee Dee Warwick?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Dee_Dee_Warwick>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relation",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dee_Dee_Warwick",
			"label": "warwick dee",
			"seq": "34,44"
		}]
	},
	{
		"id": "e72c8d6ef90a427baa7e385ccb063824",
		"question": "who are some miss michigan usa?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Miss_Michigan_USA>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/title",
			"label": "are",
			"seq": "4,6"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miss_Michigan_USA",
			"label": "michigan miss usa",
			"seq": "13,29"
		}]
	},
	{
		"id": "14beb01d38c546a58565e06c61c1f773",
		"question": "What are the films whose atleast one cast member died due to Colorectal cancer?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathCause> <http://dbpedia.org/resource/Colorectal_cancer> . ?uri <http://dbpedia.org/property/starring> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "films",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colorectal_cancer",
			"label": "colorectal cancer",
			"seq": "61,77"
		}]
	},
	{
		"id": "aa39669014fd44328c99e0cd54b58afb",
		"question": "Give the name of the  managers of England national under-20 football team and England national under-21 football team?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-20_football_team> . ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/managerclubs",
			"label": "managers",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/property/managerclubs",
			"label": "managers",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England_national_under-20_football_team",
			"label": "under-20 national football",
			"seq": "42,67"
		}, {
			"uri": "http://dbpedia.org/resource/England_national_under-21_football_team",
			"label": "under-21 national football",
			"seq": "42,67"
		}]
	},
	{
		"id": "943486aa334042229b3e66696250c698",
		"question": "What is the draft team of the ice hockey players whose position is Centre ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Centre_(ice_hockey)> . ?x <http://dbpedia.org/ontology/draftTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/IceHockeyPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/position",
			"label": "position",
			"seq": "55,62"
		}, {
			"uri": "http://dbpedia.org/ontology/draftTeam",
			"label": "draft team",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/IceHockeyPlayer",
			"label": "hockey",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Centre_(ice_hockey)",
			"label": "hockey centre",
			"seq": "34,46"
		}]
	},
	{
		"id": "afa75d6b6d03454f9b688dd0080985fb",
		"question": "Harry Huston and Dick Spalding played their first match for which team?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Harry_Huston> <http://dbpedia.org/property/debutteam> ?uri. <http://dbpedia.org/resource/Dick_Spalding> <http://dbpedia.org/property/debutteam> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "team",
			"seq": "66,69"
		}, {
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "team",
			"seq": "66,69"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harry_Huston",
			"label": "huston harry",
			"seq": "0,11"
		}, {
			"uri": "http://dbpedia.org/resource/Dick_Spalding",
			"label": "spalding dick",
			"seq": "17,29"
		}]
	},
	{
		"id": "6e739eefd2bb47bb96e6386e4f9cb125",
		"question": "Which cport of Vishwajyot High School is also the genere of Battle chess ",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_Chess> <http://dbpedia.org/property/genre> ?uri. <http://dbpedia.org/resource/Vishwajyot_High_School> <http://dbpedia.org/ontology/sport> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/genre",
			"label": "genere",
			"seq": "50,55"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "cport",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Battle_Chess",
			"label": "battle chess",
			"seq": "60,71"
		}, {
			"uri": "http://dbpedia.org/resource/Vishwajyot_High_School",
			"label": "vishwajyot school",
			"seq": "15,31"
		}]
	},
	{
		"id": "cab0c79d0f10458ca8a01d1facfdbced",
		"question": "What are some neighboring cities of cologny?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/neighboringMunicipalities",
			"label": "neighboring",
			"seq": "14,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cologny",
			"label": "cologny",
			"seq": "36,42"
		}]
	},
	{
		"id": "69451801bb474b41ae95ff1273c0b4d2",
		"question": "Whose relatives are Uncle Henry (Oz) and Aunt Em?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Uncle_Henry_(Oz)> . ?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Aunt_Em> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Uncle_Henry_(Oz)",
			"label": "uncle henry (oz)",
			"seq": "20,35"
		}, {
			"uri": "http://dbpedia.org/resource/Aunt_Em",
			"label": "aunt",
			"seq": "41,44"
		}]
	},
	{
		"id": "7aa6c46d1605414485fffc097389e224",
		"question": "Give me the count of interests of the philosopher whose primary interest is Metaphysics ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Metaphysics> . ?x <http://dbpedia.org/property/mainInterests> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "interests",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "interests",
			"seq": "21,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Metaphysics",
			"label": "metaphysics",
			"seq": "76,86"
		}]
	},
	{
		"id": "bf75ca76a0bf455abcdc7d52f38f4686",
		"question": "Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri. <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ceremonialCounty",
			"label": "ceremonial county",
			"seq": "6,22"
		}, {
			"uri": "http://dbpedia.org/ontology/localAuthority",
			"label": "authority local",
			"seq": "56,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/East_Tilbury",
			"label": "tilbury east",
			"seq": "31,42"
		}, {
			"uri": "http://dbpedia.org/resource/Trinity_School,_Brentwood",
			"label": "brentwood trinity school,",
			"seq": "79,103"
		}]
	},
	{
		"id": "3c01ec18928a47818e34bd8753ddd084",
		"question": "Was Henry Knox a major general?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Henry_Knox> <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Major_general_(United_States)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryRank",
			"label": "major",
			"seq": "17,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henry_Knox",
			"label": "henry knox",
			"seq": "4,13"
		}, {
			"uri": "http://dbpedia.org/resource/Major_general_(United_States)",
			"label": "general major",
			"seq": "17,29"
		}]
	},
	{
		"id": "45920161e8044711a58a25da89962f81",
		"question": "List the common prime minister of the Robert Ray and graham richardson ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_Ray_(Australian_politician)> <http://dbpedia.org/ontology/primeMinister> ?uri. <http://dbpedia.org/resource/Graham_Richardson> <http://dbpedia.org/ontology/primeMinister> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "minister prime",
			"seq": "16,29"
		}, {
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "minister prime",
			"seq": "16,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Ray_(Australian_politician)",
			"label": "robert",
			"seq": "38,43"
		}, {
			"uri": "http://dbpedia.org/resource/Graham_Richardson",
			"label": "richardson graham",
			"seq": "53,69"
		}]
	},
	{
		"id": "7529473b5740452abc142ddb60132ef3",
		"question": "Name the television show where Mona Marshall has given voice and is distributed by Comedy Central?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/voices",
			"label": "voice",
			"seq": "55,59"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "68,78"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mona_Marshall",
			"label": "marshall mona",
			"seq": "31,43"
		}, {
			"uri": "http://dbpedia.org/resource/Comedy_Central",
			"label": "central comedy",
			"seq": "83,96"
		}]
	},
	{
		"id": "2b275605f1424ad1853d8f7367592875",
		"question": "List the common relegion affiliation of khadra Haji Ismail and Yasmin khatun ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Khadra_Haji_Ismail_Geid> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Yasmin_Khatun> <http://dbpedia.org/ontology/religion> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religion",
			"label": "relegion",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "relegion",
			"seq": "16,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Khadra_Haji_Ismail_Geid",
			"label": "khadra ismail haji",
			"seq": "40,57"
		}, {
			"uri": "http://dbpedia.org/resource/Yasmin_Khatun",
			"label": "yasmin khatun",
			"seq": "63,75"
		}]
	},
	{
		"id": "9d6f9d9b1c1e422e9a87fbf9f54e9197",
		"question": "What does the bridge go over, which is in Katima Mulilo?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Katima_Mulilo> . ?x <http://dbpedia.org/property/crosses> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "katima",
			"seq": "42,47"
		}, {
			"uri": "http://dbpedia.org/property/crosses",
			"label": "does",
			"seq": "5,8"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridge",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Katima_Mulilo",
			"label": "mulilo katima",
			"seq": "42,54"
		}]
	},
	{
		"id": "e679996aa101404d8a234c41e60c57ae",
		"question": "What are the television shows whose distributor is a division of Warner Bros. International TV?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/divisions> <http://dbpedia.org/resource/Warner_Bros._International_Television> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/divisions",
			"label": "division",
			"seq": "53,60"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributor",
			"seq": "36,46"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Warner_Bros._International_Television",
			"label": "international television",
			"seq": "13,36"
		}]
	},
	{
		"id": "7ad74ad36f964369a61126ec8c40b05c",
		"question": "Cleopatra V of Egypt is father to which royalty?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Cleopatra_V_of_Egypt> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mother",
			"label": "father",
			"seq": "24,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cleopatra_V_of_Egypt",
			"label": "cleopatra egypt",
			"seq": "0,14"
		}]
	},
	{
		"id": "b7a431005ad44021a254dc1844b76d13",
		"question": "Which founder of sea Gayle Music is also the judge of Rising Star ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sea_Gayle_Music> <http://dbpedia.org/property/founder> ?uri. <http://dbpedia.org/resource/Rising_Star_(U.S._TV_series)> <http://dbpedia.org/property/judges> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founder",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/property/judges",
			"label": "judge",
			"seq": "45,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sea_Gayle_Music",
			"label": "music gayle sea",
			"seq": "17,31"
		}, {
			"uri": "http://dbpedia.org/resource/Rising_Star_(U.S._TV_series)",
			"label": "rising star",
			"seq": "54,64"
		}]
	},
	{
		"id": "f2bd28b0ae0d4238b782d5243a20d893",
		"question": "What city has the football team in which Lee Robinson debuted?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Lee_Robinson_(American_football)> <http://dbpedia.org/ontology/debutTeam> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debuted",
			"seq": "54,60"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "city",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lee_Robinson_(American_football)",
			"label": "robinson football lee",
			"seq": "18,38"
		}]
	},
	{
		"id": "f7268d056d044b5a83b553245a5e37fc",
		"question": "Name the award given in Norway and presented by Swedish Academy ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Swedish_Academy> . ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Norway>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/presenter",
			"label": "presented",
			"seq": "35,43"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "norway",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Award",
			"label": "award",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Swedish_Academy",
			"label": "swedish academy",
			"seq": "48,62"
		}, {
			"uri": "http://dbpedia.org/resource/Norway",
			"label": "norway",
			"seq": "24,29"
		}]
	},
	{
		"id": "700a76b55b6d42619332fe4a076f5180",
		"question": "How many TV show has distributor located in Burbank California ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Burbank,_California> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "california",
			"seq": "52,61"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributor",
			"seq": "21,31"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Burbank,_California",
			"label": "california burbank",
			"seq": "44,61"
		}]
	},
	{
		"id": "b1ffee719580428fa70efc72d7f54ba5",
		"question": "NAme the emplyer for whihc Manu cornet has worked and also written in Google Web Toolkit ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Manu_Cornet> <http://dbpedia.org/property/employer> ?uri. <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "emplyer",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "the",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Manu_Cornet",
			"label": "cornet manu",
			"seq": "27,37"
		}, {
			"uri": "http://dbpedia.org/resource/Google_Web_Toolkit",
			"label": "toolkit google web",
			"seq": "70,87"
		}]
	},
	{
		"id": "31834099320540148da2f04b847413ce",
		"question": "How many people have been canonized by Pope Benedict XVI?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_Benedict_XVI>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/canonizedBy",
			"label": "canonized",
			"seq": "26,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pope_Benedict_XVI",
			"label": "benedict pope xvi",
			"seq": "39,55"
		}]
	},
	{
		"id": "4a746d60634147519a4030473d50732c",
		"question": "List the total number of awards of the musicals who have won Tony Award?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Tony_Award> . ?x <http://dbpedia.org/property/awards> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "25,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tony_Award",
			"label": "award",
			"seq": "25,29"
		}]
	},
	{
		"id": "4c46eefb71c64a1ba553158813943097",
		"question": "Who is the chancellor of Falmouth University ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Falmouth_University> <http://dbpedia.org/property/chancellor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/chancellor",
			"label": "chancellor",
			"seq": "11,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Falmouth_University",
			"label": "university falmouth",
			"seq": "25,43"
		}]
	},
	{
		"id": "463580ab42f54356945d1ed8c2f9b38a",
		"question": "Where was the movie after Khiladi 786 recorded?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Khiladi_786> <http://dbpedia.org/property/nextAlbum> ?x . ?x <http://dbpedia.org/property/recorded> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nextAlbum",
			"label": "was",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/property/recorded",
			"label": "recorded",
			"seq": "38,45"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "khiladi",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Khiladi_786",
			"label": "khiladi 786",
			"seq": "26,36"
		}]
	},
	{
		"id": "4f3bdd919e6d4880be68979047b407dc",
		"question": "What are the binomial authority of Menetries's warbler?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Menetries's_warbler> <http://dbpedia.org/ontology/binomialAuthority> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/binomialAuthority",
			"label": "authority binomial",
			"seq": "13,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Menetries's_warbler",
			"label": "menetries's warbler",
			"seq": "35,53"
		}]
	},
	{
		"id": "000f216ee4234a449366505231378897",
		"question": "Does Sonny Bill Williams belong in the Canterbury Bankstown Bulldogs club?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Sonny_Bill_Williams> <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Canterbury-Bankstown_Bulldogs> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/club",
			"label": "club",
			"seq": "69,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sonny_Bill_Williams",
			"label": "williams sonny bill",
			"seq": "5,23"
		}, {
			"uri": "http://dbpedia.org/resource/Canterbury-Bankstown_Bulldogs",
			"label": "canterbury bankstown bulldogs",
			"seq": "39,67"
		}]
	},
	{
		"id": "fa6f1a62c4da4b2cb2ed09d19e30faa9",
		"question": "Name the university which has Lieutenaunt general as superintendent and mascot as Gyrfalcon ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/superintendent> <http://dbpedia.org/resource/Lieutenant_general_(United_States)> . ?uri <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Gyrfalcon>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/superintendent",
			"label": "superintendent",
			"seq": "53,66"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "72,77"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lieutenant_general_(United_States)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Gyrfalcon",
			"label": "gyrfalcon",
			"seq": "82,90"
		}]
	},
	{
		"id": "799124b8d9d1448e8410fcc70d945f3a",
		"question": "What are the prizes awarded to the main members of DisneyToon Studios?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/DisneyToon_Studios> <http://dbpedia.org/ontology/keyPerson> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "members",
			"seq": "40,46"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awarded",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/DisneyToon_Studios",
			"label": "disneytoon studios",
			"seq": "51,68"
		}]
	},
	{
		"id": "99bb100d636f41afa90e89897f1a45f9",
		"question": "Humes High School is alma mater to which person?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/education> <http://dbpedia.org/resource/Humes_High_School>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "person",
			"seq": "41,46"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "41,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Humes_High_School",
			"label": "school humes high",
			"seq": "0,16"
		}]
	},
	{
		"id": "8cfa18c8ce664564a067feacf22a384e",
		"question": "What is the birth place of music artists which were associated with Albert Ayler ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Albert_Ayler> <http://dbpedia.org/property/associatedActs> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "associated",
			"seq": "52,61"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "place birth",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "artists",
			"seq": "33,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Albert_Ayler",
			"label": "albert ayler",
			"seq": "68,79"
		}]
	},
	{
		"id": "95af8dab7a8b41babdeee3232cb6c644",
		"question": "Is greasy pop recording the distributor of festival records?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Greasy_Pop_Records> <http://dbpedia.org/ontology/distributingLabel> <http://dbpedia.org/resource/Festival_Records> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributingLabel",
			"label": "distributor",
			"seq": "28,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Greasy_Pop_Records",
			"label": "records greasy",
			"seq": "3,16"
		}, {
			"uri": "http://dbpedia.org/resource/Festival_Records",
			"label": "festival records",
			"seq": "43,58"
		}]
	},
	{
		"id": "b03177d39e1c4d88be790e3782f841b9",
		"question": "List all the houses of United States Congress ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_Congress> <http://dbpedia.org/property/houses> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/houses",
			"label": "houses",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Congress",
			"label": "congress united states",
			"seq": "23,44"
		}]
	},
	{
		"id": "723c2b0c71d445fd9d6cf4d87006383a",
		"question": "Which sitcom is broadcasted by FOX and presented by Brian Dunkleman?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company> . ?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Brian_Dunkleman>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/channel",
			"label": "and",
			"seq": "35,37"
		}, {
			"uri": "http://dbpedia.org/property/presenter",
			"label": "presented",
			"seq": "39,47"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "sitcom",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fox_Broadcasting_Company",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Brian_Dunkleman",
			"label": "dunkleman brian",
			"seq": "52,66"
		}]
	},
	{
		"id": "441c7a0159b046ba94bec61882574380",
		"question": "Mota Engil built bridges over which rivers?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/builder> <http://dbpedia.org/resource/Mota-Engil> . ?x <http://dbpedia.org/ontology/crosses> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/builder",
			"label": "built",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/ontology/crosses",
			"label": "rivers",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridges",
			"seq": "17,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mota-Engil",
			"label": "engil mota",
			"seq": "0,9"
		}]
	},
	{
		"id": "aa4776a47306400884ee92fe3a010fed",
		"question": "Which television show 's producer is Stephen E. Ambrose and written by Erik Jendresen?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "producer",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "60,66"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "6,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stephen_E._Ambrose",
			"label": "stephen ambrose",
			"seq": "37,51"
		}, {
			"uri": "http://dbpedia.org/resource/Erik_Jendresen",
			"label": "jendresen erik",
			"seq": "71,84"
		}]
	},
	{
		"id": "6912db9bbb7f4886ab6ecf4dc2bc15ed",
		"question": "Which university provides license for WRVU ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WRVU> <http://dbpedia.org/property/licensee> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/licensee",
			"label": "license",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WRVU",
			"label": "wrvu",
			"seq": "38,41"
		}]
	},
	{
		"id": "024337cb227f4a1395be10e9cb63c5fa",
		"question": "UEM group have made bridges crossing over what?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/UEM_Group> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "bridges",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/property/crosses",
			"label": "crossing",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/UEM_Group",
			"label": "group uem",
			"seq": "0,8"
		}]
	},
	{
		"id": "b25e6105c24d44dc8ef492e2edf0b163",
		"question": "Which distributer of Glover (video game) is also the  publisher of the Super Mario Adventures ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Glover_(video_game)> <http://dbpedia.org/ontology/distributor> ?uri. <http://dbpedia.org/resource/Super_Mario_Adventures> <http://dbpedia.org/property/publisher> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributer",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/property/publisher",
			"label": "publisher",
			"seq": "54,62"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Glover_(video_game)",
			"label": "glover (video game)",
			"seq": "21,39"
		}, {
			"uri": "http://dbpedia.org/resource/Super_Mario_Adventures",
			"label": "adventures super mario",
			"seq": "71,92"
		}]
	},
	{
		"id": "099f8973922c4781bdf4854d70c385f9",
		"question": "What is the area of Tar Heel Sports Network ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tar_Heel_Sports_Network> <http://dbpedia.org/property/area> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/area",
			"label": "area",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tar_Heel_Sports_Network",
			"label": "network sports heel",
			"seq": "24,42"
		}]
	},
	{
		"id": "92db7b7d272f443ab8aed456c783d7d4",
		"question": "What is the alma mater of the scientists  known for  String theory?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/String_theory> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "42,50"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientists",
			"seq": "30,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/String_theory",
			"label": "theory string",
			"seq": "53,65"
		}]
	},
	{
		"id": "a3dc84be931049af977eedf2f543e0de",
		"question": "List the party of the office holder which also has the affiliation with Congress Socialist party ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/otherParty> <http://dbpedia.org/resource/Congress_Socialist_Party> . ?x <http://dbpedia.org/ontology/otherParty> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/otherParty",
			"label": "party",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/otherParty",
			"label": "party",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "22,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Congress_Socialist_Party",
			"label": "socialist congress party",
			"seq": "9,32"
		}]
	},
	{
		"id": "6a18707a2ce342118ea82c357c85d158",
		"question": "Which shows have voices from people signed up with ABC Records?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/ABC_Records> . ?uri <http://dbpedia.org/property/voices> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "abc",
			"seq": "51,53"
		}, {
			"uri": "http://dbpedia.org/property/voices",
			"label": "voices",
			"seq": "17,22"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/ABC_Records",
			"label": "records abc",
			"seq": "51,61"
		}]
	},
	{
		"id": "8e0ff8947d7541bcbd888c8a301c6565",
		"question": "Whose deputy was Franz von Papen?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Franz_von_Papen> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deputy",
			"label": "deputy",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Franz_von_Papen",
			"label": "papen franz von",
			"seq": "17,31"
		}]
	},
	{
		"id": "9bf4af0a69b54d8d8e335078f111f30e",
		"question": "Who is the developer of the software which is produced by Claris ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Claris> <http://dbpedia.org/property/products> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "produced",
			"seq": "46,53"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developer",
			"seq": "11,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Claris",
			"label": "claris",
			"seq": "58,63"
		}]
	},
	{
		"id": "9202aee754b8461bbb83aef174429e8a",
		"question": "Gamini Seneviratne and Katyayana are two followers of which religion?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gamini_Seneviratne> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Katyayana_(Buddhist)> <http://dbpedia.org/property/religion> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religion",
			"label": "religion",
			"seq": "60,67"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "religion",
			"seq": "60,67"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gamini_Seneviratne",
			"label": "seneviratne gamini",
			"seq": "0,17"
		}, {
			"uri": "http://dbpedia.org/resource/Katyayana_(Buddhist)",
			"label": "katyayana",
			"seq": "23,31"
		}]
	},
	{
		"id": "c58280258efb409faf6ecfb3f56cc513",
		"question": "Give me some administrators of bridges over which cars can go?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/carries",
			"label": "cars",
			"seq": "50,53"
		}, {
			"uri": "http://dbpedia.org/ontology/maintainedBy",
			"label": "administrators",
			"seq": "13,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridges",
			"seq": "31,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Motor_vehicle",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a1f6a0f1f36d4e55881ef792f416db91",
		"question": "Whose artworks are in Sao Paulo Museum of Art?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/S\u00e3o_Paulo_Museum_of_Art> . ?x <http://dbpedia.org/property/artist> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artwork>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/museum",
			"label": "museum",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "art",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/ontology/Artwork",
			"label": "artworks",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/S\u00e3o_Paulo_Museum_of_Art",
			"label": "museum paulo",
			"seq": "26,37"
		}]
	},
	{
		"id": "fa31ddfb133a4665a135c025a534bcb1",
		"question": "Through which states does the road go, which has a junction on Keningston Maryland?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/routeJunction> <http://dbpedia.org/resource/Kensington,_Maryland> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Road>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeJunction",
			"label": "junction",
			"seq": "51,58"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "states",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Road",
			"label": "road",
			"seq": "30,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kensington,_Maryland",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "933bc214a7024ecaac142fef92c9edaf",
		"question": "After the death of which political figure, did the Coalition Provisional Authority came into power?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Coalition_Provisional_Authority>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "authority",
			"seq": "73,81"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Coalition_Provisional_Authority",
			"label": "provisional coalition authority",
			"seq": "51,81"
		}]
	},
	{
		"id": "23da6d5becd34480952011dd96fec09f",
		"question": "Who is the music composer of Kenny Dies ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kenny_Dies> <http://dbpedia.org/ontology/musicComposer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer music",
			"seq": "11,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kenny_Dies",
			"label": "kenny dies",
			"seq": "29,38"
		}]
	},
	{
		"id": "f4b7def86f6e444b8521908b40cef72c",
		"question": "Name the scientist who is known for inventing Anthrax and was a member of Royal Society?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Anthrax> . ?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Royal_Society>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/property/prizes",
			"label": "is",
			"seq": "15,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anthrax",
			"label": "anthrax",
			"seq": "46,52"
		}, {
			"uri": "http://dbpedia.org/resource/Royal_Society",
			"label": "society royal",
			"seq": "74,86"
		}]
	},
	{
		"id": "e08cb98a10794ab59d7f5d076fadd9ac",
		"question": "Who were the opponents of the people buried in the tower of London?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Tower_of_London> . ?x <http://dbpedia.org/ontology/opponent> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingPlace",
			"label": "people",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponents",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "30,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tower_of_London",
			"label": "london tower",
			"seq": "51,62"
		}]
	},
	{
		"id": "c2d46fb94f5b46d5a4324c9cf5941feb",
		"question": "How many factions have fought when Egushawa was a commander?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Egushawa> . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "50,58"
		}, {
			"uri": "http://dbpedia.org/property/combatant",
			"label": "commander",
			"seq": "50,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Egushawa",
			"label": "egushawa",
			"seq": "35,42"
		}]
	},
	{
		"id": "922f99ad92c9458981c4e1027b28aa47",
		"question": "Which terrotory of Tonkin campaign also the death bed of Thophane Vnard ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonkin_Campaign> <http://dbpedia.org/ontology/territory> ?uri. <http://dbpedia.org/resource/Th\u00e9ophane_V\u00e9nard> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "terrotory",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "death",
			"seq": "44,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tonkin_Campaign",
			"label": "campaign tonkin",
			"seq": "19,33"
		}, {
			"uri": "http://dbpedia.org/resource/Th\u00e9ophane_V\u00e9nard",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7f9100dd95784db5aa76614d9d7d3c8b",
		"question": "Name the scientist whose supervisor also supervised Mary Ainsworth?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Mary_Ainsworth> . ?uri <http://dbpedia.org/property/doctoralAdvisor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "scientist",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "supervisor",
			"seq": "25,34"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mary_Ainsworth",
			"label": "ainsworth mary",
			"seq": "52,65"
		}]
	},
	{
		"id": "0f3429d03fd64266b8c2d76addb5c46c",
		"question": "By what style was Providence Chapel, Charlwood made?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Providence_Chapel,_Charlwood> <http://dbpedia.org/property/style> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/style",
			"label": "style",
			"seq": "8,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Providence_Chapel,_Charlwood",
			"label": "providence charlwood chapel,",
			"seq": "18,45"
		}]
	},
	{
		"id": "cb3a9f4a1e8d44a1adacbd1db7b0bab9",
		"question": "How many titles were given to people who engaged in the Operation Dragoon?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Operation_Dragoon> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "titles",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "were",
			"seq": "16,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Operation_Dragoon",
			"label": "operation dragoon",
			"seq": "56,72"
		}]
	},
	{
		"id": "05c509f7775f4415b2a95b4fcc959d1a",
		"question": "Who is the stockholder of Paphos International Airport ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paphos_International_Airport> <http://dbpedia.org/property/owner> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "stockholder",
			"seq": "11,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paphos_International_Airport",
			"label": "international airport paphos",
			"seq": "26,53"
		}]
	},
	{
		"id": "0aef9a11ec194002b66c6ff62f383798",
		"question": "How many other important things has the painter of Sarah Jane Adventures done?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> <http://dbpedia.org/property/creator> ?x . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "painter",
			"seq": "40,46"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "other",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Sarah_Jane_Adventures",
			"label": "adventures sarah jane",
			"seq": "51,71"
		}]
	},
	{
		"id": "5c55ff44c6ac449d923b0a43437ec726",
		"question": "Count all the universities who participated in the tournament won by Alabama Crimson Tides in 2015 ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/champion> <http://dbpedia.org/resource/2015_Alabama_Crimson_Tide_football_team> . ?uri <http://dbpedia.org/property/athletics> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/champion",
			"label": "crimson",
			"seq": "77,83"
		}, {
			"uri": "http://dbpedia.org/property/athletics",
			"label": "the",
			"seq": "10,12"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "14,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2015_Alabama_Crimson_Tide_football_team",
			"label": "crimson alabama",
			"seq": "69,83"
		}]
	},
	{
		"id": "21531e47046946809137beeadd4af94e",
		"question": "Did Raymond Picard take birth in Paris?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Raymond_Picard> <http://dbpedia.org/property/birthplace> <http://dbpedia.org/resource/Paris> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthplace",
			"label": "birth",
			"seq": "24,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Raymond_Picard",
			"label": "raymond picard",
			"seq": "4,17"
		}, {
			"uri": "http://dbpedia.org/resource/Paris",
			"label": "paris",
			"seq": "33,37"
		}]
	},
	{
		"id": "951988a7d1c344dfbb421152061e3778",
		"question": "What is the currency of the country of Kerguelen Islands?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/governmentType> ?x . ?x <http://dbpedia.org/ontology/currency> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governmentType",
			"label": "country",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currency",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kerguelen_Islands",
			"label": "kerguelen islands",
			"seq": "39,55"
		}]
	},
	{
		"id": "5e70185ec22f408795bf28e121e68522",
		"question": "What is the region of Lumberjack  ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lumberjack_100> <http://dbpedia.org/property/region> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/region",
			"label": "region",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lumberjack_100",
			"label": "lumberjack",
			"seq": "22,31"
		}]
	},
	{
		"id": "d5bf2f11fdfd47958b21a0ad3a2fdb90",
		"question": "For which country did Alexander Lippisch design airplanes?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Alexander_Lippisch> . ?x <http://dbpedia.org/property/nationalOrigin> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Aircraft>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "design",
			"seq": "41,46"
		}, {
			"uri": "http://dbpedia.org/property/nationalOrigin",
			"label": "airplanes",
			"seq": "48,56"
		}, {
			"uri": "http://dbpedia.org/ontology/Aircraft",
			"label": "airplanes",
			"seq": "48,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alexander_Lippisch",
			"label": "alexander lippisch",
			"seq": "22,39"
		}]
	},
	{
		"id": "30d267130c65402ba2c0efdc2ea5691f",
		"question": "Where did george f hoar and willian langer spend the most important time of their political career?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_Frisbie_Hoar> <http://dbpedia.org/property/order> ?uri. <http://dbpedia.org/resource/William_Langer> <http://dbpedia.org/property/order> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/order",
			"label": "george",
			"seq": "10,15"
		}, {
			"uri": "http://dbpedia.org/property/order",
			"label": "george",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_Frisbie_Hoar",
			"label": "george hoar",
			"seq": "10,20"
		}, {
			"uri": "http://dbpedia.org/resource/William_Langer",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a882c7c530ad4e7793896fce0ad1adef",
		"question": "What were the occupations of Marcus Floyd?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marcus_Floyd> <http://dbpedia.org/ontology/occupation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "occupations",
			"seq": "14,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marcus_Floyd",
			"label": "marcus floyd",
			"seq": "29,40"
		}]
	},
	{
		"id": "4afdea93d75746e79aa9c8da00070b4d",
		"question": "Whihc birthpalce of Svetlana Gounkina is also the largest city of Union State ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_State> <http://dbpedia.org/property/largestCity> ?uri. <http://dbpedia.org/resource/Svetlana_Gounkina> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/largestCity",
			"label": "largest city",
			"seq": "50,61"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birthpalce",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Union_State",
			"label": "union state",
			"seq": "66,76"
		}, {
			"uri": "http://dbpedia.org/resource/Svetlana_Gounkina",
			"label": "svetlana gounkina",
			"seq": "20,36"
		}]
	},
	{
		"id": "d6837e9445dd4d89ba1491d92ec402cf",
		"question": "What is the country whose speaker of the Dewan Rakyat is Pandikar Amin Mulia?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Pandikar_Amin_Mulia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "speaker",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pandikar_Amin_Mulia",
			"label": "pandikar mulia amin",
			"seq": "57,75"
		}]
	},
	{
		"id": "b65176114e5942798719100f7770c922",
		"question": "Who is the Pole driver of 1997 Canadian Grand Prix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/poleDriver",
			"label": "driver pole",
			"seq": "11,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1997_Canadian_Grand_Prix",
			"label": "canadian grand prix 1997",
			"seq": "26,49"
		}]
	},
	{
		"id": "012275fbe2924170a2dc92fcdfb02849",
		"question": "To which series does the book belong which came after the Blade Runner 2?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Blade_Runner_2:_The_Edge_of_Human> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/previousWork",
			"label": "book",
			"seq": "25,28"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blade_Runner_2:_The_Edge_of_Human",
			"label": "runner blade",
			"seq": "58,69"
		}]
	},
	{
		"id": "cb572a08bfb846ecb7dc9de05f273753",
		"question": "How many different things are used as ingredients in Sweden?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> . ?x <http://dbpedia.org/ontology/ingredient> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/country",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredients",
			"seq": "38,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sweden",
			"label": "sweden",
			"seq": "53,58"
		}]
	},
	{
		"id": "afaccc78ee0944f59fe4462b00ec4324",
		"question": "Which company's cars are assembled in Colombia?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Colombia> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/assembly",
			"label": "assembled",
			"seq": "25,33"
		}, {
			"uri": "http://dbpedia.org/property/parentCompany",
			"label": "company's",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "assembled",
			"seq": "25,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colombia",
			"label": "colombia",
			"seq": "38,45"
		}]
	},
	{
		"id": "4af9ff3c965e4f76b2e60a5a204d15e2",
		"question": "In which places do companies founded in Newcastle operate?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/City_of_Newcastle> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "operate",
			"seq": "50,56"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "19,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/City_of_Newcastle",
			"label": "newcastle",
			"seq": "40,48"
		}]
	},
	{
		"id": "91074221bb864151921f52c9ff1a71cf",
		"question": "Who composed the lyrics of Holler If Ya Hear Me ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Holler_If_Ya_Hear_Me_(musical)> <http://dbpedia.org/property/lyrics> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/lyrics",
			"label": "lyrics",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Holler_If_Ya_Hear_Me_(musical)",
			"label": "holler",
			"seq": "27,32"
		}]
	},
	{
		"id": "96205a1584514add8305c933034f1eda",
		"question": "Which ground of 2016 Fort Lauderdale Strikers season is the palce of birth of Kaitlyn Ashley ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri. <http://dbpedia.org/resource/Kaitlyn_Ashley> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ground",
			"label": "ground",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "birth",
			"seq": "69,73"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season",
			"label": "lauderdale strikers season fort 2016",
			"seq": "16,51"
		}, {
			"uri": "http://dbpedia.org/resource/Kaitlyn_Ashley",
			"label": "kaitlyn ashley",
			"seq": "78,91"
		}]
	},
	{
		"id": "89020ed4a12841c4abf8744b5f6f84d3",
		"question": "Musical artists who are associated with Ren & Angela were born where ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Ren\u00e9_&_Angela> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "associated",
			"seq": "24,33"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "with",
			"seq": "35,38"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical",
			"seq": "0,6"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ren\u00e9_&_Angela",
			"label": "angela ren",
			"seq": "40,49"
		}]
	},
	{
		"id": "31066fe6cfb246c7915377ea543a4b7c",
		"question": "Under which president did Loretta Ucelli and Ann Lewis hold an office?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Loretta_Ucelli> <http://dbpedia.org/ontology/president> ?uri. <http://dbpedia.org/resource/Ann_Lewis> <http://dbpedia.org/ontology/president> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Loretta_Ucelli",
			"label": "loretta ucelli",
			"seq": "26,39"
		}, {
			"uri": "http://dbpedia.org/resource/Ann_Lewis",
			"label": "lewis ann",
			"seq": "45,53"
		}]
	},
	{
		"id": "f5133efadcbd4156acea7c0709acf981",
		"question": "What are the things whose director of photography died in United States?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/cinematography> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/property/cinematography",
			"label": "photography",
			"seq": "38,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "united states",
			"seq": "58,70"
		}]
	},
	{
		"id": "3baa786d346248839da91be72db9ca83",
		"question": "Paul Leonard's work can be divided into how many series?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Paul_Leonard_(writer)> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "how",
			"seq": "40,42"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "49,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paul_Leonard_(writer)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "b6b8067555af4063906d88b2e32e1a03",
		"question": "List the mountains of the range Sierra Nevada (U.S.) located in  California?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mountainRange> <http://dbpedia.org/resource/Sierra_Nevada_(U.S.)> . ?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/California>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountains",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "located",
			"seq": "53,59"
		}, {
			"uri": "http://dbpedia.org/ontology/Mountain",
			"label": "mountains",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sierra_Nevada_(U.S.)",
			"label": "sierra nevada (u.s.)",
			"seq": "32,51"
		}, {
			"uri": "http://dbpedia.org/resource/California",
			"label": "california",
			"seq": "65,74"
		}]
	},
	{
		"id": "5c2f6e3d47024e54af60dad2cf684419",
		"question": "Where did Marvo originate?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mavro> <http://dbpedia.org/ontology/origin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "originate",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mavro",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c721ef1e42924f8e9f9e185cbc00b5ce",
		"question": "Which sects people are part of local political parties which fall under the International Muslim Brotherhood?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/international> <http://dbpedia.org/resource/Muslim_Brotherhood> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/international",
			"label": "international",
			"seq": "76,88"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "international",
			"seq": "76,88"
		}, {
			"uri": "http://dbpedia.org/ontology/PoliticalParty",
			"label": "political part",
			"seq": "23,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Muslim_Brotherhood",
			"label": "brotherhood muslim",
			"seq": "90,107"
		}]
	},
	{
		"id": "cbfd34299d434bea9171dd85e9dd79b1",
		"question": "Whose predecessor had Jenny Macklin as a deputy ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Jenny_Macklin> . ?uri <http://dbpedia.org/property/predecessor> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deputy",
			"label": "deputy",
			"seq": "41,46"
		}, {
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jenny_Macklin",
			"label": "macklin jenny",
			"seq": "22,34"
		}]
	},
	{
		"id": "0d987dfafc054e8db252832df3e4a7ad",
		"question": "In which company's boards does the founder of Bomis sit?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Bomis> <http://dbpedia.org/ontology/foundedBy> ?x . ?x <http://dbpedia.org/ontology/board> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "founder",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/ontology/board",
			"label": "boards",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bomis",
			"label": "bomis",
			"seq": "46,50"
		}]
	},
	{
		"id": "a568918506ad48f08dc9ea2bcf4f9d47",
		"question": "Who narrated the albums in which Harry Nilsson performed?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Harry_Nilsson> . ?x <http://dbpedia.org/property/narrated> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/artist",
			"label": "narrated",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/property/narrated",
			"label": "narrated",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Album",
			"label": "albums",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harry_Nilsson",
			"label": "nilsson harry",
			"seq": "33,45"
		}]
	},
	{
		"id": "39704553a7904c329400eabe0c954ebc",
		"question": "How many religion's commanders have served in the Royal Thai Army?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Royal_Thai_Army> <http://dbpedia.org/property/notableCommanders> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableCommanders",
			"label": "commanders",
			"seq": "20,29"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion's",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_Thai_Army",
			"label": "royal thai army",
			"seq": "50,64"
		}]
	},
	{
		"id": "86a47aa322204efb92fe728b58696cf5",
		"question": "What do craig Van tilbury and karen Grigorian do for a living?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Karen_Grigorian> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Craig_Van_Tilbury> <http://dbpedia.org/ontology/occupation> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "craig",
			"seq": "8,12"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "craig",
			"seq": "8,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Karen_Grigorian",
			"label": "grigorian karen",
			"seq": "30,44"
		}, {
			"uri": "http://dbpedia.org/resource/Craig_Van_Tilbury",
			"label": "tilbury craig",
			"seq": "8,20"
		}]
	},
	{
		"id": "eac2d5332100483581f13b166ac29e94",
		"question": "What is the hub of Wan Air ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wan_Air> <http://dbpedia.org/property/hubs> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hub",
			"seq": "12,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wan_Air",
			"label": "wan air",
			"seq": "19,25"
		}]
	},
	{
		"id": "573d48cf77f14483b1eb9fc6e0f73e90",
		"question": "What is the debut team of Tom O'Malley ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tom_O'Malley> <http://dbpedia.org/property/debutteam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut team",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tom_O'Malley",
			"label": "o'malley tom",
			"seq": "26,37"
		}]
	},
	{
		"id": "c9b163789f6749b0b14437f707eff6da",
		"question": "Name  the Pole driver of 1994 Spanish Grand Prix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/poleDriver",
			"label": "driver pole",
			"seq": "10,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1994_Spanish_Grand_Prix",
			"label": "spanish grand prix 1994",
			"seq": "25,47"
		}]
	},
	{
		"id": "0f0cefdb4c2e422bbbd46144cb44942e",
		"question": "Who was the First Driver of 1999 San Marino Grand Prix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstDriver",
			"label": "driver first",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1999_San_Marino_Grand_Prix",
			"label": "marino grand prix 1999 san",
			"seq": "28,53"
		}]
	},
	{
		"id": "fc528bb6de814b2ea1eac7c6438d3c57",
		"question": "Is Denver the largest city of Colorado?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Colorado> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Denver> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "14,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colorado",
			"label": "colorado",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/resource/Denver",
			"label": "denver",
			"seq": "3,8"
		}]
	},
	{
		"id": "1d4631ca121d427a83c91e0ec29ad410",
		"question": "List the universities from a country where Norwegian language is officially accepted.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Norwegian_language> . ?uri <http://dbpedia.org/ontology/country> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/officialLanguage",
			"label": "officially",
			"seq": "65,74"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Norwegian_language",
			"label": "norwegian language",
			"seq": "43,60"
		}]
	},
	{
		"id": "d374ddbebf124204be7f3f2b11d9e633",
		"question": "Which is the largest city of Union State ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_State> <http://dbpedia.org/property/largestCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/largestCity",
			"label": "largest city",
			"seq": "13,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Union_State",
			"label": "union state",
			"seq": "29,39"
		}]
	},
	{
		"id": "affd9d6f1cf44d159c675e5b8252c440",
		"question": "Where is the tunnel, which is operated by BNSF railways?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/operatedBy> <http://dbpedia.org/resource/BNSF_Railway> . ?x <http://dbpedia.org/property/location> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayTunnel>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operated",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "operated",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/ontology/RailwayTunnel",
			"label": "railways",
			"seq": "47,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BNSF_Railway",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4a54d07f42fc46d0b4b5125be3c636b4",
		"question": "What is the mascot of the military unit in which Ronald Wilson served?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ronald_Wilson> <http://dbpedia.org/property/branch> ?x . ?x <http://dbpedia.org/property/mascot> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "which",
			"seq": "43,47"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ronald_Wilson",
			"label": "wilson ronald",
			"seq": "49,61"
		}]
	},
	{
		"id": "6a33225c11054b9d90e85013e5e3fc02",
		"question": "Name the capital of Barony of Caux ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barony_of_Caux> <http://dbpedia.org/ontology/capital> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "capital",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Barony_of_Caux",
			"label": "barony caux of",
			"seq": "17,30"
		}]
	},
	{
		"id": "b6d318523b79426193d35e5a97ecda5f",
		"question": "Who battled under commander Egushawa in a conflict?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Egushawa> . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/property/combatant",
			"label": "commander",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "conflict",
			"seq": "42,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Egushawa",
			"label": "egushawa",
			"seq": "28,35"
		}]
	},
	{
		"id": "aabec43f1b95480f9b3904dddc7e81e9",
		"question": "In which country is Bocas del toro a capital of some region?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/capital> <http://dbpedia.org/resource/Bocas_Town,_Bocas_del_Toro> . ?x <http://dbpedia.org/property/country> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/capital",
			"label": "capital",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "country",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bocas_Town,_Bocas_del_Toro",
			"label": "bocas",
			"seq": "20,24"
		}]
	},
	{
		"id": "f42232f5745444f2b59bd33f072d1b72",
		"question": "List the launch site of the rockets whose one of the launch site has been Cape Canaveral Air Force Station Launch Complex 26 ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station_Launch_Complex_26> . ?x <http://dbpedia.org/ontology/launchSite> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Rocket>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launch",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launch",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Rocket",
			"label": "rockets",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station_Launch_Complex_26",
			"label": "canaveral station complex launch",
			"seq": "9,40"
		}]
	},
	{
		"id": "0ad9954f309c496ab4dfbd8056a58187",
		"question": "What products are made by Tehran based companies?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Tehran> . ?x <http://dbpedia.org/ontology/product> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "products",
			"seq": "5,12"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "products",
			"seq": "5,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "39,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tehran",
			"label": "tehran",
			"seq": "26,31"
		}]
	},
	{
		"id": "f78a415ef99f429ea50169b5a64d9fa0",
		"question": "What are some causes of death of European Americans?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/ethnicity> <http://dbpedia.org/resource/European_Americans> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ethnicity",
			"label": "death",
			"seq": "24,28"
		}, {
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "death",
			"seq": "24,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/European_Americans",
			"label": "americans european",
			"seq": "33,50"
		}]
	},
	{
		"id": "238c66a5b9f240c4810f764cc8ec134b",
		"question": "Name the movie whose screenplay is by Akiva Goldsman and directed by Joel Schumacher ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Joel_Schumacher>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screenplay",
			"seq": "21,30"
		}, {
			"uri": "http://dbpedia.org/ontology/director",
			"label": "directed",
			"seq": "57,64"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "32,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Akiva_Goldsman",
			"label": "goldsman akiva",
			"seq": "38,51"
		}, {
			"uri": "http://dbpedia.org/resource/Joel_Schumacher",
			"label": "schumacher",
			"seq": "74,83"
		}]
	},
	{
		"id": "af23ab128db046daa4567549a7470c27",
		"question": "List the writers of Tales of Suspense ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tales_of_Suspense> <http://dbpedia.org/property/writers> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writers",
			"label": "writers",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tales_of_Suspense",
			"label": "suspense tales",
			"seq": "20,33"
		}]
	},
	{
		"id": "bf7af8752a1748b9ab92c8690ddf65f9",
		"question": "Which settlement's neighboring municipalities are Cologny and Pregny-Chambsy?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> . ?uri <http://dbpedia.org/ontology/neighboringMunicipality> <http://dbpedia.org/resource/Pregny-Chamb\u00e9sy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/neighboringMunicipalities",
			"label": "municipalities neighboring",
			"seq": "19,44"
		}, {
			"uri": "http://dbpedia.org/ontology/neighboringMunicipality",
			"label": "neighboring",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Settlement",
			"label": "settlement's",
			"seq": "6,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cologny",
			"label": "cologny",
			"seq": "50,56"
		}, {
			"uri": "http://dbpedia.org/resource/Pregny-Chamb\u00e9sy",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "3ad9afca7d394e1fbf9ff22d4f90c9f0",
		"question": "In how many nations can I find people related to the feminist movement?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/movement> <http://dbpedia.org/resource/Feminism> . ?x <http://dbpedia.org/ontology/nationality> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/movement",
			"label": "movement",
			"seq": "62,69"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nations",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Feminism",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "deecfa268f4c4b99b10f15c85fea67b7",
		"question": "Name the home ground of  2015 Fort Lauderdale Strikers season ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ground",
			"label": "ground",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2015_Fort_Lauderdale_Strikers_season",
			"label": "lauderdale strikers season fort 2015",
			"seq": "25,60"
		}]
	},
	{
		"id": "2a1303ce259f4ddd8c63cb28a9edf458",
		"question": "What kind of things are on the radio stations affiliated with the Baltimore Ravens?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Baltimore_Ravens> . ?x <http://dbpedia.org/ontology/programmeFormat> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliated",
			"seq": "46,55"
		}, {
			"uri": "http://dbpedia.org/ontology/programmeFormat",
			"label": "baltimore",
			"seq": "66,74"
		}, {
			"uri": "http://dbpedia.org/ontology/RadioStation",
			"label": "stations",
			"seq": "37,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Baltimore_Ravens",
			"label": "baltimore ravens",
			"seq": "66,81"
		}]
	},
	{
		"id": "f4c678a394b842b18ef8ecce047526e5",
		"question": "Count the awards won by the people who graduated from the National and Kapodistrian University of Athens.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/National_and_Kapodistrian_University_of_Athens> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "graduated",
			"seq": "39,47"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_and_Kapodistrian_University_of_Athens",
			"label": "kapodistrian university national",
			"seq": "58,89"
		}]
	},
	{
		"id": "339fba01bf374193aaa038e896284b65",
		"question": "Which current member of Insect vs Robots is also the music composer of Kenny Dies ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Insects_vs_Robots> <http://dbpedia.org/property/currentMembers> ?uri. <http://dbpedia.org/resource/Kenny_Dies> <http://dbpedia.org/ontology/musicComposer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "current member",
			"seq": "6,19"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer music",
			"seq": "53,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Insects_vs_Robots",
			"label": "robots insect",
			"seq": "24,36"
		}, {
			"uri": "http://dbpedia.org/resource/Kenny_Dies",
			"label": "kenny dies",
			"seq": "71,80"
		}]
	},
	{
		"id": "357dc6f5b3b84bf398fe8ef62344373d",
		"question": "who was the president under which Joe Purcell is a lieutenant?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Joe_Purcell> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/lieutenant",
			"label": "lieutenant",
			"seq": "51,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joe_Purcell",
			"label": "purcell joe",
			"seq": "34,44"
		}]
	},
	{
		"id": "f04972321b83404b87e4d7cf5de5c5a6",
		"question": "Name the narrators of the album which has been narrated by Alan Thicke ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/narrated> <http://dbpedia.org/resource/Alan_Thicke> . ?x <http://dbpedia.org/property/narrated> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/narrated",
			"label": "narrated",
			"seq": "47,54"
		}, {
			"uri": "http://dbpedia.org/property/narrated",
			"label": "narrated",
			"seq": "47,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alan_Thicke",
			"label": "thicke alan",
			"seq": "59,69"
		}]
	},
	{
		"id": "5953c1ca741b4952bfa7231396751599",
		"question": "Where did Georges Wolinski and Judson Huss die/",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georges_Wolinski> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/Judson_Huss> <http://dbpedia.org/property/deathPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "georges",
			"seq": "10,16"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "die/",
			"seq": "43,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Georges_Wolinski",
			"label": "wolinski georges",
			"seq": "10,25"
		}, {
			"uri": "http://dbpedia.org/resource/Judson_Huss",
			"label": "judson huss",
			"seq": "31,41"
		}]
	},
	{
		"id": "c1cdd524499641ec80f02549a8991821",
		"question": "Which city is known for the people working in the western penn hospital?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/workInstitutions> <http://dbpedia.org/resource/Western_Pennsylvania_Hospital> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/workInstitutions",
			"label": "working",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "penn",
			"seq": "58,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Western_Pennsylvania_Hospital",
			"label": "hospital western",
			"seq": "50,65"
		}]
	},
	{
		"id": "a92bf834ce444970965064755aec2e3e",
		"question": "Which pole driver of 1989 Portuguese Grand Prix was also the first driver of 1993 European Grand Prix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1993_European_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri. <http://dbpedia.org/resource/1989_Portuguese_Grand_Prix> <http://dbpedia.org/ontology/poleDriver> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstDriver",
			"label": "driver",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/ontology/poleDriver",
			"label": "driver",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1993_European_Grand_Prix",
			"label": "european grand prix",
			"seq": "37,55"
		}, {
			"uri": "http://dbpedia.org/resource/1989_Portuguese_Grand_Prix",
			"label": "portuguese grand prix",
			"seq": "26,46"
		}]
	},
	{
		"id": "205217dd61614f7b9dff96c1b2f7202c",
		"question": "Which team won the American Football League?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/American_Football_League> <http://dbpedia.org/property/champion> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/champion",
			"label": "american",
			"seq": "19,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Football_League",
			"label": "football american league",
			"seq": "19,42"
		}]
	},
	{
		"id": "216518a4ffe546ce91c5e430549b0037",
		"question": "Does the Jordan River start in the Golan Heights?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jordan_River> <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/Golan_Heights> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceRegion",
			"label": "river",
			"seq": "16,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jordan_River",
			"label": "jordan river",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/resource/Golan_Heights",
			"label": "heights golan",
			"seq": "35,47"
		}]
	},
	{
		"id": "8e346529106147e896a3f2e56bf87969",
		"question": "Give me all office holders who finally retired in Montpelier, Orange, Virgina?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "retired",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e5f9dd5ab9324d1ebbdf61c7e4403c15",
		"question": "what is the headquarters of Juan Dalmau Ramerez?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juan_Dalmau_Ram\u00edrez> <http://dbpedia.org/property/headquarters> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Juan_Dalmau_Ram\u00edrez",
			"label": "dalmau",
			"seq": "33,38"
		}]
	},
	{
		"id": "fcf5f996614b4543a14a5ec5eaa362a1",
		"question": "Name the wine regions of Bogdanua ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bogdanu\u0161a> <http://dbpedia.org/ontology/wineRegion> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "regions",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bogdanu\u0161a",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "2f9e649669aa4782919424b5cf845cf3",
		"question": "In which company is Raymond Conner at an important position?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Raymond_Conner> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "position",
			"seq": "51,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Raymond_Conner",
			"label": "raymond conner",
			"seq": "20,33"
		}]
	},
	{
		"id": "494baea1d2104b42a7e47d508d08648e",
		"question": "In which city are the schools whose district is Mumbai Suburban?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/district> <http://dbpedia.org/resource/Mumbai_Suburban_district> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/district",
			"label": "district",
			"seq": "36,43"
		}, {
			"uri": "http://dbpedia.org/ontology/city",
			"label": "city",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "22,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mumbai_Suburban_district",
			"label": "suburban district mumbai",
			"seq": "36,59"
		}]
	},
	{
		"id": "a542749bd8ce457aa58ef76df55d1102",
		"question": "Which military people served their allegiance to Union (American Civil War)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/allegiance> <http://dbpedia.org/resource/Union_(American_Civil_War)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "35,44"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryPerson",
			"label": "military",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Union_(American_Civil_War)",
			"label": "(american",
			"seq": "55,63"
		}]
	},
	{
		"id": "aa025dbe97974996bdee7ea712d6fcd2",
		"question": "Name the actors of the TV show which has an episode named The Five ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Five_(The_Vampire_Diaries)> <http://dbpedia.org/property/series> ?x . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/series",
			"label": "episode",
			"seq": "44,50"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "an",
			"seq": "41,42"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "26,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Five_(The_Vampire_Diaries)",
			"label": "five",
			"seq": "62,65"
		}]
	},
	{
		"id": "9814a502d6344b8684c3ef7c53257f8e",
		"question": "Where are the National Academy Museum and School awardwinners buried?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/National_Academy_Museum_and_School> . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awardwinners",
			"seq": "49,60"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "national",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Academy_Museum_and_School",
			"label": "national academy school museum",
			"seq": "14,43"
		}]
	},
	{
		"id": "6f8df171b716419ba1bcf20b5e90e4b1",
		"question": "Give me a count of movies whose film editor is Anthony Harvey?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Anthony_Harvey>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editing",
			"label": "editor",
			"seq": "37,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "film",
			"seq": "32,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anthony_Harvey",
			"label": "anthony harvey",
			"seq": "47,60"
		}]
	},
	{
		"id": "d2bdea95e8cb4e0ba89f46a1ac662d0c",
		"question": "Which species' members are there in the animal kingdom?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> . ?x <http://dbpedia.org/ontology/species> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/kingdom",
			"label": "kingdom",
			"seq": "47,53"
		}, {
			"uri": "http://dbpedia.org/ontology/species",
			"label": "species'",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Animal",
			"label": "animal",
			"seq": "40,45"
		}]
	},
	{
		"id": "7a39f5fc355c464eb024ab21d1b43e89",
		"question": "What is the common location of  tomb of the Elizabeth of Rhuddlan and Isabel of Cambridge?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elizabeth_of_Rhuddlan> <http://dbpedia.org/property/placeOfBurial> ?uri. <http://dbpedia.org/resource/Isabel_of_Cambridge,_Countess_of_Essex> <http://dbpedia.org/property/placeOfBurial> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "cambridge",
			"seq": "80,88"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "cambridge",
			"seq": "80,88"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elizabeth_of_Rhuddlan",
			"label": "elizabeth rhuddlan",
			"seq": "44,61"
		}, {
			"uri": "http://dbpedia.org/resource/Isabel_of_Cambridge,_Countess_of_Essex",
			"label": "cambridge isabel",
			"seq": "70,85"
		}]
	},
	{
		"id": "835e3bc3c8764022b3555cb4b8175d3b",
		"question": "Is camel  of the chordate phylum?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Camel> <http://dbpedia.org/property/phylum> <http://dbpedia.org/resource/Chordate> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/phylum",
			"label": "phylum",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Camel",
			"label": "camel",
			"seq": "3,7"
		}, {
			"uri": "http://dbpedia.org/resource/Chordate",
			"label": "chordate",
			"seq": "17,24"
		}]
	},
	{
		"id": "2c061f3427d347acaf1d538fba4ea75e",
		"question": "Which company had built the rockets launched at the Cape Canaveral Air Force Station Space Launch Complex 17?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station_Space_Launch_Complex_17> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launched",
			"seq": "36,43"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "canaveral",
			"seq": "57,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station_Space_Launch_Complex_17",
			"label": "canaveral station complex",
			"seq": "57,81"
		}]
	},
	{
		"id": "19bac1217f0341eaa5cdfa082347f6b0",
		"question": "Who is the leader of Allgemeine SS ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allgemeine_SS> <http://dbpedia.org/ontology/leader> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leader",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Allgemeine_SS",
			"label": "allgemeine",
			"seq": "21,30"
		}]
	},
	{
		"id": "0dbbb933294f48bcab3c33d1298ef7e1",
		"question": "How many important works have been done by Russel Davies?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "works",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Russell_T_Davies",
			"label": "russel davies",
			"seq": "43,55"
		}]
	},
	{
		"id": "04215c1446384126b9c2ac65d0431a1a",
		"question": "What are the former team of the american football players who played at gridiron football position ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Tackle_(gridiron_football_position)> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/position",
			"label": "position",
			"seq": "90,97"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former team",
			"seq": "13,23"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football",
			"seq": "41,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tackle_(gridiron_football_position)",
			"label": "position gridiron football",
			"seq": "41,66"
		}]
	},
	{
		"id": "3accaa813d154ec19e1d62b48eb60314",
		"question": "What is the birth name  of Putri Raemawasti ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Putri_Raemawasti> <http://dbpedia.org/property/birthName> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthName",
			"label": "birth name",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Putri_Raemawasti",
			"label": "raemawasti putri",
			"seq": "27,42"
		}]
	},
	{
		"id": "225d5bcff9274ce3bbf7c2527939ee7b",
		"question": "What  is the meaning of the Isa (name) which is also a relegion of Sacred Heart Convent School (Bangkok) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Isa_(name)> <http://dbpedia.org/property/meaning> ?uri. <http://dbpedia.org/resource/Sacred_Heart_Convent_School_(Bangkok)> <http://dbpedia.org/ontology/type> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/meaning",
			"label": "meaning",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/type",
			"label": "the",
			"seq": "9,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Isa_(name)",
			"label": "(name) isa",
			"seq": "28,37"
		}, {
			"uri": "http://dbpedia.org/resource/Sacred_Heart_Convent_School_(Bangkok)",
			"label": "(bangkok) convent school sacred heart",
			"seq": "67,103"
		}]
	},
	{
		"id": "7717547eedc44d92a881117189824621",
		"question": "Who are the managers of clubs participating in the 2014-2015 Football League Championship?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/season> <http://dbpedia.org/resource/2014\u201315_Football_League_Championship> . ?uri <http://dbpedia.org/ontology/managerClub> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/season",
			"label": "league",
			"seq": "70,75"
		}, {
			"uri": "http://dbpedia.org/ontology/managerClub",
			"label": "managers",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2014\u201315_Football_League_Championship",
			"label": "championship football league",
			"seq": "61,88"
		}]
	},
	{
		"id": "91305aeb7cf3416f855db6b604974650",
		"question": "From where does the river Upper Neretva start flowing?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/riverMouth> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "20,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Upper_Neretva",
			"label": "neretva upper",
			"seq": "26,38"
		}]
	},
	{
		"id": "f4ff42e2419941e88bca179599c2ea22",
		"question": "Which official residence of Nikos Pateras is also the stadium of anionios G.S.S. season 2014-15 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2014\u201315_Panionios_G.S.S._season> <http://dbpedia.org/property/stadium> ?uri. <http://dbpedia.org/resource/Nikos_Pateras> <http://dbpedia.org/ontology/residence> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/stadium",
			"label": "stadium",
			"seq": "54,60"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residence",
			"seq": "15,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2014\u201315_Panionios_G.S.S._season",
			"label": "anionios season g.s.s.",
			"seq": "65,86"
		}, {
			"uri": "http://dbpedia.org/resource/Nikos_Pateras",
			"label": "pateras nikos",
			"seq": "28,40"
		}]
	},
	{
		"id": "d5eec8fa9c454d71af0be385eb6d2193",
		"question": "Joe Shuster has created how many comics character ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Joe_Shuster>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creators",
			"label": "created",
			"seq": "16,22"
		}, {
			"uri": "http://dbpedia.org/ontology/ComicsCharacter",
			"label": "character comics",
			"seq": "33,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joe_Shuster",
			"label": "shuster joe",
			"seq": "0,10"
		}]
	},
	{
		"id": "0309871f7c564e6bbce3d3b481300bd8",
		"question": "In which part of the world can i find Xynisteri and Mavro?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/ontology/origin> ?uri. <http://dbpedia.org/resource/Mavro> <http://dbpedia.org/ontology/origin> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "in",
			"seq": "0,1"
		}, {
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "in",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Xynisteri",
			"label": "xynisteri",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/resource/Mavro",
			"label": "mavro",
			"seq": "52,56"
		}]
	},
	{
		"id": "84bc7466ff1a47cf86ed7bc090ba96b3",
		"question": "What are the awards won by the parent of Daniel Bergmans?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Daniel_Bergman> <http://dbpedia.org/ontology/parent> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parent",
			"seq": "31,36"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Daniel_Bergman",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6772f2e11d834d0dabc10d05d6a4ab72",
		"question": "What is the country of the Hirth Acrostar and the Cobra missile?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hirth_Acrostar> <http://dbpedia.org/ontology/origin> ?uri. <http://dbpedia.org/resource/Cobra_(missile)> <http://dbpedia.org/ontology/origin> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "cobra",
			"seq": "50,54"
		}, {
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "cobra",
			"seq": "50,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hirth_Acrostar",
			"label": "acrostar hirth",
			"seq": "27,40"
		}, {
			"uri": "http://dbpedia.org/resource/Cobra_(missile)",
			"label": "missile cobra",
			"seq": "50,62"
		}]
	},
	{
		"id": "5fc0f9b047174d33bd4225a3d24e5f30",
		"question": "What did Steven T Mason's father die from?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Stevens_T._Mason> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "die",
			"seq": "33,35"
		}, {
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "father",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stevens_T._Mason",
			"label": "steven",
			"seq": "9,14"
		}]
	},
	{
		"id": "0ebb619e771642908242969b42bbf642",
		"question": "Collect and return a list of things in the area where Spanish language is used?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Spanish_language> . ?uri <http://dbpedia.org/ontology/location> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/language",
			"label": "language",
			"seq": "62,69"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "things",
			"seq": "29,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Spanish_language",
			"label": "language spanish",
			"seq": "54,69"
		}]
	},
	{
		"id": "62e9fa82eea7498790e2d5ca5a664a60",
		"question": "What made jo garcia and merritt cabal both famous?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jo_Garcia> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Merritt_Cabal> <http://dbpedia.org/ontology/knownFor> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "famous",
			"seq": "43,48"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "famous",
			"seq": "43,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jo_Garcia",
			"label": "garcia jo",
			"seq": "10,18"
		}, {
			"uri": "http://dbpedia.org/resource/Merritt_Cabal",
			"label": "merritt cabal",
			"seq": "24,36"
		}]
	},
	{
		"id": "6db524c4b72a43a788d1622f07782c39",
		"question": "Is GIMP written in C?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/GIMP> <http://dbpedia.org/ontology/programmingLanguage> <http://dbpedia.org/resource/C_(programming_language)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/programmingLanguage",
			"label": "written",
			"seq": "8,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/GIMP",
			"label": "gimp",
			"seq": "3,6"
		}, {
			"uri": "http://dbpedia.org/resource/C_(programming_language)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9465a9187c3f42a9b64cc0da135c6784",
		"question": "What are all the countires where food related to tuna salad is consumed ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Tuna_salad> . ?x <http://dbpedia.org/property/country> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "38,44"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "countires",
			"seq": "17,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tuna_salad",
			"label": "salad tuna",
			"seq": "49,58"
		}]
	},
	{
		"id": "df77a0a57a254a339759da5845ded0cf",
		"question": "Who is the founder of Pittsburgh ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pittsburgh> <http://dbpedia.org/ontology/founder> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founder",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pittsburgh",
			"label": "pittsburgh",
			"seq": "22,31"
		}]
	},
	{
		"id": "312c5bacb7c14ea1b41c0e219107c417",
		"question": "How many different genres led to other genres where drums are important?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/instruments> <http://dbpedia.org/resource/Drum_kit> . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicGenre>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/instruments",
			"label": "drums",
			"seq": "52,56"
		}, {
			"uri": "http://dbpedia.org/ontology/stylisticOrigin",
			"label": "important",
			"seq": "62,70"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicGenre",
			"label": "genres",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Drum_kit",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9b1fb4f02cfb4023bb3596310cad80bc",
		"question": "How many people have played for the NBA?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/league> <http://dbpedia.org/resource/National_Basketball_Association>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "played",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Basketball_Association",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "516925179add4b768fc74c74f434222a",
		"question": "Name the river  whose source location is Nevado Mismi and region is Arequipa Region?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Nevado_Mismi> . ?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/Arequipa_Region>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceLocation",
			"label": "location source",
			"seq": "22,36"
		}, {
			"uri": "http://dbpedia.org/property/sourceRegion",
			"label": "source region",
			"seq": "22,34"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nevado_Mismi",
			"label": "nevado mismi",
			"seq": "41,52"
		}, {
			"uri": "http://dbpedia.org/resource/Arequipa_Region",
			"label": "arequipa region",
			"seq": "58,72"
		}]
	},
	{
		"id": "4dc32ad3dae4429d963b5b4282c18767",
		"question": "Where is the headquarters of the public transit system which operators Go-to-card ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Go-To_card> <http://dbpedia.org/property/operator> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PublicTransitSystem>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operator",
			"label": "operators",
			"seq": "61,69"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "13,24"
		}, {
			"uri": "http://dbpedia.org/ontology/PublicTransitSystem",
			"label": "transit system public",
			"seq": "33,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Go-To_card",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0e0a2a498e574ec6925f6cb31cd3c729",
		"question": "How many people played for Newell's Old Boys?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/Newell's_Old_Boys>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/youthclubs",
			"label": "old",
			"seq": "36,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Newell's_Old_Boys",
			"label": "newell's boys old",
			"seq": "27,43"
		}]
	},
	{
		"id": "fb19f3dd1d7640a0b47e3dea68b42bb9",
		"question": "What is the citizenship of Ren Romano ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ren\u00e9_Romano> <http://dbpedia.org/property/citizenship> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/citizenship",
			"label": "citizenship",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ren\u00e9_Romano",
			"label": "romano ren",
			"seq": "27,36"
		}]
	},
	{
		"id": "2e8a9d01f6f54a03ab23c1741dc25aa1",
		"question": "Where was the company who is the operator of Harihar Airport founded ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Harihar_Airport> <http://dbpedia.org/ontology/operator> ?x . ?x <http://dbpedia.org/property/foundation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operator",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "61,67"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harihar_Airport",
			"label": "harihar airport",
			"seq": "45,59"
		}]
	},
	{
		"id": "ffe030d0d0234e8498265e9d4826ab1b",
		"question": "Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/Burnet_R._Maybank> <http://dbpedia.org/property/branch> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "67,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay",
			"label": "station kaneohe marine corps",
			"seq": "23,50"
		}, {
			"uri": "http://dbpedia.org/resource/Burnet_R._Maybank",
			"label": "maybank burnet",
			"seq": "81,94"
		}]
	},
	{
		"id": "ada05be944104948987543e9a09aa581",
		"question": "To which american football teams does the Heinz Field serve as home stadium?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heinz_Field> <http://dbpedia.org/property/tenants> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/tenants",
			"label": "teams",
			"seq": "27,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Heinz_Field",
			"label": "heinz field",
			"seq": "42,52"
		}]
	},
	{
		"id": "a9c0a13767d7483590305e3413152c50",
		"question": "What is the official name of Colorado wine ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Colorado_wine> <http://dbpedia.org/property/officialName> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/officialName",
			"label": "official name",
			"seq": "12,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colorado_wine",
			"label": "colorado wine",
			"seq": "29,41"
		}]
	},
	{
		"id": "244b1c2f6e3e4c57b2532ec5e4d15329",
		"question": "Who wrote the US steel hour?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_United_States_Steel_Hour> <http://dbpedia.org/ontology/writer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "wrote",
			"seq": "4,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_United_States_Steel_Hour",
			"label": "steel hour the",
			"seq": "10,23"
		}]
	},
	{
		"id": "6feb76adf49746a2a18f9d21a1d22306",
		"question": "What is the occupation of the band members of The Shirelles?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/The_Shirelles> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "occupation",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "occupation",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Shirelles",
			"label": "shirelles the",
			"seq": "8,20"
		}]
	},
	{
		"id": "cd190de039534a6d91abee2ac3dd411c",
		"question": "Which tv series have a score composed by judy hard angelo?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Judy_Hart_Angelo>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composed",
			"seq": "29,36"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "series",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Judy_Hart_Angelo",
			"label": "angelo judy",
			"seq": "41,51"
		}]
	},
	{
		"id": "7472a240a44b44a69fecf3305677e72e",
		"question": "Count the total number of cast member of the television shows whose actress is Joey McIntyre?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Joey_McIntyre> . ?x <http://dbpedia.org/property/starring> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "television",
			"seq": "45,54"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "television",
			"seq": "45,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joey_McIntyre",
			"label": "mcintyre joey",
			"seq": "79,91"
		}]
	},
	{
		"id": "48ed9662c9d34e7bb7ff13ec8d02c81f",
		"question": "Name the TV show with artist Christopher Franke and cast member Jason Carter ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "carter",
			"seq": "70,75"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christopher_Franke",
			"label": "christopher franke",
			"seq": "29,46"
		}, {
			"uri": "http://dbpedia.org/resource/Jason_Carter_(actor)",
			"label": "carter jason",
			"seq": "64,75"
		}]
	},
	{
		"id": "0c0ff7a433a646868818f8629d5a0134",
		"question": "What is the former partner of the figure skaters whose current partner is Alexa Scimeca?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/currentPartner> <http://dbpedia.org/resource/Alexa_Scimeca> . ?x <http://dbpedia.org/ontology/formerPartner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FigureSkater>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currentPartner",
			"label": "partner",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/formerPartner",
			"label": "partner",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/FigureSkater",
			"label": "figure",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alexa_Scimeca",
			"label": "scimeca alexa",
			"seq": "74,86"
		}]
	},
	{
		"id": "ca12347dfd3541a5a313ae988767ca9f",
		"question": "Name the office holder with successor as Adrian A Basora and child as Lori Black ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "child",
			"seq": "61,65"
		}, {
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lori_Black",
			"label": "black lori",
			"seq": "70,79"
		}, {
			"uri": "http://dbpedia.org/resource/Adrian_A._Basora",
			"label": "basora adrian",
			"seq": "41,53"
		}]
	},
	{
		"id": "a188179d04e740928d43dc584501c365",
		"question": "Name all the broadcast area of the TV stations which has Rodrigues as one of the broadcast area ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/broadcastArea> <http://dbpedia.org/resource/Rodrigues> . ?x <http://dbpedia.org/property/broadcastArea> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/broadcastArea",
			"label": "broadcast",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/property/broadcastArea",
			"label": "broadcast",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionStation",
			"label": "stations",
			"seq": "38,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rodrigues",
			"label": "rodrigues",
			"seq": "57,65"
		}]
	},
	{
		"id": "fb88bbd86d0d4401951bf15cad3dc0ad",
		"question": "What band has Joe Hahn and Chester Bennington?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Joe_Hahn> . ?uri <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Chester_Bennington> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "chester",
			"seq": "27,33"
		}, {
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "chester",
			"seq": "27,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joe_Hahn",
			"label": "hahn joe",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/resource/Chester_Bennington",
			"label": "bennington chester",
			"seq": "27,44"
		}]
	},
	{
		"id": "a7f115fe1444401b808019eec0ae4008",
		"question": "In which cities are there american football teams where Matt Snorton played?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Matt_Snorton> <http://dbpedia.org/property/pastteams> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastteams",
			"label": "teams",
			"seq": "44,48"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "snorton",
			"seq": "61,67"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballTeam",
			"label": "football american",
			"seq": "26,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Matt_Snorton",
			"label": "snorton matt",
			"seq": "56,67"
		}]
	},
	{
		"id": "95f0c14ef2194c5cb7fb4fafa947da6a",
		"question": "With which musical artist is the producer of Spotlight associated ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Spotlight_(Jennifer_Hudson_song)> <http://dbpedia.org/ontology/producer> ?x . ?x <http://dbpedia.org/property/associatedActs> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "associated",
			"seq": "55,64"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical artist",
			"seq": "11,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Spotlight_(Jennifer_Hudson_song)",
			"label": "spotlight",
			"seq": "45,53"
		}]
	},
	{
		"id": "3c149a4bfbfd4fcdb7f24af562373951",
		"question": "Name the office holder whose constituency is Noe Valley, San Francisco and belongs to military unit USS Kittiwake (ASR-13)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Noe_Valley,_San_Francisco> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/USS_Kittiwake_(ASR-13)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "29,40"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military unit",
			"seq": "86,98"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Noe_Valley,_San_Francisco",
			"label": "francisco valley,",
			"seq": "49,65"
		}, {
			"uri": "http://dbpedia.org/resource/USS_Kittiwake_(ASR-13)",
			"label": "kittiwake (asr-13)",
			"seq": "104,121"
		}]
	},
	{
		"id": "b96656337c6747a381cea7ab41528178",
		"question": "How many awards have the french people received?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/stateOfOrigin> <http://dbpedia.org/resource/French_people> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "french",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/French_people",
			"label": "people french",
			"seq": "25,37"
		}]
	},
	{
		"id": "06dc963aaf6f4541912707a69c9c48e9",
		"question": "Where is the VP buried, which was served by Frederick Cooke?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Frederick_Cooke_(socialist)> <http://dbpedia.org/ontology/vicePresident> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/vicePresident",
			"label": "frederick",
			"seq": "44,52"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "buried,",
			"seq": "16,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frederick_Cooke_(socialist)",
			"label": "frederick cooke",
			"seq": "44,58"
		}]
	},
	{
		"id": "501bbfe69c3a4fcd88d284639842d8dc",
		"question": "What is the sea connected to Oulu and Turku?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Oulu> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Turku> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "is",
			"seq": "5,6"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "is",
			"seq": "5,6"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "12,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oulu",
			"label": "oulu",
			"seq": "29,32"
		}, {
			"uri": "http://dbpedia.org/resource/Turku",
			"label": "turku",
			"seq": "38,42"
		}]
	},
	{
		"id": "9d4afc6a5c164d81bbeb24a1bc568c3f",
		"question": "does the US navy have the structure of command of us department of defence?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/property/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/commandStructure",
			"label": "structure command",
			"seq": "26,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Navy",
			"label": "navy",
			"seq": "12,15"
		}, {
			"uri": "http://dbpedia.org/resource/United_States_Department_of_Defense",
			"label": "department",
			"seq": "53,62"
		}]
	},
	{
		"id": "f8dc5dd3cf8c4e4daf406be6479ac498",
		"question": "What country did the successor of William Ofori Atta swear his oath to?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/William_Ofori_Atta> . ?x <http://dbpedia.org/property/allegiance> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "successor",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "william",
			"seq": "34,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Ofori_Atta",
			"label": "william ofori atta",
			"seq": "34,51"
		}]
	},
	{
		"id": "c9d5a274b50f454986740fdfafd327cc",
		"question": "Through which label has Katy B released her singles?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Katy_B> . ?x <http://dbpedia.org/ontology/recordLabel> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "her",
			"seq": "40,42"
		}, {
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "label",
			"seq": "14,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Single",
			"label": "singles",
			"seq": "44,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Katy_B",
			"label": "katy",
			"seq": "24,27"
		}]
	},
	{
		"id": "ab1274d78df1402ca6ccf7ba5642f936",
		"question": "What are some awards given to the french people?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/stateOfOrigin> <http://dbpedia.org/resource/French_people> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "given",
			"seq": "21,25"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/French_people",
			"label": "people french",
			"seq": "34,46"
		}]
	},
	{
		"id": "659e0f9700964082b127b839ca27f172",
		"question": "What is the route end of Birmingham and Oxford Junction Railway ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway> <http://dbpedia.org/ontology/routeEnd> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "route end",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway",
			"label": "birmingham junction railway oxford",
			"seq": "25,58"
		}]
	},
	{
		"id": "57e96d0a037f4c088d5a09944c314b58",
		"question": "Where is Lao Plaza Hotel located?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lao_Plaza_Hotel> <http://dbpedia.org/property/developer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "located",
			"seq": "25,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lao_Plaza_Hotel",
			"label": "plaza hotel",
			"seq": "13,23"
		}]
	},
	{
		"id": "a1a358a3439f4fcbbc39fa25718b2ad6",
		"question": "What is the municipality of Homestead Grays Bridge ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Homestead_Grays_Bridge> <http://dbpedia.org/ontology/municipality> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/municipality",
			"label": "municipality",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Homestead_Grays_Bridge",
			"label": "homestead bridge grays",
			"seq": "28,49"
		}]
	},
	{
		"id": "1a67a8c314f94af3bbb0cac98461b913",
		"question": "In how many nations does Rhaetian Railways own train stations?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/Rhaetian_Railway> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningOrganisation",
			"label": "nations",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "own",
			"seq": "43,45"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "own",
			"seq": "43,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rhaetian_Railway",
			"label": "rhaetian",
			"seq": "25,32"
		}]
	},
	{
		"id": "fe825b7ea80045f19a498f490eb78420",
		"question": "Where are the burial grounds of Willem Cornelis Janse van Rensburg and Thomas Franois Burgers?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Willem_Cornelis_Janse_van_Rensburg> <http://dbpedia.org/property/restingplace> ?uri. <http://dbpedia.org/resource/Thomas_Fran\u00e7ois_Burgers> <http://dbpedia.org/property/restingplace> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "rensburg",
			"seq": "58,65"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "rensburg",
			"seq": "58,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Willem_Cornelis_Janse_van_Rensburg",
			"label": "rensburg cornelis willem janse",
			"seq": "32,61"
		}, {
			"uri": "http://dbpedia.org/resource/Thomas_Fran\u00e7ois_Burgers",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7c11228a01e24c0b81378d51b50efe43",
		"question": "Which fictional character sculpted by Josh Friedmann was portrayed in Terminator 3 ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Josh_Friedman> . ?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_3:_Rise_of_the_Machines>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "terminator",
			"seq": "70,79"
		}, {
			"uri": "http://dbpedia.org/ontology/portrayer",
			"label": "portrayed",
			"seq": "57,65"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "6,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Josh_Friedman",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Terminator_3:_Rise_of_the_Machines",
			"label": "terminator",
			"seq": "70,79"
		}]
	},
	{
		"id": "6edbb617d6a3485c8a8a32e78e14cf0c",
		"question": "Who had headed the governmental agencies whose admin HQ was in Niederkirchnerstrasse?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Niederkirchnerstra\u00dfe> . ?x <http://dbpedia.org/ontology/leader> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GovernmentAgency>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/headquarter",
			"label": "headed",
			"seq": "8,13"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "headed",
			"seq": "8,13"
		}, {
			"uri": "http://dbpedia.org/ontology/GovernmentAgency",
			"label": "governmental",
			"seq": "19,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Niederkirchnerstra\u00dfe",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4ee990f7399a4511950f55ae69196980",
		"question": "In which city was the company founded , which owns Grasim Bhiwani Textiles?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Grasim_Bhiwani_Textiles> <http://dbpedia.org/property/parent> ?x . ?x <http://dbpedia.org/property/foundation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/parent",
			"label": "company",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "30,36"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "22,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Grasim_Bhiwani_Textiles",
			"label": "textiles bhiwani grasim",
			"seq": "51,73"
		}]
	},
	{
		"id": "b38e47f868494aad92a0886611fb76eb",
		"question": "Which region of Bannock is the origin od Spaghetti squash ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spaghetti_squash> <http://dbpedia.org/ontology/origin> ?uri. <http://dbpedia.org/resource/Bannock_(food)> <http://dbpedia.org/ontology/region> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "origin",
			"seq": "31,36"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "region",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Spaghetti_squash",
			"label": "spaghetti squash",
			"seq": "41,56"
		}, {
			"uri": "http://dbpedia.org/resource/Bannock_(food)",
			"label": "bannock",
			"seq": "16,22"
		}]
	},
	{
		"id": "8d4da6021bd04b108db6150288326476",
		"question": "Who is the opponent of United States House of Representatives elections in Ohio, 2010 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010> <http://dbpedia.org/property/opponent> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/opponent",
			"label": "opponent",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010",
			"label": "representatives elections united states ohio,",
			"seq": "23,67"
		}]
	},
	{
		"id": "8f807aa1160a43f18fb9f1b9b304c86b",
		"question": "Which district of Robert William Wilcox os the place of birth of Kamaloohua ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_William_Wilcox> <http://dbpedia.org/property/district> ?uri. <http://dbpedia.org/resource/Kamaloohua> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/district",
			"label": "district",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "47,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_William_Wilcox",
			"label": "william wilcox robert",
			"seq": "18,38"
		}, {
			"uri": "http://dbpedia.org/resource/Kamaloohua",
			"label": "kamaloohua",
			"seq": "65,74"
		}]
	},
	{
		"id": "c1fbd40e9d774b85994b633e277b297b",
		"question": "Name the commander of Battle of the Thames ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_the_Thames> <http://dbpedia.org/ontology/commander> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Battle_of_the_Thames",
			"label": "thames battle the",
			"seq": "5,21"
		}]
	},
	{
		"id": "739ec9202cac42dcb1c76c274d183b8c",
		"question": "Name the states which have been billed by the wrestlers who has also billed Georgia ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/billed> <http://dbpedia.org/resource/Georgia_(U.S._state)> . ?x <http://dbpedia.org/property/billed> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Wrestler>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/billed",
			"label": "billed",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/property/billed",
			"label": "billed",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Wrestler",
			"label": "wrestlers",
			"seq": "46,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Georgia_(U.S._state)",
			"label": "georgia",
			"seq": "76,82"
		}]
	},
	{
		"id": "40d15e549b0f4899acb00cf469105b8d",
		"question": "Which country has outflow of  Lake Uniamsi and  inflows of the Cahora Bassa?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lake_Uniam\u00e9si> <http://dbpedia.org/property/outflow> ?uri. <http://dbpedia.org/resource/Cahora_Bassa> <http://dbpedia.org/property/inflow> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/outflow",
			"label": "outflow",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/property/inflow",
			"label": "inflows",
			"seq": "48,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lake_Uniam\u00e9si",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Cahora_Bassa",
			"label": "cahora bassa",
			"seq": "63,74"
		}]
	},
	{
		"id": "01cd1e78b6be40e98f1e8db6d8b64385",
		"question": "Count the number of  sport played by the school which also plays Association football ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/sport> <http://dbpedia.org/resource/Association_football> . ?x <http://dbpedia.org/ontology/sport> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sport",
			"seq": "21,25"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sport",
			"seq": "21,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Association_football",
			"label": "association football",
			"seq": "65,84"
		}]
	},
	{
		"id": "9a80906c6ddb4ce1ae6405210f073325",
		"question": "Which city's neighboring municipalities are Lancy and  Pregny-Chambsy?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Lancy> . ?uri <http://dbpedia.org/ontology/neighboringMunicipality> <http://dbpedia.org/resource/Pregny-Chamb\u00e9sy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/neighboringMunicipalities",
			"label": "municipalities neighboring",
			"seq": "13,38"
		}, {
			"uri": "http://dbpedia.org/ontology/neighboringMunicipality",
			"label": "neighboring",
			"seq": "13,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Location",
			"label": "lancy",
			"seq": "44,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lancy",
			"label": "lancy",
			"seq": "44,48"
		}, {
			"uri": "http://dbpedia.org/resource/Pregny-Chamb\u00e9sy",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0158182c73724ee685ea4dc4dae2b647",
		"question": "Give me the total number of Guests of the television episodes whose one of the  Guests is Michael Cristofer?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Michael_Cristofer> . ?x <http://dbpedia.org/property/guests> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/guests",
			"label": "guests",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/property/guests",
			"label": "guests",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Cristofer",
			"label": "cristofer michael",
			"seq": "90,106"
		}]
	},
	{
		"id": "0eeefb46088442158a96ecb63d79ef4b",
		"question": "Were the 1995 south pacific games hosted in tahiti?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/1995_South_Pacific_Games> <http://dbpedia.org/property/hostCity> <http://dbpedia.org/resource/Tahiti> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hostCity",
			"label": "hosted",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1995_South_Pacific_Games",
			"label": "pacific south games 1995",
			"seq": "9,32"
		}, {
			"uri": "http://dbpedia.org/resource/Tahiti",
			"label": "tahiti",
			"seq": "44,49"
		}]
	},
	{
		"id": "a3f1e2963c0c465d966469f42cdb94a9",
		"question": "Which division of the Runewaker Entertainment is also the  destinations of the Airtours International Airways?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Runewaker_Entertainment> <http://dbpedia.org/ontology/division> ?uri. <http://dbpedia.org/resource/Airtours_International_Airways> <http://dbpedia.org/property/destinations> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/division",
			"label": "division",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/destinations",
			"label": "destinations",
			"seq": "59,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Runewaker_Entertainment",
			"label": "entertainment runewaker",
			"seq": "22,44"
		}, {
			"uri": "http://dbpedia.org/resource/Airtours_International_Airways",
			"label": "international airtours",
			"seq": "79,100"
		}]
	},
	{
		"id": "c6eee71ddd2745a6a35018dfa232f4bb",
		"question": "Give me an estimate number of races where horses grandsired by the Wild Risk have raced in?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/grandsire> <http://dbpedia.org/resource/Wild_Risk> . ?x <http://dbpedia.org/property/race> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HorseRace>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/grandsire",
			"label": "grandsired",
			"seq": "49,58"
		}, {
			"uri": "http://dbpedia.org/property/race",
			"label": "races",
			"seq": "30,34"
		}, {
			"uri": "http://dbpedia.org/ontology/HorseRace",
			"label": "horses",
			"seq": "42,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wild_Risk",
			"label": "wild risk",
			"seq": "67,75"
		}]
	},
	{
		"id": "53bf3aeac4064196845be56ed236a7f7",
		"question": "List the awards won by the cinematographer of Mickey's Mellerdrammer?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Mickey's_Mellerdrammer> <http://dbpedia.org/property/cinematography> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cinematography",
			"label": "cinematographer",
			"seq": "27,41"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mickey's_Mellerdrammer",
			"label": "mellerdrammer mickey's",
			"seq": "46,67"
		}]
	},
	{
		"id": "53b2519492344f22a93ce9bef25dd3a5",
		"question": "Where is the garrison of Western Naval Command ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Western_Naval_Command> <http://dbpedia.org/property/garrison> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/garrison",
			"label": "garrison",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Western_Naval_Command",
			"label": "western command naval",
			"seq": "25,45"
		}]
	},
	{
		"id": "e698401405e74eb89c41b846351f1ff9",
		"question": "Count the number of books whose author's were born in Alcal de Henares ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Alcal\u00e1_de_Henares> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "author's",
			"seq": "32,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "20,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alcal\u00e1_de_Henares",
			"label": "henares alcal",
			"seq": "54,66"
		}]
	},
	{
		"id": "c64b64f2cf244f4dbe7002a393771eb6",
		"question": "List the film starring of the movies whose editor is Harvey  Rosenstock ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Harvey_Rosenstock> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "editor",
			"seq": "43,48"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "starring",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "film",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harvey_Rosenstock",
			"label": "rosenstock harvey",
			"seq": "53,69"
		}]
	},
	{
		"id": "981c2203e0974c06abfc3fa94b23caac",
		"question": "What is the name of the person who has relations with Dionne Warwick and Gary Garland?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Dionne_Warwick> . ?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Gary_Garland> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relations",
			"seq": "39,47"
		}, {
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relations",
			"seq": "39,47"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "24,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dionne_Warwick",
			"label": "warwick dionne",
			"seq": "54,67"
		}, {
			"uri": "http://dbpedia.org/resource/Gary_Garland",
			"label": "garland gary",
			"seq": "73,84"
		}]
	},
	{
		"id": "6f21a2501af44a8d9c2678f2e61a2207",
		"question": "Which military battles are associated with Israel?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Israel>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/place",
			"label": "are",
			"seq": "23,25"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "military",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Israel",
			"label": "israel",
			"seq": "43,48"
		}]
	},
	{
		"id": "724442cd9501404cbafe30105de16e01",
		"question": "Which city has it's landmark as Cheasty Boulevard South?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cheasty_Boulevard_South> <http://dbpedia.org/ontology/maintainedBy> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/maintainedBy",
			"label": "city",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cheasty_Boulevard_South",
			"label": "boulevard cheasty south",
			"seq": "32,54"
		}]
	},
	{
		"id": "694000fa26c74b33aa7095c7738f7179",
		"question": "Which region of English American is also the palce of Death of Brent Darby ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/English_Americans> <http://dbpedia.org/property/region> ?uri. <http://dbpedia.org/resource/Brent_Darby> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/region",
			"label": "region",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "death",
			"seq": "54,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/English_Americans",
			"label": "american english",
			"seq": "16,31"
		}, {
			"uri": "http://dbpedia.org/resource/Brent_Darby",
			"label": "darby brent",
			"seq": "63,73"
		}]
	},
	{
		"id": "3a46f9dd0ff14411b6184bbc26d354d9",
		"question": "Who are the architect of the stadium whose one of the architect is louis D. Astorino ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/architect> <http://dbpedia.org/resource/Louis_D._Astorino> . ?x <http://dbpedia.org/property/architect> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Louis_D._Astorino",
			"label": "astorino louis",
			"seq": "67,80"
		}]
	},
	{
		"id": "c593b3d2dd42455e9a67d0aa2e905027",
		"question": "What are some short story kind of Books?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Short_story> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/literaryGenre",
			"label": "are",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Short_story",
			"label": "story short",
			"seq": "14,24"
		}]
	},
	{
		"id": "da876b5724b64e209959a34efc201d5f",
		"question": "Give me the sitcoms where Eliza Schneider and Isaac Hayes gave voice?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/voices",
			"label": "voice",
			"seq": "63,67"
		}, {
			"uri": "http://dbpedia.org/property/voices",
			"label": "voice",
			"seq": "63,67"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "sitcoms",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eliza_Schneider",
			"label": "schneider eliza",
			"seq": "26,40"
		}, {
			"uri": "http://dbpedia.org/resource/Isaac_Hayes",
			"label": "isaac hayes",
			"seq": "46,56"
		}]
	},
	{
		"id": "7152d19cc09847a59273b9425bba8dfe",
		"question": "Who is the fictional character whose family member is Padme Amidala?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/family> <http://dbpedia.org/resource/Padm\u00e9_Amidala>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/family",
			"label": "family",
			"seq": "37,42"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "11,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Padm\u00e9_Amidala",
			"label": "amidala",
			"seq": "60,66"
		}]
	},
	{
		"id": "9111a28178e8420b88b3124f0b714e72",
		"question": "Which notable series of Russell T Davies is also the series of Short Trips: A day in the life ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Short_Trips:_A_Day_in_the_Life> <http://dbpedia.org/ontology/series> ?uri. <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "notable",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Short_Trips:_A_Day_in_the_Life",
			"label": "trips: short life",
			"seq": "63,79"
		}, {
			"uri": "http://dbpedia.org/resource/Russell_T_Davies",
			"label": "russell davies",
			"seq": "24,37"
		}]
	},
	{
		"id": "d0db4cd9f5624de8a9bf3c8d4b104695",
		"question": "Who employed the person famous for the Boeing fa18ef Super Hornet?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet> . ?x <http://dbpedia.org/property/employer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "for",
			"seq": "31,33"
		}, {
			"uri": "http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet",
			"label": "hornet super",
			"seq": "53,64"
		}, {
			"uri": "http://dbpedia.org/property/employer",
			"label": "employed",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "17,22"
		}],
		"entity mapping": []
	},
	{
		"id": "f9b31b5201064d76b7f841959920c37f",
		"question": "List the relatives of clay Aiken ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clay_Aiken>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Clay_Aiken",
			"label": "aiken clay",
			"seq": "22,31"
		}]
	},
	{
		"id": "ad0c25ffff314adc8360b09d8bfeed66",
		"question": "List the resting place of the people who served in Norwalk Trainband.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/Norwalk_Trainband> . ?x <http://dbpedia.org/property/restingplace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "list",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "resting place",
			"seq": "9,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "30,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Norwalk_Trainband",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f11a115d1c814158bf1464c31ccbdba7",
		"question": "Which are the cities on the river which also flows in Tukwila, Washington ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Tukwila,_Washington> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "cities",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/city",
			"label": "cities",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "28,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tukwila,_Washington",
			"label": "washington tukwila,",
			"seq": "54,72"
		}]
	},
	{
		"id": "cad124dc6dd849f8aa03d47598e6abbb",
		"question": "List all the narrator of the albums which had Alan Barzman as one of the narrator ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/narrated> <http://dbpedia.org/resource/Alan_Barzman> . ?x <http://dbpedia.org/property/narrated> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/narrated",
			"label": "narrator",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/property/narrated",
			"label": "narrator",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Album",
			"label": "albums",
			"seq": "29,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alan_Barzman",
			"label": "barzman alan",
			"seq": "46,57"
		}]
	},
	{
		"id": "565549d096324c1ca053e79d2d314691",
		"question": "Mazhar Ul Haq High School, Beerwah is affiliated to Islamic Religion",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mazhar_Ul_Haq_High_School,_Beerwah> <http://dbpedia.org/property/religiousAffiliation> <http://dbpedia.org/resource/Islam> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religiousAffiliation",
			"label": "religion",
			"seq": "60,67"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mazhar_Ul_Haq_High_School,_Beerwah",
			"label": "school, beerwah mazhar",
			"seq": "0,21"
		}, {
			"uri": "http://dbpedia.org/resource/Islam",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a8f9d6667ed44a89b9be3cf80a8d24c6",
		"question": "In which state does the university which is the alma mater of Mateusz Morawiecki lie?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Mateusz_Morawiecki> <http://dbpedia.org/property/almaMater> ?x . ?x <http://dbpedia.org/property/state> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "48,57"
		}, {
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "24,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mateusz_Morawiecki",
			"label": "morawiecki mateusz",
			"seq": "62,79"
		}]
	},
	{
		"id": "f5389602a5104bc0b3691a6dc0b6aed4",
		"question": "Give me all tv shows which are based in boston and massachusetts?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Boston> . ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Massachusetts> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "boston",
			"seq": "40,45"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "boston",
			"seq": "40,45"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "15,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Boston",
			"label": "boston",
			"seq": "40,45"
		}, {
			"uri": "http://dbpedia.org/resource/Massachusetts",
			"label": "massachusetts",
			"seq": "51,63"
		}]
	},
	{
		"id": "1f8f6352c2c54ce3b53aba360323d3ed",
		"question": "Who is married to a Miss Louisiana, USA?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Miss_Louisiana_USA> . ?uri <http://dbpedia.org/property/spouse> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/title",
			"label": "married",
			"seq": "7,13"
		}, {
			"uri": "http://dbpedia.org/property/spouse",
			"label": "usa",
			"seq": "36,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miss_Louisiana_USA",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "26c1a1fbf2d44a43b2365a9bc2ac9c5c",
		"question": "Who has produced movies that have a James Horner score?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/James_Horner> . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "score",
			"seq": "49,53"
		}, {
			"uri": "http://dbpedia.org/property/producer",
			"label": "produced",
			"seq": "8,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "james",
			"seq": "36,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_Horner",
			"label": "horner james",
			"seq": "36,47"
		}]
	},
	{
		"id": "26745f9ea116424bb5a1ed1ac3faa8cf",
		"question": "What is the birth place of the astronaut whose mission was the Vostok programmer?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Vostok_programme> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mission",
			"label": "mission",
			"seq": "47,53"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "place birth",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Astronaut",
			"label": "astronaut",
			"seq": "31,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vostok_programme",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "cd54a705b06443df8c1be672abe15815",
		"question": "What team did the players start their careers with, who right now play for Fleisher Yarn?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Fleisher_Yarn> . ?x <http://dbpedia.org/property/debutteam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "5,8"
		}, {
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "team",
			"seq": "5,8"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "the",
			"seq": "14,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fleisher_Yarn",
			"label": "fleisher yarn",
			"seq": "75,87"
		}]
	},
	{
		"id": "2408eccc056c49ec8d1d6eb57ccc6b3c",
		"question": "List the significant buildings of the arch. whose one of the important work is Government Building, Kiev ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/significantBuilding> <http://dbpedia.org/resource/Government_Building,_Kiev> . ?x <http://dbpedia.org/ontology/significantBuilding> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/significantBuilding",
			"label": "significant",
			"seq": "9,19"
		}, {
			"uri": "http://dbpedia.org/ontology/significantBuilding",
			"label": "significant",
			"seq": "9,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Architect",
			"label": "arch.",
			"seq": "38,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Government_Building,_Kiev",
			"label": "government building,",
			"seq": "79,98"
		}]
	},
	{
		"id": "7383239e8ece464a80a8d5422d4ed3bc",
		"question": "What is the alma mater of Fikret Orman?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fikret_Orman> <http://dbpedia.org/property/almaMater> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fikret_Orman",
			"label": "fikret orman",
			"seq": "26,37"
		}]
	},
	{
		"id": "2d4e39d0c0784adfb281198a892d3894",
		"question": "Name the company which produces both  Boeing F/A-18 E/F Hornet nad CH-46 Chinook ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/product",
			"label": "produces",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet",
			"label": "hornet",
			"seq": "56,61"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "produces",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Boeing_CH-47_Chinook",
			"label": "chinook boeing",
			"seq": "38,51"
		}]
	},
	{
		"id": "83ca3f4edad24d93a575b23842e8e6e2",
		"question": "Count all the awards which were presented by something located in California.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/California> . ?uri <http://dbpedia.org/ontology/presenter> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/headquarter",
			"label": "awards",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/presenter",
			"label": "presented",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Award",
			"label": "awards",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/California",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "627b135b1339420abd87fd83a60ba519",
		"question": "what are some players of England national football team?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/England_national_football_team> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "national team",
			"seq": "33,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England_national_football_team",
			"label": "national football england team",
			"seq": "25,54"
		}]
	},
	{
		"id": "5af32623f2d747d88f0b3fe7df64b489",
		"question": "Where did the aristocrats die whose mother was Maria Ludwika Krasiska?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Maria_Ludwika_Krasi\u0144ska> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mother",
			"label": "mother",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "the",
			"seq": "10,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "mother",
			"seq": "36,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maria_Ludwika_Krasi\u0144ska",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "13b91edef6f247998a11991c20d82c12",
		"question": "What are the other notable work of the executive producer of The Runaway Bride episode of Doctor Who?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Runaway_Bride_(Doctor_Who)> <http://dbpedia.org/ontology/executiveProducer> ?x . ?x <http://dbpedia.org/property/notableworks> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "39,56"
		}, {
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "notable work",
			"seq": "19,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Runaway_Bride_(Doctor_Who)",
			"label": "runaway doctor bride",
			"seq": "65,84"
		}]
	},
	{
		"id": "92cabb6122e7449fb885581d7b8e5127",
		"question": "What is the subject of The Prodigal son ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Prodigal_Son_(play)> <http://dbpedia.org/property/subject> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/subject",
			"label": "subject",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Prodigal_Son_(play)",
			"label": "prodigal the son",
			"seq": "8,23"
		}]
	},
	{
		"id": "a1bd0e085010417ba43241a478f7df55",
		"question": "What water bodies are nearest to Helsinki city?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/nearestCity> <http://dbpedia.org/resource/Helsinki>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BodyOfWater>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "nearest city",
			"seq": "22,33"
		}, {
			"uri": "http://dbpedia.org/ontology/BodyOfWater",
			"label": "water",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Helsinki",
			"label": "helsinki",
			"seq": "33,40"
		}]
	},
	{
		"id": "a8d7c64d096f49249d1bbdba54ea0dab",
		"question": "Find the total number of  ingredient of the recepies whose ingredient is common Mushroom ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Agaricus_bisporus> . ?x <http://dbpedia.org/ontology/ingredient> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "26,35"
		}, {
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "26,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Agaricus_bisporus",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ee7db84a309448d5abf22c529f3c8d35",
		"question": "Who is the meaning of Isa  ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Isa_(name)> <http://dbpedia.org/property/meaning> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/meaning",
			"label": "meaning",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Isa_(name)",
			"label": "isa",
			"seq": "22,24"
		}]
	},
	{
		"id": "a590bd766cad404b831d5cbb85a244b8",
		"question": "Which company founded by Fusajiro Yamauchi also provides services of Nintendo eShop ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fusajiro_Yamauchi> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Nintendo_eShop>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "founded",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "57,64"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fusajiro_Yamauchi",
			"label": "yamauchi fusajiro",
			"seq": "25,41"
		}, {
			"uri": "http://dbpedia.org/resource/Nintendo_eShop",
			"label": "nintendo eshop",
			"seq": "69,82"
		}]
	},
	{
		"id": "9a7c1e18a60b45f5842fffdec31b087a",
		"question": "What is the official language of Ladonia, which is the target area of Probus Journal?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ladonia_(micronation)> <http://dbpedia.org/ontology/officialLanguage> ?uri. <http://dbpedia.org/resource/Probus_(journal)> <http://dbpedia.org/ontology/academicDiscipline> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/officialLanguage",
			"label": "official language",
			"seq": "12,28"
		}, {
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "official",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ladonia_(micronation)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Probus_(journal)",
			"label": "journal probus",
			"seq": "70,83"
		}]
	},
	{
		"id": "ea10d95104514ba8bca12c1165e2f397",
		"question": "How many teams have used the stadiums which have been rented by the Canadian Hockey team?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Hockey_Canada> . ?x <http://dbpedia.org/property/tenants> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "team",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/property/tenants",
			"label": "teams",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hockey_Canada",
			"label": "hockey",
			"seq": "77,82"
		}]
	},
	{
		"id": "f468633c3d9d42d6b5460e08fd7527ed",
		"question": "Name the movie who has screenplay by Akiva Goldsman and is edited by Mark Stevens ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screenplay",
			"seq": "23,32"
		}, {
			"uri": "http://dbpedia.org/property/editing",
			"label": "edited",
			"seq": "59,64"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "56,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Akiva_Goldsman",
			"label": "goldsman akiva",
			"seq": "37,50"
		}, {
			"uri": "http://dbpedia.org/resource/Mark_Stevens_(film_editor)",
			"label": "stevens",
			"seq": "74,80"
		}]
	},
	{
		"id": "55b536c2b837474d8aa722a73037bd49",
		"question": "How many TV shows are similar to the ones belonging to fantasy genre?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Fantasy_television> . ?uri <http://dbpedia.org/ontology/related> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genre",
			"seq": "63,67"
		}, {
			"uri": "http://dbpedia.org/ontology/related",
			"label": "the",
			"seq": "33,35"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fantasy_television",
			"label": "fantasy",
			"seq": "55,61"
		}]
	},
	{
		"id": "8663feba2e3b48de998772ddb3283b0f",
		"question": "Is facebook a public company?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Facebook> <http://dbpedia.org/property/companyType> <http://dbpedia.org/resource/Public_company> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/companyType",
			"label": "company",
			"seq": "21,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Facebook",
			"label": "facebook",
			"seq": "3,10"
		}, {
			"uri": "http://dbpedia.org/resource/Public_company",
			"label": "company public",
			"seq": "14,27"
		}]
	},
	{
		"id": "7410520bca4c45bbab391b31101a6df3",
		"question": "What religions are followed by economists?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Economist> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "religions",
			"seq": "5,13"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Economist",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e60d4439142244d0b14d8650ba3ccbcd",
		"question": "Is Rajya Sabha a house of parliament in India?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Parliament_of_India> <http://dbpedia.org/property/houses> <http://dbpedia.org/resource/Rajya_Sabha> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/houses",
			"label": "house",
			"seq": "17,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Parliament_of_India",
			"label": "parliament india",
			"seq": "26,41"
		}, {
			"uri": "http://dbpedia.org/resource/Rajya_Sabha",
			"label": "sabha rajya",
			"seq": "3,13"
		}]
	},
	{
		"id": "efcc04cf1e59487e9a5018d7fd3412e0",
		"question": "Was Gerald Gibbs the cinematographer of X the unknown?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/X_the_Unknown> <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Gerald_Gibbs_(cinematographer)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cinematography",
			"label": "cinematographer",
			"seq": "21,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/X_the_Unknown",
			"label": "unknown the",
			"seq": "17,27"
		}, {
			"uri": "http://dbpedia.org/resource/Gerald_Gibbs_(cinematographer)",
			"label": "cinematographer gerald gibbs",
			"seq": "4,31"
		}]
	},
	{
		"id": "b70eb1cf6bbc449e8c384f3cc7c888bd",
		"question": "List the architect of the buildings whose one of the  architect is Philip Webb?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/architect> <http://dbpedia.org/resource/Philip_Webb> . ?x <http://dbpedia.org/property/architect> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Building",
			"label": "buildings",
			"seq": "26,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Philip_Webb",
			"label": "philip webb",
			"seq": "67,77"
		}]
	},
	{
		"id": "ef57d1c17ccf4f40847f6c51c1183441",
		"question": "List the trainers of Shinya Aoki ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Shinya_Aoki> <http://dbpedia.org/ontology/trainer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/trainer",
			"label": "trainers",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shinya_Aoki",
			"label": "shinya aoki",
			"seq": "21,31"
		}]
	},
	{
		"id": "02863512b8c141d8919dad7863c3b44e",
		"question": "How many software run on operating system is Microsoft Windows?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating system",
			"seq": "25,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Windows",
			"label": "microsoft windows",
			"seq": "45,61"
		}]
	},
	{
		"id": "159f695fd9f34609bd09d41a97aacb40",
		"question": "How many teams have rented stadiums in Canada?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Canada> . ?x <http://dbpedia.org/property/tenants> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "canada",
			"seq": "39,44"
		}, {
			"uri": "http://dbpedia.org/property/tenants",
			"label": "teams",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canada",
			"label": "canada",
			"seq": "39,44"
		}]
	},
	{
		"id": "aca36b0993ba45edb0f0fc957c97ce23",
		"question": "Where was Babita born ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Babita> <http://dbpedia.org/property/birthplace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthplace",
			"label": "babita",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Babita",
			"label": "babita",
			"seq": "10,15"
		}]
	},
	{
		"id": "6c19a51322bb489f9b4cb12531a09d13",
		"question": "Give me the mascot of the military unit in which Stewart Bovell served?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Stewart_Bovell> <http://dbpedia.org/ontology/militaryBranch> ?x . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military",
			"seq": "26,33"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "military unit",
			"seq": "26,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stewart_Bovell",
			"label": "stewart bovell",
			"seq": "49,62"
		}]
	},
	{
		"id": "b0dd4c5ad51349f1946188f22d7fa899",
		"question": "Name some politicians buried in a place near Orange Virginia?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nearestCity> <http://dbpedia.org/resource/Orange,_Virginia> . ?uri <http://dbpedia.org/property/restingplace> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nearestCity",
			"label": "near",
			"seq": "40,43"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "place",
			"seq": "34,38"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "some",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Orange,_Virginia",
			"label": "virginia orange",
			"seq": "45,59"
		}]
	},
	{
		"id": "514539c7a7854fb8a29b7c24dc730dbf",
		"question": "What is the sea whose cities are Gdask and Oulu?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Gda\u0144sk> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Oulu> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "12,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gda\u0144sk",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Oulu",
			"label": "oulu",
			"seq": "43,46"
		}]
	},
	{
		"id": "9ea1f28bd342417b8859d96f88a7f775",
		"question": "Which manufacturer of  Ford Y-block engine is the parent of  Ford Air Transport Service ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Y-block_engine> <http://dbpedia.org/ontology/manufacturer> ?uri. <http://dbpedia.org/resource/Ford_Air_Transport_Service> <http://dbpedia.org/property/parent> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufacturer",
			"seq": "6,17"
		}, {
			"uri": "http://dbpedia.org/property/parent",
			"label": "parent",
			"seq": "50,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ford_Y-block_engine",
			"label": "y-block engine ford",
			"seq": "23,41"
		}, {
			"uri": "http://dbpedia.org/resource/Ford_Air_Transport_Service",
			"label": "transport service ford",
			"seq": "23,44"
		}]
	},
	{
		"id": "2fd401510ca849388e708a6f0b1f2137",
		"question": "How many games have a composer who worked for the Creatures?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Creatures_(company)> . ?uri <http://dbpedia.org/property/composer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "creatures",
			"seq": "50,58"
		}, {
			"uri": "http://dbpedia.org/property/composer",
			"label": "composer",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Creatures_(company)",
			"label": "creatures",
			"seq": "50,58"
		}]
	},
	{
		"id": "610e75c938944f818e964d8858da9836",
		"question": "How many awards have been given to the participants of the Lawrence Realization Stakes?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/race> <http://dbpedia.org/resource/Lawrence_Realization_Stakes> . ?x <http://dbpedia.org/ontology/honours> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/race",
			"label": "lawrence",
			"seq": "59,66"
		}, {
			"uri": "http://dbpedia.org/ontology/honours",
			"label": "how",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lawrence_Realization_Stakes",
			"label": "realization lawrence stakes",
			"seq": "59,85"
		}]
	},
	{
		"id": "4efbed07c60a47e3a9ef884a3f08f25c",
		"question": "Total number of places where people drafted in the detroit pistons have died?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Detroit_Pistons> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/draftTeam",
			"label": "drafted",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "places",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Location",
			"label": "pistons",
			"seq": "59,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Detroit_Pistons",
			"label": "pistons detroit",
			"seq": "51,65"
		}]
	},
	{
		"id": "2704d889b6c741ef8e45357f8e71bbdb",
		"question": "Where did Paul Jones do his highschool?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paul_Jones_(American_football)> <http://dbpedia.org/property/highschool> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/highschool",
			"label": "highschool",
			"seq": "28,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paul_Jones_(American_football)",
			"label": "jones",
			"seq": "15,19"
		}]
	},
	{
		"id": "02704dedd802497dbd1e9e9abcd3e0da",
		"question": "Which state is the birth location of Ann Monroe Gilchrist Strong? ",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ann_Monroe_Gilchrist_Strong> <http://dbpedia.org/ontology/birthPlace> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birth",
			"seq": "19,23"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "monroe",
			"seq": "41,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ann_Monroe_Gilchrist_Strong",
			"label": "gilchrist monroe",
			"seq": "41,56"
		}]
	},
	{
		"id": "a1e40cc27cbe4b48b7f3d40e75c71479",
		"question": "Bud Adams owns which american football team?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Bud_Adams>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owns",
			"seq": "10,13"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballTeam",
			"label": "football american team",
			"seq": "21,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bud_Adams",
			"label": "adams bud",
			"seq": "0,8"
		}]
	},
	{
		"id": "f2e2230636684b6ab20dbd0f1c6e1a03",
		"question": "Which licensee of EXXV-TV is also the licensee of WXXV-DT2 ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/EXXV-TV> <http://dbpedia.org/property/licensee> ?uri. <http://dbpedia.org/resource/WXXV-DT2> <http://dbpedia.org/property/licensee> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/licensee",
			"label": "licensee",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/licensee",
			"label": "licensee",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/EXXV-TV",
			"label": "exxv-tv",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/resource/WXXV-DT2",
			"label": "wxxv-dt2",
			"seq": "50,57"
		}]
	},
	{
		"id": "2581702c56f24e0498481ea703252cc9",
		"question": "Give me all martial artists trained by Joe Schilling.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Joe_Schilling>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MartialArtist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/trainer",
			"label": "trained",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/MartialArtist",
			"label": "martial",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joe_Schilling",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "713d533b1d2a4dc08c7ccfe24d7dd58b",
		"question": "What magazine published Allal and is the employer of Peter Bergman?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allal> <http://dbpedia.org/ontology/publisher> ?uri. <http://dbpedia.org/resource/Peter_Bergman_(comedian)> <http://dbpedia.org/ontology/employer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "published",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "employer",
			"seq": "41,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Allal",
			"label": "allal",
			"seq": "24,28"
		}, {
			"uri": "http://dbpedia.org/resource/Peter_Bergman_(comedian)",
			"label": "bergman peter",
			"seq": "53,65"
		}]
	},
	{
		"id": "bf11268a275f4ca090b23db4888f1ec3",
		"question": "List few musical artist whose notable instruments are Ludwig Drums and  Remo?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Ludwig_Drums> . ?uri <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Remo>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableInstruments",
			"label": "instruments notable",
			"seq": "30,48"
		}, {
			"uri": "http://dbpedia.org/ontology/instrument",
			"label": "instruments",
			"seq": "38,48"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical artist",
			"seq": "9,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ludwig_Drums",
			"label": "ludwig drums",
			"seq": "54,65"
		}, {
			"uri": "http://dbpedia.org/resource/Remo",
			"label": "remo",
			"seq": "72,75"
		}]
	},
	{
		"id": "c1cdd10d876d429ba602f0b60fc91f53",
		"question": "Name the common institution of the Erica Frank and Douglass North?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Erica_Frank> <http://dbpedia.org/ontology/institution> ?uri. <http://dbpedia.org/resource/Douglass_North> <http://dbpedia.org/ontology/institution> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "institution",
			"seq": "16,26"
		}, {
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "institution",
			"seq": "16,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erica_Frank",
			"label": "frank erica",
			"seq": "35,45"
		}, {
			"uri": "http://dbpedia.org/resource/Douglass_North",
			"label": "douglass north",
			"seq": "51,64"
		}]
	},
	{
		"id": "0134077a418246169b05e5390e035b00",
		"question": "Who commanded the invasion of Buwat and made Fatima bint Sa'd famous?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Invasion_of_Buwat> <http://dbpedia.org/property/commander> ?uri. <http://dbpedia.org/resource/Fatimah_bint_Sa'd> <http://dbpedia.org/ontology/knownFor> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/commander",
			"label": "commanded",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "of",
			"seq": "27,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Invasion_of_Buwat",
			"label": "invasion buwat",
			"seq": "18,31"
		}, {
			"uri": "http://dbpedia.org/resource/Fatimah_bint_Sa'd",
			"label": "fatima sa'd bint",
			"seq": "45,60"
		}]
	},
	{
		"id": "f742b26c254f48ada294bbb8649d15c3",
		"question": "What is the ethicity of Ted Falon?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ted_Failon> <http://dbpedia.org/ontology/ethnicity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ethnicity",
			"label": "ethicity",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ted_Failon",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c73fef8ef82040cdb4ef06b267d8b45d",
		"question": "Who are the astronauts associated with NASA?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/NASA>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/type",
			"label": "the",
			"seq": "8,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Astronaut",
			"label": "astronauts",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/NASA",
			"label": "nasa",
			"seq": "39,42"
		}]
	},
	{
		"id": "fa685bca2d1949fd9aa9c98cb2200dfe",
		"question": "Name the person whose mother name is Cedella Booker and has a son named Sharon Marley?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Cedella_Booker> . ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Sharon_Marley>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "sharon",
			"seq": "72,77"
		}, {
			"uri": "http://dbpedia.org/property/children",
			"label": "sharon",
			"seq": "72,77"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cedella_Booker",
			"label": "cedella booker",
			"seq": "37,50"
		}, {
			"uri": "http://dbpedia.org/resource/Sharon_Marley",
			"label": "sharon marley",
			"seq": "72,84"
		}]
	},
	{
		"id": "aa855f60d8464cb291efa723306a8f74",
		"question": "Which kind of buildings are found in England?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/locationCountry> <http://dbpedia.org/resource/England> . ?x <http://dbpedia.org/ontology/type> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "found",
			"seq": "28,32"
		}, {
			"uri": "http://dbpedia.org/ontology/type",
			"label": "are",
			"seq": "24,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Building",
			"label": "buildings",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England",
			"label": "england",
			"seq": "37,43"
		}]
	},
	{
		"id": "5cbf98e72bf24912a1efb6418b082b96",
		"question": "What is the county seat of Moscow Governorate ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moscow_Governorate> <http://dbpedia.org/ontology/capital> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "what",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Moscow_Governorate",
			"label": "governorate moscow",
			"seq": "27,44"
		}]
	},
	{
		"id": "6e9fc24127eb42e2b5580784c12b6587",
		"question": "ARM Architecture acts as a game platform for how many things?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/ARM_architecture>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "platform",
			"seq": "32,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/ARM_architecture",
			"label": "architecture arm",
			"seq": "0,15"
		}]
	},
	{
		"id": "11efb4f1e7bb4a4991a7d52f98ce78ac",
		"question": "What all has been created by Jerry Siegel?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Jerry_Siegel> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creators",
			"label": "created",
			"seq": "18,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerry_Siegel",
			"label": "siegel jerry",
			"seq": "29,40"
		}]
	},
	{
		"id": "a33859aa5439488798b80ada5172ff2b",
		"question": "Is David Cameron the prime minister of Nick Clegg?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Nick_Clegg> <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/David_Cameron> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "minister prime",
			"seq": "21,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nick_Clegg",
			"label": "clegg nick",
			"seq": "39,48"
		}, {
			"uri": "http://dbpedia.org/resource/David_Cameron",
			"label": "cameron david",
			"seq": "3,15"
		}]
	},
	{
		"id": "1cb5a6736cd044c798948ca8e81ad7fb",
		"question": "Cricket is played by which countries' citizens?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Cricket> . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "citizens",
			"seq": "38,45"
		}, {
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "citizens",
			"seq": "38,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cricket",
			"label": "cricket",
			"seq": "0,6"
		}]
	},
	{
		"id": "24be016341344144a6a482ef013bd669",
		"question": "What things have founded place as United States and New Mexico?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_Mexico> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "17,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "united states",
			"seq": "34,46"
		}, {
			"uri": "http://dbpedia.org/resource/New_Mexico",
			"label": "mexico new",
			"seq": "52,61"
		}]
	},
	{
		"id": "5a87e57658014b01807840c74c342a12",
		"question": "Does Saneh Lungkeaw play for the Thailand's national team?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Saneh_Lungkeaw> <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Thailand> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "national team",
			"seq": "44,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saneh_Lungkeaw",
			"label": "lungkeaw saneh",
			"seq": "5,18"
		}, {
			"uri": "http://dbpedia.org/resource/Thailand",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "2ac17e74901841a48f166336033061b1",
		"question": "Who all have been presenters on shows by the NBC?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/NBC> . ?x <http://dbpedia.org/property/presenter> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/channel",
			"label": "have",
			"seq": "8,11"
		}, {
			"uri": "http://dbpedia.org/property/presenter",
			"label": "presenters",
			"seq": "18,27"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "32,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/NBC",
			"label": "nbc",
			"seq": "45,47"
		}]
	},
	{
		"id": "768ceadf1cfc424f98c61ac9892e985a",
		"question": "What tv shows were born out of a collaboration of playtone and dreamworks?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/Playtone> . ?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/DreamWorks_Television> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/company",
			"label": "playtone",
			"seq": "50,57"
		}, {
			"uri": "http://dbpedia.org/ontology/company",
			"label": "playtone",
			"seq": "50,57"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "8,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Playtone",
			"label": "playtone",
			"seq": "50,57"
		}, {
			"uri": "http://dbpedia.org/resource/DreamWorks_Television",
			"label": "dreamworks",
			"seq": "63,72"
		}]
	},
	{
		"id": "ee96d704c0094e77b6002d5894aa2765",
		"question": "Who all have written songs that were then recorded in the Criteria Studios?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/Criteria_Studios> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded",
			"seq": "42,49"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalWork",
			"label": "studios",
			"seq": "67,73"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Criteria_Studios",
			"label": "criteria studios",
			"seq": "58,73"
		}]
	},
	{
		"id": "9636268ee7834242905069b017dfdce7",
		"question": "What are all the religions that have been followed by the Sir Lankan attorneys?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Attorneys_in_Sri_Lanka> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "religions",
			"seq": "17,25"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "17,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Attorneys_in_Sri_Lanka",
			"label": "attorneys",
			"seq": "69,77"
		}]
	},
	{
		"id": "94e0f81983644e299c03baa26e68409f",
		"question": "What are the central characters in spy kids series?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/Spy_Kids_(franchise)>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "44,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Spy_Kids_(franchise)",
			"label": "kids spy",
			"seq": "35,42"
		}]
	},
	{
		"id": "137b3f2da4c048b282d2f6b03106d881",
		"question": "Name the common former team of Marv mcFadden and Carlos Emmons ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marv_McFadden> <http://dbpedia.org/property/pastteams> ?uri. <http://dbpedia.org/resource/Carlos_Emmons_(American_football)> <http://dbpedia.org/ontology/formerTeam> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastteams",
			"label": "team",
			"seq": "23,26"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former team",
			"seq": "16,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marv_McFadden",
			"label": "mcfadden marv",
			"seq": "31,43"
		}, {
			"uri": "http://dbpedia.org/resource/Carlos_Emmons_(American_football)",
			"label": "emmons",
			"seq": "56,61"
		}]
	},
	{
		"id": "eebefa6c5abc4c53ac2067ca0bed237d",
		"question": "Through how many labels has Katy B released her singles?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Katy_B> . ?x <http://dbpedia.org/ontology/recordLabel> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "her",
			"seq": "44,46"
		}, {
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "labels",
			"seq": "17,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Katy_B",
			"label": "katy",
			"seq": "28,31"
		}]
	},
	{
		"id": "1511c21130fd42db8503ef152de463ad",
		"question": "Which newspaper is owned by people living in Oslo?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Oslo> . ?uri <http://dbpedia.org/property/owners> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "living",
			"seq": "35,40"
		}, {
			"uri": "http://dbpedia.org/property/owners",
			"label": "owned",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oslo",
			"label": "oslo",
			"seq": "45,48"
		}]
	},
	{
		"id": "18c0cfe0eeb245e5be6ccbe05f916c12",
		"question": "How many people have written for Gangan Comics?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/magazine> <http://dbpedia.org/resource/Gangan_Comics> . ?x <http://dbpedia.org/property/author> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/magazine",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/property/author",
			"label": "how",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gangan_Comics",
			"label": "gangan comics",
			"seq": "33,45"
		}]
	},
	{
		"id": "c279410514bf4a78804985526c37251c",
		"question": "Is William H Blanchard buried in Colorado?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/William_H._Blanchard> <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Colorado> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeofburial",
			"label": "buried",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_H._Blanchard",
			"label": "blanchard william",
			"seq": "3,19"
		}, {
			"uri": "http://dbpedia.org/resource/Colorado",
			"label": "colorado",
			"seq": "33,40"
		}]
	},
	{
		"id": "3a5a1af6d3f14416be651b162e0f62a4",
		"question": "Name a company with key person as Dennis Muilenburg and Raymond Conner ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Dennis_Muilenburg> . ?uri <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Raymond_Conner>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "key",
			"seq": "20,22"
		}, {
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "person key",
			"seq": "20,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "7,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dennis_Muilenburg",
			"label": "muilenburg dennis",
			"seq": "34,50"
		}, {
			"uri": "http://dbpedia.org/resource/Raymond_Conner",
			"label": "raymond conner",
			"seq": "56,69"
		}]
	},
	{
		"id": "60deb84874954198b4c9b6cc5c85e747",
		"question": "Name the common institute of Robert hall and Erica Frank ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_Hall_(economist)> <http://dbpedia.org/ontology/institution> ?uri. <http://dbpedia.org/resource/Erica_Frank> <http://dbpedia.org/ontology/institution> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "institute",
			"seq": "16,24"
		}, {
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "institute",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Hall_(economist)",
			"label": "robert hall",
			"seq": "29,39"
		}, {
			"uri": "http://dbpedia.org/resource/Erica_Frank",
			"label": "frank erica",
			"seq": "45,55"
		}]
	},
	{
		"id": "6b9c942fcd1c48aba22c20b5693b249f",
		"question": "What award was won by the father of Angelina Jolie?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Angelina_Jolie> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "the",
			"seq": "22,24"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Angelina_Jolie",
			"label": "angelina jolie",
			"seq": "36,49"
		}]
	},
	{
		"id": "42477bee3a644a5cbe1bbca800206582",
		"question": "What were robert sarvis and JAck Ryan nominated for ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_Sarvis> <http://dbpedia.org/ontology/nominee> ?uri. <http://dbpedia.org/resource/Jack_Ryan_(politician)> <http://dbpedia.org/ontology/nominee> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nominee",
			"label": "nominated",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/ontology/nominee",
			"label": "nominated",
			"seq": "38,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Sarvis",
			"label": "sarvis robert",
			"seq": "10,22"
		}, {
			"uri": "http://dbpedia.org/resource/Jack_Ryan_(politician)",
			"label": "ryan jack",
			"seq": "28,36"
		}]
	},
	{
		"id": "d9b4914b46a14c7392226eb411c3c6da",
		"question": "List the ideologies of the party of Boonchu Rojanastien?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Boonchu_Rojanastien> <http://dbpedia.org/property/party> ?x . ?x <http://dbpedia.org/ontology/ideology> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "27,31"
		}, {
			"uri": "http://dbpedia.org/ontology/ideology",
			"label": "ideologies",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Boonchu_Rojanastien",
			"label": "rojanastien boonchu",
			"seq": "36,54"
		}]
	},
	{
		"id": "c527bb01402d4d4db53562c4b0cc5862",
		"question": "How many other important work has been done by the writers of Sarah Jane Adventures?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/notableworks> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "work",
			"seq": "25,28"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "work",
			"seq": "25,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Sarah_Jane_Adventures",
			"label": "adventures sarah jane",
			"seq": "62,82"
		}]
	},
	{
		"id": "d5068e915d334851ae6309f58ccc82cf",
		"question": "What are the hubs of PLUS Helicopter Services, a highway helicopter unit of PLUS Expressways?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PLUS_Expressways> <http://dbpedia.org/property/hubs> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hubs",
			"seq": "13,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PLUS_Expressways",
			"label": "expressways",
			"seq": "81,91"
		}]
	},
	{
		"id": "b60be328eefd4fc994895d7e2c04b7e6",
		"question": "Is GIMP written in GTK+?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/GIMP> <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/GTK+> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "written",
			"seq": "8,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/GIMP",
			"label": "gimp",
			"seq": "3,6"
		}, {
			"uri": "http://dbpedia.org/resource/GTK+",
			"label": "gtk+",
			"seq": "19,22"
		}]
	},
	{
		"id": "085348492566421ba7cade102bb4e127",
		"question": "What is the common place where USS Camp DE-251 was built, and is one of the destinations of Emerald Air?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/USS_Camp_(DE-251)> <http://dbpedia.org/property/shipBuilder> ?uri. <http://dbpedia.org/resource/Emerald_Air_(United_States)> <http://dbpedia.org/ontology/destination> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/shipBuilder",
			"label": "built,",
			"seq": "51,56"
		}, {
			"uri": "http://dbpedia.org/ontology/destination",
			"label": "destinations",
			"seq": "76,87"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/USS_Camp_(DE-251)",
			"label": "de-251 camp uss",
			"seq": "31,45"
		}, {
			"uri": "http://dbpedia.org/resource/Emerald_Air_(United_States)",
			"label": "emerald",
			"seq": "92,98"
		}]
	},
	{
		"id": "e43ae08acd6c4d84a6f9e6c5bcb3cae6",
		"question": "Whose families are Buccinoidea and Buccinidae?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinoidea> . ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "families",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/family",
			"label": "families",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Buccinoidea",
			"label": "buccinoidea",
			"seq": "19,29"
		}, {
			"uri": "http://dbpedia.org/resource/Buccinidae",
			"label": "buccinidae",
			"seq": "35,44"
		}]
	},
	{
		"id": "29e146d8bbb745018652a1a3c634a737",
		"question": "In how many places are the tombs of people who died in Connecticut Colony?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Connecticut_Colony> . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "places",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "places",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Connecticut_Colony",
			"label": "connecticut colony",
			"seq": "55,72"
		}]
	},
	{
		"id": "02dde80bffd545f687faafd47c7e5afd",
		"question": "Who are the shareholder of the soccer club for whom Steve Holland plays?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Steve_Holland_(footballer)> <http://dbpedia.org/property/currentclub> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "club",
			"seq": "38,41"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "soccer",
			"seq": "31,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steve_Holland_(footballer)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e3fa455d918040598237f76a011b287b",
		"question": "How many shows are aired on Comedy Central?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/network",
			"label": "central",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Comedy_Central",
			"label": "central comedy",
			"seq": "28,41"
		}]
	},
	{
		"id": "6434d90c34d141a38701354bbfbcb9ce",
		"question": "Whose theme music is composed by the band one of whose member is Les Claypool?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Les_Claypool> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "member band",
			"seq": "37,47"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "21,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Les_Claypool",
			"label": "claypool les",
			"seq": "65,76"
		}]
	},
	{
		"id": "6fcdd77ecd8d48df85988971b5efa3ad",
		"question": "Where does the river flow into which begins in Lebrsnik?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Lebr\u0161nik> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourcePlace",
			"label": "does",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "15,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lebr\u0161nik",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "51ba46fe1c4e481f899d93f44dfae6d9",
		"question": "Where did the conflict take place where Liu Mingchuan fought?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Liu_Mingchuan> <http://dbpedia.org/property/battles> ?x . ?x <http://dbpedia.org/ontology/territory> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "the",
			"seq": "10,12"
		}, {
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Liu_Mingchuan",
			"label": "mingchuan liu",
			"seq": "40,52"
		}]
	},
	{
		"id": "4a602d8ca5624552a796ccfefbaf8a1d",
		"question": "What is the colour of Xocolatlite ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xocolatlite> <http://dbpedia.org/ontology/colour> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/colour",
			"label": "colour",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Xocolatlite",
			"label": "xocolatlite",
			"seq": "22,32"
		}]
	},
	{
		"id": "a43a3581442948429aaefa12283d9aa5",
		"question": "How many movies are directed by the spouse of Dolores del Ro?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Dolores_del_R\u00edo> . ?uri <http://dbpedia.org/property/director> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/partner",
			"label": "are",
			"seq": "16,18"
		}, {
			"uri": "http://dbpedia.org/property/director",
			"label": "directed",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "43,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dolores_del_R\u00edo",
			"label": "dolores",
			"seq": "46,52"
		}]
	},
	{
		"id": "4f77489b44f4444fb99edd7e387255a6",
		"question": "Name the loocation of Lekh Castle which is also the location of SamurAbsheron channel ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lekh_Castle> <http://dbpedia.org/ontology/location> ?uri. <http://dbpedia.org/resource/Samur\u2013Absheron_channel> <http://dbpedia.org/ontology/sourceCountry> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "location",
			"seq": "52,59"
		}, {
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "samurabsheron",
			"seq": "64,76"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lekh_Castle",
			"label": "castle lekh",
			"seq": "22,32"
		}, {
			"uri": "http://dbpedia.org/resource/Samur\u2013Absheron_channel",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e84421422b534cdb8726c1863cb03f18",
		"question": "Which planet was first discovered by Johann Gottfried Galle?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Johann_Gottfried_Galle>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Planet>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/discoverer",
			"label": "discovered",
			"seq": "23,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Planet",
			"label": "planet",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Johann_Gottfried_Galle",
			"label": "gottfried johann galle",
			"seq": "37,58"
		}]
	},
	{
		"id": "32aa2b3044e940e094b154d53dedd106",
		"question": "what mountains are in sierra nevada?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mountainRange> <http://dbpedia.org/resource/Sierra_Nevada_(U.S.)>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountains",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sierra_Nevada_(U.S.)",
			"label": "sierra nevada",
			"seq": "22,34"
		}]
	},
	{
		"id": "da9c3c6ffbf24f4e9335cf131e3f0907",
		"question": "Was True Grit a novel of the western genre?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/True_Grit_(novel)> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Western_(genre)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/literaryGenre",
			"label": "genre",
			"seq": "37,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/True_Grit_(novel)",
			"label": "novel true grit",
			"seq": "4,18"
		}, {
			"uri": "http://dbpedia.org/resource/Western_(genre)",
			"label": "western genre",
			"seq": "29,41"
		}]
	},
	{
		"id": "f3713cd348ac4ddf884634f3a7672b0a",
		"question": "Who is the nominee of Jack Ryan ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ryan_(politician)> <http://dbpedia.org/ontology/nominee> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nominee",
			"label": "nominee",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jack_Ryan_(politician)",
			"label": "ryan jack",
			"seq": "22,30"
		}]
	},
	{
		"id": "a0ea55269f83451faef0afb3122b0bf3",
		"question": "Name the wine regions of Baco noir?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Baco_noir> <http://dbpedia.org/ontology/wineRegion> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "regions",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Baco_noir",
			"label": "noir baco",
			"seq": "25,33"
		}]
	},
	{
		"id": "67978a98005d4f27897894daf8f8feeb",
		"question": "Which religion is followed by the PM who was served by Chea Sim?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Chea_Sim> <http://dbpedia.org/property/primeminister> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "religion",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chea_Sim",
			"label": "chea sim",
			"seq": "55,62"
		}]
	},
	{
		"id": "a8ff069915554ce8b52b95787f1e84ce",
		"question": "What are the television shows of a company headquartered in Geneva?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Geneva> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquartered",
			"seq": "43,55"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Geneva",
			"label": "geneva",
			"seq": "60,65"
		}]
	},
	{
		"id": "9bea6db7df12415083f728032f9327a1",
		"question": "Name the president of Wyche Fowler ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wyche_Fowler> <http://dbpedia.org/ontology/president> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wyche_Fowler",
			"label": "fowler wyche",
			"seq": "22,33"
		}]
	},
	{
		"id": "dbac6210102246678872e25416ced6dc",
		"question": "Name the parts of the settlements which has New Braunfels as one of the parts ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/part> <http://dbpedia.org/resource/New_Braunfels,_Texas> . ?x <http://dbpedia.org/ontology/part> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/part",
			"label": "parts",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/part",
			"label": "parts",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Settlement",
			"label": "settlements",
			"seq": "22,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_Braunfels,_Texas",
			"label": "braunfels new",
			"seq": "44,56"
		}]
	},
	{
		"id": "6d9643fb5f044ea2b9b9c29f1cc443c2",
		"question": "How many party are there of the office holders whose one of the party is Janata Dal ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/otherParty> <http://dbpedia.org/resource/Janata_Dal> . ?x <http://dbpedia.org/ontology/otherParty> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/otherParty",
			"label": "party",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/otherParty",
			"label": "party",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Janata_Dal",
			"label": "janata dal",
			"seq": "73,82"
		}]
	},
	{
		"id": "8324de1b412b4b4a827a1a102c028585",
		"question": "Who is the headcoach of 2014-15 Virginia Tech Hokies men's basketball team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2014\u201315_Virginia_Tech_Hokies_men's_basketball_team> <http://dbpedia.org/property/headcoach> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headcoach",
			"label": "headcoach",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2014\u201315_Virginia_Tech_Hokies_men's_basketball_team",
			"label": "basketball virginia hokies",
			"seq": "32,57"
		}]
	},
	{
		"id": "32830f79373c474abbf24909919f630e",
		"question": "name the home stadium of FC Spartak Moscow season 2011-12",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2011\u201312_FC_Spartak_Moscow_season> <http://dbpedia.org/ontology/homeStadium> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "stadium home",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2011\u201312_FC_Spartak_Moscow_season",
			"label": "spartak season moscow",
			"seq": "28,48"
		}]
	},
	{
		"id": "d4e20aa278bc4c0daee027c3c77b2377",
		"question": "How many causes of death have been associated with American citizens?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/citizenship> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/citizenship",
			"label": "citizens",
			"seq": "60,67"
		}, {
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "death",
			"seq": "19,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "8d0baff96ff24540ad867eca41eeb113",
		"question": "Give me a list of everyone who married the musicians signed up with Pablo Records?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Pablo_Records> . ?uri <http://dbpedia.org/ontology/spouse> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "pablo",
			"seq": "68,72"
		}, {
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "pablo",
			"seq": "68,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pablo_Records",
			"label": "records pablo",
			"seq": "68,80"
		}]
	},
	{
		"id": "93986b8aaf5c4a2c9d3b656860306d2a",
		"question": "Is Bluebird the grandsire of Miss Potential?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Miss_Potential> <http://dbpedia.org/ontology/grandsire> <http://dbpedia.org/resource/Bluebird> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/grandsire",
			"label": "grandsire",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miss_Potential",
			"label": "potential miss",
			"seq": "29,42"
		}, {
			"uri": "http://dbpedia.org/resource/Bluebird",
			"label": "bluebird",
			"seq": "3,10"
		}]
	},
	{
		"id": "91be6e04144043e78dc8164ea13e0aac",
		"question": "Which interest of Philip Novak is the relegion of Vesak ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philip_Novak> <http://dbpedia.org/property/mainInterests> ?uri. <http://dbpedia.org/resource/Vesak> <http://dbpedia.org/ontology/type> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "interest",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/type",
			"label": "the",
			"seq": "34,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Philip_Novak",
			"label": "philip novak",
			"seq": "18,29"
		}, {
			"uri": "http://dbpedia.org/resource/Vesak",
			"label": "vesak",
			"seq": "50,54"
		}]
	},
	{
		"id": "9360bc93c0e246c4a7bc4ac32f5f86c9",
		"question": "Is semnani one of the languages spoken in Iran?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Iran> <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Semnani_languages> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/languages",
			"label": "languages",
			"seq": "22,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Iran",
			"label": "iran",
			"seq": "42,45"
		}, {
			"uri": "http://dbpedia.org/resource/Semnani_languages",
			"label": "languages semnani",
			"seq": "3,19"
		}]
	},
	{
		"id": "2f0f958ee8884f229d32a6f90c3cb34f",
		"question": "List everyone who got their training in the city of California?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/California> . ?uri <http://dbpedia.org/property/training> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "city",
			"seq": "44,47"
		}, {
			"uri": "http://dbpedia.org/property/training",
			"label": "training",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/California",
			"label": "california",
			"seq": "52,61"
		}]
	},
	{
		"id": "899f6fb23f3148599baf961c74ad532d",
		"question": "Which movies's screenplay is written by Akiva Goldsman",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screenplay",
			"seq": "15,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "26,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Akiva_Goldsman",
			"label": "goldsman akiva",
			"seq": "40,53"
		}]
	},
	{
		"id": "e96e350f71e64985b52abd2ed25349a1",
		"question": "Who made the singles on the famous album Aida?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/album> <http://dbpedia.org/resource/Elton_John_and_Tim_Rice's_Aida> . ?x <http://dbpedia.org/ontology/musicalArtist> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/album",
			"label": "album",
			"seq": "35,39"
		}, {
			"uri": "http://dbpedia.org/ontology/musicalArtist",
			"label": "singles",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Single",
			"label": "singles",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elton_John_and_Tim_Rice's_Aida",
			"label": "aida",
			"seq": "41,44"
		}]
	},
	{
		"id": "8a3172ebec544494a91ab3f49a5376e6",
		"question": "Who is the associate of Thomas Bryan Martin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomas_Bryan_Martin> <http://dbpedia.org/ontology/associate> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associate",
			"label": "associate",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thomas_Bryan_Martin",
			"label": "thomas martin bryan",
			"seq": "24,42"
		}]
	},
	{
		"id": "54adeba4e7da49f286068bdbf39d26d8",
		"question": "What sport played in Polytechnic uni of San Juan has also made advocate nasiruddin famous?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Advocate_Nasiruddin> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_San_Juan> <http://dbpedia.org/ontology/sport> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "of",
			"seq": "37,38"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sport",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Advocate_Nasiruddin",
			"label": "nasiruddin advocate",
			"seq": "63,81"
		}, {
			"uri": "http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_San_Juan",
			"label": "polytechnic",
			"seq": "21,31"
		}]
	},
	{
		"id": "7e43e5b0e86d44889fb270fb7665e52b",
		"question": "Where is the fictional character from, whose last appearance was in the Avengers, 1998?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/last> <http://dbpedia.org/resource/The_Avengers_(1998_film)> . ?x <http://dbpedia.org/property/nationality> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/last",
			"label": "last",
			"seq": "45,48"
		}, {
			"uri": "http://dbpedia.org/property/nationality",
			"label": "fictional",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "13,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Avengers_(1998_film)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0de77adbc13b469fb9d23dec23d37f13",
		"question": "List the academic discipline of the journals whose one of the discipline is neuro imaging ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/academicDiscipline> <http://dbpedia.org/resource/Neuroimaging> . ?x <http://dbpedia.org/ontology/academicDiscipline> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "discipline",
			"seq": "18,27"
		}, {
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "discipline",
			"seq": "18,27"
		}, {
			"uri": "http://dbpedia.org/ontology/AcademicJournal",
			"label": "academic",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neuroimaging",
			"label": "imaging neuro",
			"seq": "76,88"
		}]
	},
	{
		"id": "70ff4d76a1bd447eb931dd8fdcdb1fc2",
		"question": "Which countries were led by Pietro Parolin?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Pietro_Parolin>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "led",
			"seq": "21,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "countries",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pietro_Parolin",
			"label": "parolin pietro",
			"seq": "28,41"
		}]
	},
	{
		"id": "db1ffdbdbf064f84a06c61655ccb183a",
		"question": "was the first national bank and trust building architectured by Chicago?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/First_National_Bank_and_Trust_Building_(Lima,_Ohio)> <http://dbpedia.org/ontology/architecturalStyle> <http://dbpedia.org/resource/Chicago> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architecturalStyle",
			"label": "architectured",
			"seq": "47,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/First_National_Bank_and_Trust_Building_(Lima,_Ohio)",
			"label": "national building trust first bank",
			"seq": "8,41"
		}, {
			"uri": "http://dbpedia.org/resource/Chicago",
			"label": "chicago",
			"seq": "64,70"
		}]
	},
	{
		"id": "bce5c81618704a358d4db3d4d5497dc3",
		"question": "Where does the road starting from Madison, Wisconsin end?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Madison,_Wisconsin> . ?x <http://dbpedia.org/ontology/routeStart> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Road>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "end",
			"seq": "53,55"
		}, {
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "starting",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Road",
			"label": "road",
			"seq": "15,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Madison,_Wisconsin",
			"label": "wisconsin madison,",
			"seq": "34,51"
		}]
	},
	{
		"id": "782f901d32c14d0bb32eb413e439eb02",
		"question": "What are the movies with Daniel Waters as screenwriter?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Daniel_Waters_(screenwriter)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screenwriter",
			"seq": "42,53"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "daniel",
			"seq": "25,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Daniel_Waters_(screenwriter)",
			"label": "screenwriter waters daniel",
			"seq": "25,50"
		}]
	},
	{
		"id": "7847a3288f5a482388944047d3b9e4ce",
		"question": "What sports are played in schools in the capital region?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/region> <http://dbpedia.org/resource/Capital_region> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/region",
			"label": "region",
			"seq": "49,54"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Capital_region",
			"label": "capital region",
			"seq": "41,54"
		}]
	},
	{
		"id": "c1d9d01c89334b408616693a39652284",
		"question": "Where are the tombs of alumni of ational academy museum and school?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/training> <http://dbpedia.org/resource/National_Academy_Museum_and_School> . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/training",
			"label": "alumni",
			"seq": "23,28"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "ational",
			"seq": "33,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Academy_Museum_and_School",
			"label": "ational academy school museum",
			"seq": "33,61"
		}]
	},
	{
		"id": "c462b0293c354f19b0a5dee22d388534",
		"question": "What beverage was launched by Ferrero SpA?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Ferrero_SpA>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "ferrero",
			"seq": "30,36"
		}, {
			"uri": "http://dbpedia.org/ontology/Food",
			"label": "ferrero",
			"seq": "30,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ferrero_SpA",
			"label": "ferrero spa",
			"seq": "30,40"
		}]
	},
	{
		"id": "b313e3a99d844bfca33d9b8c30f75a34",
		"question": "What are the movies written by Nick Castle?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Nick_Castle>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "written",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "nick",
			"seq": "31,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nick_Castle",
			"label": "castle nick",
			"seq": "31,41"
		}]
	},
	{
		"id": "0f40e662368f43ac9aaa550638105eee",
		"question": "Name the TV show with Simon Fuller as artist and Fox as the channel ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> . ?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "fuller",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/property/channel",
			"label": "channel",
			"seq": "60,66"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Simon_Fuller",
			"label": "fuller simon",
			"seq": "22,33"
		}, {
			"uri": "http://dbpedia.org/resource/Fox_Broadcasting_Company",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "5e85a463cae048ce8b509e5c2d31f902",
		"question": "How many bands began in Birmingham?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/origin> <http://dbpedia.org/resource/Birmingham>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/origin",
			"label": "in",
			"seq": "21,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "bands",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Birmingham",
			"label": "birmingham",
			"seq": "24,33"
		}]
	},
	{
		"id": "c4dc2cdbdbc34b52a791cf49139f4a8f",
		"question": "How many athletic associations are there in all of the private universities?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Private_university> . ?x <http://dbpedia.org/property/athletics> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/type",
			"label": "the",
			"seq": "35,37"
		}, {
			"uri": "http://dbpedia.org/property/athletics",
			"label": "athletic",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Private_university",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0cf8b22d4530493c952e2a62d734586c",
		"question": "Which licensee of the WRVU is also the alma mater of the Todd J. Campbell ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WRVU> <http://dbpedia.org/property/licensee> ?uri. <http://dbpedia.org/resource/Todd_J._Campbell> <http://dbpedia.org/ontology/almaMater> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/licensee",
			"label": "licensee",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "39,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WRVU",
			"label": "wrvu",
			"seq": "22,25"
		}, {
			"uri": "http://dbpedia.org/resource/Todd_J._Campbell",
			"label": "campbell todd j.",
			"seq": "57,72"
		}]
	},
	{
		"id": "4ad9c07443804ff09a9ee80a5d61dcac",
		"question": "Which currency of Republic of Montenegro is also the currency of the French Southern and Antarctic Lands ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> <http://dbpedia.org/ontology/currency> ?uri. <http://dbpedia.org/resource/Republic_of_Montenegro_(1992\u20132006)> <http://dbpedia.org/property/currency> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currency",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/currency",
			"label": "currency",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands",
			"label": "antarctic southern french lands",
			"seq": "69,99"
		}, {
			"uri": "http://dbpedia.org/resource/Republic_of_Montenegro_(1992\u20132006)",
			"label": "montenegro republic",
			"seq": "18,36"
		}]
	},
	{
		"id": "7acd068884a6483199c2fd7bdd37c988",
		"question": "Name the Chris Marve's school ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chris_Marve> <http://dbpedia.org/ontology/school> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/school",
			"label": "school",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chris_Marve",
			"label": "chris",
			"seq": "9,13"
		}]
	},
	{
		"id": "598a034edc2b4ba7b7f9eacf0fad1fb2",
		"question": "Which set of researchers won the Gold Medal of the Royal Astronomical Society award?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prizes",
			"label": "researchers",
			"seq": "13,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "society",
			"seq": "70,76"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society",
			"label": "astronomical society",
			"seq": "57,76"
		}]
	},
	{
		"id": "26d0b20b5e3f4b3bb897f363daa6261f",
		"question": "In how many areas do the networks broadcast, which also broadcasts in North Carolina?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/broadcastArea> <http://dbpedia.org/resource/North_Carolina> . ?x <http://dbpedia.org/property/area> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/broadcastArea",
			"label": "broadcasts",
			"seq": "56,65"
		}, {
			"uri": "http://dbpedia.org/property/area",
			"label": "areas",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "areas",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North_Carolina",
			"label": "carolina north",
			"seq": "70,83"
		}]
	},
	{
		"id": "8236caff2da947d6a6cf88099c134f23",
		"question": "Name the movie whose director of photography is Gregg Toland and Bernard Herrmann was the music composer?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Gregg_Toland> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Bernard_Herrmann>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cinematography",
			"label": "photography",
			"seq": "33,43"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composer music",
			"seq": "90,103"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "30,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gregg_Toland",
			"label": "toland gregg",
			"seq": "48,59"
		}, {
			"uri": "http://dbpedia.org/resource/Bernard_Herrmann",
			"label": "herrmann bernard",
			"seq": "65,80"
		}]
	},
	{
		"id": "38e4c90868ed468b94cb549c579f9b57",
		"question": "What city gave birth to Mishal Raheja and also houses New India Assurance?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mishal_Raheja> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/New_India_Assurance> <http://dbpedia.org/property/location> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birth",
			"seq": "15,19"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "to",
			"seq": "21,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mishal_Raheja",
			"label": "raheja mishal",
			"seq": "24,36"
		}, {
			"uri": "http://dbpedia.org/resource/New_India_Assurance",
			"label": "assurance india new",
			"seq": "54,72"
		}]
	},
	{
		"id": "f91b91df9ef746ababdcfebcf269d810",
		"question": "What are the awrds won by Laemmle Theatres ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Laemmle_Theatres> <http://dbpedia.org/ontology/service> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/service",
			"label": "theatres",
			"seq": "34,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Laemmle_Theatres",
			"label": "theatres laemmle",
			"seq": "26,41"
		}]
	},
	{
		"id": "d857c581856d4696a3df4d5cff4b538c",
		"question": "People of which religion have been the members of parliament, and are from the Kalutara Electoral district?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/region> <http://dbpedia.org/resource/Kalutara_Electoral_District> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MemberOfParliament>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/region",
			"label": "religion",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/MemberOfParliament",
			"label": "parliament,",
			"seq": "50,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kalutara_Electoral_District",
			"label": "electoral kalutara district",
			"seq": "79,105"
		}]
	},
	{
		"id": "20b709002c9a451f81ac30e30697d54e",
		"question": "Name a company with one of the key person as Edwin Catmull and produces RenderMan?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Edwin_Catmull> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/RenderMan_(software)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "person key",
			"seq": "31,40"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "produces",
			"seq": "63,70"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "7,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edwin_Catmull",
			"label": "catmull edwin",
			"seq": "45,57"
		}, {
			"uri": "http://dbpedia.org/resource/RenderMan_(software)",
			"label": "renderman",
			"seq": "72,80"
		}]
	},
	{
		"id": "7467291024494dcd878d0a375b75d0a8",
		"question": "Give me a count of movies distributed by Warner Bros?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Warner_Bros.>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "26,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Warner_Bros.",
			"label": "warner bros",
			"seq": "41,51"
		}]
	},
	{
		"id": "89559a4c09794d45b60a14f288fc5403",
		"question": "Name the Fox TV show judged by Rand Jackson ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/judges",
			"label": "judged",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/property/channel",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "16,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Randy_Jackson",
			"label": "jackson rand",
			"seq": "31,42"
		}, {
			"uri": "http://dbpedia.org/resource/Fox_Broadcasting_Company",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1466144570d843389c2cc9e911698213",
		"question": "Who owns the broadcast network founded by CNN?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/CNN> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "founded by",
			"seq": "31,40"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owns",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/BroadcastNetwork",
			"label": "broadcast network",
			"seq": "13,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CNN",
			"label": "cnn",
			"seq": "42,44"
		}]
	},
	{
		"id": "dead53b77d7b4ae3abf6f4198edb05e5",
		"question": "From how many different cities have people gone to the Illinois Fighting Illini men's basketball?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/Illinois_Fighting_Illini_men's_basketball> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/college",
			"label": "people",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "people",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "people",
			"seq": "36,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Illinois_Fighting_Illini_men's_basketball",
			"label": "basketball illinois fighting illini men's",
			"seq": "55,95"
		}]
	},
	{
		"id": "d17b83f85f7c433e9f2c91eab0577727",
		"question": "Name the television show with opening theme as Te Deum and is composed by Marc-Antoine Charpentier?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Te_Deum_(Charpentier)> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Marc-Antoine_Charpentier>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opening theme",
			"seq": "30,42"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "62,69"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Te_Deum_(Charpentier)",
			"label": "charpentier",
			"seq": "87,97"
		}, {
			"uri": "http://dbpedia.org/resource/Marc-Antoine_Charpentier",
			"label": "marc-antoine charpentier",
			"seq": "74,97"
		}]
	},
	{
		"id": "ab1dd6e665cc4025b061eb4a3e83e59f",
		"question": "What is the name of the river whose mouth country is Mozambique and source region is North-Western Province, Zambia?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mouthCountry> <http://dbpedia.org/resource/Mozambique> . ?uri <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mouthCountry",
			"label": "country mouth",
			"seq": "36,48"
		}, {
			"uri": "http://dbpedia.org/ontology/sourceRegion",
			"label": "source region",
			"seq": "68,80"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "24,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mozambique",
			"label": "mozambique",
			"seq": "53,62"
		}, {
			"uri": "http://dbpedia.org/resource/North-Western_Province,_Zambia",
			"label": "north-western province, zambia",
			"seq": "85,114"
		}]
	},
	{
		"id": "d809177595bc45df9d37b6e201e2516a",
		"question": "Did nokia 215 has the series 30+ OS?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Nokia_215> <http://dbpedia.org/property/os> <http://dbpedia.org/resource/Series_30+> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/os",
			"label": "os",
			"seq": "33,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nokia_215",
			"label": "nokia 215",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/resource/Series_30+",
			"label": "series 30+",
			"seq": "22,31"
		}]
	},
	{
		"id": "c1a557197361403b93c245a8252279ca",
		"question": "Sampson Cudjoe plays for the Ghana national team?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Sampson_Cudjoe> <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Ghana> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "national team",
			"seq": "35,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sampson_Cudjoe",
			"label": "sampson cudjoe",
			"seq": "0,13"
		}, {
			"uri": "http://dbpedia.org/resource/Ghana",
			"label": "ghana",
			"seq": "29,33"
		}]
	},
	{
		"id": "046dd4f4ca7741639c230165ac321a53",
		"question": "How many owners owned the clubs participating in the Premier leagues of '14?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/season> <http://dbpedia.org/resource/2014\u201315_Premier_League> . ?x <http://dbpedia.org/property/owner> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/season",
			"label": "leagues",
			"seq": "61,67"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owners",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2014\u201315_Premier_League",
			"label": "premier",
			"seq": "53,59"
		}]
	},
	{
		"id": "09cdda0da032441592256ac3ea5b7206",
		"question": "What is the producer of the television shows whose channel is CBBC?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/CBBC_(TV_channel)> . ?x <http://dbpedia.org/ontology/producer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/channel",
			"label": "channel",
			"seq": "51,57"
		}, {
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "28,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CBBC_(TV_channel)",
			"label": "channel cbbc",
			"seq": "51,62"
		}]
	},
	{
		"id": "c9675b3e25a74a45b74ce591e393e65c",
		"question": "List the interest of the scientists whose one of the field is Chinese poetry ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/fields> <http://dbpedia.org/resource/Chinese_poetry> . ?x <http://dbpedia.org/property/fields> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/fields",
			"label": "field",
			"seq": "53,57"
		}, {
			"uri": "http://dbpedia.org/property/fields",
			"label": "field",
			"seq": "53,57"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientists",
			"seq": "25,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chinese_poetry",
			"label": "chinese poetry",
			"seq": "62,75"
		}]
	},
	{
		"id": "e1bec9b2a77e46689d40931d5c9ecd63",
		"question": "Which writer of A literary Nightmare also extended the work of The Apple tree ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Apple_Tree> <http://dbpedia.org/ontology/basedOn> ?uri. <http://dbpedia.org/resource/A_Literary_Nightmare> <http://dbpedia.org/ontology/author> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/basedOn",
			"label": "also",
			"seq": "37,40"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "the",
			"seq": "51,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Apple_Tree",
			"label": "apple tree",
			"seq": "67,76"
		}, {
			"uri": "http://dbpedia.org/resource/A_Literary_Nightmare",
			"label": "nightmare literary",
			"seq": "18,35"
		}]
	},
	{
		"id": "2d2934c87b0e4eefa554db84e9abe251",
		"question": "Whihc uni did Joshua A. Siegel attend ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joshua_A._Siegel> <http://dbpedia.org/property/education> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "attend",
			"seq": "31,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joshua_A._Siegel",
			"label": "siegel joshua a.",
			"seq": "14,29"
		}]
	},
	{
		"id": "e6047de588e14bb9881a1af25801803c",
		"question": "How many licensee are there, of the radio stations whose area is Nashville, Tennessee ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/area> <http://dbpedia.org/resource/Nashville,_Tennessee> . ?x <http://dbpedia.org/property/licensee> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/area",
			"label": "area",
			"seq": "57,60"
		}, {
			"uri": "http://dbpedia.org/property/licensee",
			"label": "licensee",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nashville,_Tennessee",
			"label": "nashville, tennessee",
			"seq": "65,84"
		}]
	},
	{
		"id": "cf382df024a340a4876a4c3651d44937",
		"question": "Who has a  child named Lori Black and is resting place as Palo Alto, California?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Palo_Alto,_California>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "child",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/property/restingPlace",
			"label": "resting place",
			"seq": "41,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lori_Black",
			"label": "black lori",
			"seq": "23,32"
		}, {
			"uri": "http://dbpedia.org/resource/Palo_Alto,_California",
			"label": "california alto, palo",
			"seq": "58,78"
		}]
	},
	{
		"id": "62d3a91ca55d4dadbd13109a663caf4b",
		"question": "Who is the artist of the album which has the song I Can't Change the World ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/I_Can't_Change_the_World> <http://dbpedia.org/property/album> ?x . ?x <http://dbpedia.org/property/artist> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/album",
			"label": "album",
			"seq": "25,29"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/I_Can't_Change_the_World",
			"label": "change world can't the",
			"seq": "7,28"
		}]
	},
	{
		"id": "8771e72d14ca4063839d6058b825dcde",
		"question": "What are the movies whose cast members are signed up with Point Blank Records?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Point_Blank_Records> . ?uri <http://dbpedia.org/property/starring> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "signed",
			"seq": "43,48"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "with",
			"seq": "53,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Point_Blank_Records",
			"label": "records point blank",
			"seq": "58,76"
		}]
	},
	{
		"id": "f71102a3f26440088bc3bb2f7cb2a423",
		"question": "What is the successor of PlayStation 4",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/PlayStation_4>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PlayStation_4",
			"label": "playstation",
			"seq": "25,35"
		}]
	},
	{
		"id": "cd6d4ee1269f45e89677ac5f6cb06cf3",
		"question": "How many people are in the band with Juelz Santana?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Juelz_Santana> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "the",
			"seq": "23,25"
		}, {
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "band",
			"seq": "27,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Juelz_Santana",
			"label": "santana juelz",
			"seq": "37,49"
		}]
	},
	{
		"id": "936e49d38fb344b8a243aafc31b75630",
		"question": "To which series does Lost special belong to ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Lost_Special> <http://dbpedia.org/property/series> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/series",
			"label": "series",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Lost_Special",
			"label": "special lost",
			"seq": "21,32"
		}]
	},
	{
		"id": "a39215c00d904d629a2ea30d237281e9",
		"question": "In which country is the Duong river?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/\u0110u\u1ed1ng_River> <http://dbpedia.org/ontology/sourceCountry> ?uri  . }",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "country",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/\u0110u\u1ed1ng_River",
			"label": "river",
			"seq": "30,34"
		}]
	},
	{
		"id": "1d5d1578a88e4fbcb0dcac66ec5eaac5",
		"question": "List the awards won by the film director of Chicken Run?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Chicken_Run> <http://dbpedia.org/property/director> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/director",
			"label": "director",
			"seq": "32,39"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chicken_Run",
			"label": "chicken run",
			"seq": "44,54"
		}]
	},
	{
		"id": "bb3db88e042a45719a508ffcb4e0cae4",
		"question": "Was Elton John a chairman of a Watford FC Season?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/1999\u20132000_Watford_F.C._season> <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Elton_John> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/chairman",
			"label": "chairman",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1999\u20132000_Watford_F.C._season",
			"label": "watford season",
			"seq": "31,44"
		}, {
			"uri": "http://dbpedia.org/resource/Elton_John",
			"label": "elton john",
			"seq": "4,13"
		}]
	},
	{
		"id": "f1a9ded56bf842f4bed9125161a8de0b",
		"question": "Which band's past member are Joe Jonas and Nick Jonas?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Joe_Jonas> . ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Nick_Jonas> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "member past",
			"seq": "13,23"
		}, {
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "member past",
			"seq": "13,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "and",
			"seq": "7,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joe_Jonas",
			"label": "jonas joe",
			"seq": "29,37"
		}, {
			"uri": "http://dbpedia.org/resource/Nick_Jonas",
			"label": "jonas nick",
			"seq": "33,42"
		}]
	},
	{
		"id": "e8726e19e919406eba5bbec57e2e6471",
		"question": "What is the religious affiliation of Neungin High School?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religiousAffiliation",
			"label": "affiliation religious",
			"seq": "12,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neungin_High_School",
			"label": "neungin school high",
			"seq": "37,55"
		}]
	},
	{
		"id": "66b48fe8be2c4bf3b2ffb8e72ab4b3ce",
		"question": "List the common official language of the ladonia and Empire of Atlantium ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ladonia_(micronation)> <http://dbpedia.org/ontology/officialLanguage> ?uri. <http://dbpedia.org/resource/Empire_of_Atlantium> <http://dbpedia.org/ontology/officialLanguage> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/officialLanguage",
			"label": "official language",
			"seq": "16,32"
		}, {
			"uri": "http://dbpedia.org/ontology/officialLanguage",
			"label": "official language",
			"seq": "16,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ladonia_(micronation)",
			"label": "ladonia",
			"seq": "41,47"
		}, {
			"uri": "http://dbpedia.org/resource/Empire_of_Atlantium",
			"label": "atlantium empire",
			"seq": "53,68"
		}]
	},
	{
		"id": "ae769d3fce084866a06c22f70221aaa8",
		"question": "What is the name of the characters created by Frank Miller?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Frank_Miller_(comics)> . ?x <http://dbpedia.org/property/characterName> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creators",
			"label": "created",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/property/characterName",
			"label": "characters",
			"seq": "24,33"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "characters",
			"seq": "24,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frank_Miller_(comics)",
			"label": "miller frank",
			"seq": "46,57"
		}]
	},
	{
		"id": "574ac42d309a4676893b0f1e4f291a36",
		"question": "Does the stylistic origins of Plena lie in the Caribbean?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Plena> <http://dbpedia.org/property/stylisticOrigins> <http://dbpedia.org/resource/Caribbean> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/stylisticOrigins",
			"label": "stylistic origins",
			"seq": "9,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Plena",
			"label": "plena",
			"seq": "30,34"
		}, {
			"uri": "http://dbpedia.org/resource/Caribbean",
			"label": "caribbean",
			"seq": "47,55"
		}]
	},
	{
		"id": "52e9a4a2f69e419aa527cd4b5658c783",
		"question": "From which genres of music did those genres emerge where drums are important?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/instruments> <http://dbpedia.org/resource/Drum_kit> . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicGenre>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/instruments",
			"label": "drums",
			"seq": "57,61"
		}, {
			"uri": "http://dbpedia.org/ontology/stylisticOrigin",
			"label": "important",
			"seq": "67,75"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicGenre",
			"label": "music",
			"seq": "21,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Drum_kit",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "afda8a6127814c5f8b979c0859dbd3ae",
		"question": "What is the service of the Laemmle Theatres and is also the award of the Jos Rivera (playwright)?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Laemmle_Theatres> <http://dbpedia.org/ontology/service> ?uri. <http://dbpedia.org/resource/Jos\u00e9_Rivera_(playwright)> <http://dbpedia.org/property/awards> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/service",
			"label": "service",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "award",
			"seq": "60,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Laemmle_Theatres",
			"label": "theatres laemmle",
			"seq": "27,42"
		}, {
			"uri": "http://dbpedia.org/resource/Jos\u00e9_Rivera_(playwright)",
			"label": "(playwright) rivera",
			"seq": "77,95"
		}]
	},
	{
		"id": "ea72af60227b4132a3a71b2eefe30314",
		"question": "Whci co founder of Sea gayle Music is also the artist of Brad Paisley Discography /",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brad_Paisley_discography> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Sea_Gayle_Music> <http://dbpedia.org/property/founder> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "47,52"
		}, {
			"uri": "http://dbpedia.org/property/founder",
			"label": "founder",
			"seq": "8,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brad_Paisley_discography",
			"label": "discography paisley brad",
			"seq": "57,80"
		}, {
			"uri": "http://dbpedia.org/resource/Sea_Gayle_Music",
			"label": "music gayle sea",
			"seq": "19,33"
		}]
	},
	{
		"id": "34b9dabc67ac415fab309f50d5b45687",
		"question": "Whose album is Haiti, I am sorry?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Haiti_I_Am_Sorry> <http://dbpedia.org/ontology/album> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/album",
			"label": "album",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Haiti_I_Am_Sorry",
			"label": "sorry",
			"seq": "27,31"
		}]
	},
	{
		"id": "232e6c0e8d57443a9ef659cad042b6d9",
		"question": "In which other places are there companies which are in Ontario, too?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Ontario> . ?x <http://dbpedia.org/property/locations> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "companies",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/property/locations",
			"label": "companies",
			"seq": "32,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ontario",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "b4b796c110644d17980fe538847023e5",
		"question": "What is the american football league whose champion is from Kansas City, Missouri?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Kansas_City,_Missouri> . ?uri <http://dbpedia.org/property/champion> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballLeague>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "city,",
			"seq": "67,71"
		}, {
			"uri": "http://dbpedia.org/property/champion",
			"label": "champion",
			"seq": "43,50"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballLeague",
			"label": "football american league",
			"seq": "12,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kansas_City,_Missouri",
			"label": "missouri kansas city,",
			"seq": "60,80"
		}]
	},
	{
		"id": "0a1b829f8e814abdb18dac4b1b010740",
		"question": "Where did the music genre of Harry and the Potters originate?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Harry_and_the_Potters_(album)> <http://dbpedia.org/ontology/genre> ?x . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genre",
			"seq": "20,24"
		}, {
			"uri": "http://dbpedia.org/ontology/stylisticOrigin",
			"label": "originate",
			"seq": "51,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harry_and_the_Potters_(album)",
			"label": "potters harry the and",
			"seq": "10,30"
		}]
	},
	{
		"id": "3a91f21a1ee04fa5a47b2f2b97a707ec",
		"question": "For which other teams have the past Boston Bruins members played?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Boston_Bruins> . ?x <http://dbpedia.org/property/playedFor> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "16,20"
		}, {
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "played for",
			"seq": "0,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Boston_Bruins",
			"label": "bruins boston",
			"seq": "36,48"
		}]
	},
	{
		"id": "246a4b432f5c4660a33367cb504c70d8",
		"question": "Who directed The Haunted House ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Haunted_House_(1929_film)> <http://dbpedia.org/ontology/director> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "directed",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Haunted_House_(1929_film)",
			"label": "haunted house",
			"seq": "17,29"
		}]
	},
	{
		"id": "194f4e5619af43f0a4200140d98ede3b",
		"question": "For how many movies are there whose musicians home town is in Volos ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Volos> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "46,54"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "musicians",
			"seq": "36,44"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "56,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Volos",
			"label": "volos",
			"seq": "62,66"
		}]
	},
	{
		"id": "ea4ea30b9c3940988dd74494c7903da2",
		"question": "Who used to skate with the pupils of Laureano Ibarra?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Laureano_Ibarra> . ?x <http://dbpedia.org/ontology/formerPartner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FigureSkater>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coach",
			"label": "to",
			"seq": "9,10"
		}, {
			"uri": "http://dbpedia.org/ontology/formerPartner",
			"label": "skate",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/FigureSkater",
			"label": "skate",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Laureano_Ibarra",
			"label": "laureano ibarra",
			"seq": "37,51"
		}]
	},
	{
		"id": "286e3b7df05248f9bcaf081f3a5bfae7",
		"question": "What is the religion of the member of parliament who is a relative of Sarathchandra Rajakaruna?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Sarathchandra_Rajakaruna> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MemberOfParliament>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "religion",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/MemberOfParliament",
			"label": "parliament member",
			"seq": "28,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sarathchandra_Rajakaruna",
			"label": "sarathchandra rajakaruna",
			"seq": "70,93"
		}]
	},
	{
		"id": "d0da6ce614904c6f90c0c441e04f16b5",
		"question": "what awards have been given to A. Peter Dewey?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A._Peter_Dewey> <http://dbpedia.org/ontology/award> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A._Peter_Dewey",
			"label": "peter dewey a.",
			"seq": "31,44"
		}]
	},
	{
		"id": "bd5737093bad479e8cc07b908e5189da",
		"question": "What television show is magistrated by Harry Connick, Jr.?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Harry_Connick,_Jr.>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/judges",
			"label": "television",
			"seq": "5,14"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "5,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harry_Connick,_Jr.",
			"label": "connick, harry jr.",
			"seq": "39,56"
		}]
	},
	{
		"id": "5145b69c134f441b869b6d2ae0252731",
		"question": "Which Texas based company  was founded by Jim Harris ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Texas> . ?uri <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "company",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/property/founder",
			"label": "founded",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "18,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Texas",
			"label": "texas",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/resource/Jim_Harris_(entrepreneur)",
			"label": "harris jim",
			"seq": "42,51"
		}]
	},
	{
		"id": "37572c57bb164aba982b23993acc3b34",
		"question": "From how many different places did the weapons used in the American Indian wars originate?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/usedInWar> <http://dbpedia.org/resource/American_Indian_Wars> . ?x <http://dbpedia.org/property/origin> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/usedInWar",
			"label": "used",
			"seq": "47,50"
		}, {
			"uri": "http://dbpedia.org/property/origin",
			"label": "originate",
			"seq": "80,88"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "24,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Indian_Wars",
			"label": "american indian",
			"seq": "59,73"
		}]
	},
	{
		"id": "f0acd22286c047eabc35b04de1c0c47b",
		"question": "From where does the river start, which flows into the Conowingo dam?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Conowingo_Dam> . ?x <http://dbpedia.org/ontology/source> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "20,24"
		}, {
			"uri": "http://dbpedia.org/ontology/source",
			"label": "does",
			"seq": "11,14"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "20,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Conowingo_Dam",
			"label": "conowingo dam",
			"seq": "54,66"
		}]
	},
	{
		"id": "df4a8bee85f04e6f8e60dd62c65e104b",
		"question": "List all the parents of writers coming from the Great Missenden ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/homeTown> <http://dbpedia.org/resource/Great_Missenden> . ?x <http://dbpedia.org/ontology/parent> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/homeTown",
			"label": "coming",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parents",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writers",
			"seq": "24,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Great_Missenden",
			"label": "missenden great",
			"seq": "48,62"
		}]
	},
	{
		"id": "6c62c5bf4c4d43f69f7a5d6cdef2cfae",
		"question": "What state has a Brideun School for Exception Children and is the birthplace  of B J Crombeen?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brideun_School_for_Exceptional_Children> <http://dbpedia.org/property/state> ?uri. <http://dbpedia.org/resource/B._J._Crombeen> <http://dbpedia.org/ontology/birthPlace> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "5,9"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birthplace",
			"seq": "66,75"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brideun_School_for_Exceptional_Children",
			"label": "exception children brideun school",
			"seq": "17,49"
		}, {
			"uri": "http://dbpedia.org/resource/B._J._Crombeen",
			"label": "crombeen",
			"seq": "85,92"
		}]
	},
	{
		"id": "e28b8d50dec442e4afe8782558fdc00f",
		"question": "What is the total number of politicians whose predecessor's deputy is Jenny Macklin?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Jenny_Macklin> . ?uri <http://dbpedia.org/property/predecessor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deputy",
			"label": "deputy",
			"seq": "60,65"
		}, {
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor's",
			"seq": "46,58"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "whose",
			"seq": "40,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jenny_Macklin",
			"label": "macklin jenny",
			"seq": "70,82"
		}]
	},
	{
		"id": "2712e77ee9714f4e9dc75aee139c947d",
		"question": "Count all the shows whose music composers are in Oysterhead.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Oysterhead> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "music",
			"seq": "26,30"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composers",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oysterhead",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f107cdaf5a3b4793ad0a9ba36ca5c01c",
		"question": "Which awards have Ingmar Bergman won?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ingmar_Bergman> <http://dbpedia.org/property/awards> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ingmar_Bergman",
			"label": "bergman ingmar",
			"seq": "18,31"
		}]
	},
	{
		"id": "db74d95d147e42748b823e8d8359a97a",
		"question": "In which timezone does Khok Kwang lie?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Khok_Kwang> <http://dbpedia.org/ontology/timeZone> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/timeZone",
			"label": "timezone",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Khok_Kwang",
			"label": "kwang khok",
			"seq": "23,32"
		}]
	},
	{
		"id": "9f558fd14dc54992bc18d9ff843c24df",
		"question": "What is the scientist whose PhD students are Erich Bagge and erban ieica?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Erich_Bagge> . ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/\u0218erban_\u021ai\u021beica> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "students",
			"seq": "32,39"
		}, {
			"uri": "http://dbpedia.org/property/doctoralStudents",
			"label": "students",
			"seq": "32,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erich_Bagge",
			"label": "erich bagge",
			"seq": "45,55"
		}, {
			"uri": "http://dbpedia.org/resource/\u0218erban_\u021ai\u021beica",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ea618d18100f4888910364d1044fe633",
		"question": "How many bands have members currently playing the Fender Stratocaster?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Fender_Stratocaster> . ?uri <http://dbpedia.org/property/currentMembers> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableInstruments",
			"label": "stratocaster",
			"seq": "57,68"
		}, {
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "members",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "bands",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fender_Stratocaster",
			"label": "stratocaster fender",
			"seq": "50,68"
		}]
	},
	{
		"id": "7f16b2da9f984b398e80a3bf82fdb761",
		"question": "Which country has leaders  Karu Jayasuriya and Ranil Wickremesinghe?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Karu_Jayasuriya> . ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Ranil_Wickremesinghe> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leaders",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leaders",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Karu_Jayasuriya",
			"label": "jayasuriya karu",
			"seq": "27,41"
		}, {
			"uri": "http://dbpedia.org/resource/Ranil_Wickremesinghe",
			"label": "wickremesinghe ranil",
			"seq": "47,66"
		}]
	},
	{
		"id": "3ebcace84e5747f29673314099a70674",
		"question": "List the software which uses Microsoft Windows as their operating system ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating system",
			"seq": "56,71"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Windows",
			"label": "microsoft windows",
			"seq": "29,45"
		}]
	},
	{
		"id": "2c1770e2d3984893a620a66a628bed5b",
		"question": "What is the deathplace of people who have worked in Ethics?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Ethics> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "ethics",
			"seq": "52,57"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "deathplace",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ethics",
			"label": "ethics",
			"seq": "52,57"
		}]
	},
	{
		"id": "cdc182cb1086444ba6609878786447ff",
		"question": "How many religions have the relatives of waxiangs followed?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Waxiang_people> <http://dbpedia.org/property/related> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/related",
			"label": "relatives",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Waxiang_people",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "32d100aad346478bbb68b3ce1b5a8520",
		"question": "Where did Louis chevrolet die ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Louis_Chevrolet> <http://dbpedia.org/property/deathPlace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "die",
			"seq": "26,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Louis_Chevrolet",
			"label": "chevrolet louis",
			"seq": "10,24"
		}]
	},
	{
		"id": "13fab3852bd645ef8d7c43e3d10a9d2b",
		"question": "who married crystal harris?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Crystal_Harris>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "who",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Crystal_Harris",
			"label": "crystal harris",
			"seq": "12,25"
		}]
	},
	{
		"id": "7e638a07671f4e0dbd9a400eac8f5de4",
		"question": "What kind of games does Blizzard games develop?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Blizzard_Entertainment> . ?x <http://dbpedia.org/ontology/genre> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "develop",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "games",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blizzard_Entertainment",
			"label": "blizzard",
			"seq": "24,31"
		}]
	},
	{
		"id": "7f7c3328eb5b44fd9119c85b39285fbf",
		"question": "Who is the parent of FD Roosevelt JR?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Franklin_Delano_Roosevelt,_Jr.>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "parent",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Franklin_Delano_Roosevelt,_Jr.",
			"label": "roosevelt",
			"seq": "24,32"
		}]
	},
	{
		"id": "c46c233ae0c14807825928b38649d37e",
		"question": "Which expertise of the Menetries's warbler is the  nationality of the Jeyhun Abiyev ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Menetries's_warbler> <http://dbpedia.org/ontology/binomialAuthority> ?uri. <http://dbpedia.org/resource/Jeyhun_Abiyev> <http://dbpedia.org/ontology/nationality> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/binomialAuthority",
			"label": "nationality",
			"seq": "51,61"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "51,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Menetries's_warbler",
			"label": "menetries's warbler",
			"seq": "23,41"
		}, {
			"uri": "http://dbpedia.org/resource/Jeyhun_Abiyev",
			"label": "jeyhun abiyev",
			"seq": "70,82"
		}]
	},
	{
		"id": "7c24a58761f249839782415660523ba4",
		"question": "In how many places can I find wine made of Vitis vinifera grapes?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> . ?x <http://dbpedia.org/ontology/wineRegion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/species",
			"label": "places",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "wine",
			"seq": "30,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vitis_vinifera",
			"label": "vinifera vitis",
			"seq": "43,56"
		}]
	},
	{
		"id": "e19a8a1f620d417887fabd403a34298e",
		"question": "What have been made in the state whose capital is Boston?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/capital> <http://dbpedia.org/resource/Boston> . ?uri <http://dbpedia.org/ontology/location> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/capital",
			"label": "capital",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "boston",
			"seq": "50,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Boston",
			"label": "boston",
			"seq": "50,55"
		}]
	},
	{
		"id": "ae7bd0ded6804ceead902c06ec9b71e1",
		"question": "Name the royalty whose spouse was Cleopatra V of Egypt and one of his parent was Ptolemy XII Auletes?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Cleopatra_V_of_Egypt> . ?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ptolemy_XII_Auletes>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mother",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parent",
			"seq": "70,75"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "royalty",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cleopatra_V_of_Egypt",
			"label": "cleopatra egypt",
			"seq": "34,48"
		}, {
			"uri": "http://dbpedia.org/resource/Ptolemy_XII_Auletes",
			"label": "ptolemy auletes",
			"seq": "81,95"
		}]
	},
	{
		"id": "b7b4af490fc749c39bb8f1aebd991ebd",
		"question": "What is the information appliance whose successor is PlayStation 4 and maker is Foxconn?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/PlayStation_4> . ?uri <http://dbpedia.org/property/manufacturer> <http://dbpedia.org/resource/Foxconn>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "40,48"
		}, {
			"uri": "http://dbpedia.org/property/manufacturer",
			"label": "maker",
			"seq": "71,75"
		}, {
			"uri": "http://dbpedia.org/ontology/InformationAppliance",
			"label": "information appliance",
			"seq": "12,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PlayStation_4",
			"label": "playstation",
			"seq": "53,63"
		}, {
			"uri": "http://dbpedia.org/resource/Foxconn",
			"label": "foxconn",
			"seq": "80,86"
		}]
	},
	{
		"id": "f7360f8ebf504cb5977b2fe626623fb6",
		"question": "List all the bands which have members of the band Guy in them?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Guy_(band)> <http://dbpedia.org/ontology/bandMember> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "members",
			"seq": "30,36"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "band",
			"seq": "13,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Guy_(band)",
			"label": "band",
			"seq": "13,16"
		}]
	},
	{
		"id": "6aae7a52e81c4a26b80f5c17943b7857",
		"question": "Name the officeholder who hasa child named Augustus and has an associate named Marcus Bibulus ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Augustus>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associate",
			"label": "associate",
			"seq": "63,71"
		}, {
			"uri": "http://dbpedia.org/property/children",
			"label": "child",
			"seq": "31,35"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "officeholder",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus",
			"label": "bibulus marcus",
			"seq": "79,92"
		}, {
			"uri": "http://dbpedia.org/resource/Augustus",
			"label": "augustus",
			"seq": "43,50"
		}]
	},
	{
		"id": "98d2e418f14f4bf3ad8a396f172f6166",
		"question": "Which route junction of the Rhode Island Route 15 is the place of birth of the Michael Poulin?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rhode_Island_Route_15> <http://dbpedia.org/ontology/routeJunction> ?uri. <http://dbpedia.org/resource/Michael_Poulin> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeJunction",
			"label": "junction route",
			"seq": "6,19"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "57,67"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rhode_Island_Route_15",
			"label": "island route rhode",
			"seq": "6,23"
		}, {
			"uri": "http://dbpedia.org/resource/Michael_Poulin",
			"label": "michael poulin",
			"seq": "79,92"
		}]
	},
	{
		"id": "3e991adbec6041f0a8ff29cbff44f27d",
		"question": "Name a fictional character whose relative is Uncle Henry and species is Human?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Uncle_Henry_(Oz)> . ?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Human>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relative",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/ontology/species",
			"label": "species",
			"seq": "61,67"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "7,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Uncle_Henry_(Oz)",
			"label": "uncle henry",
			"seq": "45,55"
		}, {
			"uri": "http://dbpedia.org/resource/Human",
			"label": "human",
			"seq": "72,76"
		}]
	},
	{
		"id": "b7cb450c48fe451eb780f8d368eeaab9",
		"question": "Which show's theme music composer's label is MapleMusic Recordings?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/MapleMusic_Recordings> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "label",
			"seq": "36,40"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composer's",
			"seq": "25,34"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show's",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/MapleMusic_Recordings",
			"label": "recordings maplemusic",
			"seq": "45,65"
		}]
	},
	{
		"id": "0954b94157bc4c35a1bcb0ec0107cb74",
		"question": "List down the schools whose mascot is an animal from the order of Even toed Ungulates?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Bjarne_Stroustrup> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "order",
			"seq": "57,61"
		}, {
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "ungulates",
			"seq": "76,84"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bjarne_Stroustrup",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "8f151cb3f067464695a3b7bb410d7636",
		"question": "What is the draft team of Dale Mitchell (ice hockey) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dale_Mitchell_(ice_hockey)> <http://dbpedia.org/ontology/draftTeam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/draftTeam",
			"label": "draft team",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dale_Mitchell_(ice_hockey)",
			"label": "mitchell hockey) dale (ice",
			"seq": "26,51"
		}]
	},
	{
		"id": "a407d3e2f82d4a51b9e93485af1f0f4f",
		"question": "Was the skeleton dance animated by Walt Disney?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> <http://dbpedia.org/resource/Walt_Disney> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/animator",
			"label": "animated",
			"seq": "23,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Skeleton_Dance",
			"label": "skeleton dance the",
			"seq": "4,21"
		}, {
			"uri": "http://dbpedia.org/resource/Walt_Disney",
			"label": "disney walt",
			"seq": "35,45"
		}]
	},
	{
		"id": "8533f08f0f2e439792341591e3b8d82e",
		"question": "To which educational institutions did Lesli Sanchez go for her studies?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Leslie_Sanchez> <http://dbpedia.org/ontology/education> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/education",
			"label": "educational",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Leslie_Sanchez",
			"label": "sanchez lesli",
			"seq": "38,50"
		}]
	},
	{
		"id": "fe62a0c11f31451991b7023a4fd71fae",
		"question": "Who was the coach of 1972 Oakland Raiders season ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1972_Oakland_Raiders_season> <http://dbpedia.org/ontology/coach> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coach",
			"label": "coach",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1972_Oakland_Raiders_season",
			"label": "raiders oakland season 1972",
			"seq": "21,47"
		}]
	},
	{
		"id": "2e462e329e0c4e94aae619104e268274",
		"question": "What are Jerry Bock's musicals based upon?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Jerry_Bock> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "musicals",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/basedOn",
			"label": "based",
			"seq": "31,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Musical",
			"label": "musicals",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerry_Bock",
			"label": "jerry",
			"seq": "9,13"
		}]
	},
	{
		"id": "a4c071295df54e628add12c26e1551d7",
		"question": "The president who was in office when Lee Hyun Jae was the PM followed which religion?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Lee_Hyun-jae> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "president",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "76,83"
		}, {
			"uri": "http://dbpedia.org/ontology/President",
			"label": "president",
			"seq": "4,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lee_Hyun-jae",
			"label": "hyun lee jae",
			"seq": "37,48"
		}]
	},
	{
		"id": "24bea3e02aac4576a8340dc9d4e933dd",
		"question": "How many developers make softwares for Unix like operating systems?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operatingSystem",
			"label": "operating",
			"seq": "49,57"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developers",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Unix-like",
			"label": "unix like",
			"seq": "39,47"
		}]
	},
	{
		"id": "442be0d7fdb3489890f69cc2e0046f6c",
		"question": "Name the rive whose mouth is located in Limerick and location is Dowra?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Limerick> . ?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Dowra>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "location mouth",
			"seq": "20,33"
		}, {
			"uri": "http://dbpedia.org/property/sourceLocation",
			"label": "location",
			"seq": "53,60"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rive",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Limerick",
			"label": "limerick",
			"seq": "40,47"
		}, {
			"uri": "http://dbpedia.org/resource/Dowra",
			"label": "dowra",
			"seq": "65,69"
		}]
	},
	{
		"id": "09da33e36b464a00852d478e1a46581d",
		"question": "What religion does roshan ranasinghe and nhiek tioulong follow?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roshan_Ranasinghe> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Nhiek_Tioulong> <http://dbpedia.org/ontology/religion> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religion",
			"label": "religion",
			"seq": "5,12"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "5,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Roshan_Ranasinghe",
			"label": "ranasinghe roshan",
			"seq": "19,35"
		}, {
			"uri": "http://dbpedia.org/resource/Nhiek_Tioulong",
			"label": "tioulong nhiek",
			"seq": "41,54"
		}]
	},
	{
		"id": "20ece59a1aa9487bbe525dcba5247d38",
		"question": "Name the scientist who become the part of Royal Society and had academic advisor as Karl Ewald Hasse?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Royal_Society> . ?uri <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Karl_Ewald_Hasse>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prizes",
			"label": "part",
			"seq": "34,37"
		}, {
			"uri": "http://dbpedia.org/ontology/academicAdvisor",
			"label": "academic advisor",
			"seq": "64,79"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_Society",
			"label": "society royal",
			"seq": "42,54"
		}, {
			"uri": "http://dbpedia.org/resource/Karl_Ewald_Hasse",
			"label": "hasse ewald karl",
			"seq": "84,99"
		}]
	},
	{
		"id": "43d23927b3204b4c9c076cb77e98994a",
		"question": "What is the place where the mayor's wife is Jean-Marc Germain?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Jean-Marc_Germain> . ?uri <http://dbpedia.org/ontology/mayor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "place",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/mayor",
			"label": "mayor's",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "place",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jean-Marc_Germain",
			"label": "jean-marc germain",
			"seq": "44,60"
		}]
	},
	{
		"id": "b71a96db56e8414aba5648ec5935ecf9",
		"question": "What is the religion of the ones in the Kampuchean Union of Salvation?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Kampuchean_United_Front_for_National_Salvation> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "religion",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kampuchean_United_Front_for_National_Salvation",
			"label": "kampuchean salvation",
			"seq": "40,59"
		}]
	},
	{
		"id": "9e676dc4d1474a5681415891d46a9c4b",
		"question": "List the employments of people who died in Tampa, Florida.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "people",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "in",
			"seq": "40,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tampa,_Florida",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "b17be3d3611b49f3aca5fa4337a2315b",
		"question": "Which parent organization of GetTV is also the label of next thing ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Next_Thing> <http://dbpedia.org/ontology/recordLabel> ?uri. <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "label",
			"seq": "47,51"
		}, {
			"uri": "http://dbpedia.org/ontology/parentOrganisation",
			"label": "organization",
			"seq": "13,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Next_Thing",
			"label": "thing next",
			"seq": "56,65"
		}, {
			"uri": "http://dbpedia.org/resource/GetTV",
			"label": "gettv",
			"seq": "29,33"
		}]
	},
	{
		"id": "f8a314a604de4c88b0f8ed83a5bfb2b4",
		"question": "List the destination of Novair International Airways ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Novair_International_Airways> <http://dbpedia.org/ontology/destination> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/destination",
			"label": "destination",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Novair_International_Airways",
			"label": "international airways",
			"seq": "31,51"
		}]
	},
	{
		"id": "90be0811add84e5aa9984db40fcee9db",
		"question": "How many states are in the Mediterranean Basketball Association?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Mediterranean_Basketball_Association> <http://dbpedia.org/ontology/country> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "402",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/country",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "are",
			"seq": "16,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mediterranean_Basketball_Association",
			"label": "mediterranean association basketball",
			"seq": "27,62"
		}]
	},
	{
		"id": "d6802f1090fc42088479f3a1897fa6f0",
		"question": "What is the ethnicity of the people working for the Philippines house of representatives?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/House_of_Representatives_of_the_Philippines> . ?x <http://dbpedia.org/ontology/ethnicity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "working",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/ontology/ethnicity",
			"label": "ethnicity",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "29,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/House_of_Representatives_of_the_Philippines",
			"label": "representatives philippines",
			"seq": "52,78"
		}]
	},
	{
		"id": "b18bcd6d7ea84ac59cb76d3a3683c33e",
		"question": "Name some people who are buried in a place governed by the US Department of the Interior?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/United_States_Department_of_the_Interior> . ?uri <http://dbpedia.org/property/restingplace> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governed",
			"seq": "43,50"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "place",
			"seq": "37,41"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Department_of_the_Interior",
			"label": "department interior",
			"seq": "62,80"
		}]
	},
	{
		"id": "a91c0aba4eef49c387ca0f4df2ce1ae2",
		"question": "Name the television show whose subsequent work is Frasier and opening theme is Where Everybody Knows Your Name?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Frasier> . ?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "31,45"
		}, {
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opening theme",
			"seq": "62,74"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frasier",
			"label": "frasier",
			"seq": "50,56"
		}, {
			"uri": "http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name",
			"label": "everybody",
			"seq": "85,93"
		}]
	},
	{
		"id": "78468cadef404a5682645a749efce5c7",
		"question": "What things canonized John of Damascus and and also venerated the Edwin of Northumbria ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_of_Damascus> <http://dbpedia.org/ontology/canonizedBy> ?uri. <http://dbpedia.org/resource/Edwin_of_Northumbria> <http://dbpedia.org/property/veneratedIn> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/canonizedBy",
			"label": "canonized",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "venerated",
			"seq": "52,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_of_Damascus",
			"label": "damascus john",
			"seq": "22,34"
		}, {
			"uri": "http://dbpedia.org/resource/Edwin_of_Northumbria",
			"label": "northumbria edwin",
			"seq": "66,82"
		}]
	},
	{
		"id": "aef9c51a69964e5596910348107d8ba5",
		"question": "Where is the football team located in which Josh Bell did his debut?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Josh_Bell_(gridiron_football)> <http://dbpedia.org/ontology/debutTeam> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debut team",
			"seq": "22,31"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "located",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Josh_Bell_(gridiron_football)",
			"label": "football josh bell",
			"seq": "13,30"
		}]
	},
	{
		"id": "d100a042da084c23a4942886d7281e88",
		"question": "Who was engaged in wars of Fort Gadsden and Fort Barrancas?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Fort_Gadsden> . ?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Fort_Barrancas> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "gadsden",
			"seq": "32,38"
		}, {
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "gadsden",
			"seq": "32,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fort_Gadsden",
			"label": "gadsden fort",
			"seq": "27,38"
		}, {
			"uri": "http://dbpedia.org/resource/Fort_Barrancas",
			"label": "barrancas fort",
			"seq": "27,40"
		}]
	},
	{
		"id": "a8f0871a3d594450b08d3676964a27ff",
		"question": "List the religions of the commanders of Royal Thai Army.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Royal_Thai_Army> <http://dbpedia.org/property/notableCommanders> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableCommanders",
			"label": "commanders",
			"seq": "26,35"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_Thai_Army",
			"label": "royal thai",
			"seq": "40,49"
		}]
	},
	{
		"id": "13eb5beca6db42d2a2351fbc774d97f7",
		"question": "The president served by Haqqi al-Azm died where?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Haqqi_al-Azm> <http://dbpedia.org/property/president> ?x . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "president",
			"seq": "4,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Haqqi_al-Azm",
			"label": "al-azm haqqi",
			"seq": "24,35"
		}]
	},
	{
		"id": "e87064d2456145b1b5a0bfc1703d439c",
		"question": "What are some awards given to people who were born in sweden?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Sweden> . ?x <http://dbpedia.org/property/awards> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "people",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "30,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sweden",
			"label": "sweden",
			"seq": "54,59"
		}]
	},
	{
		"id": "39a0e27d0c5e43f9816a5cea3a37ea80",
		"question": "Name the office holder who was married to Dolley Madison and has resting palce as Montpelier ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Dolley_Madison> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "palce",
			"seq": "73,77"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "resting",
			"seq": "65,71"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dolley_Madison",
			"label": "madison dolley",
			"seq": "42,55"
		}, {
			"uri": "http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)",
			"label": "montpelier",
			"seq": "82,91"
		}]
	},
	{
		"id": "1abffd197c8c4787bef810c59eec010f",
		"question": "Is Hard Candy Fitness one of the divisions of Moscow?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Hard_Candy_Fitness> <http://dbpedia.org/property/divisions> <http://dbpedia.org/resource/Moscow> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/divisions",
			"label": "divisions",
			"seq": "33,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hard_Candy_Fitness",
			"label": "fitness candy hard",
			"seq": "3,20"
		}, {
			"uri": "http://dbpedia.org/resource/Moscow",
			"label": "moscow",
			"seq": "46,51"
		}]
	},
	{
		"id": "6ac4a7bdfb6c4d5fb1e936da0dd3818f",
		"question": "What are the awards won by the person who is an authority of Latania verschaffeltii ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Latania_verschaffeltii> <http://dbpedia.org/property/binomialAuthority> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/binomialAuthority",
			"label": "authority",
			"seq": "48,56"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "31,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Latania_verschaffeltii",
			"label": "verschaffeltii latania",
			"seq": "61,82"
		}]
	},
	{
		"id": "cdc804731f0b4931b6ee149e92fc807f",
		"question": "Is WP 8.1 the OS on Lumia 830?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Nokia_Lumia_830> <http://dbpedia.org/property/os> <http://dbpedia.org/resource/Windows_Phone_8.1> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/os",
			"label": "os",
			"seq": "14,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nokia_Lumia_830",
			"label": "lumia 830",
			"seq": "20,28"
		}, {
			"uri": "http://dbpedia.org/resource/Windows_Phone_8.1",
			"label": "8.1",
			"seq": "6,8"
		}]
	},
	{
		"id": "136a14b3127e45c89da289d979fa67a8",
		"question": "Which parent comapny of hypnotize Minds is the label of the Producers , a 2005 film ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hypnotize_Minds> <http://dbpedia.org/property/parent> ?uri. <http://dbpedia.org/resource/The_Producers_(2005_film)> <http://dbpedia.org/property/label> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/parent",
			"label": "parent",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "47,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hypnotize_Minds",
			"label": "hypnotize minds",
			"seq": "24,38"
		}, {
			"uri": "http://dbpedia.org/resource/The_Producers_(2005_film)",
			"label": "producers film 2005",
			"seq": "60,78"
		}]
	},
	{
		"id": "4930ac422c3a46878641b26e4911c9fd",
		"question": "Which companies make cars with a front engine, rear wheel drive layout?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Front-engine,_rear-wheel-drive_layout> . ?x <http://dbpedia.org/ontology/parentCompany> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/automobilePlatform",
			"label": "companies",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "companies",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "companies",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Front-engine,_rear-wheel-drive_layout",
			"label": "engine, layout wheel front drive",
			"seq": "33,64"
		}]
	},
	{
		"id": "fc12f11fa89b4928bf724ad752ba67f7",
		"question": "Name the software whose operating system is Mac OS and programming language is C++ ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Mac_OS> . ?uri <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/C++>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating system",
			"seq": "24,39"
		}, {
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "programming language",
			"seq": "55,74"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mac_OS",
			"label": "mac os",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/resource/C++",
			"label": "c++",
			"seq": "79,81"
		}]
	},
	{
		"id": "3f46fda15bf14f0fab5297341e258dce",
		"question": "Do the polet airlines fly to moscow?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Polet_Airlines> <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Moscow> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/targetAirport",
			"label": "polet",
			"seq": "7,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Polet_Airlines",
			"label": "airlines polet",
			"seq": "7,20"
		}, {
			"uri": "http://dbpedia.org/resource/Moscow",
			"label": "moscow",
			"seq": "29,34"
		}]
	},
	{
		"id": "6d534a6445c944a68ed033f2e18b64a2",
		"question": "Is Trevor Peacock the narrator of Fred Claus?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Fred_Claus> <http://dbpedia.org/property/narrator> <http://dbpedia.org/resource/Trevor_Peacock> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/narrator",
			"label": "narrator",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fred_Claus",
			"label": "claus fred",
			"seq": "34,43"
		}, {
			"uri": "http://dbpedia.org/resource/Trevor_Peacock",
			"label": "peacock trevor",
			"seq": "3,16"
		}]
	},
	{
		"id": "7043c42bf9fc41418bf7fce82a3ed8f2",
		"question": "In which state is the alma matter of Jan Paulsen located ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Jan_Paulsen> <http://dbpedia.org/ontology/almaMater> ?x . ?x <http://dbpedia.org/property/state> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "matter",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jan_Paulsen",
			"label": "paulsen jan",
			"seq": "37,47"
		}]
	},
	{
		"id": "498b80ad7a3e404aa8127f73d757f44d",
		"question": "Name some islands in a pacific archipelago?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Pacific_Ocean> . ?uri <http://dbpedia.org/property/archipelago> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "in",
			"seq": "18,19"
		}, {
			"uri": "http://dbpedia.org/property/archipelago",
			"label": "archipelago",
			"seq": "31,41"
		}, {
			"uri": "http://dbpedia.org/ontology/Island",
			"label": "islands",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pacific_Ocean",
			"label": "pacific",
			"seq": "23,29"
		}]
	},
	{
		"id": "4512ce93850d4a7d9ab2ade188c279c8",
		"question": "List few authors whose education took place in Saint Petersburg ?   ",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Saint_Petersburg>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/education",
			"label": "education",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "list",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saint_Petersburg",
			"label": "petersburg saint",
			"seq": "47,62"
		}]
	},
	{
		"id": "c08136b5c371483aa23d66de3825c01e",
		"question": "What all are written in the C programming language?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/C_(programming_language)> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "programming language",
			"seq": "30,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/C_(programming_language)",
			"label": "programming language",
			"seq": "30,49"
		}]
	},
	{
		"id": "e8ac868bdcc144fdaf15f23486f90d11",
		"question": "List the producer of the TV shows whose company is HBO.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/HBO> . ?x <http://dbpedia.org/ontology/producer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/company",
			"label": "company",
			"seq": "40,46"
		}, {
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "28,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/HBO",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e768b113972d46d2bdb465a06d6051cc",
		"question": "What is the alma mater of the senator who is the successor of Warren Magnuson ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Warren_Magnuson> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "49,57"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Senator",
			"label": "senator",
			"seq": "30,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Warren_Magnuson",
			"label": "magnuson warren",
			"seq": "62,76"
		}]
	},
	{
		"id": "2087fc4decb740e28f5e56190e001c68",
		"question": "Is Andrew Lincoln the narrator of Million Dollar Traders?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Million_Dollar_Traders> <http://dbpedia.org/ontology/narrator> <http://dbpedia.org/resource/Andrew_Lincoln> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/narrator",
			"label": "narrator",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Million_Dollar_Traders",
			"label": "traders million dollar",
			"seq": "34,55"
		}, {
			"uri": "http://dbpedia.org/resource/Andrew_Lincoln",
			"label": "lincoln andrew",
			"seq": "3,16"
		}]
	},
	{
		"id": "9aa8b71692cb45da98f3100dd56685da",
		"question": "What is the mascot of Blytheville High School ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blytheville_High_School> <http://dbpedia.org/property/mascot> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blytheville_High_School",
			"label": "blytheville school high",
			"seq": "22,44"
		}]
	},
	{
		"id": "89063b059c9e4f5cb713b5e0ef36cbae",
		"question": "List all the operators of the train who operates in Budapest ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Budapest> . ?x <http://dbpedia.org/ontology/operator> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Train>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operators",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operators",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Train",
			"label": "train",
			"seq": "30,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Budapest",
			"label": "budapest",
			"seq": "52,59"
		}]
	},
	{
		"id": "4ae8d48e900b4769ada16d476c81dd95",
		"question": "List the names of the soccer club seasons whose division is 2012 Campeonato Brasileiro Srie A.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/2012_Campeonato_Brasileiro_S\u00e9rie_A> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "club",
			"seq": "29,32"
		}, {
			"uri": "http://dbpedia.org/property/name",
			"label": "names",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClubSeason",
			"label": "soccer",
			"seq": "22,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2012_Campeonato_Brasileiro_S\u00e9rie_A",
			"label": "campeonato brasileiro",
			"seq": "65,85"
		}]
	},
	{
		"id": "bdb4b59b7f0f4610ada06b93495ffab9",
		"question": "Is Eddie Bravo the trainer of Alan Jouban",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Alan_Jouban> <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Eddie_Bravo> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/trainer",
			"label": "trainer",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alan_Jouban",
			"label": "jouban alan",
			"seq": "30,40"
		}, {
			"uri": "http://dbpedia.org/resource/Eddie_Bravo",
			"label": "eddie bravo",
			"seq": "3,13"
		}]
	},
	{
		"id": "7c77b492d45c40f48e4c4c0ffeaac619",
		"question": "What is the content licence of MSX BASIC ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/license",
			"label": "licence",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/MSX_BASIC",
			"label": "basic msx",
			"seq": "31,39"
		}]
	},
	{
		"id": "9e3cdcb6a0ab41209cdec09a9cecab0f",
		"question": "What are some common ingredients used in Swedish dishes?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> . ?x <http://dbpedia.org/ontology/ingredient> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/country",
			"label": "common",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredients",
			"seq": "21,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sweden",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "3f3d04c8667041c0a30da802ecd4cd40",
		"question": "Where did the genres originate, which were in the Harry and the Potters album?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Harry_and_the_Potters_(album)> <http://dbpedia.org/ontology/genre> ?x . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genres",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/stylisticOrigin",
			"label": "originate,",
			"seq": "21,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harry_and_the_Potters_(album)",
			"label": "potters harry album the",
			"seq": "10,32"
		}]
	},
	{
		"id": "694ed5abdd6e48908b2a1eadf548813c",
		"question": "Into which water bodies does Lake Uniamsi outflow?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lake_Uniam\u00e9si> <http://dbpedia.org/property/outflow> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/outflow",
			"label": "outflow",
			"seq": "42,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lake_Uniam\u00e9si",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "3a6065b0d3374ad382b91a31b16c0214",
		"question": "What is the mascot of the army unit whose commander is Peter Cosgrove ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/commander> <http://dbpedia.org/resource/Peter_Cosgrove> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/commander",
			"label": "commander",
			"seq": "42,50"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "unit",
			"seq": "31,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peter_Cosgrove",
			"label": "cosgrove peter",
			"seq": "55,68"
		}]
	},
	{
		"id": "ee9a79ff6f624c548c57639e0b00a2ba",
		"question": "Whose former teams are Indianapolis Colts and Carolina Panthers?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Indianapolis_Colts> . ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Carolina_Panthers> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indianapolis_Colts",
			"label": "indianapolis colts",
			"seq": "23,40"
		}, {
			"uri": "http://dbpedia.org/resource/Carolina_Panthers",
			"label": "panthers carolina",
			"seq": "46,62"
		}]
	},
	{
		"id": "42720fe503074225907ca0ab400f8ef7",
		"question": "Name the river with mouth palce Essex and source place as Gloucestershire ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex> . ?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Gloucestershire>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthPlace",
			"label": "place mouth",
			"seq": "20,30"
		}, {
			"uri": "http://dbpedia.org/ontology/sourcePlace",
			"label": "source place",
			"seq": "42,53"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Essex",
			"label": "essex",
			"seq": "32,36"
		}, {
			"uri": "http://dbpedia.org/resource/Gloucestershire",
			"label": "gloucestershire",
			"seq": "58,72"
		}]
	},
	{
		"id": "47a9d2054379462e850aecdccb4a114c",
		"question": "Who was the narrator of the show who's music is composed by John Douglas?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/John_Douglas_(conductor)> . ?x <http://dbpedia.org/property/narrated> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composed",
			"seq": "48,55"
		}, {
			"uri": "http://dbpedia.org/property/narrated",
			"label": "narrator",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show is",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Douglas_(conductor)",
			"label": "douglas",
			"seq": "65,71"
		}]
	},
	{
		"id": "53d26ee8082c40af9e43661837f30042",
		"question": "Where was the current champion of Egyptian Open born ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Egyptian_Open> <http://dbpedia.org/ontology/champion> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/champion",
			"label": "champion",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Egyptian_Open",
			"label": "egyptian open",
			"seq": "34,46"
		}]
	},
	{
		"id": "390bec142f5a4354a4a0d47a64474646",
		"question": "Was Castillo discovered by Galileo?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Callisto_(moon)> <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Galileo_Galilei> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/discoverer",
			"label": "discovered",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Callisto_(moon)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Galileo_Galilei",
			"label": "galileo",
			"seq": "27,33"
		}]
	},
	{
		"id": "f2c55f3eb1904df9badfcabff21ca4df",
		"question": "What are the notable commanders of the army  whose one of the notable commanders is Paul Hausser?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Paul_Hausser> . ?x <http://dbpedia.org/property/notableCommanders> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableCommanders",
			"label": "commanders",
			"seq": "21,30"
		}, {
			"uri": "http://dbpedia.org/property/notableCommanders",
			"label": "commanders",
			"seq": "21,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paul_Hausser",
			"label": "hausser paul",
			"seq": "84,95"
		}]
	},
	{
		"id": "7877e775ed9e4c52a16d8b95104db714",
		"question": "Who are the chancellors of universities which is affiliated with Plymouth University?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Plymouth_University> . ?x <http://dbpedia.org/property/chancellor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliated",
			"seq": "49,58"
		}, {
			"uri": "http://dbpedia.org/property/chancellor",
			"label": "chancellors",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "74,83"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Plymouth_University",
			"label": "university plymouth",
			"seq": "65,83"
		}]
	},
	{
		"id": "99518f87aadb4ffdbc84a7b46b300383",
		"question": "What common relegion affiliation exists for udit Raj and Wickramabahu Central College ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Udit_Raj> <http://dbpedia.org/ontology/religion> ?uri. <http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)> <http://dbpedia.org/property/religiousAffiliation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "relegion",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/property/religiousAffiliation",
			"label": "affiliation",
			"seq": "21,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Udit_Raj",
			"label": "udit raj",
			"seq": "44,51"
		}, {
			"uri": "http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)",
			"label": "wickramabahu",
			"seq": "57,68"
		}]
	},
	{
		"id": "ac50f52a09154c0483346c70133cd0e4",
		"question": "Name the console whose successor is PlayStation 4 and predecessor is PlayStation 2?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/PlayStation_4> . ?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/PlayStation_2>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "54,64"
		}, {
			"uri": "http://dbpedia.org/ontology/InformationAppliance",
			"label": "playstation",
			"seq": "36,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PlayStation_4",
			"label": "playstation",
			"seq": "36,46"
		}, {
			"uri": "http://dbpedia.org/resource/PlayStation_2",
			"label": "playstation",
			"seq": "36,46"
		}]
	},
	{
		"id": "a8c90d3cb9594f2f9b76123cc4272062",
		"question": "What are the common sports played by jamiatu Muslim mindanao and Polytechnic University of Philippines Taguig ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/ontology/athletics> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/athletics",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao",
			"label": "mindanao jamiatu muslim",
			"seq": "37,59"
		}, {
			"uri": "http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig",
			"label": "polytechnic philippines university taguig",
			"seq": "65,105"
		}]
	},
	{
		"id": "7521f2b548c742bc847175d5bb599556",
		"question": "Among the countries using Aureus as currency which had Nicomedia as an important place ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Nicomedia> . ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Aureus>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/capital",
			"label": "important",
			"seq": "71,79"
		}, {
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currency",
			"seq": "36,43"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "countries",
			"seq": "10,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nicomedia",
			"label": "nicomedia",
			"seq": "55,63"
		}, {
			"uri": "http://dbpedia.org/resource/Aureus",
			"label": "aureus",
			"seq": "26,31"
		}]
	},
	{
		"id": "d19c3af9ab8340149565596d32439a0c",
		"question": "British people have edited which movies?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/United_Kingdom> . ?uri <http://dbpedia.org/property/editing> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "british",
			"seq": "0,6"
		}, {
			"uri": "http://dbpedia.org/property/editing",
			"label": "edited",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "which",
			"seq": "27,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_Kingdom",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "fa1d8082a8614af189cc4ca0b03b8375",
		"question": "Where did chancellor served by Rudolf Kirchschlger die?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Rudolf_Kirchschl\u00e4ger> <http://dbpedia.org/property/chancellor> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/chancellor",
			"label": "chancellor",
			"seq": "10,19"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "chancellor",
			"seq": "10,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rudolf_Kirchschl\u00e4ger",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1f783e93f3d8452c965e50e42f038ada",
		"question": "Who are the trainersof Candice Michelle?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Candice_Michelle> <http://dbpedia.org/ontology/trainer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/trainer",
			"label": "trainersof",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Candice_Michelle",
			"label": "michelle candice",
			"seq": "23,38"
		}]
	},
	{
		"id": "936c843de8c64610be0e8c6e2bbfce06",
		"question": "Does StandBy records distribute via Sony?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/ontology/distributingLabel> <http://dbpedia.org/resource/Sony> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributingLabel",
			"label": "distribute",
			"seq": "21,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/StandBy_Records",
			"label": "standby records",
			"seq": "5,19"
		}, {
			"uri": "http://dbpedia.org/resource/Sony",
			"label": "sony",
			"seq": "36,39"
		}]
	},
	{
		"id": "de9a66a3c88149bf89b74795d1fb60b8",
		"question": "Name the music artist which collaborated with the spouse of Jessi Colter?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Jessi_Colter> . ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "spouse",
			"seq": "50,55"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "artist music",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "artist music",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jessi_Colter",
			"label": "colter jessi",
			"seq": "60,71"
		}]
	},
	{
		"id": "5c71304648b546e691fb6b41fbe5fa5d",
		"question": "Which notable commanders of the Army Group Oberrhein (Germany) is the  leader of the Kriminalpolizei?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)> <http://dbpedia.org/property/notableCommanders> ?uri. <http://dbpedia.org/resource/Kriminalpolizei> <http://dbpedia.org/ontology/leader> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableCommanders",
			"label": "commanders notable",
			"seq": "6,23"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leader",
			"seq": "71,76"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)",
			"label": "oberrhein (germany) group army",
			"seq": "32,61"
		}, {
			"uri": "http://dbpedia.org/resource/Kriminalpolizei",
			"label": "kriminalpolizei",
			"seq": "85,99"
		}]
	},
	{
		"id": "5b0935d4611b417b8cf6c43cffce6ccc",
		"question": "Who is the prime minister of the successor of Kingsley Wood?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Kingsley_Wood> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "33,41"
		}, {
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "minister prime",
			"seq": "11,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kingsley_Wood",
			"label": "kingsley wood",
			"seq": "46,58"
		}]
	},
	{
		"id": "b3398e30fff34e49a28ba477ae3090e9",
		"question": "which band was Roger waters in?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Roger_Waters> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerBandMember",
			"label": "band",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Roger_Waters",
			"label": "waters roger",
			"seq": "15,26"
		}]
	},
	{
		"id": "882175c3e40a4de0a704ef91c54d2371",
		"question": "Is Seattle the Ship builder of USS Marmora (IX-189)?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/USS_Marmora_(IX-189)> <http://dbpedia.org/property/shipBuilder> <http://dbpedia.org/resource/Seattle> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/shipBuilder",
			"label": "builder ship",
			"seq": "15,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/USS_Marmora_(IX-189)",
			"label": "(ix-189) marmora uss",
			"seq": "31,50"
		}, {
			"uri": "http://dbpedia.org/resource/Seattle",
			"label": "seattle",
			"seq": "3,9"
		}]
	},
	{
		"id": "ad99cf1513714c3ebe054b74c3f26900",
		"question": "What is the region of Kim Sawchuk ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kim_Sawchuk> <http://dbpedia.org/property/region> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/region",
			"label": "region",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kim_Sawchuk",
			"label": "sawchuk kim",
			"seq": "22,32"
		}]
	},
	{
		"id": "ba5a1a29c5a042d39b6d9df1fd0da2b2",
		"question": "Which colored race horses have won the Grand National?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/honours> <http://dbpedia.org/resource/Grand_National> . ?x <http://dbpedia.org/ontology/colour> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/honours",
			"label": "horses",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/ontology/colour",
			"label": "colored",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/RaceHorse",
			"label": "horses",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Grand_National",
			"label": "national grand",
			"seq": "39,52"
		}]
	},
	{
		"id": "ecbf7d5515694a71a3cf386bf6863cef",
		"question": "Was Beth Tweddle primarily coached by Amanda Reddin?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Beth_Tweddle> <http://dbpedia.org/property/headcoach> <http://dbpedia.org/resource/Amanda_Reddin> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headcoach",
			"label": "coached",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Beth_Tweddle",
			"label": "tweddle beth",
			"seq": "4,15"
		}, {
			"uri": "http://dbpedia.org/resource/Amanda_Reddin",
			"label": "reddin amanda",
			"seq": "38,50"
		}]
	},
	{
		"id": "9093d0d6f2a342f4933ca945615cc566",
		"question": "What is the television show whose judges is Randy Jackson?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/judges",
			"label": "judges",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Randy_Jackson",
			"label": "jackson randy",
			"seq": "44,56"
		}]
	},
	{
		"id": "5c476257c7ae4f8c8fb4b061667cb773",
		"question": "What is the Band whose band member is Mark Middleton?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Mark_Middleton> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "member band",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mark_Middleton",
			"label": "middleton mark",
			"seq": "38,51"
		}]
	},
	{
		"id": "a47cf69b01104a72acb249b101f2746a",
		"question": "Was the cover of The adventures of Tom Sawyer designed by Mark Twain?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> <http://dbpedia.org/resource/Mark_Twain> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coverArtist",
			"label": "cover",
			"seq": "8,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer",
			"label": "adventures sawyer",
			"seq": "21,37"
		}, {
			"uri": "http://dbpedia.org/resource/Mark_Twain",
			"label": "twain mark",
			"seq": "58,67"
		}]
	},
	{
		"id": "67893530f30a49dd87e36373d1642717",
		"question": "Which president of William Eustus also married to Dolley Madison ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dolley_Madison> <http://dbpedia.org/ontology/spouse> ?uri. <http://dbpedia.org/resource/William_Eustis> <http://dbpedia.org/property/president> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "also",
			"seq": "34,37"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dolley_Madison",
			"label": "madison dolley",
			"seq": "50,63"
		}, {
			"uri": "http://dbpedia.org/resource/William_Eustis",
			"label": "william",
			"seq": "19,25"
		}]
	},
	{
		"id": "fd60b1d920e4435cbfbbe74a8631fde0",
		"question": "Is Charles Drummond Ellis a doctoral student of James Chadwick?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/James_Chadwick> <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Charles_Drummond_Ellis> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralStudent",
			"label": "doctoral student",
			"seq": "28,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_Chadwick",
			"label": "chadwick james",
			"seq": "48,61"
		}, {
			"uri": "http://dbpedia.org/resource/Charles_Drummond_Ellis",
			"label": "drummond charles ellis",
			"seq": "3,24"
		}]
	},
	{
		"id": "7d16db5ff7dc4f1d820159cb7b83bff8",
		"question": "How many kings and queens have died in the Arabian Peninsula?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Arabian_Peninsula>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "39,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arabian_Peninsula",
			"label": "peninsula arabian",
			"seq": "43,59"
		}]
	},
	{
		"id": "253d1d8095684756951584ec0a0a37f1",
		"question": "Name a movie with actor as Momoko Kchi and music by Akira Ifukube?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Momoko_K\u014dchi> . ?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Akira_Ifukube>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "and",
			"seq": "39,41"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "43,47"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "with",
			"seq": "13,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Momoko_K\u014dchi",
			"label": "momoko",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/resource/Akira_Ifukube",
			"label": "ifukube akira",
			"seq": "52,64"
		}]
	},
	{
		"id": "6cb6c4470ec840f9990494c4ecebca5f",
		"question": "Who are relatives of Ozzy Osbourne and Kelly Osbourne?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ozzy_Osbourne> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Kelly_Osbourne> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "8,16"
		}, {
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "8,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ozzy_Osbourne",
			"label": "osbourne ozzy",
			"seq": "21,33"
		}, {
			"uri": "http://dbpedia.org/resource/Kelly_Osbourne",
			"label": "osbourne kelly",
			"seq": "26,39"
		}]
	},
	{
		"id": "090ae66d24e0419186f917e055d026fd",
		"question": "What is the purpose of New Zealand Chess Federation ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Zealand_Chess_Federation> <http://dbpedia.org/property/purpose> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/purpose",
			"label": "purpose",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_Zealand_Chess_Federation",
			"label": "federation zealand chess",
			"seq": "27,50"
		}]
	},
	{
		"id": "182f0bed84d84af2a38a3d2bf40a2c8f",
		"question": "Who manages the operator of Norman Park Branch, CTA?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Normal_Park_branch_(CTA)> <http://dbpedia.org/property/operator> ?x . ?x <http://dbpedia.org/ontology/operatedBy> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operator",
			"label": "operator",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operator",
			"seq": "16,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Normal_Park_branch_(CTA)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1e202ff4ce8c40f18dcb98e39e8c43ad",
		"question": "Name the HBO TV show written by Erik jendresen  ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/HBO> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/company",
			"label": "by",
			"seq": "29,30"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "16,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/HBO",
			"label": "hbo",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/resource/Erik_Jendresen",
			"label": "jendresen erik",
			"seq": "32,45"
		}]
	},
	{
		"id": "69daf7da0c5a44ba8f6817c0af2e11d5",
		"question": "What team did Joe Porter and Eddie Anderson play for?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eddie_Anderson_(safety)> <http://dbpedia.org/ontology/team> ?uri. <http://dbpedia.org/resource/Joe_Porter_(American_football)> <http://dbpedia.org/ontology/formerTeam> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "5,8"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "team",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eddie_Anderson_(safety)",
			"label": "anderson eddie",
			"seq": "29,42"
		}, {
			"uri": "http://dbpedia.org/resource/Joe_Porter_(American_football)",
			"label": "porter",
			"seq": "18,23"
		}]
	},
	{
		"id": "b08465bc7133422a9c0a2a1e3ee38e99",
		"question": "Whay common comic is written by Karakuri Dji Ultimo and narrated by The Incredible Hulk ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Karakuri_D\u00f4ji_Ultimo> <http://dbpedia.org/property/author> ?uri. <http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)> <http://dbpedia.org/property/narrated> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "ultimo",
			"seq": "45,50"
		}, {
			"uri": "http://dbpedia.org/property/narrated",
			"label": "narrated",
			"seq": "56,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Karakuri_D\u00f4ji_Ultimo",
			"label": "karakuri ultimo",
			"seq": "32,46"
		}, {
			"uri": "http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)",
			"label": "incredible hulk",
			"seq": "72,86"
		}]
	},
	{
		"id": "eb7991936f3c4df097078005049ad9ba",
		"question": "What are the movies whose director of photography is Jordan Cronenweth?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cinematography",
			"label": "photography",
			"seq": "38,48"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "35,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jordan_Cronenweth",
			"label": "cronenweth jordan",
			"seq": "53,69"
		}]
	},
	{
		"id": "6d387f343a844da58776ae70a4a4f621",
		"question": "Under which presidents have politicians from the Continental army served?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Continental_Army> . ?x <http://dbpedia.org/property/president> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "which",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "presidents",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Continental_Army",
			"label": "continental army",
			"seq": "49,64"
		}]
	},
	{
		"id": "309643fac5534e289bcc36c1b3e52d85",
		"question": "Which city has radio stations which are Religious ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/format> <http://dbpedia.org/resource/Religion> . ?x <http://dbpedia.org/property/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/format",
			"label": "radio",
			"seq": "15,19"
		}, {
			"uri": "http://dbpedia.org/property/city",
			"label": "city",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/ontology/RadioStation",
			"label": "stations",
			"seq": "21,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Religion",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "774e4d5e2f154ce18749dbfff09b87aa",
		"question": "Producers of what have died in Mississippi?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Mississippi> . ?uri <http://dbpedia.org/ontology/producer> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "have",
			"seq": "18,21"
		}, {
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producers",
			"seq": "0,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mississippi",
			"label": "mississippi",
			"seq": "31,41"
		}]
	},
	{
		"id": "8f8b8d845595448aad675853ecea23b5",
		"question": "Those seasons which have been played in Fort Lauderdale Florida now host their games where?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/stadium> <http://dbpedia.org/resource/Fort_Lauderdale,_Florida> . ?x <http://dbpedia.org/ontology/ground> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/stadium",
			"label": "host",
			"seq": "68,71"
		}, {
			"uri": "http://dbpedia.org/ontology/ground",
			"label": "seasons",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClubSeason",
			"label": "seasons",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fort_Lauderdale,_Florida",
			"label": "lauderdale florida fort",
			"seq": "40,62"
		}]
	},
	{
		"id": "f9e263fc8d484333938c1f47c1e37aef",
		"question": "How many universities are there whose country's capital is Oslo?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/capital> <http://dbpedia.org/resource/Oslo> . ?uri <http://dbpedia.org/ontology/country> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/capital",
			"label": "capital",
			"seq": "48,54"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country's",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oslo",
			"label": "oslo",
			"seq": "59,62"
		}]
	},
	{
		"id": "2d2f1781e9df41a58d97a8ebce31bb6b",
		"question": "Name some sports played in institutions of Maharashtra?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/state> <http://dbpedia.org/resource/Maharashtra> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/state",
			"label": "some",
			"seq": "5,8"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "10,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maharashtra",
			"label": "maharashtra",
			"seq": "43,53"
		}]
	},
	{
		"id": "05e132cfe14a4f008e5be637c21deb07",
		"question": "Current players of Colorado Avalanche have previously played for how many different teams?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Colorado_Avalanche> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "teams",
			"seq": "84,88"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "84,88"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "84,88"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colorado_Avalanche",
			"label": "avalanche colorado",
			"seq": "19,36"
		}]
	},
	{
		"id": "2c39c59a5b3d4c15844b34930828326b",
		"question": "Was 2658 Gingerich invented in Harvard?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/2658_Gingerich> <http://dbpedia.org/ontology/discoverer> <http://dbpedia.org/resource/Harvard_College> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/discoverer",
			"label": "invented",
			"seq": "19,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2658_Gingerich",
			"label": "gingerich 2658",
			"seq": "4,17"
		}, {
			"uri": "http://dbpedia.org/resource/Harvard_College",
			"label": "harvard",
			"seq": "31,37"
		}]
	},
	{
		"id": "778761d04bb14ee8b90d1cbf954322e7",
		"question": "How many other people are in a band with Robert de Niro?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Robert_De_Niro> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "robert",
			"seq": "41,46"
		}, {
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "band",
			"seq": "31,34"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_De_Niro",
			"label": "robert niro",
			"seq": "41,51"
		}]
	},
	{
		"id": "44c72a38f8a2482989ab8b73f5f9977c",
		"question": "Who created the stadiums who have been rented by the Boston Red Sox?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Boston_Red_Sox> . ?x <http://dbpedia.org/property/architect> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "rented",
			"seq": "39,44"
		}, {
			"uri": "http://dbpedia.org/property/architect",
			"label": "rented",
			"seq": "39,44"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadiums",
			"seq": "16,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Boston_Red_Sox",
			"label": "boston",
			"seq": "53,58"
		}]
	},
	{
		"id": "c432ff2350b742d69c0e43d801ee643a",
		"question": "What is the mascot of the unit whose garrison is Canberra ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/Canberra> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/garrison",
			"label": "garrison",
			"seq": "37,44"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "unit",
			"seq": "26,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canberra",
			"label": "canberra",
			"seq": "49,56"
		}]
	},
	{
		"id": "c5daa94158494f458cac5372dfc1da23",
		"question": "Horses sired by Karinga Bay have participated in which races?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/sire> <http://dbpedia.org/resource/Karinga_Bay> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sire",
			"label": "sired",
			"seq": "7,11"
		}, {
			"uri": "http://dbpedia.org/property/race",
			"label": "races",
			"seq": "55,59"
		}, {
			"uri": "http://dbpedia.org/ontology/Horse",
			"label": "horses",
			"seq": "0,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Karinga_Bay",
			"label": "karinga bay",
			"seq": "16,26"
		}]
	},
	{
		"id": "232b47d723104bf9af52c6a454123647",
		"question": "Is Philosophy the academic discipline of Think (journal)?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Think_(journal)> <http://dbpedia.org/ontology/academicDiscipline> <http://dbpedia.org/resource/Philosophy> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "discipline academic",
			"seq": "18,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Think_(journal)",
			"label": "(journal) think",
			"seq": "41,55"
		}, {
			"uri": "http://dbpedia.org/resource/Philosophy",
			"label": "philosophy",
			"seq": "3,12"
		}]
	},
	{
		"id": "a3a7404dd7e4412aa9a0da42b4e489a2",
		"question": "What is the highschool of the american football player who joined the Robert Morris Colonials program?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/school> <http://dbpedia.org/resource/Robert_Morris_Colonials_football> . ?x <http://dbpedia.org/property/highschool> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/school",
			"label": "highschool",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/property/highschool",
			"label": "highschool",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football american player",
			"seq": "30,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Morris_Colonials_football",
			"label": "colonials football robert morris",
			"seq": "39,70"
		}]
	},
	{
		"id": "a28559e7c5e648058bc88bb93a29336b",
		"question": "Which clubs play in the La Liga?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/La_Liga> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/league",
			"label": "la",
			"seq": "13,14"
		}, {
			"uri": "http://dbpedia.org/property/name",
			"label": "la",
			"seq": "13,14"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClub",
			"label": "clubs",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/La_Liga",
			"label": "liga la",
			"seq": "13,19"
		}]
	},
	{
		"id": "ea111f49ee134bee8e906c9bab84430f",
		"question": "Who are the parents of writers born and bred in Buckinghamshire?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/homeTown> <http://dbpedia.org/resource/Buckinghamshire> . ?x <http://dbpedia.org/ontology/parent> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/homeTown",
			"label": "who",
			"seq": "0,2"
		}, {
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parents",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writers",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Buckinghamshire",
			"label": "buckinghamshire",
			"seq": "48,62"
		}]
	},
	{
		"id": "a656fb53970e4e36b7c254c35ee31be6",
		"question": "What is the radio show created by Timoteo Jeffries, about?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Timoteo_Jeffries> . ?x <http://dbpedia.org/property/format> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioProgram>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "created",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/property/format",
			"label": "created",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/RadioProgram",
			"label": "radio",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Timoteo_Jeffries",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6b86496784934d179425226207e28786",
		"question": "Who is associated  with the musical artists from Africa '70 (band) and Tony Allen ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Africa_'70_(band)> . ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Tony_Allen_(musician)> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated musical",
			"seq": "7,24"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated musical",
			"seq": "7,24"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Africa_'70_(band)",
			"label": "africa (band) '70",
			"seq": "49,65"
		}, {
			"uri": "http://dbpedia.org/resource/Tony_Allen_(musician)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "bdf0f42af4d0461c8f39f953143086ce",
		"question": "How many religions are followed by the group whose architectural style can be seen on Sanggar Agung?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Sanggar_Agung> <http://dbpedia.org/property/architecturalStyle> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architecturalStyle",
			"label": "architectural style",
			"seq": "51,69"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/EthnicGroup",
			"label": "group",
			"seq": "39,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sanggar_Agung",
			"label": "sanggar agung",
			"seq": "86,98"
		}]
	},
	{
		"id": "ff16998e9b6149ce8df83c8403a1295b",
		"question": "What are the relatives of the rugby player one of whose relatives is Nick Williams?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Nick_Williams> . ?x <http://dbpedia.org/ontology/relative> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RugbyPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/RugbyPlayer",
			"label": "player rugby",
			"seq": "30,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nick_Williams",
			"label": "williams nick",
			"seq": "69,81"
		}]
	},
	{
		"id": "133932cb0d5041d89b82a8f25c8ac2fd",
		"question": "Name the other wine region of the grapes whose one of the wine region is Michigan?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/wineRegion> <http://dbpedia.org/resource/Michigan> . ?x <http://dbpedia.org/ontology/wineRegion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "region",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "region",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Grape",
			"label": "grapes",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michigan",
			"label": "michigan",
			"seq": "73,80"
		}]
	},
	{
		"id": "db7bce6fd45745b7833bc9aa702dc2f7",
		"question": "Which shows' opening themes was used to make If We Were a Movie?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/If_We_Were_a_Movie> . ?uri <http://dbpedia.org/ontology/openingTheme> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "used",
			"seq": "32,35"
		}, {
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opening",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows'",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/If_We_Were_a_Movie",
			"label": "movie were",
			"seq": "51,60"
		}]
	},
	{
		"id": "8f2e16d375b7408da4f7f573d9c76b79",
		"question": "Where is the venue of the History of Penny Arcade Expo located?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/History_of_Penny_Arcade_Expo> <http://dbpedia.org/property/venue> ?x . ?x <http://dbpedia.org/property/address> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/venue",
			"label": "venue",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/property/address",
			"label": "arcade",
			"seq": "43,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/History_of_Penny_Arcade_Expo",
			"label": "history arcade penny expo",
			"seq": "26,50"
		}]
	},
	{
		"id": "fa67ea0509064e84a85b05bc03108e02",
		"question": "Which European Broadcasting Union's TV show has opening theme as Te Deum ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/European_Broadcasting_Union> . ?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Te_Deum_(Charpentier)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "european",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opening theme",
			"seq": "48,60"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "39,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/European_Broadcasting_Union",
			"label": "broadcasting european",
			"seq": "6,26"
		}, {
			"uri": "http://dbpedia.org/resource/Te_Deum_(Charpentier)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "4790db09b5954a87831e282bd16265df",
		"question": "Which companies makes cars assembled in Karachi, Pakistan?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Karachi> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/assembly",
			"label": "assembled",
			"seq": "27,35"
		}, {
			"uri": "http://dbpedia.org/property/parentCompany",
			"label": "companies",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "assembled",
			"seq": "27,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Karachi",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "70bd3dd28bb14512abce694bb6240c86",
		"question": "Who is the president of Carl Stokes nad Wyche Fowler ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carl_Stokes> <http://dbpedia.org/property/president> ?uri. <http://dbpedia.org/resource/Wyche_Fowler> <http://dbpedia.org/ontology/president> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "11,19"
		}, {
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carl_Stokes",
			"label": "stokes carl",
			"seq": "24,34"
		}, {
			"uri": "http://dbpedia.org/resource/Wyche_Fowler",
			"label": "fowler wyche",
			"seq": "40,51"
		}]
	},
	{
		"id": "97e02dcf44aa43c1b7cc7a7c155b118f",
		"question": "Does GeneWeb have the GPL license?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/GeneWeb> <http://dbpedia.org/property/license> <http://dbpedia.org/resource/GNU_General_Public_License> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/license",
			"label": "license",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/GeneWeb",
			"label": "geneweb",
			"seq": "5,11"
		}, {
			"uri": "http://dbpedia.org/resource/GNU_General_Public_License",
			"label": "license",
			"seq": "26,32"
		}]
	},
	{
		"id": "e91a205c78b6436ca52191e1516ec883",
		"question": "Josef Bhler belongs to which political party?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Josef_B\u00fchler> <http://dbpedia.org/ontology/occupation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "party",
			"seq": "39,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Josef_B\u00fchler",
			"label": "josef",
			"seq": "0,4"
		}]
	},
	{
		"id": "dc5442f9638d4d3a877e6926914c08db",
		"question": "Name the famous employee of open society foundations ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/Open_Society_Foundations>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "employee",
			"seq": "16,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Open_Society_Foundations",
			"label": "foundations society open",
			"seq": "28,51"
		}]
	},
	{
		"id": "5fa7af236eac494f8047e5fd87a4c812",
		"question": "Where is the headquarters of Sigma TV",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sigma_TV> <http://dbpedia.org/property/headquarters> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "13,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sigma_TV",
			"label": "sigma tv",
			"seq": "29,36"
		}]
	},
	{
		"id": "0bac079708b34f219b751ade453305f4",
		"question": "What is the affiliation of Lumbini Bauddha University ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lumbini_Bauddha_University> <http://dbpedia.org/property/affiliation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliation",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lumbini_Bauddha_University",
			"label": "university lumbini bauddha",
			"seq": "27,52"
		}]
	},
	{
		"id": "ca0e18eaf79141309cd329cbfcbe0c99",
		"question": "What are the death place of the models whose hair color was Red?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/hairColor> <http://dbpedia.org/resource/Red_hair> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Model>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hairColor",
			"label": "color hair",
			"seq": "45,54"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "place death",
			"seq": "13,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Model",
			"label": "models",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Red_hair",
			"label": "hair red",
			"seq": "45,52"
		}]
	},
	{
		"id": "32ca4c843ccc459ab2750036206e7aa0",
		"question": "Which city amongst the one which belongs to Boundary Dam was the palce for Soccer Bowl '76 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Soccer_Bowl_'76> <http://dbpedia.org/ontology/city> ?uri. <http://dbpedia.org/resource/Boundary_Dam> <http://dbpedia.org/property/owner> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "city",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "one",
			"seq": "23,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Soccer_Bowl_'76",
			"label": "soccer bowl '76",
			"seq": "75,89"
		}, {
			"uri": "http://dbpedia.org/resource/Boundary_Dam",
			"label": "boundary dam",
			"seq": "44,55"
		}]
	},
	{
		"id": "9f6c919d926a4f7d953fbb687036e0df",
		"question": "What are the beverages whose origin is England?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/England> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "origin",
			"seq": "29,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England",
			"label": "england",
			"seq": "39,45"
		}]
	},
	{
		"id": "581ca8f786c64d5a986ef8d22049dc1f",
		"question": "List down the opponents of Frank Stilwell?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frank_Stilwell> <http://dbpedia.org/ontology/opponent> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponents",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frank_Stilwell",
			"label": "stilwell frank",
			"seq": "27,40"
		}]
	},
	{
		"id": "97e6ac7f9f4e4ae4851eb5a188d00241",
		"question": "What is the label of I Pray on Christmas ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/I_Pray_on_Christmas> <http://dbpedia.org/property/label> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/I_Pray_on_Christmas",
			"label": "christmas pray on",
			"seq": "23,39"
		}]
	},
	{
		"id": "3d239bb3a5c14dd59a0f32a7623929e8",
		"question": "Which company owns GetTV and Hypnotize minds ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/property/parent> ?uri. <http://dbpedia.org/resource/Hypnotize_Minds> <http://dbpedia.org/property/parent> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/parent",
			"label": "company",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/property/parent",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/GetTV",
			"label": "gettv",
			"seq": "19,23"
		}, {
			"uri": "http://dbpedia.org/resource/Hypnotize_Minds",
			"label": "hypnotize minds",
			"seq": "29,43"
		}]
	},
	{
		"id": "557e9d5fa7a8436e80e24ed1e0e80825",
		"question": "How many subjects are covered in the publications of Doubleday?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Doubleday_(publisher)> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publications",
			"seq": "37,48"
		}, {
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "subjects",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Doubleday_(publisher)",
			"label": "doubleday",
			"seq": "53,61"
		}]
	},
	{
		"id": "39eeccfe288b4fc78a5dcd44386e7255",
		"question": "Miguel de Cervantes wrote the musical extended from which book?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Miguel_de_Cervantes> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "the",
			"seq": "26,28"
		}, {
			"uri": "http://dbpedia.org/ontology/basedOn",
			"label": "book",
			"seq": "58,61"
		}, {
			"uri": "http://dbpedia.org/ontology/Musical",
			"label": "musical",
			"seq": "30,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miguel_de_Cervantes",
			"label": "cervantes miguel",
			"seq": "0,15"
		}]
	},
	{
		"id": "1e980d04cc974b8bb501dffbdfd46d82",
		"question": "Is Olyokma River the right tributary of Lena River?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Lena_River> <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Olyokma_River> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/rightTributary",
			"label": "tributary right",
			"seq": "21,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lena_River",
			"label": "river lena",
			"seq": "11,20"
		}, {
			"uri": "http://dbpedia.org/resource/Olyokma_River",
			"label": "olyokma river",
			"seq": "3,15"
		}]
	},
	{
		"id": "1d66893d65934df1a71cb539b5a178c2",
		"question": "What is the debut team of the football player whose college is UCLA Bruins football?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/UCLA_Bruins_football> . ?x <http://dbpedia.org/ontology/debutTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GridironFootballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/college",
			"label": "college",
			"seq": "52,58"
		}, {
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debut team",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/GridironFootballPlayer",
			"label": "football",
			"seq": "30,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/UCLA_Bruins_football",
			"label": "football bruins ucla",
			"seq": "30,49"
		}]
	},
	{
		"id": "ba0406c42bb74f8994649087db84bd7f",
		"question": "What is the capital of the region which maintains the South Park Bridge ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/South_Park_Bridge> <http://dbpedia.org/ontology/maintainedBy> ?x . ?x <http://dbpedia.org/ontology/countySeat> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/maintainedBy",
			"label": "maintains",
			"seq": "40,48"
		}, {
			"uri": "http://dbpedia.org/ontology/countySeat",
			"label": "south",
			"seq": "54,58"
		}, {
			"uri": "http://dbpedia.org/ontology/Region",
			"label": "region",
			"seq": "27,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Park_Bridge",
			"label": "bridge south park",
			"seq": "54,70"
		}]
	},
	{
		"id": "ed50cb6eb3d440e1a68c9f8eb6137382",
		"question": "Who has military branches are Colonial troops and Continental Army?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Colonial_troops> . ?uri <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Continental_Army> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military",
			"seq": "8,15"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military",
			"seq": "8,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colonial_troops",
			"label": "colonial troops",
			"seq": "30,44"
		}, {
			"uri": "http://dbpedia.org/resource/Continental_Army",
			"label": "continental",
			"seq": "50,60"
		}]
	},
	{
		"id": "dc505bf849494cc0881eef0dc15f5ab4",
		"question": "In how many places has Don R. Berlin worked?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Don_R._Berlin> <http://dbpedia.org/ontology/employer> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "places",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Don_R._Berlin",
			"label": "berlin don",
			"seq": "23,32"
		}]
	},
	{
		"id": "cda67731753944ec9a75a63be0f893a1",
		"question": "Was Heinrich Himmler ever a commanders of Army Group Oberrhein?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)> <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Heinrich_Himmler> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableCommanders",
			"label": "commanders",
			"seq": "28,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)",
			"label": "oberrhein group",
			"seq": "47,61"
		}, {
			"uri": "http://dbpedia.org/resource/Heinrich_Himmler",
			"label": "heinrich himmler",
			"seq": "4,19"
		}]
	},
	{
		"id": "6ab4e15a8b7248ebb8cb2c41358e0f2a",
		"question": "What is the company whose one of the key person is Dennis Muilenburg and produces Boeing CH-47 Chinook ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Dennis_Muilenburg> . ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "key",
			"seq": "37,39"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "produces",
			"seq": "73,80"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dennis_Muilenburg",
			"label": "muilenburg dennis",
			"seq": "51,67"
		}, {
			"uri": "http://dbpedia.org/resource/Boeing_CH-47_Chinook",
			"label": "chinook boeing ch-47",
			"seq": "82,101"
		}]
	},
	{
		"id": "278a4dae43ef4c9b888aaf3f0516d0a0",
		"question": "Name the cause of death of Martino Martini ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martino_Martini> <http://dbpedia.org/ontology/deathCause> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "death cause",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Martino_Martini",
			"label": "martino martini",
			"seq": "27,41"
		}]
	},
	{
		"id": "d107d84c4eaf43c4bb51b0825ae31b0c",
		"question": "What is the stylistic origin of the music genres where the Bass guitar is important?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/instruments> <http://dbpedia.org/resource/Bass_guitar> . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicGenre>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/instruments",
			"label": "important",
			"seq": "74,82"
		}, {
			"uri": "http://dbpedia.org/ontology/stylisticOrigin",
			"label": "stylistic origin",
			"seq": "12,27"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicGenre",
			"label": "music",
			"seq": "36,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bass_guitar",
			"label": "guitar bass",
			"seq": "59,69"
		}]
	},
	{
		"id": "c577d7b031fc49db89aed6ce9019e62b",
		"question": "What is the label of Next Thing ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Next_Thing> <http://dbpedia.org/ontology/recordLabel> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "label",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Next_Thing",
			"label": "thing next",
			"seq": "21,30"
		}]
	},
	{
		"id": "cb2064da897547b2abcb8b409bdd0817",
		"question": "Name the scientist whose doctoral supervisor's doctoral student is John Bowlby?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/John_Bowlby> . ?uri <http://dbpedia.org/property/doctoralAdvisor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralStudent",
			"label": "doctoral",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "doctoral",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Bowlby",
			"label": "bowlby john",
			"seq": "67,77"
		}]
	},
	{
		"id": "bfbf00221cf04ca7b6a2b27c0f0b66d7",
		"question": "Where did the office holder  who is predecessor to Marco Aurelio Robles died ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Marco_Aurelio_Robles> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "36,46"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "marco",
			"seq": "51,55"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "14,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marco_Aurelio_Robles",
			"label": "aurelio robles marco",
			"seq": "51,70"
		}]
	},
	{
		"id": "7fbcd4b51ed446329ea96a577f9cd906",
		"question": "What are some other children of the father of Marvin Bush?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Marvin_Bush> . ?x <http://dbpedia.org/property/children> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "children",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "20,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marvin_Bush",
			"label": "marvin bush",
			"seq": "46,56"
		}]
	},
	{
		"id": "62dd4ce12cbb45e781aca55e4b3b29bd",
		"question": "Which  writer has childrens named Mother Mary Alphonsa and Julian Hawthorne?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Mother_Mary_Alphonsa> . ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Julian_Hawthorne> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "childrens",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/property/children",
			"label": "childrens",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writer",
			"seq": "7,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mother_Mary_Alphonsa",
			"label": "alphonsa mother mary",
			"seq": "34,53"
		}, {
			"uri": "http://dbpedia.org/resource/Julian_Hawthorne",
			"label": "hawthorne julian",
			"seq": "59,74"
		}]
	},
	{
		"id": "d71aec977ff14634a62b74d34fb64ae1",
		"question": "List all the schools of the rugby player whose went to school named Pietermaritzburg ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/school> <http://dbpedia.org/resource/Pietermaritzburg> . ?x <http://dbpedia.org/property/school> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/school",
			"label": "school",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/property/school",
			"label": "school",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pietermaritzburg",
			"label": "pietermaritzburg",
			"seq": "68,83"
		}]
	},
	{
		"id": "b331453bfb4641c399c599377904e4a3",
		"question": "What are some other products of the banks which makes Postbanken?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Postbanken> . ?x <http://dbpedia.org/property/products> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/product",
			"label": "products",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "products",
			"seq": "20,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Bank",
			"label": "banks",
			"seq": "36,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Postbanken",
			"label": "postbanken",
			"seq": "54,63"
		}]
	},
	{
		"id": "841b87f5ad0d4f0397e61ab5f19dfd26",
		"question": "What are some cartoons distributed by a subsidiary of Time Warner?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Time_Warner> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cartoon>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "cartoons",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "23,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Cartoon",
			"label": "cartoons",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Time_Warner",
			"label": "warner time",
			"seq": "54,64"
		}]
	},
	{
		"id": "1c337899653549fb8c5f5765a394b9bb",
		"question": "What are the things whose mascots are from the class Eutheria?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Eutheria> . ?uri <http://dbpedia.org/property/mascot> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/class",
			"label": "class",
			"seq": "47,51"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascots",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eutheria",
			"label": "eutheria",
			"seq": "53,60"
		}]
	},
	{
		"id": "b06e3b9df6474551b29eda51267fbaca",
		"question": "What is the total number of fictional characters whose created by  Greg Daniels and series is The Office (U.S. TV series)?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Greg_Daniels> . ?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/The_Office_(U.S._TV_series)> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "created",
			"seq": "55,61"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "84,89"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Greg_Daniels",
			"label": "daniels greg",
			"seq": "67,78"
		}, {
			"uri": "http://dbpedia.org/resource/The_Office_(U.S._TV_series)",
			"label": "series) office (u.s.",
			"seq": "98,117"
		}]
	},
	{
		"id": "277ae34827a94a64bfda52a29b80431f",
		"question": "Name the are where South side Elevated Railroad operate and has place of birth as Arthur A. Ross ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Arthur_A._Ross> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operate",
			"seq": "48,54"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "64,74"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Side_Elevated_Railroad",
			"label": "railroad elevated south",
			"seq": "19,41"
		}, {
			"uri": "http://dbpedia.org/resource/Arthur_A._Ross",
			"label": "arthur ross",
			"seq": "82,92"
		}]
	},
	{
		"id": "d9c86b00d0404514a18fd6635d8b893d",
		"question": "Fairfield, Connecticut is hometown to which persons?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Fairfield,_Connecticut>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "hometown",
			"seq": "26,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "persons",
			"seq": "44,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fairfield,_Connecticut",
			"label": "connecticut fairfield,",
			"seq": "0,21"
		}]
	},
	{
		"id": "3b75c4aabe0748088571682a0168ab4e",
		"question": "Which borough of the Corringham railway station is also the local authority of Buckhurst Hill County High School ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Corringham_railway_station> <http://dbpedia.org/property/borough> ?uri. <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/borough",
			"label": "borough",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/localAuthority",
			"label": "authority local",
			"seq": "60,74"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Corringham_railway_station",
			"label": "corringham station railway",
			"seq": "21,46"
		}, {
			"uri": "http://dbpedia.org/resource/Buckhurst_Hill_County_High_School",
			"label": "buckhurst school county",
			"seq": "79,101"
		}]
	},
	{
		"id": "7c5f3af257f34d6fa8ea63202db67648",
		"question": "Where is the tombstone of Johannes Gerhardus Strijdom?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Johannes_Gerhardus_Strijdom> <http://dbpedia.org/property/restingplace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "tombstone",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Johannes_Gerhardus_Strijdom",
			"label": "gerhardus strijdom johannes",
			"seq": "26,52"
		}]
	},
	{
		"id": "70a95d95a68742c9b70b365d5d2d2fa9",
		"question": "Which administrative region leader is Sukhumbhand Paribatra and was founded by  Rama I?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Sukhumbhand_Paribatra> . ?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Rama_I>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "leader",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founded",
			"seq": "68,74"
		}, {
			"uri": "http://dbpedia.org/ontology/AdministrativeRegion",
			"label": "administrative region",
			"seq": "6,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sukhumbhand_Paribatra",
			"label": "sukhumbhand paribatra",
			"seq": "38,58"
		}, {
			"uri": "http://dbpedia.org/resource/Rama_I",
			"label": "rama",
			"seq": "80,83"
		}]
	},
	{
		"id": "009f2e39c91d49f1b6d9410b3fb2b5da",
		"question": "Who owns the bridge which crosses the Orange Line of MBTA?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/crosses> <http://dbpedia.org/resource/Orange_Line_(MBTA)> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/crosses",
			"label": "crosses",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owns",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridge",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Orange_Line_(MBTA)",
			"label": "orange mbta line",
			"seq": "38,53"
		}]
	},
	{
		"id": "cc67a19255ce4bf6938888a64e0c3b19",
		"question": "Who designed Oddamavadi Bridge?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oddamavadi_Bridge> <http://dbpedia.org/property/designer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oddamavadi_Bridge",
			"label": "oddamavadi bridge",
			"seq": "13,29"
		}]
	},
	{
		"id": "026eb82f924542c5be524f0aee58ff2f",
		"question": "What are the television shows whose company is European Broadcasting Union?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/European_Broadcasting_Union>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/European_Broadcasting_Union",
			"label": "broadcasting european union",
			"seq": "47,73"
		}]
	},
	{
		"id": "4046f69e116b4d889fcf739e394d42a9",
		"question": "Is Luigi Brugnaro the mayor of Venice?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Venice> <http://dbpedia.org/property/mayor> <http://dbpedia.org/resource/Luigi_Brugnaro> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mayor",
			"label": "mayor",
			"seq": "22,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Venice",
			"label": "venice",
			"seq": "31,36"
		}, {
			"uri": "http://dbpedia.org/resource/Luigi_Brugnaro",
			"label": "brugnaro luigi",
			"seq": "3,16"
		}]
	},
	{
		"id": "8bcda51415224909b0c127abbc00da92",
		"question": "List all important people of the non profit organization which has Hilary Clinton as a key person ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Hillary_Clinton> . ?x <http://dbpedia.org/property/keyPeople> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Non-ProfitOrganisation>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people key",
			"seq": "19,28"
		}, {
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people key",
			"seq": "19,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Non-ProfitOrganisation",
			"label": "organization",
			"seq": "44,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hillary_Clinton",
			"label": "clinton",
			"seq": "74,80"
		}]
	},
	{
		"id": "ab3b3833bcba4004a128604125a5d633",
		"question": "Where did Allama Matthews study?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allama_Matthews> <http://dbpedia.org/ontology/college> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/college",
			"label": "where",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Allama_Matthews",
			"label": "matthews allama",
			"seq": "10,24"
		}]
	},
	{
		"id": "54b17242bd0b451ea66624da5aee1f7e",
		"question": "Politicians born in Bangalore are now in which parties?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/homeTown> <http://dbpedia.org/resource/Bangalore> . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/homeTown",
			"label": "now",
			"seq": "34,36"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "parties",
			"seq": "47,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bangalore",
			"label": "bangalore",
			"seq": "20,28"
		}]
	},
	{
		"id": "002025caf73746c88b16cc4f2bf21525",
		"question": "What is the nationality of the chancellor who was served by Michael Mayr?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Michael_Mayr> <http://dbpedia.org/ontology/deputy> ?x . ?x <http://dbpedia.org/ontology/nationality> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Chancellor>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deputy",
			"label": "by",
			"seq": "57,58"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Chancellor",
			"label": "chancellor",
			"seq": "31,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Mayr",
			"label": "michael",
			"seq": "60,66"
		}]
	},
	{
		"id": "2abf11e1cda543c4af0fb7aae25e6563",
		"question": "Is joel quenneville the main coach of Chicago Blackhawks?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Chicago_Blackhawks> <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Joel_Quenneville> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headCoach",
			"label": "coach",
			"seq": "29,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chicago_Blackhawks",
			"label": "blackhawks chicago",
			"seq": "38,55"
		}, {
			"uri": "http://dbpedia.org/resource/Joel_Quenneville",
			"label": "quenneville joel",
			"seq": "3,18"
		}]
	},
	{
		"id": "0cc6db94bbc44a198411909a855a2d2a",
		"question": "Quebec born ice hockey players have stopped playing for which teams?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Quebec> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/IceHockeyPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "players",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "62,66"
		}, {
			"uri": "http://dbpedia.org/ontology/IceHockeyPlayer",
			"label": "hockey",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Quebec",
			"label": "quebec",
			"seq": "0,5"
		}]
	},
	{
		"id": "17ff67b500a04c5193fed5a413a9a9ec",
		"question": "How many genres gave birth to other genres which emphasize Bass Guitars?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/instruments> <http://dbpedia.org/resource/Bass_guitar> . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicGenre>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/instruments",
			"label": "birth",
			"seq": "21,25"
		}, {
			"uri": "http://dbpedia.org/ontology/stylisticOrigin",
			"label": "to",
			"seq": "27,28"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicGenre",
			"label": "genres",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bass_guitar",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e5147d9405b647ccba833c959572483d",
		"question": "Which info. appliance is manufactured by Asus and is the predecessor of PS 2?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/PlayStation_2> . ?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Asus>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "57,67"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "25,36"
		}, {
			"uri": "http://dbpedia.org/ontology/InformationAppliance",
			"label": "appliance",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PlayStation_2",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Asus",
			"label": "asus",
			"seq": "41,44"
		}]
	},
	{
		"id": "d1d052fa4410465f98e14f968dcd449c",
		"question": "Where do employees of Deroit Red Wings live?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/Detroit_Red_Wings> . ?x <http://dbpedia.org/ontology/residence> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "employees",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "red",
			"seq": "29,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Detroit_Red_Wings",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d50016797b5a4629bbadbde2ff37db36",
		"question": "Who developed the software for the operating system of Macintosh Quadra 660AV ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Macintosh_Quadra_660AV> <http://dbpedia.org/ontology/operatingSystem> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating system",
			"seq": "35,50"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "18,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Macintosh_Quadra_660AV",
			"label": "macintosh quadra 660av",
			"seq": "55,76"
		}]
	},
	{
		"id": "7cf3cea4cd174416bb524f55c19cdcf9",
		"question": "Who is the writer with notable works like Adventures of Huckleberry Finn and The Adventures of Tom Sawyer?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Adventures_of_Huckleberry_Finn> . ?uri <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "notable",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "notable",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writer",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Adventures_of_Huckleberry_Finn",
			"label": "huckleberry adventures finn",
			"seq": "42,68"
		}, {
			"uri": "http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer",
			"label": "adventures sawyer",
			"seq": "42,58"
		}]
	},
	{
		"id": "3ea9b079d22b43dcb2ff7969eb24f3cd",
		"question": "How many politicians are there from the city of Ganges?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ganges> <http://dbpedia.org/property/city> ?x . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "city",
			"seq": "40,43"
		}, {
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "are",
			"seq": "21,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ganges",
			"label": "ganges",
			"seq": "48,53"
		}]
	},
	{
		"id": "eb2d086a990849edbedf1e67a5489fc7",
		"question": "What genre's softwares are released with a GNU GPL license?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/license> <http://dbpedia.org/resource/GNU_General_Public_License> . ?x <http://dbpedia.org/property/genre> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/license",
			"label": "license",
			"seq": "51,57"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "genre's",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/GNU_General_Public_License",
			"label": "license",
			"seq": "51,57"
		}]
	},
	{
		"id": "742fc3c32535483d84f660a50956fc0c",
		"question": "How many shows are made by Playtone?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Playtone>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Playtone",
			"label": "playtone",
			"seq": "27,34"
		}]
	},
	{
		"id": "c3f02e6afc5c4437933fc26320fd4915",
		"question": "Name the monarch of L Buwei ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/L\u00fc_Buwei> <http://dbpedia.org/ontology/monarch> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/monarch",
			"label": "monarch",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/L\u00fc_Buwei",
			"label": "buwei l",
			"seq": "20,26"
		}]
	},
	{
		"id": "e3178cfe799a4542bc1c07f4d8fa0891",
		"question": "Which soccer clubs are in the Liga Divisi Utama?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/season> <http://dbpedia.org/resource/Liga_Divisi_Utama> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/season",
			"label": "soccer",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/name",
			"label": "are",
			"seq": "19,21"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClub",
			"label": "soccer",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Liga_Divisi_Utama",
			"label": "divisi utama liga",
			"seq": "30,46"
		}]
	},
	{
		"id": "d59ce804d5d8423f926b5278793e6750",
		"question": "Who were the commanders during the events which took place in Sandusky County, Ohio?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Sandusky_County,_Ohio> . ?x <http://dbpedia.org/ontology/commander> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/place",
			"label": "place",
			"seq": "53,57"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "13,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Event",
			"label": "events",
			"seq": "35,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sandusky_County,_Ohio",
			"label": "sandusky county, ohio",
			"seq": "62,82"
		}]
	},
	{
		"id": "032d3755146e42a3be21305ce7766f9a",
		"question": "What religion is practiced by Hirunika Premachandra, and many others south asians in Hong Kong?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Asians_in_Hong_Kong> <http://dbpedia.org/ontology/religion> ?uri. <http://dbpedia.org/resource/Hirunika_Premachandra> <http://dbpedia.org/property/religion> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "5,12"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "religion",
			"seq": "5,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Asians_in_Hong_Kong",
			"label": "asians south",
			"seq": "69,80"
		}, {
			"uri": "http://dbpedia.org/resource/Hirunika_Premachandra",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "35bf7919ccd9471fb67f5bd38ff7fbc7",
		"question": "What are the movies whose editor died in Westwood, Los Angeles?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Westwood,_Los_Angeles> . ?uri <http://dbpedia.org/ontology/editing> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "editor",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Westwood,_Los_Angeles",
			"label": "westwood, angeles",
			"seq": "41,57"
		}]
	},
	{
		"id": "83a20f11faf04a29a327446573eef42a",
		"question": "Who is the distributer of Rev ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rev_(drink)> <http://dbpedia.org/property/distributor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributer",
			"seq": "11,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rev_(drink)",
			"label": "rev",
			"seq": "26,28"
		}]
	},
	{
		"id": "7380ef507d0a4475822c823d403e5033",
		"question": "In how many places can I find people who were the architects of the Dundas Castle?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Dundas_Castle_(Roscoe,_New_York)> <http://dbpedia.org/property/architecture> ?x . ?x <http://dbpedia.org/property/region> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architecture",
			"label": "architects",
			"seq": "50,59"
		}, {
			"uri": "http://dbpedia.org/property/region",
			"label": "in",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dundas_Castle_(Roscoe,_New_York)",
			"label": "dundas castle",
			"seq": "68,80"
		}]
	},
	{
		"id": "0a39dc60f7d4418592e0d1d5426c7c5a",
		"question": "Which TNT show has Christopher Franke as artist?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> . ?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/TNT_(TV_channel)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "41,46"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "franke",
			"seq": "31,36"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "10,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christopher_Franke",
			"label": "christopher franke",
			"seq": "19,36"
		}, {
			"uri": "http://dbpedia.org/resource/TNT_(TV_channel)",
			"label": "tnt",
			"seq": "6,8"
		}]
	},
	{
		"id": "f6e3042fcf724895aafc057cd69770c5",
		"question": "List all that flows into the north sea?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/North_Sea> <http://dbpedia.org/property/inflow> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/inflow",
			"label": "flows",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North_Sea",
			"label": "north",
			"seq": "29,33"
		}]
	},
	{
		"id": "359b620b592a44929007db93e8aecd72",
		"question": "List the relatives of Lyubov Dostoyevskaya ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lyubov_Dostoyevskaya> <http://dbpedia.org/property/relatives> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lyubov_Dostoyevskaya",
			"label": "dostoyevskaya lyubov",
			"seq": "22,41"
		}]
	},
	{
		"id": "7bd1752d4a3843d1b75a99a3c4131114",
		"question": "Where did the genres originate which can found in The Mudbloods?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Mudbloods> <http://dbpedia.org/property/genre> ?x . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/genre",
			"label": "genres",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/stylisticOrigin",
			"label": "originate",
			"seq": "21,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Mudbloods",
			"label": "mudbloods the",
			"seq": "10,22"
		}]
	},
	{
		"id": "9fe4e52ceac346d898b87b58552de0de",
		"question": "List all the record label distributed by the distributor of Zune ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Zune> . ?x <http://dbpedia.org/property/distributor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributor",
			"seq": "45,55"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributor",
			"seq": "45,55"
		}, {
			"uri": "http://dbpedia.org/ontology/RecordLabel",
			"label": "record label",
			"seq": "13,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zune",
			"label": "zune",
			"seq": "60,63"
		}]
	},
	{
		"id": "6bd942c2f0cd4533bdc21957bc6bd75f",
		"question": "Count the movies in Swedish language?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/language",
			"label": "language",
			"seq": "28,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "in",
			"seq": "17,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Swedish_language",
			"label": "language swedish",
			"seq": "20,35"
		}]
	},
	{
		"id": "814cd09a47ce48cea2ad776e1e753a16",
		"question": "Name the artist of Brad Paisley discography ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brad_Paisley_discography> <http://dbpedia.org/property/artist> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brad_Paisley_discography",
			"label": "discography paisley brad",
			"seq": "19,42"
		}]
	},
	{
		"id": "0d4bdac144b6458296c5c93ebacb1789",
		"question": "From how many works is the musical derived, whose lyrics are written by Sheldon Harnick?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/lyrics> <http://dbpedia.org/resource/Sheldon_Harnick> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/lyrics",
			"label": "lyrics",
			"seq": "50,55"
		}, {
			"uri": "http://dbpedia.org/ontology/basedOn",
			"label": "sheldon",
			"seq": "72,78"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sheldon_Harnick",
			"label": "sheldon harnick",
			"seq": "72,86"
		}]
	},
	{
		"id": "0b977445d3f142d3a514eb59c55000fd",
		"question": "In which fields are pupils of Edouard Chavannes working?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/\u00c9douard_Chavannes> . ?x <http://dbpedia.org/property/fields> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicAdvisor",
			"label": "edouard",
			"seq": "30,36"
		}, {
			"uri": "http://dbpedia.org/property/fields",
			"label": "fields",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/\u00c9douard_Chavannes",
			"label": "chavannes",
			"seq": "38,46"
		}]
	},
	{
		"id": "b0da89aed7ff4c92808e7fc7e914f868",
		"question": "Name the  borough of the Bordesley railway station which is also the route end of the Birmingham and Oxford Junction Railway?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bordesley_railway_station> <http://dbpedia.org/property/borough> ?uri. <http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway> <http://dbpedia.org/ontology/routeEnd> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/borough",
			"label": "borough",
			"seq": "10,16"
		}, {
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "route end",
			"seq": "69,77"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bordesley_railway_station",
			"label": "bordesley station railway",
			"seq": "25,49"
		}, {
			"uri": "http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway",
			"label": "birmingham junction railway oxford",
			"seq": "35,68"
		}]
	},
	{
		"id": "017a115aacc2455e86ab1e3924f75e23",
		"question": "List all discipline of the journals whose one of the discipline is Cerebral blood flow ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/academicDiscipline> <http://dbpedia.org/resource/Cerebral_blood_flow> . ?x <http://dbpedia.org/ontology/academicDiscipline> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "discipline",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "discipline",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/AcademicJournal",
			"label": "journals",
			"seq": "27,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cerebral_blood_flow",
			"label": "cerebral blood flow",
			"seq": "67,85"
		}]
	},
	{
		"id": "be045d0165ce481b9924bae470be2f0f",
		"question": "How many politicians live in India?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/India>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "in",
			"seq": "26,27"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "how",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/India",
			"label": "india",
			"seq": "29,33"
		}]
	},
	{
		"id": "24dffcdf54ea418ca45309b87e1089d3",
		"question": "Matthew kane and Park rankin are citizens of which country?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Matthew_Kane_(actor)> <http://dbpedia.org/ontology/citizenship> ?uri. <http://dbpedia.org/resource/Park_Rankin> <http://dbpedia.org/ontology/citizenship> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "citizens",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "citizens",
			"seq": "33,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Matthew_Kane_(actor)",
			"label": "matthew kane",
			"seq": "0,11"
		}, {
			"uri": "http://dbpedia.org/resource/Park_Rankin",
			"label": "rankin park",
			"seq": "17,27"
		}]
	},
	{
		"id": "24ee24bf221e4289bf99c0ed742a27fe",
		"question": "In how many places can I find people whose alma mater was in bachelor of arts?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Bachelor_of_Arts> . ?x <http://dbpedia.org/ontology/residence> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "43,52"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "in",
			"seq": "0,1"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bachelor_of_Arts",
			"label": "bachelor arts",
			"seq": "61,73"
		}]
	},
	{
		"id": "6ef5a08456594a85bc7216c671ad1076",
		"question": "Which maintainer of Cheasty Boulevard South is also the city of Soccer Bowl' 76 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Soccer_Bowl_'76> <http://dbpedia.org/ontology/city> ?uri. <http://dbpedia.org/resource/Cheasty_Boulevard_South> <http://dbpedia.org/ontology/maintainedBy> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "city",
			"seq": "56,59"
		}, {
			"uri": "http://dbpedia.org/ontology/maintainedBy",
			"label": "maintainer",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Soccer_Bowl_'76",
			"label": "soccer",
			"seq": "64,69"
		}, {
			"uri": "http://dbpedia.org/resource/Cheasty_Boulevard_South",
			"label": "boulevard cheasty south",
			"seq": "20,42"
		}]
	},
	{
		"id": "1f3c3fc3666b4644bccdab14b6502a1c",
		"question": "Whose associate is Publius Servilius Vatia Isauricus and has predecessor as Lucius Cornelius Lentulus Crus?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Publius_Servilius_Vatia_Isauricus_(consul_48_BC)> . ?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Lucius_Cornelius_Lentulus_Crus>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associate",
			"label": "associate",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "61,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Publius_Servilius_Vatia_Isauricus_(consul_48_BC)",
			"label": "servilius isauricus publius vatia",
			"seq": "19,51"
		}, {
			"uri": "http://dbpedia.org/resource/Lucius_Cornelius_Lentulus_Crus",
			"label": "cornelius lentulus lucius",
			"seq": "76,100"
		}]
	},
	{
		"id": "544710c8a2214cd9acd7c3d8f6426535",
		"question": "Who is the producer of the device which is the operating system of Now TV  ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Now_TV_(UK)> <http://dbpedia.org/ontology/operatingSystem> ?x . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating system",
			"seq": "47,62"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "producer",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Now_TV_(UK)",
			"label": "now tv",
			"seq": "67,72"
		}]
	},
	{
		"id": "e36eb17b3221405197c89bc804df06cb",
		"question": "What was the stadium of Panionios G.S.S. in 2014-15 season ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2014\u201315_Panionios_G.S.S._season> <http://dbpedia.org/property/stadium> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/stadium",
			"label": "stadium",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2014\u201315_Panionios_G.S.S._season",
			"label": "panionios season g.s.s.",
			"seq": "24,46"
		}]
	},
	{
		"id": "12126746eda842aa8fcca0253a6905bb",
		"question": "Where is the debut team of Shaquil Barrett located?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Shaquil_Barrett> <http://dbpedia.org/property/debutteam> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut team",
			"seq": "13,22"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "located",
			"seq": "43,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shaquil_Barrett",
			"label": "shaquil barrett",
			"seq": "27,41"
		}]
	},
	{
		"id": "55e5eb722be04ed0818176f887603e97",
		"question": "What are the musicals based on, whose lyricist was Shelon Harnick?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/lyrics> <http://dbpedia.org/resource/Sheldon_Harnick> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/lyrics",
			"label": "lyricist",
			"seq": "38,45"
		}, {
			"uri": "http://dbpedia.org/ontology/basedOn",
			"label": "based",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Musical",
			"label": "musicals",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sheldon_Harnick",
			"label": "harnick",
			"seq": "58,64"
		}]
	},
	{
		"id": "6aa2c0fad7224aab875e00964e242d8b",
		"question": "Who wrote a rose for emily?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/A_Rose_for_Emily>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "wrote",
			"seq": "4,8"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "wrote",
			"seq": "4,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A_Rose_for_Emily",
			"label": "emily rose for",
			"seq": "12,25"
		}]
	},
	{
		"id": "12be635cc767416c9654991d6847a5a9",
		"question": "Which were the philosophers whose primary interest was Natural philosophy?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Natural_philosophy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Philosopher>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "interest",
			"seq": "42,49"
		}, {
			"uri": "http://dbpedia.org/ontology/Philosopher",
			"label": "philosophers",
			"seq": "15,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Natural_philosophy",
			"label": "philosophy",
			"seq": "63,72"
		}]
	},
	{
		"id": "a7fe79af1995496f9ee76331f0d5ebb5",
		"question": "Which animator of Tommy Ticker's Tooth is also the director of The Haunted house ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tommy_Tucker's_Tooth> <http://dbpedia.org/property/animator> ?uri. <http://dbpedia.org/resource/The_Haunted_House_(1929_film)> <http://dbpedia.org/ontology/director> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/animator",
			"label": "animator",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/director",
			"label": "director",
			"seq": "51,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tommy_Tucker's_Tooth",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/The_Haunted_House_(1929_film)",
			"label": "haunted house",
			"seq": "67,79"
		}]
	},
	{
		"id": "fdc1a6168b3544c294fcb5c5d4bd3de5",
		"question": "Who is relative of the people died in Bergen-Belsen concentration camp ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/Bergen-Belsen_concentration_camp> . ?x <http://dbpedia.org/ontology/relative> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "people",
			"seq": "23,28"
		}, {
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relative",
			"seq": "7,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bergen-Belsen_concentration_camp",
			"label": "concentration bergen-belsen",
			"seq": "38,64"
		}]
	},
	{
		"id": "de9f7d4ab7234f029fe2a69b1fb26c8e",
		"question": "How many games are played at universities affiliated with the Association of Southeast Asian Institutions of Higher Learning?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/Association_of_Southeast_Asian_Institutions_of_Higher_Learning> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "affiliated",
			"seq": "42,51"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "southeast",
			"seq": "77,85"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Association_of_Southeast_Asian_Institutions_of_Higher_Learning",
			"label": "institutions association southeast learning higher",
			"seq": "62,111"
		}]
	},
	{
		"id": "1386583d5c3243a7a2eef959681226b1",
		"question": "From which country did the Mauritius bank and the national commerce bank emerge?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/National_Commercial_Bank_Mauritius> <http://dbpedia.org/property/locationCountry> ?uri. <http://dbpedia.org/resource/Mauritius_Bank> <http://dbpedia.org/property/locationCountry> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "country",
			"seq": "11,17"
		}, {
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "country",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Commercial_Bank_Mauritius",
			"label": "mauritius national",
			"seq": "27,44"
		}, {
			"uri": "http://dbpedia.org/resource/Mauritius_Bank",
			"label": "mauritius bank",
			"seq": "27,40"
		}]
	},
	{
		"id": "0b0f5461ad2f46cca3c708ffefeac368",
		"question": "Was the Lotuspool Records distributed by Napster?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Lotuspool_Records> <http://dbpedia.org/ontology/distributingLabel> <http://dbpedia.org/resource/Napster> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributingLabel",
			"label": "distributed",
			"seq": "26,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lotuspool_Records",
			"label": "lotuspool records",
			"seq": "8,24"
		}, {
			"uri": "http://dbpedia.org/resource/Napster",
			"label": "napster",
			"seq": "41,47"
		}]
	},
	{
		"id": "07124083be6249ff961e6ea104195239",
		"question": "List all the artist of albums which have been produced by Stephen Kozmeniuk ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_Kozmeniuk> . ?x <http://dbpedia.org/property/artist> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "produced",
			"seq": "46,53"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Album",
			"label": "albums",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stephen_Kozmeniuk",
			"label": "kozmeniuk stephen",
			"seq": "58,74"
		}]
	},
	{
		"id": "95cbbbabb49c4cf6a010c6ea3c230633",
		"question": "Count the tenants of the stadiums designed by Populous?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Populous_(company)> . ?x <http://dbpedia.org/ontology/tenant> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architect",
			"label": "tenants",
			"seq": "10,16"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenants",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Populous_(company)",
			"label": "populous",
			"seq": "46,53"
		}]
	},
	{
		"id": "5e96bbf76e3e40b2a62b009a2c1e48ea",
		"question": "Where does the network cofounded by Seewoosagur Ramgoolam air its shows?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Seewoosagur_Ramgoolam> . ?x <http://dbpedia.org/property/broadcastArea> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "cofounded",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/property/broadcastArea",
			"label": "ramgoolam",
			"seq": "48,56"
		}, {
			"uri": "http://dbpedia.org/ontology/BroadcastNetwork",
			"label": "network",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Seewoosagur_Ramgoolam",
			"label": "seewoosagur ramgoolam",
			"seq": "36,56"
		}]
	},
	{
		"id": "d3ecdd7378e84976bf9901e34d96544d",
		"question": "Which sports exist in the universities whose president is Emanuel de Guzman?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Emanuel_de_Guzman> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "45,53"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "26,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Emanuel_de_Guzman",
			"label": "emanuel guzman",
			"seq": "58,71"
		}]
	},
	{
		"id": "9ddba4eb7a16400f906e88d1c0390a79",
		"question": "Count the different number of academic areas covered by publications of SAGE?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/SAGE_Publications> . ?x <http://dbpedia.org/ontology/academicDiscipline> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/publisher",
			"label": "publications",
			"seq": "56,67"
		}, {
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "academic",
			"seq": "30,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/SAGE_Publications",
			"label": "publications sage",
			"seq": "56,72"
		}]
	},
	{
		"id": "abcce0946b3a4c748fd0c8a9f5cf1030",
		"question": "Which memeber of South Asia SubRegional Economic cooperation is also the nationality of Aishath saffa ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Asia_Subregional_Economic_Cooperation> <http://dbpedia.org/property/membership> ?uri. <http://dbpedia.org/resource/Aishath_Saffa> <http://dbpedia.org/property/nationality> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/membership",
			"label": "memeber",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/property/nationality",
			"label": "nationality",
			"seq": "73,83"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Asia_Subregional_Economic_Cooperation",
			"label": "subregional cooperation economic",
			"seq": "28,59"
		}, {
			"uri": "http://dbpedia.org/resource/Aishath_Saffa",
			"label": "aishath saffa",
			"seq": "88,100"
		}]
	},
	{
		"id": "6ede8437feee4a37a3076b1deb866abd",
		"question": "What faiths are followed by the relatives of Meadow Soprano?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Meadow_Soprano> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "relatives",
			"seq": "32,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Meadow_Soprano",
			"label": "soprano meadow",
			"seq": "45,58"
		}]
	},
	{
		"id": "1b61bd94b11c4641a1bb7d0601c0fdb5",
		"question": "What is the purpose of Maharashtra Chess Association ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maharashtra_Chess_Association> <http://dbpedia.org/property/purpose> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/purpose",
			"label": "purpose",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maharashtra_Chess_Association",
			"label": "maharashtra association chess",
			"seq": "23,51"
		}]
	},
	{
		"id": "b9b3fd57293c4776b2e52370d4d5c3be",
		"question": "What is the address of Federal Reserve Bank Building?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Federal_Reserve_Bank_Building_(Seattle)> <http://dbpedia.org/property/address> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/address",
			"label": "address",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Federal_Reserve_Bank_Building_(Seattle)",
			"label": "building reserve federal",
			"seq": "23,46"
		}]
	},
	{
		"id": "85bb3f36d96d48e4aa43e98a78de40a0",
		"question": "Where did the scientist study whose doctoral thesis was supervised by Leonard Lerman?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Leonard_Lerman> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "doctoral",
			"seq": "36,43"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "lerman",
			"seq": "78,83"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Leonard_Lerman",
			"label": "leonard lerman",
			"seq": "70,83"
		}]
	},
	{
		"id": "2d38fec5592147719347d2df292f9cc2",
		"question": "What is the common official residence of Lezlee Westine and Arnold W. Braswell?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lezlee_Westine> <http://dbpedia.org/property/residence> ?uri. <http://dbpedia.org/resource/Arnold_W._Braswell> <http://dbpedia.org/property/residence> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "residence",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/property/residence",
			"label": "residence",
			"seq": "28,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lezlee_Westine",
			"label": "westine lezlee",
			"seq": "41,54"
		}, {
			"uri": "http://dbpedia.org/resource/Arnold_W._Braswell",
			"label": "braswell arnold",
			"seq": "60,74"
		}]
	},
	{
		"id": "d6eb5633d2524379863ad29551cf0089",
		"question": "Louis Dunbar is the coach of which basketball team ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Louis_Dunbar>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballTeam>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coach",
			"label": "coach",
			"seq": "20,24"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballTeam",
			"label": "basketball team",
			"seq": "35,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Louis_Dunbar",
			"label": "dunbar louis",
			"seq": "0,11"
		}]
	},
	{
		"id": "dd780a7e6bf64bb79d2fa4c410ffed93",
		"question": "Do the White Plains Road lie in the Bronx county?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/White_Plains_Road> <http://dbpedia.org/property/counties> <http://dbpedia.org/resource/The_Bronx> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/counties",
			"label": "county",
			"seq": "42,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/White_Plains_Road",
			"label": "plains white road",
			"seq": "7,23"
		}, {
			"uri": "http://dbpedia.org/resource/The_Bronx",
			"label": "bronx the",
			"seq": "3,11"
		}]
	},
	{
		"id": "126d01b992474e93bfe3b2d990e937a9",
		"question": "Which river flows through Hudson Highlands State park and also through Troy, New york ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hudson_Highlands_State_Park> <http://dbpedia.org/property/river> ?uri. <http://dbpedia.org/resource/Troy,_New_York> <http://dbpedia.org/ontology/river> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/river",
			"label": "river",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/river",
			"label": "river",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hudson_Highlands_State_Park",
			"label": "highlands hudson state park",
			"seq": "26,52"
		}, {
			"uri": "http://dbpedia.org/resource/Troy,_New_York",
			"label": "troy, york new",
			"seq": "71,84"
		}]
	},
	{
		"id": "fab4c2ac4f1446c4a58ec053f26940c8",
		"question": "Is US Navy garrisoned at Arlington County, Virginia?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/garrison",
			"label": "garrisoned",
			"seq": "11,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Navy",
			"label": "navy",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/resource/Arlington_County,_Virginia",
			"label": "arlington virginia county,",
			"seq": "25,50"
		}]
	},
	{
		"id": "9bc8183073c74276b2a202d642cd74d7",
		"question": "Which university attended by Franklin W. Olin was also the alma mater of Patty Lin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Patty_Lin> <http://dbpedia.org/property/almaMater> ?uri. <http://dbpedia.org/resource/Franklin_W._Olin> <http://dbpedia.org/property/education> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "59,68"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "attended",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Patty_Lin",
			"label": "patty lin",
			"seq": "34,42"
		}, {
			"uri": "http://dbpedia.org/resource/Franklin_W._Olin",
			"label": "franklin olin",
			"seq": "29,41"
		}]
	},
	{
		"id": "342858bf3dc442ba9b8a65d63c8ece94",
		"question": "What river is it whose source is Dowra?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Dowra>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceLocation",
			"label": "source",
			"seq": "23,28"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dowra",
			"label": "dowra",
			"seq": "33,37"
		}]
	},
	{
		"id": "4e89ed7d56bd4a77bb72e76dbb6feb5c",
		"question": "Who was the voice actor of allen walker also gave voice to kimihiro watanuki?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allen_Walker> <http://dbpedia.org/ontology/voice> ?uri. <http://dbpedia.org/resource/Kimihiro_Watanuki> <http://dbpedia.org/ontology/voice> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/voice",
			"label": "voice",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/voice",
			"label": "voice",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Allen_Walker",
			"label": "walker allen",
			"seq": "27,38"
		}, {
			"uri": "http://dbpedia.org/resource/Kimihiro_Watanuki",
			"label": "watanuki kimihiro",
			"seq": "59,75"
		}]
	},
	{
		"id": "d36b821cc4c947d19cf3ec17ad87e9c2",
		"question": "What is the country of origin of the president of Skai group?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Skai_Group> <http://dbpedia.org/ontology/keyPerson> ?x . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "president",
			"seq": "37,45"
		}, {
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "origin",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Skai_Group",
			"label": "group skai",
			"seq": "50,59"
		}]
	},
	{
		"id": "811423e6b0814c93a5bb6474579e9557",
		"question": "Name the company who owns HBO division?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/divisions> <http://dbpedia.org/resource/HBO>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/divisions",
			"label": "division",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/HBO",
			"label": "hbo",
			"seq": "26,28"
		}]
	},
	{
		"id": "78fb0be825cc4440b068e0a54c769e23",
		"question": "What is the launch site of Aquarius (rocket) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aquarius_(rocket)> <http://dbpedia.org/ontology/launchSite> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launch site",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Aquarius_(rocket)",
			"label": "aquarius (rocket)",
			"seq": "27,43"
		}]
	},
	{
		"id": "9a8d8cab24774d4eb9fe49d063f80906",
		"question": "Name the movies distributed by Cinema International Corporation and edited by Hulian Doyle ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Julian_Doyle_(filmmaker)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "16,26"
		}, {
			"uri": "http://dbpedia.org/property/editing",
			"label": "edited",
			"seq": "68,73"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "cinema",
			"seq": "31,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cinema_International_Corporation",
			"label": "international corporation cinema",
			"seq": "31,62"
		}, {
			"uri": "http://dbpedia.org/resource/Julian_Doyle_(filmmaker)",
			"label": "doyle",
			"seq": "85,89"
		}]
	},
	{
		"id": "6624d8c2fb524ee1ac7268162e60b577",
		"question": "Name a writer who was educated in Saint Petersburg and had a son named Lyubov Dostoyevskaya ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Saint_Petersburg> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Lyubov_Dostoyevskaya>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/education",
			"label": "educated",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/child",
			"label": "had",
			"seq": "55,57"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writer",
			"seq": "7,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saint_Petersburg",
			"label": "petersburg saint",
			"seq": "34,49"
		}, {
			"uri": "http://dbpedia.org/resource/Lyubov_Dostoyevskaya",
			"label": "dostoyevskaya lyubov",
			"seq": "71,90"
		}]
	},
	{
		"id": "6714d1031ae14213adee9f44469e2854",
		"question": "What is the source location of Thornton Creek ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thornton_Creek> <http://dbpedia.org/property/sourceLocation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceLocation",
			"label": "location source",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thornton_Creek",
			"label": "thornton creek",
			"seq": "31,44"
		}]
	},
	{
		"id": "c1c5e91af8da4014b4bcf17b0918ff88",
		"question": "What are shows whose theme music composer's home town is New York?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/New_York> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "44,52"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composer's",
			"seq": "33,42"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York",
			"label": "york new",
			"seq": "57,64"
		}]
	},
	{
		"id": "629e52550fd146e191ec02ae20114735",
		"question": "What is the common relegion of Miao people  and the country where Guru Purnima is celebrated ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Miao_people> <http://dbpedia.org/ontology/religion> ?uri. <http://dbpedia.org/resource/Guru_Purnima> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "relegion",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "52,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miao_people",
			"label": "people miao",
			"seq": "31,41"
		}, {
			"uri": "http://dbpedia.org/resource/Guru_Purnima",
			"label": "purnima guru",
			"seq": "66,77"
		}]
	},
	{
		"id": "bd4cb94b69084d79b0d1feb1fc8b014d",
		"question": "Where did the relatives of Gustavo Rojas Pinilla study?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Gustavo_Rojas_Pinilla> . ?x <http://dbpedia.org/property/almaMater> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "relatives",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gustavo_Rojas_Pinilla",
			"label": "pinilla gustavo rojas",
			"seq": "27,47"
		}]
	},
	{
		"id": "a1ee8ce5878d45029ef38e6d7fbb5483",
		"question": "List the magazines published by Playbow Enterprises ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Playboy_Enterprises>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "published",
			"seq": "19,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Magazine",
			"label": "magazines",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Playboy_Enterprises",
			"label": "enterprises",
			"seq": "40,50"
		}]
	},
	{
		"id": "c19fedddfc0041919699b9a01eb5cbd1",
		"question": "Is the song Killing is Out, School is in belong in the The Next Step?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Killing_Is_Out,_School_Is_In> <http://dbpedia.org/property/album> <http://dbpedia.org/resource/The_Next_Step_(James_Brown_album)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/album",
			"label": "out,",
			"seq": "23,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Killing_Is_Out,_School_Is_In",
			"label": "killing school out,",
			"seq": "12,30"
		}, {
			"uri": "http://dbpedia.org/resource/The_Next_Step_(James_Brown_album)",
			"label": "step next the",
			"seq": "3,15"
		}]
	},
	{
		"id": "5916bbcd6e894955885d10526c5bd306",
		"question": "What are some dishes from the family of dishes which primarily use flour?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Flour> . ?uri <http://dbpedia.org/ontology/type> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainIngredient",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/type",
			"label": "the",
			"seq": "26,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Food",
			"label": "from",
			"seq": "21,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Flour",
			"label": "flour",
			"seq": "67,71"
		}]
	},
	{
		"id": "7788c912b6fb4457b27be58ee6f63052",
		"question": "Who is the author of Heroman is also the author of Karakuri Dji Ultimo ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heroman> <http://dbpedia.org/property/author> ?uri. <http://dbpedia.org/resource/Karakuri_D\u00f4ji_Ultimo> <http://dbpedia.org/ontology/author> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "author",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "author",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Heroman",
			"label": "heroman",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/resource/Karakuri_D\u00f4ji_Ultimo",
			"label": "karakuri ultimo",
			"seq": "51,65"
		}]
	},
	{
		"id": "87c2b3cad3274c52bfc6f11ef62b71dc",
		"question": "Which appliance's CPU is Cell (microprocessor) and predecessor is PlayStation 2?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Cell_(microprocessor)> . ?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/PlayStation_2>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cpu",
			"label": "cpu",
			"seq": "18,20"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "51,61"
		}, {
			"uri": "http://dbpedia.org/ontology/InformationAppliance",
			"label": "appliance's",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cell_(microprocessor)",
			"label": "(microprocessor)",
			"seq": "30,45"
		}, {
			"uri": "http://dbpedia.org/resource/PlayStation_2",
			"label": "playstation",
			"seq": "66,76"
		}]
	},
	{
		"id": "38c76f79fd67475680c99f38f3808b86",
		"question": "Name the television show which was developed by Brian Graden and distributed by Comedy Central?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Brian_Graden> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "developed",
			"seq": "35,43"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "65,75"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brian_Graden",
			"label": "graden brian",
			"seq": "48,59"
		}, {
			"uri": "http://dbpedia.org/resource/Comedy_Central",
			"label": "central comedy",
			"seq": "80,93"
		}]
	},
	{
		"id": "4b3b5256bbe842d685027d2c18454d38",
		"question": "Was Blade Runner cinematographed by JordanCronenweth?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Blade_Runner> <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cinematography",
			"label": "cinematographed",
			"seq": "17,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blade_Runner",
			"label": "runner blade",
			"seq": "4,15"
		}, {
			"uri": "http://dbpedia.org/resource/Jordan_Cronenweth",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "32b2c4d11f454f249137145bca18e285",
		"question": "What team had the debut of Marv Throneberry and Curt Coleman?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marv_Throneberry> <http://dbpedia.org/property/debutteam> ?uri. <http://dbpedia.org/resource/Curt_Coleman> <http://dbpedia.org/ontology/debutTeam> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut team",
			"seq": "5,14"
		}, {
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debut team",
			"seq": "5,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marv_Throneberry",
			"label": "throneberry marv",
			"seq": "27,42"
		}, {
			"uri": "http://dbpedia.org/resource/Curt_Coleman",
			"label": "coleman curt",
			"seq": "48,59"
		}]
	},
	{
		"id": "ff4d3c67a6884976a4f27a81882a97cd",
		"question": "Count the number of software which runs on Microsoft Windows and mac OS ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> . ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Mac_OS>} ",
		"sparql_id": "107",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "runs",
			"seq": "35,38"
		}, {
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "runs",
			"seq": "35,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Windows",
			"label": "microsoft windows",
			"seq": "43,59"
		}, {
			"uri": "http://dbpedia.org/resource/Mac_OS",
			"label": "mac",
			"seq": "65,67"
		}]
	},
	{
		"id": "68843601f12e4f76a157d8e77cdd18b0",
		"question": "What has Carl Sagan written his books about?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Carl_Sagan> . ?x <http://dbpedia.org/property/subject> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "about",
			"seq": "38,42"
		}, {
			"uri": "http://dbpedia.org/property/subject",
			"label": "about",
			"seq": "38,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "32,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carl_Sagan",
			"label": "sagan carl",
			"seq": "9,18"
		}]
	},
	{
		"id": "af581de0b01f4908a95d361a6416a13c",
		"question": "How many characters are there in The Office?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/The_Office_(U.S._TV_series)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/series",
			"label": "there",
			"seq": "24,28"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "characters",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Office_(U.S._TV_series)",
			"label": "office",
			"seq": "37,42"
		}]
	},
	{
		"id": "7f714f3175684adbb9eabea7b621ab24",
		"question": "What is the place of death of the lieutenant of Frank Steunenberg?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Frank_Steunenberg> <http://dbpedia.org/property/lieutenant> ?x . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/lieutenant",
			"label": "lieutenant",
			"seq": "34,43"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "place death of",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frank_Steunenberg",
			"label": "steunenberg frank",
			"seq": "48,64"
		}]
	},
	{
		"id": "c7127b97150141d8843721bc8b9fdc6f",
		"question": "What are the awards won by the film editor of World of Tomorrow ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/World_of_Tomorrow_(film)> <http://dbpedia.org/ontology/editing> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "editor",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/World_of_Tomorrow_(film)",
			"label": "tomorrow world film",
			"seq": "31,49"
		}]
	},
	{
		"id": "2f402439bfbf4bb3b37b919d64f80a13",
		"question": " Giuseppe Bertello and Pietro Parolin are leaders of which place ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Giuseppe_Bertello> . ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Pietro_Parolin> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leaders",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leaders",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "place",
			"seq": "59,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Giuseppe_Bertello",
			"label": "giuseppe bertello",
			"seq": "1,17"
		}, {
			"uri": "http://dbpedia.org/resource/Pietro_Parolin",
			"label": "parolin pietro",
			"seq": "23,36"
		}]
	},
	{
		"id": "8b2570a474e64d91bdf32a893692ac55",
		"question": "What are some TV shows similar to the one produced by Susie Liggat?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Susie_Liggat> . ?uri <http://dbpedia.org/ontology/related> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "produced",
			"seq": "42,49"
		}, {
			"uri": "http://dbpedia.org/ontology/related",
			"label": "liggat",
			"seq": "60,65"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "17,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Susie_Liggat",
			"label": "liggat susie",
			"seq": "54,65"
		}]
	},
	{
		"id": "f18825b526744c29b18f7b0a6dc10b80",
		"question": "How did the child of Stevens T. Mason die?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Stevens_Thomson_Mason_(Virginia)> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "child",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "the",
			"seq": "8,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stevens_Thomson_Mason_(Virginia)",
			"label": "stevens mason",
			"seq": "21,33"
		}]
	},
	{
		"id": "c66a34d84ddc42f89d6642978c5f9b1c",
		"question": "What is the faith of Kwai Chang Caine ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kwai_Chang_Caine> <http://dbpedia.org/ontology/religion> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "caine",
			"seq": "32,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kwai_Chang_Caine",
			"label": "chang caine kwai",
			"seq": "21,36"
		}]
	},
	{
		"id": "3624137271954fb984aa700614ac0115",
		"question": "Which soccer players are currently playing for NYC FC?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/New_York_City_FC>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "currently",
			"seq": "25,33"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerPlayer",
			"label": "soccer",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York_City_FC",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "2c7911e408ae48659b766c22f01fa785",
		"question": "Where does the river end which starts in Mazabuka?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Mazabuka> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "in",
			"seq": "38,39"
		}, {
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river",
			"seq": "15,19"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "15,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mazabuka",
			"label": "mazabuka",
			"seq": "41,48"
		}]
	},
	{
		"id": "ff0272acb02c43028e695cdae056b647",
		"question": "How many things are located in Ridgewood, New Jersey?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Ridgewood,_New_Jersey>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "located",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ridgewood,_New_Jersey",
			"label": "ridgewood, jersey new",
			"seq": "31,51"
		}]
	},
	{
		"id": "5939910c8f974ca1bf12a412dd886263",
		"question": "Name the mountain located in California and has parent peak as Nevado de Toluca ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/California> . ?uri <http://dbpedia.org/ontology/parentMountainPeak> <http://dbpedia.org/resource/Nevado_de_Toluca>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "located",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/parentMountainPeak",
			"label": "mountain parent peak",
			"seq": "9,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Mountain",
			"label": "mountain",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/California",
			"label": "california",
			"seq": "29,38"
		}, {
			"uri": "http://dbpedia.org/resource/Nevado_de_Toluca",
			"label": "toluca nevado",
			"seq": "63,75"
		}]
	},
	{
		"id": "705980cbb32844d780617bc238043841",
		"question": "What award has been given to Roy Walker as well as Walt Disney?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roy_Walker_(production_designer)> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Walt_Disney> <http://dbpedia.org/ontology/award> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "5,9"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Roy_Walker_(production_designer)",
			"label": "walker",
			"seq": "33,38"
		}, {
			"uri": "http://dbpedia.org/resource/Walt_Disney",
			"label": "disney walt",
			"seq": "51,61"
		}]
	},
	{
		"id": "785b260edcfd41099d8633106521b324",
		"question": "Name the branch of Carroll E. Lanier ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carroll_E._Lanier> <http://dbpedia.org/property/branch> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carroll_E._Lanier",
			"label": "carroll lanier",
			"seq": "19,32"
		}]
	},
	{
		"id": "a8e55935b3614b769945d3b60945948d",
		"question": "List the settlements area whose province is Metropolitan City of Venice ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/province> <http://dbpedia.org/resource/Metropolitan_City_of_Venice>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/province",
			"label": "province",
			"seq": "32,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Settlement",
			"label": "settlements",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Metropolitan_City_of_Venice",
			"label": "metropolitan venice",
			"seq": "44,62"
		}]
	},
	{
		"id": "a9bd73968852449abc9875ea0e72a3f9",
		"question": "Which television show's company is Paramount Television and is located in Boston?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television> . ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Boston>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "24,30"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "63,69"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paramount_Television",
			"label": "television paramount",
			"seq": "6,25"
		}, {
			"uri": "http://dbpedia.org/resource/Boston",
			"label": "boston",
			"seq": "74,79"
		}]
	},
	{
		"id": "fe3de671ec2f4322995f78f9bb33d11a",
		"question": "Which magazines were founded by ann Wenner ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Jann_Wenner>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founded",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Magazine",
			"label": "magazines",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jann_Wenner",
			"label": "wenner ann",
			"seq": "32,41"
		}]
	},
	{
		"id": "fa99333a084949f3b66f826593bd2652",
		"question": "What is the area of ITV (Thailand) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/ITV_(Thailand)> <http://dbpedia.org/property/area> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/area",
			"label": "area",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/ITV_(Thailand)",
			"label": "(thailand) itv",
			"seq": "20,33"
		}]
	},
	{
		"id": "1c12f743208140c4899ab63ce958d5c4",
		"question": "Name the presenter of Shirley Temple's Storybook ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Shirley_Temple's_Storybook> <http://dbpedia.org/property/presenter> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/presenter",
			"label": "presenter",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shirley_Temple's_Storybook",
			"label": "storybook temple's shirley",
			"seq": "22,47"
		}]
	},
	{
		"id": "f67831f30b7c4fcdb7f825ca4a09c5cf",
		"question": "Where was the trainer of Java Gold born?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Java_Gold> <http://dbpedia.org/property/trainer> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/trainer",
			"label": "trainer",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Java_Gold",
			"label": "java gold",
			"seq": "25,33"
		}]
	},
	{
		"id": "5545373a672f44b68c675c0fa2a9b8ac",
		"question": "Is the Vadodara railway junction onwed by Indian Railway Ministry?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/Ministry_of_Railways_(India)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningOrganisation",
			"label": "ministry",
			"seq": "57,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vadodara_Junction_railway_station",
			"label": "vadodara junction railway",
			"seq": "7,31"
		}, {
			"uri": "http://dbpedia.org/resource/Ministry_of_Railways_(India)",
			"label": "ministry railway",
			"seq": "16,31"
		}]
	},
	{
		"id": "965b4a0d6fcd45448babd3cd1a9d1850",
		"question": "Name the common managing club of the Ivan Toplak and Bret Simon?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ivan_Toplak> <http://dbpedia.org/ontology/managerClub> ?uri. <http://dbpedia.org/resource/Bret_Simon> <http://dbpedia.org/ontology/managerClub> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/managerClub",
			"label": "club",
			"seq": "25,28"
		}, {
			"uri": "http://dbpedia.org/ontology/managerClub",
			"label": "club",
			"seq": "25,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ivan_Toplak",
			"label": "toplak ivan",
			"seq": "37,47"
		}, {
			"uri": "http://dbpedia.org/resource/Bret_Simon",
			"label": "simon bret",
			"seq": "53,62"
		}]
	},
	{
		"id": "f4dfd8294d264888896ddcc6e971ef4b",
		"question": "What are the movies whose editor is Robert Wise?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Robert_Wise>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "editor",
			"seq": "26,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "33,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Wise",
			"label": "robert wise",
			"seq": "36,46"
		}]
	},
	{
		"id": "1f82c3f52b32474d9b2a5871e9d6bab7",
		"question": "Name the river on Batoka Gorge Hydroelectric Power Station ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Batoka_Gorge_Hydroelectric_Power_Station> <http://dbpedia.org/ontology/river> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/river",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Batoka_Gorge_Hydroelectric_Power_Station",
			"label": "hydroelectric station batoka power gorge",
			"seq": "18,57"
		}]
	},
	{
		"id": "06363edf0f81486685ac0173e6b02850",
		"question": "Race horses whose grandsire is Wild  Risk have taken part in which races?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/grandsire> <http://dbpedia.org/resource/Wild_Risk> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/grandsire",
			"label": "grandsire",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/property/race",
			"label": "race",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/RaceHorse",
			"label": "races",
			"seq": "67,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wild_Risk",
			"label": "wild risk",
			"seq": "31,39"
		}]
	},
	{
		"id": "ddec2336ee0e4356a255236006bca1fc",
		"question": "Did Johann Gottfried Galle invent Neptune?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Neptune> <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Johann_Gottfried_Galle> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/discoverer",
			"label": "invent",
			"seq": "27,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neptune",
			"label": "neptune",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/resource/Johann_Gottfried_Galle",
			"label": "gottfried johann galle",
			"seq": "4,25"
		}]
	},
	{
		"id": "4b468d8b196546ddaa7555d1afa4c1c3",
		"question": "Where is the T.I. Ahmadiyya Girls Senior High School?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/T.I._Ahmadiyya_Girls_Senior_High_School,_Asokore> <http://dbpedia.org/ontology/denomination> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/denomination",
			"label": "senior",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/T.I._Ahmadiyya_Girls_Senior_High_School,_Asokore",
			"label": "ahmadiyya senior school girls t.i.",
			"seq": "13,46"
		}]
	},
	{
		"id": "1fe3b3d58f8e432d9b1f3b09d5f74c6f",
		"question": "How many information appliance are manufactured by companies located in Taiwan?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/locationCity> <http://dbpedia.org/resource/Taiwan> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCity",
			"label": "located",
			"seq": "61,67"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "35,46"
		}, {
			"uri": "http://dbpedia.org/ontology/InformationAppliance",
			"label": "information appliance",
			"seq": "9,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Taiwan",
			"label": "taiwan",
			"seq": "72,77"
		}]
	},
	{
		"id": "a2eca13767804df089a65b86bf65310d",
		"question": "Which office holder's military unit is USS Kittiwake  and constituency is Castro District, San Francisco ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/USS_Kittiwake_(ASR-13)> . ?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Castro_District,_San_Francisco>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military unit",
			"seq": "22,34"
		}, {
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "58,69"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/USS_Kittiwake_(ASR-13)",
			"label": "kittiwake",
			"seq": "43,51"
		}, {
			"uri": "http://dbpedia.org/resource/Castro_District,_San_Francisco",
			"label": "francisco district, castro",
			"seq": "74,99"
		}]
	},
	{
		"id": "34fd78d2a8624f3fb9db8f301269df58",
		"question": "Which driver came first in the 1993 European Grand Prix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1993_European_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstDriver",
			"label": "driver first",
			"seq": "6,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1993_European_Grand_Prix",
			"label": "european grand prix 1993",
			"seq": "31,54"
		}]
	},
	{
		"id": "0b508a68bf6f41969a26b3a4de2c0af7",
		"question": "Who is the writer of mark twain Tonight ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mark_Twain_Tonight",
			"label": "tonight twain mark",
			"seq": "21,38"
		}]
	},
	{
		"id": "0f420e164c264763bf883eb8a2892256",
		"question": "Which office holder's  military branch is Continental Army and vice president is John Adams?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Continental_Army> . ?uri <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/John_Adams>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military branch",
			"seq": "23,37"
		}, {
			"uri": "http://dbpedia.org/ontology/vicePresident",
			"label": "president vice",
			"seq": "63,76"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Continental_Army",
			"label": "continental",
			"seq": "42,52"
		}, {
			"uri": "http://dbpedia.org/resource/John_Adams",
			"label": "adams john",
			"seq": "81,90"
		}]
	},
	{
		"id": "7bf4c6d437c849c79fbda07a1c39272a",
		"question": "Into what military organizations is the United States Department of Defense divided?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commandStructure",
			"label": "states",
			"seq": "47,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Department_of_Defense",
			"label": "department defense united states",
			"seq": "40,71"
		}]
	},
	{
		"id": "efa1f08196ee4717bf2dc3636d758b21",
		"question": "Who have been the manager of national team of Spain?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Spain_national_football_team>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "national team",
			"seq": "29,41"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerManager",
			"label": "manager",
			"seq": "18,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Spain_national_football_team",
			"label": "national spain team",
			"seq": "29,47"
		}]
	},
	{
		"id": "ec741fb853924061b547cb81d63e2b94",
		"question": "Where was James McClure born ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/James_McClure_(table_tennis)> <http://dbpedia.org/property/birthPlace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "born",
			"seq": "24,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_McClure_(table_tennis)",
			"label": "mcclure james",
			"seq": "10,22"
		}]
	},
	{
		"id": "6f6810ed49a548939905cf6abbe9bccf",
		"question": "Name all sitcoms whose theme music is made by Miley Cyrus?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/musicalBand> <http://dbpedia.org/resource/Miley_Cyrus> . ?uri <http://dbpedia.org/ontology/openingTheme> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalBand",
			"label": "music",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "theme",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "sitcoms",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miley_Cyrus",
			"label": "miley cyrus",
			"seq": "46,56"
		}]
	},
	{
		"id": "af1ad3ef33784711bf9ecd13301e524d",
		"question": "Does the Toyota Verossa have the front engine design platform?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Toyota_Verossa> <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Front-engine_design>  . }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/automobilePlatform",
			"label": "platform",
			"seq": "53,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toyota_Verossa",
			"label": "verossa toyota",
			"seq": "9,22"
		}, {
			"uri": "http://dbpedia.org/resource/Front-engine_design",
			"label": "engine design front",
			"seq": "33,51"
		}]
	},
	{
		"id": "a767b3fba00d497caf4ce4a2d62a9152",
		"question": "The official residence of Sukhumbhand paribatra ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sukhumbhand_Paribatra> <http://dbpedia.org/property/residence> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "residence",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sukhumbhand_Paribatra",
			"label": "sukhumbhand paribatra",
			"seq": "26,46"
		}]
	},
	{
		"id": "eb1852e8e379430ea29fa15c1588859e",
		"question": "What is the debut team of people born in Vargas?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vargas_(state)> . ?x <http://dbpedia.org/property/debutteam> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "8,10"
		}, {
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut team",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vargas_(state)",
			"label": "vargas",
			"seq": "41,46"
		}]
	},
	{
		"id": "4141231625cc43c8bc490ad565328359",
		"question": "Which companies have Kumho Asiana Group as their parent company?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Kumho_Asiana_Group> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "company parent",
			"seq": "49,62"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kumho_Asiana_Group",
			"label": "asiana kumho group",
			"seq": "21,38"
		}]
	},
	{
		"id": "6ac8c31d60b54b13b8e5241fd7e4b741",
		"question": "Was Neil Armstrong on the Gemini 8 mission?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Neil_Armstrong> <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Gemini_8> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mission",
			"label": "mission",
			"seq": "35,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neil_Armstrong",
			"label": "armstrong neil",
			"seq": "4,17"
		}, {
			"uri": "http://dbpedia.org/resource/Gemini_8",
			"label": "gemini",
			"seq": "26,31"
		}]
	},
	{
		"id": "affc959256ac4bc191e5dd85460f6a12",
		"question": "What is the profession of the children of Herbert Pell ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Herbert_Pell> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/profession> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "profession",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Herbert_Pell",
			"label": "herbert pell",
			"seq": "42,53"
		}]
	},
	{
		"id": "710a55e3696846ab95695ee383a1fa25",
		"question": "Name the sitcom with theme music composer as Julian Gingell and channel as Fox Broadcasting Company?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell> . ?uri <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composer theme music",
			"seq": "21,40"
		}, {
			"uri": "http://dbpedia.org/ontology/channel",
			"label": "channel",
			"seq": "64,70"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "sitcom",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Julian_Gingell",
			"label": "gingell julian",
			"seq": "45,58"
		}, {
			"uri": "http://dbpedia.org/resource/Fox_Broadcasting_Company",
			"label": "broadcasting company",
			"seq": "79,98"
		}]
	},
	{
		"id": "2c6bf82629164b92ae31c438f24e169e",
		"question": "Which nationalist group was responsible for foundation of Young Lords?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Young_Lords> <http://dbpedia.org/property/international> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/international",
			"label": "nationalist",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Young_Lords",
			"label": "young lords",
			"seq": "58,68"
		}]
	},
	{
		"id": "84c4f92bbfb04638a0a619683dea1349",
		"question": "What product is made by Sony and Foxconn togather?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Sony> . ?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Foxconn> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "made",
			"seq": "16,19"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "made",
			"seq": "16,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony",
			"label": "sony",
			"seq": "24,27"
		}, {
			"uri": "http://dbpedia.org/resource/Foxconn",
			"label": "foxconn",
			"seq": "33,39"
		}]
	},
	{
		"id": "9f44883aeb3c401c89e1465ab2006426",
		"question": "Name the death location of Judson Huss ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Judson_Huss> <http://dbpedia.org/property/deathPlace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "death",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Judson_Huss",
			"label": "judson huss",
			"seq": "27,37"
		}]
	},
	{
		"id": "6be45071f4db47d7850293932bbedfef",
		"question": "What is the country whose leader was once Valentina Matviyenko?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Valentina_Matviyenko>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leader",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Valentina_Matviyenko",
			"label": "matviyenko valentina",
			"seq": "42,61"
		}]
	},
	{
		"id": "261be9eb5d11448d9fc941edd2cf2524",
		"question": "Give me all the alma mater of the relatives of Samuek Moreno Rojas ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Samuel_Moreno_Rojas> <http://dbpedia.org/ontology/relation> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "34,42"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "16,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Samuel_Moreno_Rojas",
			"label": "moreno rojas",
			"seq": "54,65"
		}]
	},
	{
		"id": "459b9e3d7b684b5d9b5c423be3a4eb3f",
		"question": "Is Julia Gillard the prime minister of Kate Lundy?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Kate_Lundy> <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Julia_Gillard> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "minister prime",
			"seq": "21,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kate_Lundy",
			"label": "lundy kate",
			"seq": "39,48"
		}, {
			"uri": "http://dbpedia.org/resource/Julia_Gillard",
			"label": "gillard julia",
			"seq": "3,15"
		}]
	},
	{
		"id": "e7c2c4d667f343a58a587ef74bcc6bff",
		"question": "Where does Truman McGill Hobbs, United States District Judge live?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Truman_McGill_Hobbs> <http://dbpedia.org/property/residence> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "live",
			"seq": "61,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Truman_McGill_Hobbs",
			"label": "truman mcgill",
			"seq": "11,23"
		}]
	},
	{
		"id": "8931ff63c84b4c50b5a1b9c4be64f74b",
		"question": "What is the country whose leader name is Grard Larcher?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/G\u00e9rard_Larcher>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "leader name",
			"seq": "26,36"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/G\u00e9rard_Larcher",
			"label": "larcher",
			"seq": "47,53"
		}]
	},
	{
		"id": "6c1c0ca2a98141f3a9687634493adc68",
		"question": "Name the television program voiced by Isaac Hayes and aired on Comedy Central?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes> . ?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/voices",
			"label": "voiced",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "central",
			"seq": "70,76"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Isaac_Hayes",
			"label": "isaac hayes",
			"seq": "38,48"
		}, {
			"uri": "http://dbpedia.org/resource/Comedy_Central",
			"label": "central comedy",
			"seq": "63,76"
		}]
	},
	{
		"id": "9147a259a1bf43e0bdad21cf341abc26",
		"question": "Which company manufactures cars like the Opel Karl ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/related> <http://dbpedia.org/resource/Opel_Karl> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/related",
			"label": "the",
			"seq": "37,39"
		}, {
			"uri": "http://dbpedia.org/property/parentCompany",
			"label": "company",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "the",
			"seq": "37,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Opel_Karl",
			"label": "opel karl",
			"seq": "41,49"
		}]
	},
	{
		"id": "2aaac4193bd2408399d5d3c8640c90ec",
		"question": "How many people have fought wars where Arthur St. Clair was a commander?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "62,70"
		}, {
			"uri": "http://dbpedia.org/property/combatant",
			"label": "commander",
			"seq": "62,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arthur_St._Clair",
			"label": "arthur clair st.",
			"seq": "39,54"
		}]
	},
	{
		"id": "8a5c47c1f5544bed9201bf2e6d45ba64",
		"question": "Name the mammals which are primate and belongs to family of ape ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Primate> . ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/order",
			"label": "are",
			"seq": "23,25"
		}, {
			"uri": "http://dbpedia.org/ontology/family",
			"label": "family",
			"seq": "50,55"
		}, {
			"uri": "http://dbpedia.org/ontology/Mammal",
			"label": "mammals",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Primate",
			"label": "primate",
			"seq": "27,33"
		}, {
			"uri": "http://dbpedia.org/resource/Ape",
			"label": "ape",
			"seq": "60,62"
		}]
	},
	{
		"id": "adabfc9d8bab4686b6e3fc7b97893c7b",
		"question": "What are some parties which have people from Mangalore as a member?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Mangalore> . ?x <http://dbpedia.org/property/party> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "parties",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/property/party",
			"label": "parties",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mangalore",
			"label": "mangalore",
			"seq": "45,53"
		}]
	},
	{
		"id": "e97f754148fd4c2f811c6bf0b04685ad",
		"question": "How many guests have been there on broadway?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/On_Broadway_(Smash)> <http://dbpedia.org/property/guests> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/guests",
			"label": "guests",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/On_Broadway_(Smash)",
			"label": "broadway on",
			"seq": "32,42"
		}]
	},
	{
		"id": "a090fde75999468690fbe088df7369b5",
		"question": "What is the county seat of the county which has an Evergreen High School?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Evergreen_High_School_(King_County,_Washington)> <http://dbpedia.org/ontology/county> ?x . ?x <http://dbpedia.org/ontology/countySeat> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/county",
			"label": "county",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/countySeat",
			"label": "county",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Evergreen_High_School_(King_County,_Washington)",
			"label": "evergreen school county high",
			"seq": "12,39"
		}]
	},
	{
		"id": "07df56459b9046fa95b983ee02c029e7",
		"question": "What countries used Solidus as currency?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Solidus_(coin)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currency",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "countries",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Solidus_(coin)",
			"label": "solidus",
			"seq": "20,26"
		}]
	},
	{
		"id": "3230a08d90af4614ae2510d4feb9382f",
		"question": "In which areas can I find wine made of Vitis vinifera grapes?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> . ?x <http://dbpedia.org/ontology/wineRegion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/species",
			"label": "grapes",
			"seq": "54,59"
		}, {
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "wine",
			"seq": "26,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Grape",
			"label": "grapes",
			"seq": "54,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vitis_vinifera",
			"label": "vinifera vitis",
			"seq": "39,52"
		}]
	},
	{
		"id": "0d511229c1004f4b8405d2c90496fd03",
		"question": "In how many different teams have all those who have played as a defenceman been?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Defenceman> . ?x <http://dbpedia.org/property/playedFor> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/position",
			"label": "in",
			"seq": "0,1"
		}, {
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "played",
			"seq": "52,57"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "22,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Defenceman",
			"label": "defenceman",
			"seq": "64,73"
		}]
	},
	{
		"id": "a57646db0f4f42b08f80995ffb60e186",
		"question": "Who discovered Europa and Callisto?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Europa_(moon)> <http://dbpedia.org/property/discoverer> ?uri. <http://dbpedia.org/resource/Callisto_(moon)> <http://dbpedia.org/ontology/discoverer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/discoverer",
			"label": "discovered",
			"seq": "4,13"
		}, {
			"uri": "http://dbpedia.org/ontology/discoverer",
			"label": "discovered",
			"seq": "4,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Europa_(moon)",
			"label": "europa",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/resource/Callisto_(moon)",
			"label": "callisto",
			"seq": "26,33"
		}]
	},
	{
		"id": "d65addb351934f16855a39cec5e7e20a",
		"question": "List  bacterias whose orde is Bacillales and division is Firmicutes?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/order",
			"label": "orde",
			"seq": "22,25"
		}, {
			"uri": "http://dbpedia.org/ontology/division",
			"label": "division",
			"seq": "45,52"
		}, {
			"uri": "http://dbpedia.org/ontology/Bacteria",
			"label": "bacterias",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bacillales",
			"label": "bacillales",
			"seq": "30,39"
		}, {
			"uri": "http://dbpedia.org/resource/Firmicutes",
			"label": "firmicutes",
			"seq": "57,66"
		}]
	},
	{
		"id": "7c7114c2dd014b12b2a19352d908b472",
		"question": "Which ceremonial County of the East Tilbury is also the local authority of the Buckhurst Hill County High School ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri. <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ceremonialCounty",
			"label": "ceremonial county",
			"seq": "6,22"
		}, {
			"uri": "http://dbpedia.org/ontology/localAuthority",
			"label": "authority local",
			"seq": "56,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/East_Tilbury",
			"label": "tilbury east",
			"seq": "31,42"
		}, {
			"uri": "http://dbpedia.org/resource/Buckhurst_Hill_County_High_School",
			"label": "buckhurst school county",
			"seq": "17,39"
		}]
	},
	{
		"id": "53bb18b2b179439ea955d4300cf133ea",
		"question": "What are some other destinations covered by the airlines whose flights go to the Mediterranean sea?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Mediterranean_Sea> . ?x <http://dbpedia.org/ontology/destination> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/destinations",
			"label": "destinations",
			"seq": "20,31"
		}, {
			"uri": "http://dbpedia.org/ontology/destination",
			"label": "destinations",
			"seq": "20,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "48,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mediterranean_Sea",
			"label": "mediterranean",
			"seq": "81,93"
		}]
	},
	{
		"id": "84e3b4c63caa4cc6a76221a3f87025f4",
		"question": "Who was buried at St. Mary's Church and fought the battle of  Benedict Arnold's expedition to Quebec ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Benedict_Arnold's_expedition_to_Quebec> . ?uri <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/St_Mary's_Church,_Battersea>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "battle",
			"seq": "51,56"
		}, {
			"uri": "http://dbpedia.org/property/placeofburial",
			"label": "buried",
			"seq": "8,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Benedict_Arnold's_expedition_to_Quebec",
			"label": "expedition benedict arnold's quebec",
			"seq": "62,96"
		}, {
			"uri": "http://dbpedia.org/resource/St_Mary's_Church,_Battersea",
			"label": "mary's church",
			"seq": "22,34"
		}]
	},
	{
		"id": "3115a0dfde724a49a564f755192dd1ab",
		"question": "How many companies have developed cross platformed softwares?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Cross-platform> . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operatingSystem",
			"label": "platformed",
			"seq": "40,49"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "24,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cross-platform",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "36c9a6650fdd4fadb4be1d77eabc6198",
		"question": "How many cars are the predecessor of cars similar to the Pontiac G8?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Pontiac_G8> <http://dbpedia.org/ontology/relatedMeanOfTransportation> ?x . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relatedMeanOfTransportation",
			"label": "predecessor",
			"seq": "22,32"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "22,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "similar",
			"seq": "42,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pontiac_G8",
			"label": "pontiac g8",
			"seq": "57,66"
		}]
	},
	{
		"id": "6ed720fd412748de934db0272ae0affd",
		"question": "Was Class Conflict an interest of Karl Marx?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Karl_Marx> <http://dbpedia.org/ontology/mainInterest> <http://dbpedia.org/resource/Class_conflict> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mainInterest",
			"label": "interest",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Karl_Marx",
			"label": "marx karl",
			"seq": "34,42"
		}, {
			"uri": "http://dbpedia.org/resource/Class_conflict",
			"label": "conflict class",
			"seq": "4,17"
		}]
	},
	{
		"id": "ede3db931b55452880393aec59f27131",
		"question": "What are some famous artists who rocked a Les Paul?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Gibson_Les_Paul>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableInstruments",
			"label": "artists",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "artists",
			"seq": "21,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gibson_Les_Paul",
			"label": "paul les",
			"seq": "42,49"
		}]
	},
	{
		"id": "2f376df9dd00440698f42178c7677b57",
		"question": "Whichi office of Walter Evnas Edge is also the part of Atlantic seaboard fall lines ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Atlantic_Seaboard_fall_line> <http://dbpedia.org/ontology/part> ?uri. <http://dbpedia.org/resource/Walter_Evans_Edge> <http://dbpedia.org/property/office> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/part",
			"label": "part",
			"seq": "47,50"
		}, {
			"uri": "http://dbpedia.org/property/office",
			"label": "office",
			"seq": "7,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Atlantic_Seaboard_fall_line",
			"label": "seaboard atlantic fall",
			"seq": "55,76"
		}, {
			"uri": "http://dbpedia.org/resource/Walter_Evans_Edge",
			"label": "walter edge",
			"seq": "17,27"
		}]
	},
	{
		"id": "77345fdf42cd4d2f8474d7eccb309bd9",
		"question": "Which new Mexico based company produces Surface ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_Mexico> . ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Surface>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "company",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "produces",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_Mexico",
			"label": "mexico new",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/resource/Microsoft_Surface",
			"label": "surface",
			"seq": "40,46"
		}]
	},
	{
		"id": "af5b6ee8ccc1462dabeac10e39245823",
		"question": "What is the casting of the movie directed by Justin Zackham ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Justin_Zackham> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "directed",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "casting",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "20,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Justin_Zackham",
			"label": "zackham justin",
			"seq": "45,58"
		}]
	},
	{
		"id": "3fca4e987668497a98a4313a90ef9cbc",
		"question": "What is the venue of San Diego Comic-Con International ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/San_Diego_Comic-Con_International> <http://dbpedia.org/property/venue> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/venue",
			"label": "venue",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Diego_Comic-Con_International",
			"label": "international comic-con diego san",
			"seq": "21,53"
		}]
	},
	{
		"id": "1010a7a0c5f44e9d94d2ad67d025ee32",
		"question": "What are some countries where companies headquartered in the Klang Valley operate?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Klang_Valley> . ?x <http://dbpedia.org/property/country> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquartered",
			"seq": "40,52"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "countries",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "30,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Klang_Valley",
			"label": "valley klang",
			"seq": "61,72"
		}]
	},
	{
		"id": "09ea36c583254aaab5a74fa304945343",
		"question": "How many different organizations own the railway lines which are a part of Norfolk Southern Railway?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/system> <http://dbpedia.org/resource/Norfolk_Southern_Railway> . ?x <http://dbpedia.org/property/owner> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/system",
			"label": "the",
			"seq": "37,39"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "own",
			"seq": "33,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organizations",
			"seq": "19,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Norfolk_Southern_Railway",
			"label": "southern railway norfolk",
			"seq": "41,64"
		}]
	},
	{
		"id": "fb3983a237514a2fae742694295ce1a9",
		"question": "What is the job of the George Arceneaux, Jr. which is also the office of the Blanche Bruce",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_Arceneaux,_Jr.> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Blanche_Bruce> <http://dbpedia.org/property/office> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "what",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/property/office",
			"label": "office",
			"seq": "63,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_Arceneaux,_Jr.",
			"label": "arceneaux, george jr.",
			"seq": "23,43"
		}, {
			"uri": "http://dbpedia.org/resource/Blanche_Bruce",
			"label": "blanche bruce",
			"seq": "77,89"
		}]
	},
	{
		"id": "564815b5f32d4020a3d65768cc5404c5",
		"question": "What are the party of the politicians whose deputy was Chaudhary Devi Lal?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Chaudhary_Devi_Lal> . ?x <http://dbpedia.org/ontology/otherParty> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deputy",
			"label": "deputy",
			"seq": "44,49"
		}, {
			"uri": "http://dbpedia.org/ontology/otherParty",
			"label": "party",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "chaudhary",
			"seq": "55,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chaudhary_Devi_Lal",
			"label": "chaudhary devi lal",
			"seq": "55,72"
		}]
	},
	{
		"id": "c62aacfc9d4d436780b225eacce046cc",
		"question": "Name the street address of Rhodes-Haverty Building ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rhodes-Haverty_Building> <http://dbpedia.org/property/address> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/address",
			"label": "address",
			"seq": "16,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rhodes-Haverty_Building",
			"label": "rhodes-haverty building",
			"seq": "27,49"
		}]
	},
	{
		"id": "f399c7a1da5e48e29810f8606fdfe5ec",
		"question": "Which royalty's spouse is Ptolemy XIV of Egypt?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ptolemy_XIV_of_Egypt>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "spouse",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "royalty's",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ptolemy_XIV_of_Egypt",
			"label": "ptolemy egypt xiv",
			"seq": "26,42"
		}]
	},
	{
		"id": "549aff6f90b442e49ad5fb036aa2907c",
		"question": "Which race is the  Best Mate is also the race of the Martin Molony?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Best_Mate> <http://dbpedia.org/property/race> ?uri. <http://dbpedia.org/resource/Martin_Molony> <http://dbpedia.org/ontology/race> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/race",
			"label": "race",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/ontology/race",
			"label": "race",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Best_Mate",
			"label": "mate best",
			"seq": "19,27"
		}, {
			"uri": "http://dbpedia.org/resource/Martin_Molony",
			"label": "molony martin",
			"seq": "53,65"
		}]
	},
	{
		"id": "01e5f18baef64f089b9aeff2a5672188",
		"question": "List the parts of Greater San Antonio?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Greater_San_Antonio> <http://dbpedia.org/ontology/part> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/part",
			"label": "parts",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Greater_San_Antonio",
			"label": "greater antonio san",
			"seq": "18,36"
		}]
	},
	{
		"id": "d9e490fde9154a129b189fd66c1a8223",
		"question": "Who composed the episode after which came Butter's Very own Episode?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Butters'_Very_Own_Episode> . ?x <http://dbpedia.org/ontology/musicComposer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionEpisode>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "butter's",
			"seq": "42,49"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composed",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionEpisode",
			"label": "episode",
			"seq": "17,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Butters'_Very_Own_Episode",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ee5255e0079449ae9103f3cf1c059fbd",
		"question": "What are some wars fought when Chung Il Kwon as the country's prime minister?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Chung_Il-kwon> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "minister prime",
			"seq": "62,75"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "minister",
			"seq": "68,75"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "minister",
			"seq": "68,75"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chung_Il-kwon",
			"label": "chung kwon",
			"seq": "31,40"
		}]
	},
	{
		"id": "0be0815b6d7946da97888b0cc3bf85c0",
		"question": "List down all the baseball teams whose team manager was a Catcher?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/position> <http://dbpedia.org/resource/Catcher> . ?uri <http://dbpedia.org/ontology/manager> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/position",
			"label": "list",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/manager",
			"label": "manager",
			"seq": "44,50"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballTeam",
			"label": "baseball team",
			"seq": "18,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Catcher",
			"label": "catcher",
			"seq": "58,64"
		}]
	},
	{
		"id": "7753f3eb8e344fac86edce3630848439",
		"question": "Was the body of Elsie Paroubek discovered in Chicago?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Elsie_Paroubek> <http://dbpedia.org/ontology/bodyDiscovered> <http://dbpedia.org/resource/Chicago> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bodyDiscovered",
			"label": "discovered body",
			"seq": "8,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elsie_Paroubek",
			"label": "paroubek elsie",
			"seq": "16,29"
		}, {
			"uri": "http://dbpedia.org/resource/Chicago",
			"label": "chicago",
			"seq": "45,51"
		}]
	},
	{
		"id": "9b51ba0b970d479dbc0c54c8830fcddb",
		"question": "who operates the south side elevated railroad?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operates",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Side_Elevated_Railroad",
			"label": "railroad elevated south",
			"seq": "17,39"
		}]
	},
	{
		"id": "2e9acabbe693475ea85bed543e1ebef7",
		"question": "Did Dean Wurzberger manage a club at the santa clara university?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Dean_Wurzberger> <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/Santa_Clara_University> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/managerclubs",
			"label": "manage club",
			"seq": "20,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dean_Wurzberger",
			"label": "wurzberger dean",
			"seq": "4,18"
		}, {
			"uri": "http://dbpedia.org/resource/Santa_Clara_University",
			"label": "university santa clara",
			"seq": "41,62"
		}]
	},
	{
		"id": "530da5683a824177a5b7b23c2d8447d1",
		"question": "Who wrote the play in which Blanche DuBois is a character?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/characters> <http://dbpedia.org/resource/Blanche_DuBois> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Play>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/characters",
			"label": "character",
			"seq": "48,56"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "wrote",
			"seq": "4,8"
		}, {
			"uri": "http://dbpedia.org/ontology/Play",
			"label": "play",
			"seq": "14,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blanche_DuBois",
			"label": "blanche dubois",
			"seq": "28,41"
		}]
	},
	{
		"id": "ea51be89c95a4b4d91b32d48835ded65",
		"question": "Which founding cities of Young Americans Bank is also the location of Denver Broncos ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Young_Americans_Bank> <http://dbpedia.org/property/foundation> ?uri. <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founding",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "location",
			"seq": "58,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Young_Americans_Bank",
			"label": "americans young",
			"seq": "25,39"
		}, {
			"uri": "http://dbpedia.org/resource/Denver_Broncos",
			"label": "broncos denver",
			"seq": "70,83"
		}]
	},
	{
		"id": "edd475c6742c46fab9cff4f03715fdc2",
		"question": "What is the college of Malik Ausean which is also the college of Kyle Fuller ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Malik_Ausean_Evans> <http://dbpedia.org/ontology/college> ?uri. <http://dbpedia.org/resource/Kyle_Fuller_(basketball)> <http://dbpedia.org/property/college> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/college",
			"label": "college",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/property/college",
			"label": "college",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Malik_Ausean_Evans",
			"label": "ausean malik",
			"seq": "23,34"
		}, {
			"uri": "http://dbpedia.org/resource/Kyle_Fuller_(basketball)",
			"label": "fuller kyle",
			"seq": "65,75"
		}]
	},
	{
		"id": "1c819292a65d48ba82b5936d9d22a161",
		"question": "Name the university with affiliations as Graham Holdings Company and campus at Indiana?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Graham_Holdings_Company> . ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Indiana>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliations",
			"seq": "25,36"
		}, {
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "campus",
			"seq": "69,74"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Graham_Holdings_Company",
			"label": "holdings company graham",
			"seq": "41,63"
		}, {
			"uri": "http://dbpedia.org/resource/Indiana",
			"label": "indiana",
			"seq": "79,85"
		}]
	},
	{
		"id": "2ca97f86a97a48c6884ef73475245fd2",
		"question": "How many people have worked for teams chaired by Patricia Amorim?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Patr\u00edcia_Amorim> . ?x <http://dbpedia.org/property/name> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/chairman",
			"label": "chaired",
			"seq": "38,44"
		}, {
			"uri": "http://dbpedia.org/property/name",
			"label": "have",
			"seq": "16,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Patr\u00edcia_Amorim",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1747800b6c1342b592699c28f06154c2",
		"question": "Is the hyundai elantra related to hyundai lavita?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/relatedMeanOfTransportation> <http://dbpedia.org/resource/Hyundai_Elantra> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relatedMeanOfTransportation",
			"label": "related",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hyundai_Lavita",
			"label": "hyundai lavita",
			"seq": "7,20"
		}, {
			"uri": "http://dbpedia.org/resource/Hyundai_Elantra",
			"label": "hyundai elantra",
			"seq": "7,21"
		}]
	},
	{
		"id": "4fdfe129a9b94ef396a19e5882da3915",
		"question": "Who designed the stadiums which have been rented by Oakland athletics?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Oakland_Athletics> . ?x <http://dbpedia.org/property/architect> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "rented",
			"seq": "42,47"
		}, {
			"uri": "http://dbpedia.org/property/architect",
			"label": "athletics",
			"seq": "60,68"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadiums",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oakland_Athletics",
			"label": "athletics oakland",
			"seq": "52,68"
		}]
	},
	{
		"id": "92f13c33f9394efe8c790385a7e907f6",
		"question": "Which team did Michael and Ryan Powell play for?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Powell_(lacrosse)> <http://dbpedia.org/ontology/team> ?uri. <http://dbpedia.org/resource/Ryan_Powell_(lacrosse)> <http://dbpedia.org/ontology/team> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Powell_(lacrosse)",
			"label": "michael powell",
			"seq": "15,28"
		}, {
			"uri": "http://dbpedia.org/resource/Ryan_Powell_(lacrosse)",
			"label": "powell ryan",
			"seq": "27,37"
		}]
	},
	{
		"id": "b890d5585137439888d5cb80a9160f6c",
		"question": "How many different people have been in any political seat in places which are under the Indian Standard timezone?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Indian_Standard_Time> . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/timeZone",
			"label": "timezone",
			"seq": "104,111"
		}, {
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "are",
			"seq": "74,76"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indian_Standard_Time",
			"label": "standard indian",
			"seq": "88,102"
		}]
	},
	{
		"id": "40fb3a262e9b4b3ab35c33f0f8bd883e",
		"question": "Who manufactured the Delta III and the Space Shuttle?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Delta_III> <http://dbpedia.org/ontology/manufacturer> ?uri. <http://dbpedia.org/resource/Space_Shuttle> <http://dbpedia.org/ontology/manufacturer> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "4,15"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "4,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Delta_III",
			"label": "delta iii",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/resource/Space_Shuttle",
			"label": "shuttle space",
			"seq": "39,51"
		}]
	},
	{
		"id": "2e7611c3b8994e6dbc15b40e020f1b9c",
		"question": "Which nation hosts the WTA Tour Championships?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WTA_Tour_Championships> <http://dbpedia.org/property/country> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/country",
			"label": "tour",
			"seq": "27,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WTA_Tour_Championships",
			"label": "championships",
			"seq": "32,44"
		}]
	},
	{
		"id": "7b6793a8d8a24f5da233b3f76475f5f9",
		"question": "Which broadcast area of CFRX is also the palce of birth of Anthony Raymond ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/CFRX> <http://dbpedia.org/ontology/broadcastArea> ?uri. <http://dbpedia.org/resource/Anthony_Raymond_Ceresko> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/broadcastArea",
			"label": "broadcast area",
			"seq": "6,19"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "birth",
			"seq": "50,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CFRX",
			"label": "cfrx",
			"seq": "24,27"
		}, {
			"uri": "http://dbpedia.org/resource/Anthony_Raymond_Ceresko",
			"label": "raymond anthony",
			"seq": "59,73"
		}]
	},
	{
		"id": "a3c5a2eed28d4fce829b32d43b36eedc",
		"question": "Bridges over which rivers are made of Wrought Iron?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/material> <http://dbpedia.org/resource/Wrought_iron> . ?x <http://dbpedia.org/ontology/river> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/material",
			"label": "made",
			"seq": "30,33"
		}, {
			"uri": "http://dbpedia.org/ontology/river",
			"label": "rivers",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridges",
			"seq": "0,6"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wrought_iron",
			"label": "wrought iron",
			"seq": "38,49"
		}]
	},
	{
		"id": "f77b70866d3f440ab0e94f8839a02e38",
		"question": "Give me the total number of lines owned by owner of Mwtro-Noth Railroad ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Metro-North_Railroad> . ?x <http://dbpedia.org/property/owner> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owner",
			"seq": "43,47"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "43,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Metro-North_Railroad",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "5ed77f5b5ec94a8ebe4f29dad560565e",
		"question": "Where was Liliya Lobanova born?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liliya_Lobanova> <http://dbpedia.org/property/birthplace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthplace",
			"label": "born",
			"seq": "26,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Liliya_Lobanova",
			"label": "lobanova liliya",
			"seq": "10,24"
		}]
	},
	{
		"id": "b60070566739496cbb32be93d3aa6d21",
		"question": "Count the different genres of music made by Argentinian bands?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Argentina> . ?x <http://dbpedia.org/ontology/genre> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicGenre>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "made",
			"seq": "36,39"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genres",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicGenre",
			"label": "music",
			"seq": "30,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Argentina",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "295ec11bef8e4bf380b41c35e2142bfa",
		"question": "For how many PMs did the politician work, whose successor was Kingsley Wood?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Kingsley_Wood> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "48,56"
		}, {
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "kingsley",
			"seq": "62,69"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "for",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kingsley_Wood",
			"label": "kingsley wood",
			"seq": "62,74"
		}]
	},
	{
		"id": "4991e293a5df4dacb638b36ffa363faa",
		"question": "Laozi authored which book?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Laozi> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "authored",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Laozi",
			"label": "laozi",
			"seq": "0,4"
		}]
	},
	{
		"id": "76611f72d25b4984b1511e6309e78e68",
		"question": "How many head of agencies were there in Nazi Germany?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/jurisdiction> <http://dbpedia.org/resource/Nazi_Germany> . ?x <http://dbpedia.org/ontology/leader> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/jurisdiction",
			"label": "in",
			"seq": "37,38"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "head",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nazi_Germany",
			"label": "germany nazi",
			"seq": "40,51"
		}]
	},
	{
		"id": "4a5f5dcc47134e9d84939b7e3118a114",
		"question": "Which nickname of Lyons Township JHigh school is also the mascot of Galatasaray Handball Team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Galatasaray_Handball_Team> <http://dbpedia.org/property/mascot> ?uri. <http://dbpedia.org/resource/Lyons_Township_High_School> <http://dbpedia.org/property/nickname> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "58,63"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nickname",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Galatasaray_Handball_Team",
			"label": "galatasaray handball team",
			"seq": "68,92"
		}, {
			"uri": "http://dbpedia.org/resource/Lyons_Township_High_School",
			"label": "township school",
			"seq": "24,38"
		}]
	},
	{
		"id": "ba5faf932d46419e98e625fe00202062",
		"question": "Who wrote the play in which a character called Stella Kowalski exists?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/characters> <http://dbpedia.org/resource/Stella_Kowalski> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Play>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/characters",
			"label": "character",
			"seq": "30,38"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "wrote",
			"seq": "4,8"
		}, {
			"uri": "http://dbpedia.org/ontology/Play",
			"label": "play",
			"seq": "14,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stella_Kowalski",
			"label": "kowalski stella",
			"seq": "47,61"
		}]
	},
	{
		"id": "eb60a056d11940db85207b6c2d7dba3e",
		"question": "Which award is presented by Downtown Athletic Club?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Downtown_Athletic_Club>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/presenter",
			"label": "presented",
			"seq": "15,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Award",
			"label": "award",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Downtown_Athletic_Club",
			"label": "downtown athletic club",
			"seq": "28,49"
		}]
	},
	{
		"id": "9e28d32cb50c430abb9b65aa6808dbb3",
		"question": "What are the largest cities in each of the destinations of TranStar Airlines?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/TranStar_Airlines> <http://dbpedia.org/ontology/destination> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/destination",
			"label": "destinations",
			"seq": "43,54"
		}, {
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/TranStar_Airlines",
			"label": "transtar airlines",
			"seq": "59,75"
		}]
	},
	{
		"id": "4d4161d0fcd14e16adcc00f8793191bc",
		"question": "Was Love Hurts in Short Cut Draw Blood?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Love_Hurts> <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Short_Cut_Draw_Blood> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/album",
			"label": "was",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Love_Hurts",
			"label": "hurts love",
			"seq": "4,13"
		}, {
			"uri": "http://dbpedia.org/resource/Short_Cut_Draw_Blood",
			"label": "short blood draw cut",
			"seq": "18,37"
		}]
	},
	{
		"id": "b2c4a68e8a9948a0b430733a99af03b7",
		"question": "What islands are there on the Greater Antilles archipelago?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/Greater_Antilles> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/archipelago",
			"label": "archipelago",
			"seq": "47,57"
		}, {
			"uri": "http://dbpedia.org/property/name",
			"label": "are",
			"seq": "13,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Island",
			"label": "islands",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Greater_Antilles",
			"label": "antilles greater",
			"seq": "30,45"
		}]
	},
	{
		"id": "40370fe27b3a4ec29366818da40b692d",
		"question": "How many things belong to phylum of Chordate?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/phylum",
			"label": "phylum",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chordate",
			"label": "chordate",
			"seq": "36,43"
		}]
	},
	{
		"id": "737d63b84ad04faf9d88e0ea08e6d2a9",
		"question": "What units are garrisoned in the Pentagon?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/The_Pentagon>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/garrison",
			"label": "garrisoned",
			"seq": "15,24"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "units",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Pentagon",
			"label": "pentagon the",
			"seq": "29,40"
		}]
	},
	{
		"id": "24323c55c5084725bbdb07997dfec006",
		"question": "Which Tv series led to Frasier?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Frasier>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "series",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "series",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frasier",
			"label": "frasier",
			"seq": "23,29"
		}]
	},
	{
		"id": "3d6bf4caec37493199f249d4af63860c",
		"question": "Count the number of people became famous for when Andrew Jackson was a commander ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Andrew_Jackson> . ?uri <http://dbpedia.org/ontology/knownFor> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "71,79"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "for",
			"seq": "41,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Andrew_Jackson",
			"label": "jackson andrew",
			"seq": "50,63"
		}]
	},
	{
		"id": "2e7ea1d1a22640afb763ba50120b3917",
		"question": "Count the writers whose work has been played in NY?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/place> <http://dbpedia.org/resource/New_York> . ?x <http://dbpedia.org/property/writer> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/place",
			"label": "played",
			"seq": "38,43"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "writers",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "2d35b5fc3d04477aad9ca12f1abfdc9c",
		"question": "Was A Jitney Elopement edited by Charlie Chaplin?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/A_Jitney_Elopement> <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Charlie_Chaplin> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "edited",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A_Jitney_Elopement",
			"label": "elopement jitney",
			"seq": "6,21"
		}, {
			"uri": "http://dbpedia.org/resource/Charlie_Chaplin",
			"label": "charlie chaplin",
			"seq": "33,47"
		}]
	},
	{
		"id": "6da0886adf5c4684b48c56ce0fd54b69",
		"question": "Which rivers flow into the lower manhatten?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Lower_Manhattan> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthMountain",
			"label": "manhatten",
			"seq": "33,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lower_Manhattan",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "94f2d3a65f0a4e228e6ea8f5ff7a54b0",
		"question": "What is the nationality of the entomologist who is a renowned authority of Smerinthus saliceti ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Smerinthus_saliceti> <http://dbpedia.org/ontology/binomialAuthority> ?x . ?x <http://dbpedia.org/ontology/citizenship> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Entomologist>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/binomialAuthority",
			"label": "authority",
			"seq": "62,70"
		}, {
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "nationality",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Entomologist",
			"label": "entomologist",
			"seq": "31,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Smerinthus_saliceti",
			"label": "smerinthus saliceti",
			"seq": "75,93"
		}]
	},
	{
		"id": "cce1fd93712c40fca3adc66926bf15f6",
		"question": "Give me the home town of all musical artists who uses Guitar as instrument ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/hometown> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/instrument",
			"label": "instrument",
			"seq": "64,73"
		}, {
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical",
			"seq": "29,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Guitar",
			"label": "guitar",
			"seq": "54,59"
		}]
	},
	{
		"id": "3c09aa3e2b3849638009db8e6cb205ea",
		"question": "Does Walson Augustin play as a midfielder?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Walson_Augustin> <http://dbpedia.org/ontology/position> <http://dbpedia.org/resource/Midfielder> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/position",
			"label": "augustin",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Walson_Augustin",
			"label": "augustin walson",
			"seq": "5,19"
		}, {
			"uri": "http://dbpedia.org/resource/Midfielder",
			"label": "midfielder",
			"seq": "31,40"
		}]
	},
	{
		"id": "e6fda0418bd341adb1e7444c4d8d5d19",
		"question": "What are the airline hubs of Cascade Airways?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_of_Cambodian_Democrats> <http://dbpedia.org/ontology/ideology> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ideology",
			"label": "cascade",
			"seq": "29,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Union_of_Cambodian_Democrats",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "50b720c354cd4b49b16d4a0335fb3b51",
		"question": "List the home town of the bands whose label is Alive Naturalsound Records ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Alive_Naturalsound_Records> . ?x <http://dbpedia.org/ontology/hometown> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "38,42"
		}, {
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "bands",
			"seq": "26,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alive_Naturalsound_Records",
			"label": "naturalsound records alive",
			"seq": "47,72"
		}]
	},
	{
		"id": "60a1f302d38442018cd7792bbeefef8a",
		"question": "What is the draft team of the Antoine Bibeau and also has player named Nathan Dempsey ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Antoine_Bibeau> <http://dbpedia.org/property/draftTeam> ?uri. <http://dbpedia.org/resource/Nathan_Dempsey> <http://dbpedia.org/property/playedFor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "draft team",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "player",
			"seq": "58,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Antoine_Bibeau",
			"label": "antoine bibeau",
			"seq": "30,43"
		}, {
			"uri": "http://dbpedia.org/resource/Nathan_Dempsey",
			"label": "dempsey nathan",
			"seq": "71,84"
		}]
	},
	{
		"id": "3cd70345b5cd4e35992ea594bd44a98d",
		"question": "What is the draft team of Antoine Bibeau ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Antoine_Bibeau> <http://dbpedia.org/property/draftTeam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "draft team",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Antoine_Bibeau",
			"label": "antoine bibeau",
			"seq": "26,39"
		}]
	},
	{
		"id": "27755507bd1f447995393a4420bd86b2",
		"question": "What is the location city of Burnside Distribution Corporation ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Burnside_Distribution_Corporation> <http://dbpedia.org/ontology/locationCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "location",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Burnside_Distribution_Corporation",
			"label": "distribution corporation burnside",
			"seq": "29,61"
		}]
	},
	{
		"id": "80de2acb61b74b10b7a95a24dc32f5dc",
		"question": "How many movies have their music signed up with Sony Music Entertainment.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "have",
			"seq": "16,19"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "music",
			"seq": "27,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "with",
			"seq": "43,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony_Music_Entertainment",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1f68b53e47e149d09907454d2b07ef22",
		"question": "Name the place of Qaqun ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Qaqun> <http://dbpedia.org/property/place> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/place",
			"label": "place",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Qaqun",
			"label": "qaqun",
			"seq": "18,22"
		}]
	},
	{
		"id": "8bbfc3dedcd44adda33c6da9cd9eb427",
		"question": "Was Marshall Arisman the cover artist in american psycho?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/American_Psycho> <http://dbpedia.org/property/coverArtist> <http://dbpedia.org/resource/Marshall_Arisman> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coverArtist",
			"label": "artist cover",
			"seq": "25,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Psycho",
			"label": "american psycho",
			"seq": "41,55"
		}, {
			"uri": "http://dbpedia.org/resource/Marshall_Arisman",
			"label": "marshall arisman",
			"seq": "4,19"
		}]
	},
	{
		"id": "1cb857cf079c4860a7e33220a4e6ff29",
		"question": "What is the publisher of Lucifer's Hammer ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lucifer's_Hammer> <http://dbpedia.org/ontology/publisher> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publisher",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lucifer's_Hammer",
			"label": "lucifer's hammer",
			"seq": "25,40"
		}]
	},
	{
		"id": "11122ef7a8fb46d89a3d6b4d6757b990",
		"question": "The Information: A History, a Theory, a Flood is a work of Isaac Newton?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Information:_A_History,_a_Theory,_a_Flood> <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Isaac_Newton> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/previousWork",
			"label": "work",
			"seq": "51,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Information:_A_History,_a_Theory,_a_Flood",
			"label": "information: history, theory, flood",
			"seq": "4,38"
		}, {
			"uri": "http://dbpedia.org/resource/Isaac_Newton",
			"label": "newton isaac",
			"seq": "59,70"
		}]
	},
	{
		"id": "a5f4396627fd49da96fd3f5a294e9ec2",
		"question": "To which branch Edwin F. Hunter  belong ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edwin_F._Hunter> <http://dbpedia.org/property/branch> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edwin_F._Hunter",
			"label": "hunter edwin f.",
			"seq": "16,30"
		}]
	},
	{
		"id": "83dd6b5f5814451baa118379ef1bed54",
		"question": "Who are some cofounders of record labels with Frank Rogers?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Frank_Rogers_(record_producer)> . ?x <http://dbpedia.org/property/founder> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "cofounders",
			"seq": "13,22"
		}, {
			"uri": "http://dbpedia.org/property/founder",
			"label": "cofounders",
			"seq": "13,22"
		}, {
			"uri": "http://dbpedia.org/ontology/RecordLabel",
			"label": "record",
			"seq": "27,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frank_Rogers_(record_producer)",
			"label": "rogers record frank",
			"seq": "27,45"
		}]
	},
	{
		"id": "65c328879d034ec780147a99b1bc4f61",
		"question": "Which river's mouth location is Laptev Sea and also Arctic Ocean?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Laptev_Sea> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "location mouth",
			"seq": "14,27"
		}, {
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "location mouth",
			"seq": "14,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Laptev_Sea",
			"label": "laptev sea",
			"seq": "32,41"
		}, {
			"uri": "http://dbpedia.org/resource/Arctic_Ocean",
			"label": "arctic ocean",
			"seq": "52,63"
		}]
	},
	{
		"id": "5f43897b70a74a828e834f53ae65fb95",
		"question": "What are some devices whose manufacturers are in taiwan?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/locationCountry> <http://dbpedia.org/resource/Taiwan> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Device>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "manufacturers",
			"seq": "28,40"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufacturers",
			"seq": "28,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Device",
			"label": "devices",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Taiwan",
			"label": "taiwan",
			"seq": "49,54"
		}]
	},
	{
		"id": "018ff49cdfa0414f8e55961b5a7022b1",
		"question": "People in the royal Thai army follow which religion?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Royal_Thai_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "which",
			"seq": "37,41"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "43,50"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "0,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_Thai_Army",
			"label": "royal thai army",
			"seq": "14,28"
		}]
	},
	{
		"id": "d94cdcd8ddea4f6ca38ef78a76aeb4f2",
		"question": "was james watt a mechanical engineer?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/James_Watt> <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Mechanical_engineering> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/field",
			"label": "mechanical",
			"seq": "17,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/James_Watt",
			"label": "james watt",
			"seq": "4,13"
		}, {
			"uri": "http://dbpedia.org/resource/Mechanical_engineering",
			"label": "mechanical engineer",
			"seq": "17,35"
		}]
	},
	{
		"id": "dd867c518f7546ee9a9f242d25058cb5",
		"question": "Who is known for are Battle of the Thames and War of 1812?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Battle_of_the_Thames> . ?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/War_of_1812> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "7,15"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "7,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Battle_of_the_Thames",
			"label": "thames battle the of",
			"seq": "21,40"
		}, {
			"uri": "http://dbpedia.org/resource/War_of_1812",
			"label": "1812 war of",
			"seq": "28,38"
		}]
	},
	{
		"id": "977b6f4153b04d6bada78a4b6fb29965",
		"question": "How many groups speak the English Language?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/English_language>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/languages",
			"label": "language",
			"seq": "34,41"
		}, {
			"uri": "http://dbpedia.org/ontology/EthnicGroup",
			"label": "groups",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/English_language",
			"label": "language english",
			"seq": "26,41"
		}]
	},
	{
		"id": "e1f3b680b0e145f894360fb4fde18286",
		"question": "How many owners are there of lines starting at the South Station?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/routeStart> <http://dbpedia.org/resource/South_Station> . ?x <http://dbpedia.org/property/owner> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "starting",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owners",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Station",
			"label": "station",
			"seq": "57,63"
		}]
	},
	{
		"id": "eb7076ae122e4f3bbb01b33be971ffc2",
		"question": "which person created the women in the garden?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Women_in_the_Garden> <http://dbpedia.org/property/artist> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "person",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Women_in_the_Garden",
			"label": "garden women the",
			"seq": "21,36"
		}]
	},
	{
		"id": "f9d09b029bdf4189b301584f3e75101c",
		"question": "Name the basketball players drafted by Los Angeles Clippers ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/draftTeam> <http://dbpedia.org/resource/Los_Angeles_Clippers>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "drafted",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballPlayer",
			"label": "basketball",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Los_Angeles_Clippers",
			"label": "clippers angeles",
			"seq": "43,58"
		}]
	},
	{
		"id": "07b9884b55c94fbe84f471475935e466",
		"question": "What city is located on the mouth of Duwamish River?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Duwamish_River> <http://dbpedia.org/ontology/riverMouth> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river mouth",
			"seq": "28,38"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "city",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Duwamish_River",
			"label": "duwamish river",
			"seq": "37,50"
		}]
	},
	{
		"id": "61bd46182b1447fdba130dd495c98b61",
		"question": "Where is the mouth of the river whose tributary is Bjelimi\u0107ka  Rijeka ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Bjelimi\u0107ka_Rijeka> . ?x <http://dbpedia.org/ontology/mouthCountry> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/rightTributary",
			"label": "tributary",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/ontology/mouthCountry",
			"label": "mouth",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bjelimi\u0107ka_Rijeka",
			"label": "bjelimi\u0107ka rijeka",
			"seq": "51,67"
		}]
	},
	{
		"id": "626266625dc54af58709a5c0381b7aa6",
		"question": "Who is the artist of Time Radio hour ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Theme_Time_Radio_Hour> <http://dbpedia.org/property/creator> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creator",
			"label": "radio",
			"seq": "26,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Theme_Time_Radio_Hour",
			"label": "radio time hour the",
			"seq": "7,25"
		}]
	},
	{
		"id": "d0c72dbed0ac4f5ea394427d5a60df4a",
		"question": "How many prime ministers did the predecessor of Duncan Sandys  serve?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Duncan_Sandys> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "predecessor",
			"seq": "33,43"
		}, {
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "ministers",
			"seq": "15,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Duncan_Sandys",
			"label": "sandys duncan",
			"seq": "48,60"
		}]
	},
	{
		"id": "caedfc75bd384fe7bcb3aa45a68f9dc5",
		"question": "Which party won the elections when Y.S. Rajasekhara Reddy was in power?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Y._S._Rajasekhara_Reddy> . ?x <http://dbpedia.org/ontology/affiliation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Election>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leader",
			"label": "power",
			"seq": "65,69"
		}, {
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "elections",
			"seq": "20,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Election",
			"label": "elections",
			"seq": "20,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Y._S._Rajasekhara_Reddy",
			"label": "rajasekhara reddy",
			"seq": "40,56"
		}]
	},
	{
		"id": "10234f4efd8b4dd087898060000c073b",
		"question": "Which river flows through Central Washington?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Central_Washington> <http://dbpedia.org/ontology/river> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/river",
			"label": "river",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Central_Washington",
			"label": "washington central",
			"seq": "26,43"
		}]
	},
	{
		"id": "b2b282ef2cd14876880434680aa25fa4",
		"question": "Who is the scientist whose academic advisor is Franz Brentano?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Franz_Brentano>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicAdvisor",
			"label": "academic advisor",
			"seq": "27,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Franz_Brentano",
			"label": "brentano franz",
			"seq": "47,60"
		}]
	},
	{
		"id": "2c9741b69a754c32a0977065261b1b01",
		"question": "Is Henry David Thoreau interested in Politics?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Henry_David_Thoreau> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Politics> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "interested",
			"seq": "23,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henry_David_Thoreau",
			"label": "thoreau henry david",
			"seq": "3,21"
		}, {
			"uri": "http://dbpedia.org/resource/Politics",
			"label": "politics",
			"seq": "37,44"
		}]
	},
	{
		"id": "8b5c756e4b4d417bb041434770f85a38",
		"question": "Tandem Computers is the subsidiary of which company?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Tandem_Computers> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsidiary",
			"label": "subsidiary",
			"seq": "24,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tandem_Computers",
			"label": "computers tandem",
			"seq": "0,15"
		}]
	},
	{
		"id": "6563a461daf1415ab915fc5dfc0eb0be",
		"question": "Which settelment area is the home town of the Danny Felice and Cline Buckens?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Danny_Felice> <http://dbpedia.org/ontology/hometown> ?uri. <http://dbpedia.org/resource/C\u00e9line_Buckens> <http://dbpedia.org/ontology/hometown> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
		"sparql_id": "315",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "29,37"
		}, {
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "29,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Settlement",
			"label": "settelment",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Danny_Felice",
			"label": "felice danny",
			"seq": "46,57"
		}, {
			"uri": "http://dbpedia.org/resource/C\u00e9line_Buckens",
			"label": "buckens",
			"seq": "69,75"
		}]
	},
	{
		"id": "e362bbac4bf646538ffec9b1af997937",
		"question": "Name the office holder who has a child named Lori Black and resting place is Alta Mesa Memorial Park?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Alta_Mesa_Memorial_Park>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "child",
			"seq": "33,37"
		}, {
			"uri": "http://dbpedia.org/property/restingPlace",
			"label": "resting place",
			"seq": "60,72"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lori_Black",
			"label": "black lori",
			"seq": "45,54"
		}, {
			"uri": "http://dbpedia.org/resource/Alta_Mesa_Memorial_Park",
			"label": "memorial park mesa",
			"seq": "82,99"
		}]
	},
	{
		"id": "5662a9fee12a46c9a92783e3e54161e1",
		"question": "Who appointed the successor of Thomas Bee?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Thomas_Bee> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/appointer> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/property/appointer",
			"label": "appointed",
			"seq": "4,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thomas_Bee",
			"label": "thomas",
			"seq": "31,36"
		}]
	},
	{
		"id": "e8bec3414aec434f985546fa26880eff",
		"question": "What is the home town of the Band which is the previous work of Sammy Hagar & Friends ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Sammy_Hagar_&_Friends> <http://dbpedia.org/ontology/previousWork> ?x . ?x <http://dbpedia.org/ontology/hometown> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/previousWork",
			"label": "previous work",
			"seq": "47,59"
		}, {
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "29,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sammy_Hagar_&_Friends",
			"label": "friends sammy hagar",
			"seq": "64,82"
		}]
	},
	{
		"id": "5b6e06c40cae4a26af7b0d745c9ace62",
		"question": "VP-8 and VP-10 shares which command structure ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/VP-8> <http://dbpedia.org/ontology/commandStructure> ?uri. <http://dbpedia.org/resource/VP-10> <http://dbpedia.org/ontology/commandStructure> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commandStructure",
			"label": "structure command",
			"seq": "28,44"
		}, {
			"uri": "http://dbpedia.org/ontology/commandStructure",
			"label": "structure command",
			"seq": "28,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/VP-8",
			"label": "vp-8",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/resource/VP-10",
			"label": "vp-10",
			"seq": "9,13"
		}]
	},
	{
		"id": "cdcc5bd84e7145dabfc4849ac69af063",
		"question": "Which person constituency is Duboce Triangle, San Francisco and military unit is USS Kittiwake (ASR-13)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Duboce_Triangle,_San_Francisco> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/USS_Kittiwake_(ASR-13)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "13,24"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military unit",
			"seq": "64,76"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Duboce_Triangle,_San_Francisco",
			"label": "triangle, francisco duboce",
			"seq": "29,54"
		}, {
			"uri": "http://dbpedia.org/resource/USS_Kittiwake_(ASR-13)",
			"label": "kittiwake (asr-13)",
			"seq": "85,102"
		}]
	},
	{
		"id": "c2a0f7c7f5f54180bbca4cd712cbfc97",
		"question": "List the people residing in Wilton, Connecticut?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Wilton,_Connecticut> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "residing",
			"seq": "16,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wilton,_Connecticut",
			"label": "connecticut wilton,",
			"seq": "28,46"
		}]
	},
	{
		"id": "cce9e73a34874a43a8eec33a74970392",
		"question": "Is Ethics the main interests of Henry David Thoreau?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Henry_David_Thoreau> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Ethics> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mainInterests",
			"label": "interests main",
			"seq": "14,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henry_David_Thoreau",
			"label": "thoreau henry david",
			"seq": "32,50"
		}, {
			"uri": "http://dbpedia.org/resource/Ethics",
			"label": "ethics",
			"seq": "3,8"
		}]
	},
	{
		"id": "610c262711204bef968971cfcdf19b3f",
		"question": "Name the other party of Chandra Shekhar ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chandra_Shekhar> <http://dbpedia.org/ontology/otherParty> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/otherParty",
			"label": "party other",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chandra_Shekhar",
			"label": "shekhar chandra",
			"seq": "24,38"
		}]
	},
	{
		"id": "87c465fa859b45d78b3a51868b1d1375",
		"question": "How many people are buried in Arlington National Cemetery?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Arlington_National_Cemetery>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeofburial",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arlington_National_Cemetery",
			"label": "arlington national cemetery",
			"seq": "30,56"
		}]
	},
	{
		"id": "17b2beca1aea4de591ccbcb84821c1a2",
		"question": "Does Fa'a' International Airport serve tahiti too?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Fa'a'\u0101_International_Airport> <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/Tahiti> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cityServed",
			"label": "serve",
			"seq": "33,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fa'a'\u0101_International_Airport",
			"label": "international airport fa'a'",
			"seq": "5,31"
		}, {
			"uri": "http://dbpedia.org/resource/Tahiti",
			"label": "tahiti",
			"seq": "39,44"
		}]
	},
	{
		"id": "d23e68c01b574ddc9271799a3081aec1",
		"question": "Which animator of Tommy Tucker's Tooth is also the film director of Alice's Wonderland ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alice's_Wonderland> <http://dbpedia.org/ontology/director> ?uri. <http://dbpedia.org/resource/Tommy_Tucker's_Tooth> <http://dbpedia.org/property/animator> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "director",
			"seq": "56,63"
		}, {
			"uri": "http://dbpedia.org/property/animator",
			"label": "animator",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alice's_Wonderland",
			"label": "wonderland alice's",
			"seq": "68,85"
		}, {
			"uri": "http://dbpedia.org/resource/Tommy_Tucker's_Tooth",
			"label": "tucker's tooth tommy",
			"seq": "18,37"
		}]
	},
	{
		"id": "67455a7a7dde4d828284efb85a8ab936",
		"question": "What was created by Larry David and Jerry Seinfeld?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Larry_David> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Jerry_Seinfeld> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "created",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "created",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Larry_David",
			"label": "larry david",
			"seq": "20,30"
		}, {
			"uri": "http://dbpedia.org/resource/Jerry_Seinfeld",
			"label": "seinfeld jerry",
			"seq": "36,49"
		}]
	},
	{
		"id": "e647f8a4abe9470d911a1b8e08445ef3",
		"question": "Which license of the Microsoft Office Picture Manager is also the  product of the Apple Productivity Experience Group ",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Microsoft_Office_Picture_Manager> <http://dbpedia.org/ontology/license> ?uri. <http://dbpedia.org/resource/Apple_Productivity_Experience_Group> <http://dbpedia.org/ontology/product> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/license",
			"label": "license",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "product",
			"seq": "67,73"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Office_Picture_Manager",
			"label": "microsoft picture manager office",
			"seq": "21,52"
		}, {
			"uri": "http://dbpedia.org/resource/Apple_Productivity_Experience_Group",
			"label": "productivity experience group apple",
			"seq": "82,116"
		}]
	},
	{
		"id": "57c6b07e37134052a728a3def6121f55",
		"question": "Who does Cam PLante plays for ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cam_Plante> <http://dbpedia.org/property/playedFor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "plays",
			"seq": "20,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cam_Plante",
			"label": "plante cam",
			"seq": "9,18"
		}]
	},
	{
		"id": "587b373a04ab48eeb4fd4cdba4abc95d",
		"question": "For everyone who died in paris, count their different fields of work.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/Paris> . ?x <http://dbpedia.org/property/fields> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "their",
			"seq": "38,42"
		}, {
			"uri": "http://dbpedia.org/property/fields",
			"label": "fields",
			"seq": "54,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paris",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d8f88e1d32024fa5bfff232c9286e30a",
		"question": "Is the Caterpullar 797F assembled in North America?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Caterpillar_797F> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/North_America> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/assembly",
			"label": "assembled",
			"seq": "24,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Caterpillar_797F",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/North_America",
			"label": "america north",
			"seq": "37,49"
		}]
	},
	{
		"id": "74bea979df0f49f0aafba5f2d1be9297",
		"question": "Michael Deeley produce how many movies?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Michael_Deeley>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "produce",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Deeley",
			"label": "michael deeley",
			"seq": "0,13"
		}]
	},
	{
		"id": "55dc98a69d7e46bc9d0d587c20083de5",
		"question": "Was tupac a member of Outlawz?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Outlawz> <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Tupac_Shakur> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "member",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Outlawz",
			"label": "outlawz",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/resource/Tupac_Shakur",
			"label": "tupac",
			"seq": "4,8"
		}]
	},
	{
		"id": "1233074e435847cb89d45254f080d56f",
		"question": "Does Dan River flow into the Jordan Valley?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jordan_River> <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Dan_River_(Middle_East)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leftTributary",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jordan_River",
			"label": "jordan river",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/resource/Dan_River_(Middle_East)",
			"label": "river dan",
			"seq": "5,13"
		}]
	},
	{
		"id": "bc66c5524237472895f7631eb4e962e0",
		"question": "Does Beth Tweddle play for the City of Liverpool gymnast club?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Beth_Tweddle> <http://dbpedia.org/property/club> <http://dbpedia.org/resource/City_of_Liverpool_Gymnastics_Club> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/club",
			"label": "club",
			"seq": "57,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Beth_Tweddle",
			"label": "tweddle beth",
			"seq": "5,16"
		}, {
			"uri": "http://dbpedia.org/resource/City_of_Liverpool_Gymnastics_Club",
			"label": "liverpool gymnast club city",
			"seq": "31,57"
		}]
	},
	{
		"id": "1c29ceb7c9044f359907d2b49a487e25",
		"question": "List all the hubs of the airline whose one of the hub is Subang, Indonesia ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Subang,_Indonesia> . ?x <http://dbpedia.org/property/hubs> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hubs",
			"seq": "13,16"
		}, {
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hubs",
			"seq": "13,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airline",
			"seq": "25,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Subang,_Indonesia",
			"label": "indonesia subang,",
			"seq": "57,73"
		}]
	},
	{
		"id": "fa117cae2bc74153aff9272ca43d4cf1",
		"question": "Music of how many things has been given by Akira Ifukube?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Akira_Ifukube>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Akira_Ifukube",
			"label": "ifukube akira",
			"seq": "43,55"
		}]
	},
	{
		"id": "df64ee27d66345969b11885dcb0f0d32",
		"question": "To which counties do Jerome avenue and Tremont avenue belong?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerome_Avenue> <http://dbpedia.org/property/counties> ?uri. <http://dbpedia.org/resource/Tremont_Avenue> <http://dbpedia.org/property/counties> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/counties",
			"label": "counties",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/counties",
			"label": "counties",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerome_Avenue",
			"label": "jerome avenue",
			"seq": "21,33"
		}, {
			"uri": "http://dbpedia.org/resource/Tremont_Avenue",
			"label": "tremont avenue",
			"seq": "28,41"
		}]
	},
	{
		"id": "7e064438df204412a9e513d66ee3cc5e",
		"question": "Was Krzystof Wielicki the first person that ascended the mt everest?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mount_Everest> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/Krzysztof_Wielicki> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "person",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mount_Everest",
			"label": "everest",
			"seq": "60,66"
		}, {
			"uri": "http://dbpedia.org/resource/Krzysztof_Wielicki",
			"label": "wielicki",
			"seq": "13,20"
		}]
	},
	{
		"id": "220dbedddb3a4970b6b74f1fa2282d6b",
		"question": "List the sports played in private universities.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Private_university> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/type",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Private_university",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1d1199ba017a424983574e26ac9cc2bb",
		"question": "Pointe d'Aveneyre belongs to which mountain range?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pointe_d'Aveneyre> <http://dbpedia.org/ontology/mountainRange> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountain range",
			"seq": "35,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pointe_d'Aveneyre",
			"label": "d'aveneyre pointe",
			"seq": "0,16"
		}]
	},
	{
		"id": "dd559ff6b26c4bb5b8fbcc642135b6f2",
		"question": "Which currency is used by the record label of the Way to Your Heart?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Way_to_Your_Heart> <http://dbpedia.org/ontology/recordLabel> ?x . ?x <http://dbpedia.org/property/currency> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "record label",
			"seq": "30,41"
		}, {
			"uri": "http://dbpedia.org/property/currency",
			"label": "currency",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Way_to_Your_Heart",
			"label": "heart your way the",
			"seq": "26,43"
		}]
	},
	{
		"id": "2516a91470b8418cb05fc66aaf9f2d9e",
		"question": "Who is the office holder whose resting place is Monticello?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Monticello>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "31,43"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "11,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Monticello",
			"label": "monticello",
			"seq": "48,57"
		}]
	},
	{
		"id": "287e9d5624e64fa3a256084cbc7a853c",
		"question": "Name the president whose had relatives in Clinton family and lieutenant named Joe Purcell?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Clinton_family> . ?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Joe_Purcell>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "29,37"
		}, {
			"uri": "http://dbpedia.org/ontology/lieutenant",
			"label": "lieutenant",
			"seq": "61,70"
		}, {
			"uri": "http://dbpedia.org/ontology/President",
			"label": "president",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Clinton_family",
			"label": "clinton family",
			"seq": "42,55"
		}, {
			"uri": "http://dbpedia.org/resource/Joe_Purcell",
			"label": "purcell joe",
			"seq": "78,88"
		}]
	},
	{
		"id": "221d800881d44522a1fbc7d81300bcb8",
		"question": "Where is the tombstone of the successor of Edward Wolcott?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Edward_O._Wolcott> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "30,38"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "tombstone",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edward_O._Wolcott",
			"label": "wolcott edward",
			"seq": "43,56"
		}]
	},
	{
		"id": "bfea3fef8cd04b65b6f6dcf3078461ec",
		"question": "Who are the associated musical artist of Carolyn Dennis?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carolyn_Dennis> <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated musical artist",
			"seq": "12,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carolyn_Dennis",
			"label": "carolyn dennis",
			"seq": "41,54"
		}]
	},
	{
		"id": "6dd6deaa7cd2434fb62beb47d4ae9ff9",
		"question": "Who oarent organization of Get TV is also the label provider of I Pray on CHristmas ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/I_Pray_on_Christmas> <http://dbpedia.org/property/label> ?uri. <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "46,50"
		}, {
			"uri": "http://dbpedia.org/ontology/parentOrganisation",
			"label": "organization",
			"seq": "11,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/I_Pray_on_Christmas",
			"label": "christmas pray",
			"seq": "66,79"
		}, {
			"uri": "http://dbpedia.org/resource/GetTV",
			"label": "get tv",
			"seq": "27,32"
		}]
	},
	{
		"id": "81672c09f09c4704b6188617b549a4c1",
		"question": "What is the resting place of the engineer who was the architect of Plaza on DeWitt?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Plaza_on_DeWitt> <http://dbpedia.org/ontology/architect> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architect",
			"label": "architect",
			"seq": "54,62"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "12,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Plaza_on_DeWitt",
			"label": "dewitt plaza",
			"seq": "67,78"
		}]
	},
	{
		"id": "139890f04c654406a0930193ff1b4264",
		"question": "Is north caucasian emirate have an islamic government?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/North_Caucasian_Emirate> <http://dbpedia.org/ontology/governmentType> <http://dbpedia.org/resource/Islam> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governmentType",
			"label": "government",
			"seq": "43,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North_Caucasian_Emirate",
			"label": "caucasian emirate north",
			"seq": "3,25"
		}, {
			"uri": "http://dbpedia.org/resource/Islam",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a5503f4d85444a1bbe8edc89a85b5984",
		"question": "What is the game whose genre is Mind sport?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Mind_sport>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Game>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genre",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Game",
			"label": "game",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mind_sport",
			"label": "sport mind",
			"seq": "32,41"
		}]
	},
	{
		"id": "2befeb95c8a64b9e882868baec3055f9",
		"question": "How many awards have graduates from the University of Queensland earned?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/University_of_Queensland> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "graduates",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/University_of_Queensland",
			"label": "university queensland",
			"seq": "40,60"
		}]
	},
	{
		"id": "25e3cd095c5a460e818600f9908859d5",
		"question": "How many other architect are there of the historic places whose architect is also Stanford White ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Stanford_White> . ?x <http://dbpedia.org/ontology/architect> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architect",
			"label": "architect",
			"seq": "15,23"
		}, {
			"uri": "http://dbpedia.org/ontology/architect",
			"label": "architect",
			"seq": "15,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stanford_White",
			"label": "stanford white",
			"seq": "82,95"
		}]
	},
	{
		"id": "63cb9ee6aac848bfab4e1474f02fa6cc",
		"question": "In how many states can one find Burr Tuss kind of bridges?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/style> <http://dbpedia.org/resource/Burr_Truss> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/style",
			"label": "states",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "states",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Region",
			"label": "in",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Burr_Truss",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c547ee5efa2249c4a8e652d7c3822fed",
		"question": "Name the television show whose theme music is composed by Julian Gingell and broadcasted on FOX ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell> . ?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "46,53"
		}, {
			"uri": "http://dbpedia.org/property/channel",
			"label": "gingell",
			"seq": "65,71"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Julian_Gingell",
			"label": "gingell julian",
			"seq": "58,71"
		}, {
			"uri": "http://dbpedia.org/resource/Fox_Broadcasting_Company",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "85b8568d9aef45bab5f160d0fd9ad8f9",
		"question": "What cities are around the valley bordering Lake Mead?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/border> <http://dbpedia.org/resource/Lake_Mead> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Valley>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/border",
			"label": "bordering",
			"seq": "34,42"
		}, {
			"uri": "http://dbpedia.org/ontology/city",
			"label": "cities",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Valley",
			"label": "valley",
			"seq": "27,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lake_Mead",
			"label": "mead lake",
			"seq": "44,52"
		}]
	},
	{
		"id": "e4faeda0920e4c5ba42aed906478d386",
		"question": "Who wrote A house not meant to stand and Akale?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A_House_Not_Meant_to_Stand> <http://dbpedia.org/property/writer> ?uri. <http://dbpedia.org/resource/Akale> <http://dbpedia.org/ontology/writer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "wrote",
			"seq": "4,8"
		}, {
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "wrote",
			"seq": "4,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A_House_Not_Meant_to_Stand",
			"label": "stand meant house not",
			"seq": "12,32"
		}, {
			"uri": "http://dbpedia.org/resource/Akale",
			"label": "akale",
			"seq": "41,45"
		}]
	},
	{
		"id": "03c8435f984a413f9bdbfe9927c33086",
		"question": "Through which important cities the does the river originating from the Duwamish, flow?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Green_River_(Duwamish_River)> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/source",
			"label": "does",
			"seq": "35,38"
		}, {
			"uri": "http://dbpedia.org/ontology/city",
			"label": "cities",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "44,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Green_River_(Duwamish_River)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "835d9ccd780342e6a7509b3ca855b1d1",
		"question": "The fugitive Kind and the Notebook of Trigorin is written by what author?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Fugitive_Kind> <http://dbpedia.org/property/writer> ?uri. <http://dbpedia.org/resource/The_Notebook_of_Trigorin> <http://dbpedia.org/ontology/author> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "50,56"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "author",
			"seq": "66,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Fugitive_Kind",
			"label": "fugitive kind",
			"seq": "4,16"
		}, {
			"uri": "http://dbpedia.org/resource/The_Notebook_of_Trigorin",
			"label": "trigorin notebook",
			"seq": "26,42"
		}]
	},
	{
		"id": "bfb53a96bd9c48b28e143f608fb4f1f9",
		"question": "What are the television shows whose company is owned by Viacom?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Viacom_(original)> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningCompany",
			"label": "company",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Viacom_(original)",
			"label": "viacom",
			"seq": "56,61"
		}]
	},
	{
		"id": "4dc617be22b34ffdb330e545e12a8ad9",
		"question": "Which politicians son is buried in Metairie Cementery?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Metairie_Cemetery> . ?uri <http://dbpedia.org/ontology/child> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeofburial",
			"label": "buried",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/ontology/child",
			"label": "which",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "cementery",
			"seq": "44,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Metairie_Cemetery",
			"label": "metairie",
			"seq": "35,42"
		}]
	},
	{
		"id": "df298794f4bc4b8bad182adc7794db3a",
		"question": "Who is the operator of AT&T Park ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/AT&T_Park> <http://dbpedia.org/property/operator> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operator",
			"label": "operator",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/AT&T_Park",
			"label": "park at&t",
			"seq": "23,31"
		}]
	},
	{
		"id": "f703a972a86f40aa9788b9324760cfa2",
		"question": "What is the origin of Xynisteri?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/ontology/origin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "origin",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Xynisteri",
			"label": "xynisteri",
			"seq": "22,30"
		}]
	},
	{
		"id": "65165521d68f40e7a5aa5bcd34fd39b3",
		"question": "Who gave the musical score  of 9 to 5 (musical) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/9_to_5_(musical)> <http://dbpedia.org/ontology/musicBy> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicBy",
			"label": "musical",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/9_to_5_(musical)",
			"label": "(musical) to",
			"seq": "33,44"
		}]
	},
	{
		"id": "d039c214abca4acb95ebefed1ec4aee3",
		"question": "To which students did Ernest Rutherford advised to?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Ernest_Rutherford>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "advised",
			"seq": "40,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ernest_Rutherford",
			"label": "rutherford ernest",
			"seq": "22,38"
		}]
	},
	{
		"id": "7cd0eadad948412c89a6e72b70ef5624",
		"question": "Give me the number of home stadiums of teams managed by John Spencer.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/manager> <http://dbpedia.org/resource/John_Spencer_(Scottish_footballer)> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/manager",
			"label": "managed",
			"seq": "45,51"
		}, {
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "stadiums",
			"seq": "27,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Spencer_(Scottish_footballer)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f2f9462195254f19ac762ee377426f3f",
		"question": "What is the Home Stadium of the Kenya national under-20 football team where Matin Suji was also born ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kenya_national_under-20_football_team> <http://dbpedia.org/property/homeStadium> ?uri. <http://dbpedia.org/resource/Martin_Suji> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/homeStadium",
			"label": "stadium home",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "8,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kenya_national_under-20_football_team",
			"label": "under-20 national football kenya team",
			"seq": "32,68"
		}, {
			"uri": "http://dbpedia.org/resource/Martin_Suji",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f3e69f0433d44011900bd5304b4d5c31",
		"question": "What foundation palce of Temenos Group is the death palce of jerzy Jzef Poocki ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Temenos_Group> <http://dbpedia.org/property/foundation> ?uri. <http://dbpedia.org/resource/Jerzy_J\u00f3zef_Potocki> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "foundation",
			"seq": "5,14"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "death",
			"seq": "46,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Temenos_Group",
			"label": "temenos group",
			"seq": "25,37"
		}, {
			"uri": "http://dbpedia.org/resource/Jerzy_J\u00f3zef_Potocki",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "09419b9d207043bc80903f773b894b62",
		"question": "Which company owns the airlines whose hub is in Dubai?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Detroit> . ?x <http://dbpedia.org/property/parent> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hub",
			"seq": "38,40"
		}, {
			"uri": "http://dbpedia.org/property/parent",
			"label": "company",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "23,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Detroit",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "f6f3a47cf61449bdac6126a01ad39c30",
		"question": "How many people have parterned with the person choroegraphed by Catarina Lindgren in the past?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/formerChoreographer> <http://dbpedia.org/resource/Catarina_Lindgren> . ?x <http://dbpedia.org/ontology/formerPartner> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerChoreographer",
			"label": "choroegraphed",
			"seq": "47,59"
		}, {
			"uri": "http://dbpedia.org/ontology/formerPartner",
			"label": "parterned",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "40,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Catarina_Lindgren",
			"label": "lindgren catarina",
			"seq": "64,80"
		}]
	},
	{
		"id": "b565b9a72721499f8857765c8003b017",
		"question": "Who is the monarch of Bertalan Szemere ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bertalan_Szemere> <http://dbpedia.org/ontology/monarch> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/monarch",
			"label": "monarch",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bertalan_Szemere",
			"label": "bertalan szemere",
			"seq": "22,37"
		}]
	},
	{
		"id": "9a26ec1acb5a49ebb1c6f3430eaf3aec",
		"question": "In which city was the film star of Singhasan Battisi born ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Singhasan_Battisi_(TV_series)> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "star",
			"seq": "27,30"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "the",
			"seq": "18,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Singhasan_Battisi_(TV_series)",
			"label": "singhasan battisi",
			"seq": "35,51"
		}]
	},
	{
		"id": "e9e11aac69384f7ea4b8193f5237bb97",
		"question": "Who all are starring in the  movies where director of photography is John Derek ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/John_Derek> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cinematography",
			"label": "photography",
			"seq": "54,64"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "starring",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "51,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Derek",
			"label": "derek john",
			"seq": "69,78"
		}]
	},
	{
		"id": "db5d49f80c774b80beb208bc62050aca",
		"question": "Which awards did the children of Erik Bergman won ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Erik_Bergman_(Lutheran_minister)> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erik_Bergman_(Lutheran_minister)",
			"label": "bergman erik the",
			"seq": "17,32"
		}]
	},
	{
		"id": "ff4af6d5452c41b6824723db767008d2",
		"question": "Was Zachary Taylor a commander of the sixth infantry regiment of US?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/6th_Infantry_Regiment_(United_States)> <http://dbpedia.org/ontology/notableCommander> <http://dbpedia.org/resource/Zachary_Taylor> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableCommander",
			"label": "commander",
			"seq": "21,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/6th_Infantry_Regiment_(United_States)",
			"label": "regiment infantry",
			"seq": "44,60"
		}, {
			"uri": "http://dbpedia.org/resource/Zachary_Taylor",
			"label": "zachary taylor",
			"seq": "4,17"
		}]
	},
	{
		"id": "93eaea9dda124dfd85c775d17d677854",
		"question": "Name a basketball player with teams as Chicago Bulls and Phoenix Suns?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls> . ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Phoenix_Suns>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/team",
			"label": "teams",
			"seq": "30,34"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "teams",
			"seq": "30,34"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballPlayer",
			"label": "basketball player",
			"seq": "7,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chicago_Bulls",
			"label": "chicago bulls",
			"seq": "39,51"
		}, {
			"uri": "http://dbpedia.org/resource/Phoenix_Suns",
			"label": "phoenix suns",
			"seq": "57,68"
		}]
	},
	{
		"id": "8ca57812f631476bade8b48c874f0758",
		"question": "Who all were venerated in Islam?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/veneratedIn",
			"label": "venerated",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Islam",
			"label": "islam",
			"seq": "26,30"
		}]
	},
	{
		"id": "4ad334fedc644b27b70be5eb63ee7379",
		"question": "Name the state of Timothy J. Roemer ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Timothy_J._Roemer> <http://dbpedia.org/property/state> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Timothy_J._Roemer",
			"label": "timothy roemer",
			"seq": "18,31"
		}]
	},
	{
		"id": "8e746dc2d0ca43a5bb2b3ed8dde3da88",
		"question": "What other awards have Becket fund for religious liberty winners received?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Becket_Fund_for_Religious_Liberty> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Becket_Fund_for_Religious_Liberty",
			"label": "religious liberty becket fund for",
			"seq": "23,55"
		}]
	},
	{
		"id": "c8685c50587445548f0ea1f4e315dab0",
		"question": "List the websites which the authors of Tornado own ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Tornado_(web_server)> <http://dbpedia.org/property/author> ?x . ?x <http://dbpedia.org/ontology/owner> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/author",
			"label": "authors",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "own",
			"seq": "47,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tornado_(web_server)",
			"label": "tornado",
			"seq": "39,45"
		}]
	},
	{
		"id": "937f389062f442449e18135bef47f3eb",
		"question": "What is the field of interest of the advisor of Henri Maspero ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Henri_Maspero> <http://dbpedia.org/ontology/academicAdvisor> ?x . ?x <http://dbpedia.org/property/fields> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicAdvisor",
			"label": "advisor",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/property/fields",
			"label": "field",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henri_Maspero",
			"label": "maspero henri",
			"seq": "48,60"
		}]
	},
	{
		"id": "644aaef215cc484f9b712c5bc532d4b8",
		"question": "Name some software as a service?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/license> <http://dbpedia.org/resource/Software_as_a_service>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/license",
			"label": "service",
			"seq": "24,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "10,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Software_as_a_service",
			"label": "software service",
			"seq": "10,25"
		}]
	},
	{
		"id": "179d3cc2b7f440ed93b9efb89aa4ff9a",
		"question": "What are some other things developed by the company who made the remote desktop protocol?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Remote_Desktop_Protocol> . ?x <http://dbpedia.org/ontology/product> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "protocol",
			"seq": "80,87"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "protocol",
			"seq": "80,87"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "44,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Remote_Desktop_Protocol",
			"label": "protocol desktop remote",
			"seq": "65,87"
		}]
	},
	{
		"id": "fe0d90f8a0604403896d62bdec7384a4",
		"question": "Who has his resting place at  Plymouth, Vermont and office at Massachusetts House of Representatives?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Plymouth,_Vermont> . ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Massachusetts_House_of_Representatives>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "12,24"
		}, {
			"uri": "http://dbpedia.org/property/office",
			"label": "office",
			"seq": "52,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Plymouth,_Vermont",
			"label": "plymouth, vermont",
			"seq": "30,46"
		}, {
			"uri": "http://dbpedia.org/resource/Massachusetts_House_of_Representatives",
			"label": "representatives massachusetts house",
			"seq": "62,96"
		}]
	},
	{
		"id": "a21a8d3f8da84d2aa14502672faa0091",
		"question": "Which office holder's predecessor is  Lucius Cornelius and his associate is Marcus Calpurnius Bibulus?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Lucius_Cornelius_Lentulus_Crus> . ?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "22,32"
		}, {
			"uri": "http://dbpedia.org/ontology/associate",
			"label": "associate",
			"seq": "63,71"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lucius_Cornelius_Lentulus_Crus",
			"label": "cornelius lucius",
			"seq": "38,53"
		}, {
			"uri": "http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus",
			"label": "calpurnius bibulus marcus",
			"seq": "76,100"
		}]
	},
	{
		"id": "9e6adf11753c4b9aaf5b447c279a2806",
		"question": "What is the location of Dad's Root Beer on Google maps?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dad's_Root_Beer> <http://dbpedia.org/property/locationCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationCity",
			"label": "location",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dad's_Root_Beer",
			"label": "dad's root beer",
			"seq": "24,38"
		}]
	},
	{
		"id": "6ec30fe0b36547bcb0729a3ebbe32668",
		"question": "Which battle is Jim Jones associated with to which Allen Boyd is also associated ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jim_Jones_(judge)> <http://dbpedia.org/ontology/battle> ?uri. <http://dbpedia.org/resource/Allen_Boyd> <http://dbpedia.org/property/battles> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "battle",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "battle",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jim_Jones_(judge)",
			"label": "jones jim",
			"seq": "16,24"
		}, {
			"uri": "http://dbpedia.org/resource/Allen_Boyd",
			"label": "allen boyd",
			"seq": "51,60"
		}]
	},
	{
		"id": "a7c87f40069e4564932474884de6f858",
		"question": "For how many teams have the league players of Czech Extraliga, previously played?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/Czech_Extraliga> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "league",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Czech_Extraliga",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7f370a0e523a45c1a3b23489c96c5c88",
		"question": "List the people educated at Harvard-Westlake School and has resting place as Palo Alto, California?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Harvard-Westlake_School> . ?uri <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Palo_Alto,_California>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "place",
			"seq": "68,72"
		}, {
			"uri": "http://dbpedia.org/property/restingPlace",
			"label": "resting place",
			"seq": "60,72"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harvard-Westlake_School",
			"label": "harvard-westlake school",
			"seq": "28,50"
		}, {
			"uri": "http://dbpedia.org/resource/Palo_Alto,_California",
			"label": "california alto, palo",
			"seq": "77,97"
		}]
	},
	{
		"id": "8a6a91af36574b0f862aec730fbae99a",
		"question": "What is the band with previous members  Kevin Jonas and Joe Jonas?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Kevin_Jonas> . ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Joe_Jonas> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "members",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/property/pastMembers",
			"label": "members",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kevin_Jonas",
			"label": "kevin jonas",
			"seq": "40,50"
		}, {
			"uri": "http://dbpedia.org/resource/Joe_Jonas",
			"label": "jonas joe",
			"seq": "46,54"
		}]
	},
	{
		"id": "5123bf218806473e8b8cb4decac4c5c1",
		"question": "Who offers the services of OneDrive and Outlook.com?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/OneDrive> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Outlook.com> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "15,22"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "15,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/OneDrive",
			"label": "onedrive",
			"seq": "27,34"
		}, {
			"uri": "http://dbpedia.org/resource/Outlook.com",
			"label": "outlook.com",
			"seq": "40,50"
		}]
	},
	{
		"id": "ebe0a1b44e2c4bb081fc827147037d26",
		"question": "What did other artists associated with the Shirelles make?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Shirelles> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated",
			"seq": "23,32"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "associated",
			"seq": "23,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artists",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Shirelles",
			"label": "shirelles",
			"seq": "43,51"
		}]
	},
	{
		"id": "0a735fe654c440d3aa2c9dcdb4aaf390",
		"question": "Which parent company of the Cornell University Press is also the alma mater of the Mario Garca Menocal?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cornell_University_Press> <http://dbpedia.org/ontology/parentCompany> ?uri. <http://dbpedia.org/resource/Mario_Garc\u00eda_Menocal> <http://dbpedia.org/ontology/almaMater> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "company parent",
			"seq": "6,19"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "65,74"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cornell_University_Press",
			"label": "university cornell press",
			"seq": "28,51"
		}, {
			"uri": "http://dbpedia.org/resource/Mario_Garc\u00eda_Menocal",
			"label": "menocal mario",
			"seq": "83,95"
		}]
	},
	{
		"id": "faf06a2c20664530a15b7b7d5b272fdc",
		"question": "Count the band members of Skull Gang?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Skull_Gang> <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "402",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "members",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "members",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Skull_Gang",
			"label": "skull gang",
			"seq": "26,35"
		}]
	},
	{
		"id": "9d219753a5dd4445828a1191d8654d63",
		"question": "Name the nearest city to David W. Brown House ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_W._Brown_House> <http://dbpedia.org/ontology/nearestCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "nearest city",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_W._Brown_House",
			"label": "house david brown w.",
			"seq": "25,44"
		}]
	},
	{
		"id": "f01315d63b924a25a46e91aae29457bc",
		"question": "What is the political party to which Purnima Banerjee is a member of?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_Nutting> <http://dbpedia.org/ontology/knownFor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "of",
			"seq": "66,67"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Nutting",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7c3c9d3e96c54807847b7a2b14049933",
		"question": "Who was the president during the time the opponent of John Hospers was in the office?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/John_Hospers> . ?x <http://dbpedia.org/ontology/incumbent> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponent",
			"seq": "42,49"
		}, {
			"uri": "http://dbpedia.org/ontology/incumbent",
			"label": "opponent",
			"seq": "42,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Hospers",
			"label": "hospers john",
			"seq": "54,65"
		}]
	},
	{
		"id": "7adccf6358744d82b563e59f30b482fa",
		"question": "Whcih land of Citi Trends is also the constituency of Malik Al-Hassan Yakubu ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Malik_Al-Hassan_Yakubu> <http://dbpedia.org/property/constituency> ?uri. <http://dbpedia.org/resource/CitiTrends_(radio_show)> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "38,49"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "constituency",
			"seq": "38,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Malik_Al-Hassan_Yakubu",
			"label": "al-hassan yakubu malik",
			"seq": "54,75"
		}, {
			"uri": "http://dbpedia.org/resource/CitiTrends_(radio_show)",
			"label": "trends",
			"seq": "19,24"
		}]
	},
	{
		"id": "4bd70a53db094071a29c3e999f05bee9",
		"question": "In which country does the publishing house exist which was cofounded by Panos Loannides?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Panos_Ioannides> . ?x <http://dbpedia.org/property/country> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Publisher>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "cofounded",
			"seq": "59,67"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "country",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Publisher",
			"label": "publishing",
			"seq": "26,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Panos_Ioannides",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "03d1aac45ffe4ba0a49144fd00b0c7b1",
		"question": "List all the awards won by the artist who has won SIGGRAPH ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/SIGGRAPH> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/SIGGRAPH",
			"label": "siggraph",
			"seq": "50,57"
		}]
	},
	{
		"id": "133aa4a4648d4bb3b3f15ed06a0566cd",
		"question": "Name the work institutions of Andrew Schally?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Andrew_Schally> <http://dbpedia.org/property/workInstitutions> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/workInstitutions",
			"label": "institutions work",
			"seq": "9,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Andrew_Schally",
			"label": "schally andrew",
			"seq": "30,43"
		}]
	},
	{
		"id": "48faaecba3194be8a5d4216c2e5bbe29",
		"question": "To which settlement does Elliot Bay belong to?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elliott_Bay> <http://dbpedia.org/property/cities> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "does",
			"seq": "20,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elliott_Bay",
			"label": "elliot bay",
			"seq": "25,34"
		}]
	},
	{
		"id": "ab45c23c549d43d290b260f9930c647e",
		"question": "What are the important buildings of the architect whose one of the significant building is Krasnye Vorota?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/significantBuilding> <http://dbpedia.org/resource/Krasnye_Vorota_(Moscow_Metro)> . ?x <http://dbpedia.org/ontology/significantBuilding> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/significantBuilding",
			"label": "significant building",
			"seq": "23,42"
		}, {
			"uri": "http://dbpedia.org/ontology/significantBuilding",
			"label": "significant building",
			"seq": "23,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Architect",
			"label": "architect",
			"seq": "40,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Krasnye_Vorota_(Moscow_Metro)",
			"label": "krasnye vorota",
			"seq": "91,104"
		}]
	},
	{
		"id": "ae46bb43a8ad4337abd5a034defa5266",
		"question": "In how many regions is the Baco Noir made?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Baco_noir> <http://dbpedia.org/ontology/wineRegion> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "regions",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Baco_noir",
			"label": "noir baco",
			"seq": "27,35"
		}]
	},
	{
		"id": "59739c63c5ec4c2d8d42e0dfefe5565a",
		"question": "Which movies have their music composed by someone that signed up with RCA Records?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/RCA_Records> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "records",
			"seq": "74,80"
		}, {
			"uri": "http://dbpedia.org/ontology/musicComposer",
			"label": "composed",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "with",
			"seq": "65,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/RCA_Records",
			"label": "records rca",
			"seq": "70,80"
		}]
	},
	{
		"id": "4d4d5eb4e4af459bb778d50006a9fc0b",
		"question": "Where does the jurisdiction of European Border and Coast Guard fall?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/European_Border_and_Coast_Guard> <http://dbpedia.org/property/jurisdiction> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/jurisdiction",
			"label": "jurisdiction",
			"seq": "15,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/European_Border_and_Coast_Guard",
			"label": "european border guard coast",
			"seq": "31,57"
		}]
	},
	{
		"id": "ccc04aa37c9b42178de44ab219cf6834",
		"question": "Which band produced the album Aida?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Aida_(musical)> . ?x <http://dbpedia.org/ontology/musicalArtist> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/album",
			"label": "album",
			"seq": "24,28"
		}, {
			"uri": "http://dbpedia.org/ontology/musicalArtist",
			"label": "aida",
			"seq": "30,33"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalWork",
			"label": "which",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Aida_(musical)",
			"label": "aida",
			"seq": "30,33"
		}]
	},
	{
		"id": "8f627e41b2a9414c9787d98739f906f1",
		"question": "How many movies have been directed by Orson Welles ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Orson_Welles>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/director",
			"label": "directed",
			"seq": "26,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "many",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Orson_Welles",
			"label": "welles orson",
			"seq": "38,49"
		}]
	},
	{
		"id": "5a074df3521141adb1aefaec144c1510",
		"question": "What do the banks owned by Norwegian ministry of finance produce?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Ministry_of_Finance_(Norway)> . ?x <http://dbpedia.org/property/products> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "norwegian",
			"seq": "27,35"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "produce",
			"seq": "57,63"
		}, {
			"uri": "http://dbpedia.org/ontology/Bank",
			"label": "banks",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ministry_of_Finance_(Norway)",
			"label": "ministry finance",
			"seq": "37,52"
		}]
	},
	{
		"id": "2ac31aab8ba340e8947ddfab3797c6d5",
		"question": "Name the common home port of the Trishna (yacht) and INS Viraat (R22)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trishna_(yacht)> <http://dbpedia.org/ontology/homeport> ?uri. <http://dbpedia.org/resource/INS_Viraat_(R22)> <http://dbpedia.org/ontology/homeport> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/homeport",
			"label": "port home",
			"seq": "16,24"
		}, {
			"uri": "http://dbpedia.org/ontology/homeport",
			"label": "port home",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Trishna_(yacht)",
			"label": "trishna (yacht)",
			"seq": "33,47"
		}, {
			"uri": "http://dbpedia.org/resource/INS_Viraat_(R22)",
			"label": "viraat (r22) ins",
			"seq": "53,68"
		}]
	},
	{
		"id": "9fbc4d9d9b2b46fab68cb8a4b910c7e3",
		"question": "Where is the stadium of Philadelphia Rage ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philadelphia_Rage> <http://dbpedia.org/ontology/stadium> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stadium",
			"label": "stadium",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Philadelphia_Rage",
			"label": "philadelphia rage",
			"seq": "24,40"
		}]
	},
	{
		"id": "f9e9a9d4684b4c4cbc193ca30cb7b7b6",
		"question": "What are the television shows whose network's successor is BBC Two?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/BBC_Two> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "46,54"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network's",
			"seq": "36,44"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC_Two",
			"label": "two bbc",
			"seq": "38,44"
		}]
	},
	{
		"id": "0899883477a746c38524653386c91724",
		"question": "Which office holder's resting place is William Henry Harrison Tomb State Memorial and has governor named Charles Willing Byrd?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/William_Henry_Harrison_Tomb_State_Memorial> . ?uri <http://dbpedia.org/ontology/governor> <http://dbpedia.org/resource/Charles_Willing_Byrd>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "resting place",
			"seq": "22,34"
		}, {
			"uri": "http://dbpedia.org/ontology/governor",
			"label": "governor",
			"seq": "90,97"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Henry_Harrison_Tomb_State_Memorial",
			"label": "memorial harrison william",
			"seq": "39,63"
		}, {
			"uri": "http://dbpedia.org/resource/Charles_Willing_Byrd",
			"label": "willing charles",
			"seq": "105,119"
		}]
	},
	{
		"id": "97da8d0de1584a23a8560ea19c285153",
		"question": "What organisation regulates and controls the New Sanno Hotel?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/ontology/tenant> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "the",
			"seq": "41,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_Sanno_Hotel",
			"label": "sanno hotel",
			"seq": "49,59"
		}]
	},
	{
		"id": "909f5544b90d4c97b7f4ae5e5c24b2e7",
		"question": "In which series do I find Minbari species' characters?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/species> <http://dbpedia.org/resource/Minbari> . ?x <http://dbpedia.org/ontology/series> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/species",
			"label": "species'",
			"seq": "34,41"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "characters",
			"seq": "43,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Minbari",
			"label": "minbari",
			"seq": "26,32"
		}]
	},
	{
		"id": "13dbeaf27a1e47de9803518e1c666298",
		"question": "Who designed the language integrated query?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri  . }",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designer",
			"label": "designed",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Language_Integrated_Query",
			"label": "integrated language query",
			"seq": "17,41"
		}]
	},
	{
		"id": "38ca63fc474a462fafe6fec5ad06b1e0",
		"question": "List the associates of bands which have a label by Motown ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Motown> . ?x <http://dbpedia.org/property/associatedActs> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "label",
			"seq": "42,46"
		}, {
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "associates",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "bands",
			"seq": "23,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Motown",
			"label": "motown",
			"seq": "51,56"
		}]
	},
	{
		"id": "eca396c7779e4ee7b71db8d671efb974",
		"question": "Name the partners of the models whose one of the partner is Thom Evans ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/partner> <http://dbpedia.org/resource/Thom_Evans> . ?x <http://dbpedia.org/ontology/partner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Model>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/partner",
			"label": "partner",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/partner",
			"label": "partner",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Model",
			"label": "models",
			"seq": "25,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thom_Evans",
			"label": "evans thom",
			"seq": "60,69"
		}]
	},
	{
		"id": "0b2cdf195c3d45109c78f3171835c056",
		"question": "Is Greg Weeks the band member of Beyond the Sixth Seal?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Beyond_the_Sixth_Seal> <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Greg_Weeks> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/bandMember",
			"label": "member band",
			"seq": "18,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Beyond_the_Sixth_Seal",
			"label": "beyond sixth seal the",
			"seq": "14,34"
		}, {
			"uri": "http://dbpedia.org/resource/Greg_Weeks",
			"label": "weeks greg",
			"seq": "3,12"
		}]
	},
	{
		"id": "8815d1ddfc484214b7b55c86c2793625",
		"question": "Who was the vice president under which elizabeth alexander served?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elizabeth_Alexander_(press_secretary)> <http://dbpedia.org/ontology/vicePresident> ?uri  . }",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/vicePresident",
			"label": "president vice",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elizabeth_Alexander_(press_secretary)",
			"label": "elizabeth alexander",
			"seq": "39,57"
		}]
	},
	{
		"id": "fecf2980af9448768aa17425d8c48dec",
		"question": "Name the television show voiced by April Stewart and Eliza Schneider?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/April_Stewart> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/voices",
			"label": "voiced",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/property/voices",
			"label": "voiced",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/April_Stewart",
			"label": "stewart april",
			"seq": "35,47"
		}, {
			"uri": "http://dbpedia.org/resource/Eliza_Schneider",
			"label": "schneider eliza",
			"seq": "53,67"
		}]
	},
	{
		"id": "ee5fc86d6ea147f0b4ab317a186d2083",
		"question": "Is Robin Gibb the singer of Oh! Darling?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Oh!_Darling> <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Robin_Gibb> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalArtist",
			"label": "singer",
			"seq": "18,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oh!_Darling",
			"label": "darling oh!",
			"seq": "28,38"
		}, {
			"uri": "http://dbpedia.org/resource/Robin_Gibb",
			"label": "robin gibb",
			"seq": "3,12"
		}]
	},
	{
		"id": "ff08a87358c14e6a98db33b34547c5b5",
		"question": "Where do networks affiliated with ETC broadcast?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/affiliation> <http://dbpedia.org/resource/ETC_(TV_channel)> . ?x <http://dbpedia.org/property/area> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliated",
			"seq": "18,27"
		}, {
			"uri": "http://dbpedia.org/property/area",
			"label": "where",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/BroadcastNetwork",
			"label": "broadcast",
			"seq": "38,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/ETC_(TV_channel)",
			"label": "etc",
			"seq": "34,36"
		}]
	},
	{
		"id": "62e1ac6a48374811b387c936277abf3f",
		"question": "Which borough is common for Duddeston and Bordesley railway station ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duddeston_railway_station> <http://dbpedia.org/property/borough> ?uri. <http://dbpedia.org/resource/Bordesley_railway_station> <http://dbpedia.org/property/borough> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/borough",
			"label": "borough",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/property/borough",
			"label": "borough",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Duddeston_railway_station",
			"label": "duddeston station railway",
			"seq": "28,52"
		}, {
			"uri": "http://dbpedia.org/resource/Bordesley_railway_station",
			"label": "bordesley station railway",
			"seq": "42,66"
		}]
	},
	{
		"id": "ae35cc3329ac40a08ebe49385e806d35",
		"question": "Name the office holder whose final resting place is North Bend and was part of Siege of fort recovery conflict ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Siege_of_Fort_Recovery> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/North_Bend,_Ohio>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "the",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "resting place",
			"seq": "35,47"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Siege_of_Fort_Recovery",
			"label": "recovery siege",
			"seq": "79,92"
		}, {
			"uri": "http://dbpedia.org/resource/North_Bend,_Ohio",
			"label": "north bend",
			"seq": "52,61"
		}]
	},
	{
		"id": "19aa6a8901924e0998a44283eaa9aef4",
		"question": "In which state is Goose Lake Valle, which is also part of Lava River Cave ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goose_Lake_Valley> <http://dbpedia.org/ontology/state> ?uri. <http://dbpedia.org/resource/Lava_River_Cave> <http://dbpedia.org/ontology/location> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/state",
			"label": "state",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "in",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Goose_Lake_Valley",
			"label": "goose",
			"seq": "18,22"
		}, {
			"uri": "http://dbpedia.org/resource/Lava_River_Cave",
			"label": "river lava cave",
			"seq": "58,72"
		}]
	},
	{
		"id": "75b80b3f8a524509a21451d9a7acc46e",
		"question": "In which fields have people born in Lausanne worked?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Lausanne> . ?x <http://dbpedia.org/property/fields> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "people",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/property/fields",
			"label": "fields",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lausanne",
			"label": "lausanne",
			"seq": "36,43"
		}]
	},
	{
		"id": "2275055777524db1a78e0856a6e2cc1b",
		"question": "Name the musician who gave the music in Tonight's the night and is also wedded to Alana Stewart ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonight's_the_Night_(2003_musical)> <http://dbpedia.org/property/music> ?uri. <http://dbpedia.org/resource/Alana_Stewart> <http://dbpedia.org/ontology/spouse> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "also",
			"seq": "67,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tonight's_the_Night_(2003_musical)",
			"label": "tonight's",
			"seq": "40,48"
		}, {
			"uri": "http://dbpedia.org/resource/Alana_Stewart",
			"label": "stewart alana",
			"seq": "82,94"
		}]
	},
	{
		"id": "86888920922147cfbbe21f09a0e2c077",
		"question": "For whom did Michael Springer palyed for which is also had a former student named Donald Brooks ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Springer> <http://dbpedia.org/property/team> ?uri. <http://dbpedia.org/resource/Donald_Brooks> <http://dbpedia.org/property/education> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/team",
			"label": "named",
			"seq": "76,80"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "donald",
			"seq": "82,87"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Springer",
			"label": "springer michael",
			"seq": "13,28"
		}, {
			"uri": "http://dbpedia.org/resource/Donald_Brooks",
			"label": "donald brooks",
			"seq": "82,94"
		}]
	},
	{
		"id": "9a61bb81243145d9a21abaa26c33e519",
		"question": "Is Roger Federer the flagbearer of Switzerland at the 2004 Summer Olympics?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics> <http://dbpedia.org/property/flagbearer> <http://dbpedia.org/resource/Roger_Federer> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/flagbearer",
			"label": "flagbearer",
			"seq": "21,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics",
			"label": "switzerland olympics summer",
			"seq": "35,61"
		}, {
			"uri": "http://dbpedia.org/resource/Roger_Federer",
			"label": "federer roger",
			"seq": "3,15"
		}]
	},
	{
		"id": "8fb26b1d97b449afb64a79c4c66ada90",
		"question": "How many artists have collaborated with famous guitar players?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableInstruments",
			"label": "artists",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "artists",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artists",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Guitar",
			"label": "guitar",
			"seq": "47,52"
		}]
	},
	{
		"id": "b7df21da53144aef8f0ee3bb6dbc9e31",
		"question": "Which US city can be said to be a part of american mediterranean sea and the biscayne bay?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/American_Mediterranean_Sea> <http://dbpedia.org/property/cities> ?uri. <http://dbpedia.org/resource/Biscayne_Bay> <http://dbpedia.org/property/cities> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "city",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "city",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Mediterranean_Sea",
			"label": "mediterranean american",
			"seq": "42,63"
		}, {
			"uri": "http://dbpedia.org/resource/Biscayne_Bay",
			"label": "biscayne",
			"seq": "77,84"
		}]
	},
	{
		"id": "30605f74aa054fabbb707ab5e85247fe",
		"question": "List the profession of senate whose one of the profession is United States Coast Guard ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/United_States_Coast_Guard> . ?x <http://dbpedia.org/ontology/profession> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "profession",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "profession",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Politician",
			"label": "list",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Coast_Guard",
			"label": "united states guard coast",
			"seq": "61,85"
		}]
	},
	{
		"id": "9a955de401c24f42860fa3e6615c803a",
		"question": "What is the broadcast area of CFRX ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/CFRX> <http://dbpedia.org/ontology/broadcastArea> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/broadcastArea",
			"label": "broadcast area",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CFRX",
			"label": "cfrx",
			"seq": "30,33"
		}]
	},
	{
		"id": "3d8f7450e4e84935b8f482bf336f0843",
		"question": "What have some US citizens died of?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/citizenship> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/citizenship",
			"label": "citizens",
			"seq": "18,25"
		}, {
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "have",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "60f9b1b1c6234d06881d6c6c2211192a",
		"question": "What are some famous veterinary physicians known for?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/field> <http://dbpedia.org/resource/Veterinary_physician> . ?x <http://dbpedia.org/property/knownFor> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/field",
			"label": "for",
			"seq": "49,51"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "43,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Veterinary_physician",
			"label": "veterinary",
			"seq": "21,30"
		}]
	},
	{
		"id": "da022345367d441484d1fdcb8582c86b",
		"question": "Does the platte river originate in Colorado?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Platte_River> <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/Colorado> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceRegion",
			"label": "originate",
			"seq": "22,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Platte_River",
			"label": "platte river",
			"seq": "9,20"
		}, {
			"uri": "http://dbpedia.org/resource/Colorado",
			"label": "colorado",
			"seq": "35,42"
		}]
	},
	{
		"id": "a09f56627a1f4c2b81bc88acfcd1d276",
		"question": "What is the venerated in of Edwin of Northumbria ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edwin_of_Northumbria> <http://dbpedia.org/property/veneratedIn> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "venerated",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edwin_of_Northumbria",
			"label": "northumbria edwin",
			"seq": "28,44"
		}]
	},
	{
		"id": "1045a9b2aa9742818b6c4fc9ba72c399",
		"question": "Is the Hyundai Lavita assembled in Kulim?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Kulim> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/assembly",
			"label": "assembled",
			"seq": "22,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hyundai_Lavita",
			"label": "hyundai lavita",
			"seq": "7,20"
		}, {
			"uri": "http://dbpedia.org/resource/Kulim",
			"label": "kulim",
			"seq": "35,39"
		}]
	},
	{
		"id": "02fc143c1e0e4cdfb5594f43eb88137c",
		"question": "Which labels have published songs written by Harry Connick Jr?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Harry_Connick,_Jr.> . ?x <http://dbpedia.org/property/label> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "written",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "labels",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Song",
			"label": "songs",
			"seq": "28,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harry_Connick,_Jr.",
			"label": "connick harry",
			"seq": "45,57"
		}]
	},
	{
		"id": "2eb3f8a41e454021a4af658ede9f06ed",
		"question": "What cities are around the sea which flows into Marmara?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/inflow> <http://dbpedia.org/resource/Sea_of_Marmara> . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/inflow",
			"label": "flows",
			"seq": "37,41"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "27,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sea_of_Marmara",
			"label": "marmara sea",
			"seq": "27,37"
		}]
	},
	{
		"id": "f53a890c59d2460590398aa51119216e",
		"question": "Name the sea into which Danish Straits flows and has Kaliningrad as one of the city on the shore ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> . ?uri <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Danish_straits>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "city",
			"seq": "79,82"
		}, {
			"uri": "http://dbpedia.org/property/outflow",
			"label": "flows",
			"seq": "39,43"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "9,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kaliningrad",
			"label": "kaliningrad",
			"seq": "53,63"
		}, {
			"uri": "http://dbpedia.org/resource/Danish_straits",
			"label": "straits danish",
			"seq": "24,37"
		}]
	},
	{
		"id": "20805a9d262743e789ad75cd118f889a",
		"question": "What sports team's arena is The Palace of Auburn Hills",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/arena> <http://dbpedia.org/resource/The_Palace_of_Auburn_Hills>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/arena",
			"label": "arena",
			"seq": "19,23"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "sports",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Palace_of_Auburn_Hills",
			"label": "palace auburn hills",
			"seq": "32,50"
		}]
	},
	{
		"id": "e163314e98334f77af0d98ad0c754fc7",
		"question": "ITV employes how many people?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/ITV_(TV_network)>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "employes",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/ITV_(TV_network)",
			"label": "itv",
			"seq": "0,2"
		}]
	},
	{
		"id": "b75560b2e765458984a0419ab35147c9",
		"question": "What is the mascot of the military unit whose commander is Herbert Bautista ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/notableCommander> <http://dbpedia.org/resource/Herbert_Bautista> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableCommander",
			"label": "commander",
			"seq": "46,54"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "military unit",
			"seq": "26,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Herbert_Bautista",
			"label": "bautista herbert",
			"seq": "59,74"
		}]
	},
	{
		"id": "128fa3e3924b4f7f8f3960d994deda55",
		"question": "Whihc associate of THomas Bryan Martin is also the founder of Pittsburgh ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomas_Bryan_Martin> <http://dbpedia.org/ontology/associate> ?uri. <http://dbpedia.org/resource/Pittsburgh> <http://dbpedia.org/ontology/founder> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associate",
			"label": "associate",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founder",
			"seq": "51,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thomas_Bryan_Martin",
			"label": "thomas martin bryan",
			"seq": "19,37"
		}, {
			"uri": "http://dbpedia.org/resource/Pittsburgh",
			"label": "pittsburgh",
			"seq": "62,71"
		}]
	},
	{
		"id": "64e38f50da46457e8bb6a34f4d6cb76f",
		"question": "What are the awards won by the film editor of The Search?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Search_(2014_film)> <http://dbpedia.org/ontology/editing> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "editor",
			"seq": "36,41"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Search_(2014_film)",
			"label": "search film the",
			"seq": "9,23"
		}]
	},
	{
		"id": "ae5b96d1769c443288f79abd58151136",
		"question": "Is the national endowment of arts under the jurisdiction of federal government of US?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/National_Endowment_for_the_Arts> <http://dbpedia.org/property/jurisdiction> <http://dbpedia.org/resource/Federal_government_of_the_United_States> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/jurisdiction",
			"label": "jurisdiction",
			"seq": "44,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Endowment_for_the_Arts",
			"label": "endowment national",
			"seq": "7,24"
		}, {
			"uri": "http://dbpedia.org/resource/Federal_government_of_the_United_States",
			"label": "government federal",
			"seq": "60,77"
		}]
	},
	{
		"id": "e01fcd131f144d599b2e638f003d7552",
		"question": "Was Kevin Rudd the PM of Julia Gillard?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Julia_Gillard> <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Kevin_Rudd> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "kevin",
			"seq": "4,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Julia_Gillard",
			"label": "gillard julia",
			"seq": "25,37"
		}, {
			"uri": "http://dbpedia.org/resource/Kevin_Rudd",
			"label": "kevin rudd",
			"seq": "4,13"
		}]
	},
	{
		"id": "8b01cd75cf8c483682925fdc176c2317",
		"question": "Which country were the people from who became famous for the Ramon Mangsaysay Award?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Ramon_Magsaysay_Award> . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "for",
			"seq": "53,55"
		}, {
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "for",
			"seq": "53,55"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "ramon",
			"seq": "61,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ramon_Magsaysay_Award",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "976416dab3a74a80855d6d582a488ff4",
		"question": "Which employer of Michael M. Sears is also the producer of Delta III ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_M._Sears> <http://dbpedia.org/ontology/employer> ?uri. <http://dbpedia.org/resource/Delta_III> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "employer",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "michael",
			"seq": "18,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_M._Sears",
			"label": "michael sears",
			"seq": "18,30"
		}, {
			"uri": "http://dbpedia.org/resource/Delta_III",
			"label": "delta iii",
			"seq": "59,67"
		}]
	},
	{
		"id": "66cb24d6ac6b49799c5f50a7afff386e",
		"question": "Name some schools with a bison as their mascot?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Bison>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "40,45"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bison",
			"label": "bison",
			"seq": "25,29"
		}]
	},
	{
		"id": "83152a2adbe949ab904fda1101384ee7",
		"question": "Guggenheim family is the cofounder of a company that invested stocks in which baseball teams?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Guggenheim_family> . ?uri <http://dbpedia.org/property/owner> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "cofounder",
			"seq": "25,33"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "cofounder",
			"seq": "25,33"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballTeam",
			"label": "baseball",
			"seq": "78,85"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Guggenheim_family",
			"label": "guggenheim family",
			"seq": "0,16"
		}]
	},
	{
		"id": "2779011abe114ab58fb5e700589ea345",
		"question": "Who won the ohio house of representatives, 2010?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010> <http://dbpedia.org/property/incumbent> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/incumbent",
			"label": "house",
			"seq": "17,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "8a38e3ab78b24fbbb14d1cc919014e96",
		"question": "Where is the headquarters of the public transit system which owns the American Boulevard (Metro Transit station) located ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/American_Boulevard_(Metro_Transit_station)> <http://dbpedia.org/ontology/owningOrganisation> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PublicTransitSystem>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningOrganisation",
			"label": "station)",
			"seq": "104,111"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "13,24"
		}, {
			"uri": "http://dbpedia.org/ontology/PublicTransitSystem",
			"label": "transit",
			"seq": "40,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Boulevard_(Metro_Transit_station)",
			"label": "boulevard station) american",
			"seq": "70,96"
		}]
	},
	{
		"id": "1d381dc7465f4077a61b29e0787de6e6",
		"question": "Which current Michigan Wolverines team member debuted in Chicago Bears ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/debutteam> <http://dbpedia.org/resource/Chicago_Bears> . ?uri <http://dbpedia.org/property/currentteam> <http://dbpedia.org/resource/Michigan_Wolverines>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debuted",
			"seq": "46,52"
		}, {
			"uri": "http://dbpedia.org/property/currentteam",
			"label": "current team",
			"seq": "6,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chicago_Bears",
			"label": "chicago bears",
			"seq": "57,69"
		}, {
			"uri": "http://dbpedia.org/resource/Michigan_Wolverines",
			"label": "wolverines michigan",
			"seq": "14,32"
		}]
	},
	{
		"id": "0bad2fab137148b9af20a97efb55fe8b",
		"question": "Who operates Liverpool Playhouse ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liverpool_Playhouse> <http://dbpedia.org/ontology/operatedBy> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operates",
			"seq": "4,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Liverpool_Playhouse",
			"label": "playhouse liverpool",
			"seq": "13,31"
		}]
	},
	{
		"id": "ffe42b8531f540398540cdb1b6cb13ca",
		"question": "List all the members of the organization whose one of the members is Bangladesh ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Bangladesh> . ?x <http://dbpedia.org/property/membership> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/membership",
			"label": "members",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/property/membership",
			"label": "members",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organization",
			"seq": "28,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bangladesh",
			"label": "bangladesh",
			"seq": "69,78"
		}]
	},
	{
		"id": "832149002e9c4fbb885ab3ab42730390",
		"question": "Who owns Torrey Pines Gliderport?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Torrey_Pines_Gliderport> <http://dbpedia.org/property/owner> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owns",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Torrey_Pines_Gliderport",
			"label": "gliderport torrey pines",
			"seq": "9,31"
		}]
	},
	{
		"id": "23972462c8c7409cb83f6a8f21f0c607",
		"question": "where did Deion Sanders debut?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut",
			"seq": "24,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Deion_Sanders",
			"label": "sanders deion",
			"seq": "10,22"
		}]
	},
	{
		"id": "ce4f33c52b244261be90196bcfed8237",
		"question": "Which office holder's successor is Adrian A. Basora and child named Lori Black?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora> . ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Lori_Black>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "22,30"
		}, {
			"uri": "http://dbpedia.org/property/children",
			"label": "child",
			"seq": "56,60"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Adrian_A._Basora",
			"label": "basora adrian",
			"seq": "35,47"
		}, {
			"uri": "http://dbpedia.org/resource/Lori_Black",
			"label": "black lori",
			"seq": "68,77"
		}]
	},
	{
		"id": "d85c374fb7e047cda434efae8462b69b",
		"question": "List all the school of the rugby player whose one of the school is Michael House ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/school> <http://dbpedia.org/resource/Michaelhouse> . ?x <http://dbpedia.org/property/school> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RugbyPlayer>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/school",
			"label": "school",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/property/school",
			"label": "school",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/RugbyPlayer",
			"label": "player rugby",
			"seq": "27,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michaelhouse",
			"label": "michael house",
			"seq": "67,79"
		}]
	},
	{
		"id": "218fb3f1f7bf4d3599daaf5a95885fbe",
		"question": "Name the tv show with judges Randy Jackson and Jennifer Lopez?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/judges",
			"label": "judges",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/property/judges",
			"label": "judges",
			"seq": "22,27"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Randy_Jackson",
			"label": "jackson randy",
			"seq": "29,41"
		}, {
			"uri": "http://dbpedia.org/resource/Jennifer_Lopez",
			"label": "jennifer lopez",
			"seq": "47,60"
		}]
	},
	{
		"id": "fda94b922adc4c96852e7800f60f797a",
		"question": "What is the total number of professions in which someone who has suicided worked?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathCause",
			"label": "the",
			"seq": "8,10"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "professions",
			"seq": "28,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Suicide",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "59100a9ec0e24b988611ea5a66675140",
		"question": "To which country do the players of Waitakere United belong?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Waitakere_United> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "the",
			"seq": "20,22"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "the",
			"seq": "20,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Waitakere_United",
			"label": "waitakere united",
			"seq": "35,50"
		}]
	},
	{
		"id": "75a241fa2e024a7a95e0108a8b6b66ff",
		"question": "How many relatives are there of veterans of operation Barbarossa?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Operation_Barbarossa> . ?x <http://dbpedia.org/ontology/relation> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "are",
			"seq": "19,21"
		}, {
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Operation_Barbarossa",
			"label": "barbarossa operation",
			"seq": "44,63"
		}]
	},
	{
		"id": "5f69f094954f4553a0bd03d14da852d6",
		"question": "How many leagues have used the O.co Coliseum?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/O.co_Coliseum> <http://dbpedia.org/ontology/tenant> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "the",
			"seq": "27,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/O.co_Coliseum",
			"label": "coliseum o.co",
			"seq": "31,43"
		}]
	},
	{
		"id": "23a0e9e271d44ba286716b46fd3eb912",
		"question": "What kind of games are made by Interplay Entertainment?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "interplay",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "are",
			"seq": "19,21"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Interplay_Entertainment",
			"label": "entertainment interplay",
			"seq": "31,53"
		}]
	},
	{
		"id": "571c9d7dbe1f4a07a655803197f286d4",
		"question": "What is the nationality of Sune Agerschou ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sune_Agerschou> <http://dbpedia.org/ontology/nationality> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sune_Agerschou",
			"label": "agerschou sune",
			"seq": "27,40"
		}]
	},
	{
		"id": "46880d365fbe4d54b1b965e5b5e1bb77",
		"question": "Where did the spouse of pmare ii die?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/P\u014dmare_II> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "spouse",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/P\u014dmare_II",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "741520a75f1a4ae9bd0c91c2dcde6627",
		"question": "What acts and artists are associated with people who have worked with Divertis?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Divertis> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "associated acts",
			"seq": "5,19"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated",
			"seq": "26,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Divertis",
			"label": "divertis",
			"seq": "70,77"
		}]
	},
	{
		"id": "eb285e418d9641bcb6ba0c86c444d355",
		"question": "Where do cherry chevapravatdumrong and daisi pollard both live?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cherry_Chevapravatdumrong> <http://dbpedia.org/ontology/residence> ?uri. <http://dbpedia.org/resource/Daisi_Pollard> <http://dbpedia.org/ontology/residence> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "live",
			"seq": "58,61"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "live",
			"seq": "58,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cherry_Chevapravatdumrong",
			"label": "chevapravatdumrong cherry",
			"seq": "9,33"
		}, {
			"uri": "http://dbpedia.org/resource/Daisi_Pollard",
			"label": "pollard daisi",
			"seq": "39,51"
		}]
	},
	{
		"id": "58d7140c8ca74c2d91c063e1e8108063",
		"question": "How many companies have manufactured the rockets launched from the Cape Canaveral Air Force Station?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launched",
			"seq": "49,56"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "24,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station",
			"label": "canaveral station",
			"seq": "72,88"
		}]
	},
	{
		"id": "f8d33f0a3ea5417ca2071226875c8ff9",
		"question": "Name the  former broadcast network of the television station which is the sister stations of WGBC?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/WGBC> <http://dbpedia.org/property/sisterStations> ?x . ?x <http://dbpedia.org/ontology/formerBroadcastNetwork> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterStations",
			"label": "stations",
			"seq": "81,88"
		}, {
			"uri": "http://dbpedia.org/ontology/formerBroadcastNetwork",
			"label": "broadcast network former",
			"seq": "10,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WGBC",
			"label": "wgbc",
			"seq": "93,96"
		}]
	},
	{
		"id": "fc01eb147abb4f76a27e4ee15954b519",
		"question": "Which software uses GTK+ as programming language?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/GTK+>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "programming language",
			"seq": "28,47"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/GTK+",
			"label": "gtk+",
			"seq": "20,23"
		}]
	},
	{
		"id": "9fd2de743eac4abf82d003f30ce832e3",
		"question": "What is the distributing label of StandBy Records ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/ontology/distributingLabel> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributingLabel",
			"label": "distributing label",
			"seq": "12,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/StandBy_Records",
			"label": "standby records",
			"seq": "34,48"
		}]
	},
	{
		"id": "431e3662c6994776a8f35a3d3eb26027",
		"question": "How many bands are based in London?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/London>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "how",
			"seq": "0,2"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "bands",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/London",
			"label": "london",
			"seq": "28,33"
		}]
	},
	{
		"id": "8f0cd88f6b6a4041bbed6b3723281f21",
		"question": "List all the writers of the comics which has Robert Bernstein as one of the writer ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/writers> <http://dbpedia.org/resource/Robert_Bernstein_(comics)> . ?x <http://dbpedia.org/property/writers> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Comic>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writers",
			"label": "writers",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/property/writers",
			"label": "writers",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Comic",
			"label": "comics",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Bernstein_(comics)",
			"label": "bernstein robert comics",
			"seq": "28,50"
		}]
	},
	{
		"id": "910a28df8fc54d3cbd74bc9e7923cc70",
		"question": "To which educational institute does Cornell University Press belong to?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cornell_University_Press> <http://dbpedia.org/ontology/parentCompany> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "press",
			"seq": "55,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cornell_University_Press",
			"label": "university cornell press",
			"seq": "36,59"
		}]
	},
	{
		"id": "f1bd78d345634e9d9d237a044ba8599b",
		"question": "Is Robert Boyle a chemist?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Robert_Boyle> <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Chemistry> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/field",
			"label": "is",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Boyle",
			"label": "robert boyle",
			"seq": "3,14"
		}, {
			"uri": "http://dbpedia.org/resource/Chemistry",
			"label": "chemist",
			"seq": "18,24"
		}]
	},
	{
		"id": "f6df767b04b1431ab3fbfb73d45d7c56",
		"question": "What city was recorded in Live in detroit which is also the official residence of ken Holland ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri. <http://dbpedia.org/resource/Ken_Holland> <http://dbpedia.org/ontology/residence> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residence",
			"seq": "69,77"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Live_in_Detroit,_MI",
			"label": "detroit live",
			"seq": "26,37"
		}, {
			"uri": "http://dbpedia.org/resource/Ken_Holland",
			"label": "holland ken",
			"seq": "82,92"
		}]
	},
	{
		"id": "9f90dd10b77a48d1a9a361b34af9145d",
		"question": "Which famous physicist was academically advised by Benjamin Pulleyn?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Benjamin_Pulleyn>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicAdvisor",
			"label": "academically",
			"seq": "27,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "physicist",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Benjamin_Pulleyn",
			"label": "benjamin pulleyn",
			"seq": "51,66"
		}]
	},
	{
		"id": "3e34613e0d93409d81b5a5ed8d0736e8",
		"question": "What is the county seat of the district through which the Beckler River flows?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Beckler_River> <http://dbpedia.org/ontology/district> ?x . ?x <http://dbpedia.org/ontology/countySeat> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/district",
			"label": "district",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/ontology/countySeat",
			"label": "county seat",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/AdministrativeRegion",
			"label": "district",
			"seq": "31,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Beckler_River",
			"label": "beckler river",
			"seq": "58,70"
		}]
	},
	{
		"id": "7043f3a3431945138482107c7f71a3a7",
		"question": "Is Sloth in the Chordate phylum?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Sloth> <http://dbpedia.org/property/phylum> <http://dbpedia.org/resource/Chordate> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/phylum",
			"label": "phylum",
			"seq": "25,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sloth",
			"label": "sloth",
			"seq": "3,7"
		}, {
			"uri": "http://dbpedia.org/resource/Chordate",
			"label": "chordate",
			"seq": "16,23"
		}]
	},
	{
		"id": "a64b3098de204f9fa741346a1da0d672",
		"question": "Name some local authorities of schools which have a mixed gender education system?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/gender> <http://dbpedia.org/resource/Mixed-sex_education> . ?x <http://dbpedia.org/ontology/localAuthority> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/gender",
			"label": "gender",
			"seq": "58,63"
		}, {
			"uri": "http://dbpedia.org/ontology/localAuthority",
			"label": "authorities",
			"seq": "16,26"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "31,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mixed-sex_education",
			"label": "education mixed",
			"seq": "52,66"
		}]
	},
	{
		"id": "0a3456b26fd7499cb6adbde077a787ab",
		"question": "Is Eddie Bravo the trainer of Shinya Aoki?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Shinya_Aoki> <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Eddie_Bravo> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/trainer",
			"label": "trainer",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shinya_Aoki",
			"label": "shinya aoki",
			"seq": "30,40"
		}, {
			"uri": "http://dbpedia.org/resource/Eddie_Bravo",
			"label": "eddie bravo",
			"seq": "3,13"
		}]
	},
	{
		"id": "eee8cd2ce7864cc18d521259b6385d55",
		"question": "Name the TV shows related to Babylon 5: The Lost Tales and is aired on Prime TIme Entertainment Networks ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Babylon_5:_The_Lost_Tales> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/Prime_Time_Entertainment_Network>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "18,24"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "networks",
			"seq": "96,103"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "tales",
			"seq": "49,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Babylon_5:_The_Lost_Tales",
			"label": "babylon tales lost",
			"seq": "29,46"
		}, {
			"uri": "http://dbpedia.org/resource/Prime_Time_Entertainment_Network",
			"label": "entertainment",
			"seq": "82,94"
		}]
	},
	{
		"id": "39f06aa4252f4be0914611ab542313a4",
		"question": "What is the operating system of the LG Optimus Vu and also the developer of the Dart (programming language)",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/LG_Optimus_Vu> <http://dbpedia.org/ontology/operatingSystem> ?uri. <http://dbpedia.org/resource/Dart_(programming_language)> <http://dbpedia.org/property/developer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating system",
			"seq": "12,27"
		}, {
			"uri": "http://dbpedia.org/property/developer",
			"label": "developer",
			"seq": "63,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/LG_Optimus_Vu",
			"label": "optimus",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/resource/Dart_(programming_language)",
			"label": "(programming language)",
			"seq": "85,106"
		}]
	},
	{
		"id": "20279be806b8412f9bc87ac6de8c50aa",
		"question": "What are some products manufactured by Sony? ",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Sony>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "23,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6b0903f50742485485384cf6feffa59b",
		"question": "What is the almamater of the successor of F. A. Little, Jr.? ",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/F._A._Little,_Jr.> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "29,37"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "almamater",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/F._A._Little,_Jr.",
			"label": "little,",
			"seq": "48,54"
		}]
	},
	{
		"id": "888a87ee40884a92bb779b4a08e06f63",
		"question": "List the alma mater of the person who is wedded to Sissela Bok.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Sissela_Bok> . ?x <http://dbpedia.org/property/almaMater> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "sissela",
			"seq": "51,57"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sissela_Bok",
			"label": "sissela",
			"seq": "51,57"
		}]
	},
	{
		"id": "7dee62b229f644b4a13aecb01ef09554",
		"question": "Does Chicago own the Monroe Station?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)> <http://dbpedia.org/property/owned> <http://dbpedia.org/resource/Chicago> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owned",
			"label": "own",
			"seq": "13,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)",
			"label": "station monroe",
			"seq": "21,34"
		}, {
			"uri": "http://dbpedia.org/resource/Chicago",
			"label": "chicago",
			"seq": "5,11"
		}]
	},
	{
		"id": "97750e1c2bda4a70a98f6a3d3fde3cc5",
		"question": "What have some famous Christians died of?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Christianity> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "christians",
			"seq": "22,31"
		}, {
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "have",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christianity",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "efac36cec91343a9b9f1ede98613d8b2",
		"question": "Does KOMC play Gospel Music?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/KOMC_(AM)> <http://dbpedia.org/ontology/programmeFormat> <http://dbpedia.org/resource/Gospel_music> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/programmeFormat",
			"label": "play",
			"seq": "10,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/KOMC_(AM)",
			"label": "komc",
			"seq": "5,8"
		}, {
			"uri": "http://dbpedia.org/resource/Gospel_music",
			"label": "gospel music",
			"seq": "15,26"
		}]
	},
	{
		"id": "407e2cde683b484b86e7ee73d945f1fe",
		"question": "Name the children of the person who is the star of The Weathered Underground ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Weathered_Underground> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/property/children> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "star",
			"seq": "43,46"
		}, {
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "25,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Weathered_Underground",
			"label": "underground weathered",
			"seq": "55,75"
		}]
	},
	{
		"id": "9d830815b20d441b91c44bc90f8e9dc0",
		"question": "What are some developers which use Emacs Lisp in their projects?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/Emacs_Lisp> . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "projects",
			"seq": "55,62"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developers",
			"seq": "14,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Emacs_Lisp",
			"label": "emacs lisp",
			"seq": "35,44"
		}]
	},
	{
		"id": "82e10e11c396490daac1e2ef25d844d1",
		"question": "Which rivers start in a country whose leader is Irene Mambilima?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Irene_Mambilima> . ?uri <http://dbpedia.org/ontology/sourceCountry> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "leader",
			"seq": "38,43"
		}, {
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "country",
			"seq": "24,30"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Irene_Mambilima",
			"label": "mambilima irene",
			"seq": "48,62"
		}]
	},
	{
		"id": "f1f238c4994d4495a5aef3ce1795c489",
		"question": "What is the nationality of the successor of Nii Okaidja Adamafio ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Nii_Okaija_Adamafio> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/nationality> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "nationality",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nii_Okaija_Adamafio",
			"label": "adamafio",
			"seq": "56,63"
		}]
	},
	{
		"id": "db2ca8419aed42419b8a19d1909a9c24",
		"question": "Who are the producers of the movies  which has music by Gary Chang ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Gary_Chang> . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "47,51"
		}, {
			"uri": "http://dbpedia.org/property/producer",
			"label": "producers",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "22,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gary_Chang",
			"label": "chang gary",
			"seq": "56,65"
		}]
	},
	{
		"id": "fe5a0610c6e741c2a1b2f059c072dfbf",
		"question": "Which creation of Josh Friedman was portrayed in Terminator 2 ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_2:_Judgment_Day> . ?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Josh_Friedman>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/portrayer",
			"label": "portrayed",
			"seq": "36,44"
		}, {
			"uri": "http://dbpedia.org/property/creator",
			"label": "creation",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Terminator_2:_Judgment_Day",
			"label": "terminator",
			"seq": "49,58"
		}, {
			"uri": "http://dbpedia.org/resource/Josh_Friedman",
			"label": "friedman josh",
			"seq": "18,30"
		}]
	},
	{
		"id": "f897b6b86feb462eab03a36bc0502824",
		"question": "Whose shrines are in a place governed by Justin Trudeau?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Justin_Trudeau> . ?uri <http://dbpedia.org/ontology/majorShrine> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "are",
			"seq": "14,16"
		}, {
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrines",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Justin_Trudeau",
			"label": "trudeau justin",
			"seq": "41,54"
		}]
	},
	{
		"id": "523673cddacf48099c7937f7087198bd",
		"question": "What are the movies whose music is given by Laurie Johnson?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Laurie_Johnson>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "26,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "32,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Laurie_Johnson",
			"label": "johnson laurie",
			"seq": "44,57"
		}]
	},
	{
		"id": "417a0238264b4e97b76c982a6999dadf",
		"question": "Where common region are soylent and bannock sold?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Soylent_(drink)> <http://dbpedia.org/ontology/region> ?uri. <http://dbpedia.org/resource/Bannock_(food)> <http://dbpedia.org/ontology/region> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/region",
			"label": "region",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "region",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Soylent_(drink)",
			"label": "soylent",
			"seq": "24,30"
		}, {
			"uri": "http://dbpedia.org/resource/Bannock_(food)",
			"label": "bannock",
			"seq": "36,42"
		}]
	},
	{
		"id": "9de419a9df914ff59ef90a5191b584bd",
		"question": "Count the number of other services of the companies which provides the Microsoft Azure as service ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Microsoft_Azure> . ?x <http://dbpedia.org/property/services> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "26,33"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "26,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Azure",
			"label": "microsoft azure",
			"seq": "71,85"
		}]
	},
	{
		"id": "efb6271731a0486c9038f72e14ad2143",
		"question": "List the uni. having affiliation with Graham Holding Company and have a campus in Iowa ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Graham_Holdings_Company> . ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Iowa>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliations",
			"label": "affiliation",
			"seq": "21,31"
		}, {
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "campus",
			"seq": "72,77"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "uni.",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Graham_Holdings_Company",
			"label": "holding company graham",
			"seq": "38,59"
		}, {
			"uri": "http://dbpedia.org/resource/Iowa",
			"label": "iowa",
			"seq": "82,85"
		}]
	},
	{
		"id": "c88a014e1fb347f1aa31dc40e7c66e55",
		"question": "AH141 highway is a part of which country?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/AH141> <http://dbpedia.org/ontology/county> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/county",
			"label": "country",
			"seq": "33,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/AH141",
			"label": "ah141",
			"seq": "0,4"
		}]
	},
	{
		"id": "a88d2ea3f531427a94ae282715f0f5f6",
		"question": "Which hub of Cascade Airways is also the resting place of Brandon Lee ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/property/hubs> ?uri. <http://dbpedia.org/resource/Brandon_Lee> <http://dbpedia.org/ontology/restingPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hub",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "41,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cascade_Airways",
			"label": "cascade airways",
			"seq": "13,27"
		}, {
			"uri": "http://dbpedia.org/resource/Brandon_Lee",
			"label": "brandon lee",
			"seq": "58,68"
		}]
	},
	{
		"id": "4ef28f32c3dc4c17a10aaed5ef42c084",
		"question": "Where did the employees of American College of Surgeons study?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/workInstitutions> <http://dbpedia.org/resource/American_College_of_Surgeons> . ?x <http://dbpedia.org/ontology/education> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/workInstitutions",
			"label": "surgeons",
			"seq": "47,54"
		}, {
			"uri": "http://dbpedia.org/ontology/education",
			"label": "american",
			"seq": "27,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_College_of_Surgeons",
			"label": "surgeons american college",
			"seq": "27,51"
		}]
	},
	{
		"id": "e96091eb6e334719adfadbe72dea01c8",
		"question": "In how many different places do Starwood hotels and resorts worldwide operate?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/operator> <http://dbpedia.org/resource/Starwood_Hotels_and_Resorts_Worldwide> . ?x <http://dbpedia.org/property/address> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operator",
			"label": "operate",
			"seq": "70,76"
		}, {
			"uri": "http://dbpedia.org/property/address",
			"label": "resorts",
			"seq": "52,58"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Starwood_Hotels_and_Resorts_Worldwide",
			"label": "worldwide starwood resorts hotels",
			"seq": "32,64"
		}]
	},
	{
		"id": "f5c820e865914c8589007c9008866d2a",
		"question": "Count the number of artist whose pone of the field is writing ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Writing> . ?x <http://dbpedia.org/ontology/field> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/field",
			"label": "field",
			"seq": "45,49"
		}, {
			"uri": "http://dbpedia.org/ontology/field",
			"label": "field",
			"seq": "45,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Writing",
			"label": "writing",
			"seq": "54,60"
		}]
	},
	{
		"id": "2bb138061a484da2b90a35b4547a639c",
		"question": "What are some people born in NY known for?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/New_York_City> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "people",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "32,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York_City",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "cedb96883e1c403a8e3e85521917b919",
		"question": "Who was the head coach of Middlesbrough F.C. season 2006-7 also the coach of England national under 21 footbal team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2006\u201307_Middlesbrough_F.C._season> <http://dbpedia.org/ontology/manager> ?uri. <http://dbpedia.org/resource/England_national_under-21_football_team> <http://dbpedia.org/property/coach> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manager",
			"label": "under",
			"seq": "94,98"
		}, {
			"uri": "http://dbpedia.org/property/coach",
			"label": "coach",
			"seq": "17,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2006\u201307_Middlesbrough_F.C._season",
			"label": "middlesbrough season",
			"seq": "26,45"
		}, {
			"uri": "http://dbpedia.org/resource/England_national_under-21_football_team",
			"label": "national footbal england under team",
			"seq": "77,111"
		}]
	},
	{
		"id": "c0ed2a5b62a04aa796586761a7fcc4fa",
		"question": "Who is the meaning of the name Isa which was also one of the subject of play The Prodigal Son ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Isa_(name)> <http://dbpedia.org/property/meaning> ?uri. <http://dbpedia.org/resource/The_Prodigal_Son_(play)> <http://dbpedia.org/property/subject> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/meaning",
			"label": "meaning",
			"seq": "11,17"
		}, {
			"uri": "http://dbpedia.org/property/subject",
			"label": "subject",
			"seq": "61,67"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Isa_(name)",
			"label": "name isa",
			"seq": "26,33"
		}, {
			"uri": "http://dbpedia.org/resource/The_Prodigal_Son_(play)",
			"label": "prodigal play",
			"seq": "72,84"
		}]
	},
	{
		"id": "6c08066f4c4a468eabda070b76f407e2",
		"question": "How many players are in the San Francisco Giants?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/San_Francisco_Giants>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "the",
			"seq": "24,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "the",
			"seq": "24,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Francisco_Giants",
			"label": "francisco giants san",
			"seq": "28,47"
		}]
	},
	{
		"id": "0e26f71c288d466a84ee93662cdaf2cf",
		"question": "Which US state has Dorchester Bay and the Joseph Story?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joseph_Story> <http://dbpedia.org/property/state> ?uri. <http://dbpedia.org/resource/Dorchester_Bay_(Boston_Harbor)> <http://dbpedia.org/property/state> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joseph_Story",
			"label": "joseph story",
			"seq": "42,53"
		}, {
			"uri": "http://dbpedia.org/resource/Dorchester_Bay_(Boston_Harbor)",
			"label": "dorchester",
			"seq": "19,28"
		}]
	},
	{
		"id": "2b42a9987e584e18a5a21c9bc2476de8",
		"question": "Mac OS is the operating system of how many things?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Mac_OS>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating system",
			"seq": "14,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mac_OS",
			"label": "mac os",
			"seq": "0,5"
		}]
	},
	{
		"id": "78cb068f6e8f479a81e12427c92fd167",
		"question": "Which company developed the language designed by Lars Bak?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/designer> <http://dbpedia.org/resource/Lars_Bak_(computer_programmer)> . ?x <http://dbpedia.org/property/developer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Language>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designer",
			"label": "designed",
			"seq": "37,44"
		}, {
			"uri": "http://dbpedia.org/property/developer",
			"label": "developed",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Language",
			"label": "language",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lars_Bak_(computer_programmer)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "51d0d9be06c244229efab43ae8e9d45d",
		"question": "Where did Aghasalim Childagh die?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aghasalim_Childagh> <http://dbpedia.org/property/deathDate> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathDate",
			"label": "childagh",
			"seq": "20,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Aghasalim_Childagh",
			"label": "aghasalim childagh",
			"seq": "10,27"
		}]
	},
	{
		"id": "3e3623c77d664a43bad66b15cbeb1d2b",
		"question": "What is the birth location of the advisor of Richard Hofstadter ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Richard_Hofstadter> <http://dbpedia.org/property/doctoralAdvisor> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "advisor",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birth",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Richard_Hofstadter",
			"label": "hofstadter richard",
			"seq": "45,62"
		}]
	},
	{
		"id": "8b82edef302d47feaa60aaf940fbf225",
		"question": "Name the office holder whose constituency are Duboce Triangle and Haight-Ashbury ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Duboce_Triangle,_San_Francisco> . ?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "29,40"
		}, {
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "29,40"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Duboce_Triangle,_San_Francisco",
			"label": "triangle duboce",
			"seq": "46,60"
		}, {
			"uri": "http://dbpedia.org/resource/Haight-Ashbury",
			"label": "haight-ashbury",
			"seq": "66,79"
		}]
	},
	{
		"id": "fe352180bf17436ba61fb0416e17d291",
		"question": "Name the TV shows whose developer is J. Michael Straczynski and executive producer is Douglas Netter?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski> . ?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Douglas_Netter>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developer",
			"seq": "24,32"
		}, {
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "64,81"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/J._Michael_Straczynski",
			"label": "straczynski michael",
			"seq": "40,58"
		}, {
			"uri": "http://dbpedia.org/resource/Douglas_Netter",
			"label": "douglas netter",
			"seq": "86,99"
		}]
	},
	{
		"id": "950ceddbc0c5404eabe9f4770407937b",
		"question": "Name the first driver of 1999 San Marino Grand Prix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> <http://dbpedia.org/ontology/firstDriver> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/firstDriver",
			"label": "driver first",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1999_San_Marino_Grand_Prix",
			"label": "marino grand prix 1999 san",
			"seq": "25,50"
		}]
	},
	{
		"id": "2145991e2562420284c8984b7f845228",
		"question": "List the children of the parent of Marvin Bush.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Marvin_Bush> <http://dbpedia.org/ontology/parent> ?x . ?x <http://dbpedia.org/property/children> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parent",
			"seq": "25,30"
		}, {
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marvin_Bush",
			"label": "marvin",
			"seq": "35,40"
		}]
	},
	{
		"id": "16be3ab972a8420cb9d1ab24a7d7ee5b",
		"question": "Which Tim Birton's movie has a screenplay by Daniel Waters ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Daniel_Waters_(screenwriter)> . ?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Tim_Burton>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screenplay",
			"seq": "31,40"
		}, {
			"uri": "http://dbpedia.org/property/director",
			"label": "birton's",
			"seq": "10,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Daniel_Waters_(screenwriter)",
			"label": "waters daniel",
			"seq": "45,57"
		}, {
			"uri": "http://dbpedia.org/resource/Tim_Burton",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "25d2a7baa3b14844812b55facf7b52e1",
		"question": "Who is the stock holder of the bank where  Peter Grauer works  ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Peter_Grauer> <http://dbpedia.org/property/occupation> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/occupation",
			"label": "bank",
			"seq": "31,34"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "where",
			"seq": "36,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Bank",
			"label": "bank",
			"seq": "31,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Peter_Grauer",
			"label": "grauer peter",
			"seq": "43,54"
		}]
	},
	{
		"id": "d353e53adbc14a819a6b8cb914e9288f",
		"question": "In which areas did the pupils of Sylvain Levi work?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Sylvain_L\u00e9vi> . ?x <http://dbpedia.org/property/fields> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicAdvisor",
			"label": "did",
			"seq": "15,17"
		}, {
			"uri": "http://dbpedia.org/property/fields",
			"label": "pupils",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sylvain_L\u00e9vi",
			"label": "sylvain",
			"seq": "33,39"
		}]
	},
	{
		"id": "c3d6509c0674423e8ae5a2a25f581062",
		"question": "Which awards have Puerto Ricons won?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/ethnicity> <http://dbpedia.org/resource/Puerto_Rico> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ethnicity",
			"label": "which",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Puerto_Rico",
			"label": "puerto",
			"seq": "18,23"
		}]
	},
	{
		"id": "60dc7ef22ac346bc876c2956344ebbbc",
		"question": "Name all the hubs of the airlines whose one of the hubs is Selangir ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Selangor> . ?x <http://dbpedia.org/property/hubs> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hubs",
			"seq": "13,16"
		}, {
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hubs",
			"seq": "13,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "25,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Selangor",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "74e6bd3b3d9f4c02948ab48ddb9851b7",
		"question": "Who starred in Nothing in Common and produced From the Earth to the Moon?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/From_the_Earth_to_the_Moon_(miniseries)> <http://dbpedia.org/ontology/executiveProducer> ?uri. <http://dbpedia.org/resource/Nothing_in_Common> <http://dbpedia.org/property/starring> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "produced",
			"seq": "37,44"
		}, {
			"uri": "http://dbpedia.org/property/starring",
			"label": "starred",
			"seq": "4,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/From_the_Earth_to_the_Moon_(miniseries)",
			"label": "earth",
			"seq": "55,59"
		}, {
			"uri": "http://dbpedia.org/resource/Nothing_in_Common",
			"label": "nothing common",
			"seq": "15,28"
		}]
	},
	{
		"id": "e6f50ea5f26b41a2bbee70ecae25690d",
		"question": "How many parties have come in power in elections where Y. S. Rajasekhara Reddy won?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Y._S._Rajasekhara_Reddy> . ?x <http://dbpedia.org/ontology/affiliation> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leader",
			"label": "have",
			"seq": "17,20"
		}, {
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "elections",
			"seq": "39,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Y._S._Rajasekhara_Reddy",
			"label": "rajasekhara reddy",
			"seq": "61,77"
		}]
	},
	{
		"id": "3397f948c7964e35b7883557e3869187",
		"question": "Who is the builder of the Stadium of Costa Rica women's national football team?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Costa_Rica_women's_national_football_team> <http://dbpedia.org/ontology/stadium> ?x . ?x <http://dbpedia.org/ontology/builder> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stadium",
			"label": "stadium",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "builder",
			"seq": "11,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Costa_Rica_women's_national_football_team",
			"label": "national football women's costa",
			"seq": "37,67"
		}]
	},
	{
		"id": "65f4bc2159fa4581862b48f75badba9e",
		"question": "Which serving railway line of the Rostov-Glavny is also the  place of birth of  Nina Vislova?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rostov-Glavny> <http://dbpedia.org/ontology/servingRailwayLine> ?uri. <http://dbpedia.org/resource/Nina_Vislova> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/servingRailwayLine",
			"label": "serving railway",
			"seq": "6,20"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth of",
			"seq": "27,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rostov-Glavny",
			"label": "rostov-glavny",
			"seq": "34,46"
		}, {
			"uri": "http://dbpedia.org/resource/Nina_Vislova",
			"label": "vislova nina",
			"seq": "80,91"
		}]
	},
	{
		"id": "0507c04d35f64179aeb6656866465ce8",
		"question": "What is the home town of the musician of Jack your Body ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Jack_Your_Body> <http://dbpedia.org/ontology/musicalArtist> ?x . ?x <http://dbpedia.org/ontology/hometown> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalArtist",
			"label": "musician",
			"seq": "29,36"
		}, {
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jack_Your_Body",
			"label": "your jack body",
			"seq": "41,54"
		}]
	},
	{
		"id": "285b636ff13c48e1bcd7306d6a9b680a",
		"question": "What do typically NGOs work for?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Non-governmental_organization> . ?x <http://dbpedia.org/property/purpose> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/type",
			"label": "typically",
			"seq": "8,16"
		}, {
			"uri": "http://dbpedia.org/property/purpose",
			"label": "ngos",
			"seq": "18,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Non-governmental_organization",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "2b459a0f48bf4a798c36e64bdef395eb",
		"question": "What is the residence of the person, who starred in Men Will Be Men ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Men_Will_Be_Men> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/property/residence> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "starred",
			"seq": "41,47"
		}, {
			"uri": "http://dbpedia.org/property/residence",
			"label": "residence",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person,",
			"seq": "29,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Men_Will_Be_Men",
			"label": "will men",
			"seq": "52,59"
		}]
	},
	{
		"id": "76e3a616ef7f4776b5ac7ca0a2747aa4",
		"question": "List the border of the admin region which shares border with North Korea ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/border> <http://dbpedia.org/resource/North_Korea> . ?x <http://dbpedia.org/ontology/border> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/border",
			"label": "border",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/border",
			"label": "border",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/AdministrativeRegion",
			"label": "region admin",
			"seq": "23,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North_Korea",
			"label": "north korea",
			"seq": "61,71"
		}]
	},
	{
		"id": "7fbcbc8dbf064a76a60ec0159eeb54f0",
		"question": "How many awards have been given to the ones who died of lung cancer?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathCause> <http://dbpedia.org/resource/Lung_cancer> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "the",
			"seq": "35,37"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Award",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lung_cancer",
			"label": "cancer lung",
			"seq": "56,66"
		}]
	},
	{
		"id": "d12e9dcf5e3944eb88c56c3e6cdab8ad",
		"question": "Which show's network is Prime time Entertainment and has Douglas Netter as executive producer ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Prime_Time_Entertainment_Network> . ?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Douglas_Netter>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/network",
			"label": "network",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "75,92"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show's",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Prime_Time_Entertainment_Network",
			"label": "entertainment network prime time",
			"seq": "13,44"
		}, {
			"uri": "http://dbpedia.org/resource/Douglas_Netter",
			"label": "douglas netter",
			"seq": "57,70"
		}]
	},
	{
		"id": "7b3af4a72c904d328c38aa676e5e556d",
		"question": "How many countries surround the sea into which the Upper Neratva flow?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/riverMouth> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "403",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "surround",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "countries",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "32,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Upper_Neretva",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0ba454c0de9a4184b651f6e7a8d17307",
		"question": "Who collaborated with Johnny Cash and Kris Kristofferson ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Johnny_Cash> . ?uri <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Kris_Kristofferson> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "collaborated",
			"seq": "4,15"
		}, {
			"uri": "http://dbpedia.org/property/associatedActs",
			"label": "collaborated",
			"seq": "4,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Johnny_Cash",
			"label": "johnny cash",
			"seq": "22,32"
		}, {
			"uri": "http://dbpedia.org/resource/Kris_Kristofferson",
			"label": "kristofferson",
			"seq": "43,55"
		}]
	},
	{
		"id": "d8c7892603d64401909742551945fd10",
		"question": "Is the Journal of Cerebral Blood Flow and Metabolism about Brains?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Journal_of_Cerebral_Blood_Flow_&_Metabolism> <http://dbpedia.org/ontology/academicDiscipline> <http://dbpedia.org/resource/Brain> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/academicDiscipline",
			"label": "brains",
			"seq": "59,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Journal_of_Cerebral_Blood_Flow_&_Metabolism",
			"label": "metabolism cerebral journal blood",
			"seq": "7,39"
		}, {
			"uri": "http://dbpedia.org/resource/Brain",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1c52f65be95947dab2143ce16d756039",
		"question": "Name the awards won by Elie Wiesel ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elie_Wiesel> <http://dbpedia.org/property/awards> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elie_Wiesel",
			"label": "wiesel elie",
			"seq": "23,33"
		}]
	},
	{
		"id": "50f4fe1ce39347729daff3f6980c6107",
		"question": "What is the home stadium of Kenya's women national football team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kenya_women's_national_football_team> <http://dbpedia.org/property/homeStadium> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/homeStadium",
			"label": "stadium home",
			"seq": "12,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kenya_women's_national_football_team",
			"label": "national football",
			"seq": "42,58"
		}]
	},
	{
		"id": "8c154ef0c2574f25bdfcee184bd120a9",
		"question": "list some shawnee people?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nationality> <http://dbpedia.org/resource/Shawnee> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationality",
			"label": "list",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shawnee",
			"label": "shawnee",
			"seq": "10,16"
		}]
	},
	{
		"id": "705316a27c694cf5ac53ee6bfd9bbed7",
		"question": "Count the birthplaces of recepients of the National Museum of Racing and Hall of Fame.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/honours> <http://dbpedia.org/resource/National_Museum_of_Racing_and_Hall_of_Fame> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/honours",
			"label": "count",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birthplaces",
			"seq": "10,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "birthplaces",
			"seq": "10,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Museum_of_Racing_and_Hall_of_Fame",
			"label": "national racing museum",
			"seq": "43,64"
		}]
	},
	{
		"id": "acd23184141840d2a1677901fd42bbd9",
		"question": "What artist of Charing Cross Bridge influenced Dorothea Sharp in her career?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charing_Cross_Bridge_(Monet_series)> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Dorothea_Sharp> <http://dbpedia.org/property/influencedBy> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/property/influencedBy",
			"label": "influenced",
			"seq": "36,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charing_Cross_Bridge_(Monet_series)",
			"label": "charing",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/resource/Dorothea_Sharp",
			"label": "dorothea sharp",
			"seq": "47,60"
		}]
	},
	{
		"id": "be202d448e7d4b23ae715f0fc6b8b33e",
		"question": "Which military conflict took place in Israel and had commander as Jaber Al-Ahmad Al-Sabah?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Israel> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Jaber_Al-Ahmad_Al-Sabah>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/place",
			"label": "place",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "53,61"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "military conflict",
			"seq": "6,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Israel",
			"label": "israel",
			"seq": "38,43"
		}, {
			"uri": "http://dbpedia.org/resource/Jaber_Al-Ahmad_Al-Sabah",
			"label": "al-sabah al-ahmad jaber",
			"seq": "66,88"
		}]
	},
	{
		"id": "44c48096f6e24b17a662f2bc16b0c005",
		"question": "Which city is the resting place of the Martin Ragaway and Chuck Connors ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Ragaway> <http://dbpedia.org/ontology/restingPlace> ?uri. <http://dbpedia.org/resource/Chuck_Connors> <http://dbpedia.org/ontology/restingPlace> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>}",
		"sparql_id": "315",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "18,30"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "18,30"
		}, {
			"uri": "http://dbpedia.org/ontology/City",
			"label": "city",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Martin_Ragaway",
			"label": "ragaway martin",
			"seq": "39,52"
		}, {
			"uri": "http://dbpedia.org/resource/Chuck_Connors",
			"label": "connors chuck",
			"seq": "58,70"
		}]
	},
	{
		"id": "3b2227b9098045048da2d706d5ff058e",
		"question": "Which religion is prevalent in the schools of the Ashanti region?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/region> <http://dbpedia.org/resource/Ashanti_Region> . ?x <http://dbpedia.org/property/denomination> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/region",
			"label": "region",
			"seq": "58,63"
		}, {
			"uri": "http://dbpedia.org/property/denomination",
			"label": "religion",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "35,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ashanti_Region",
			"label": "ashanti region",
			"seq": "50,63"
		}]
	},
	{
		"id": "00d182c2fc044872afb893ada8c680ed",
		"question": "What are some characters of series produced by Ricky Grevais?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Ricky_Gervais> . ?uri <http://dbpedia.org/ontology/series> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "produced",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "28,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ricky_Gervais",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ec5f6894f5484d34a2f951ca88436084",
		"question": "List down all the bands to which the writers of 03 Bonnie & Clyde are associated?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/'03_Bonnie_&_Clyde> <http://dbpedia.org/ontology/writer> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "writers",
			"seq": "37,43"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "associated",
			"seq": "70,79"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/'03_Bonnie_&_Clyde",
			"label": "bonnie clyde",
			"seq": "51,62"
		}]
	},
	{
		"id": "7f4f1679c83148c4839f6434ed4e3ac3",
		"question": "What are the television shows whose company is Playtone?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/Playtone>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/company",
			"label": "company",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Playtone",
			"label": "playtone",
			"seq": "47,54"
		}]
	},
	{
		"id": "b03b5f24df79423eaa4cf91798ceaa81",
		"question": "Which mainter of Pandaruan Bridge is also the land of Malaysia junior Hockey league ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pandaruan_Bridge> <http://dbpedia.org/ontology/maintainedBy> ?uri. <http://dbpedia.org/resource/Malaysia_Junior_Hockey_League> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/maintainedBy",
			"label": "mainter",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "junior",
			"seq": "63,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pandaruan_Bridge",
			"label": "pandaruan bridge",
			"seq": "17,32"
		}, {
			"uri": "http://dbpedia.org/resource/Malaysia_Junior_Hockey_League",
			"label": "malaysia league junior hockey",
			"seq": "54,82"
		}]
	},
	{
		"id": "5b4bb78a68b94d218437f69956f6fba9",
		"question": "Organization holding stocks of  Galician and German wikipedias?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Galician_Wikipedia> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/German_Wikipedia> <http://dbpedia.org/ontology/owner> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "german",
			"seq": "45,50"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "german",
			"seq": "45,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Galician_Wikipedia",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/German_Wikipedia",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "df9dedc7b04241719cdd1de64fab664c",
		"question": "In which broadcast area does the sister station of KFFG air ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/KFFG> <http://dbpedia.org/ontology/sisterStation> ?x . ?x <http://dbpedia.org/ontology/broadcastNetwork> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sisterStation",
			"label": "station sister",
			"seq": "33,46"
		}, {
			"uri": "http://dbpedia.org/ontology/broadcastNetwork",
			"label": "broadcast",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/KFFG",
			"label": "kffg",
			"seq": "51,54"
		}]
	},
	{
		"id": "dc3368caf7294bbea8b07fd01859706d",
		"question": "In which companies boards do the writers of Wikitionary belong?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Wiktionary> <http://dbpedia.org/ontology/author> ?x . ?x <http://dbpedia.org/ontology/board> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "the",
			"seq": "29,31"
		}, {
			"uri": "http://dbpedia.org/ontology/board",
			"label": "boards",
			"seq": "19,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wiktionary",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e12f7dcbeefb4be5aa7c6a75120cf399",
		"question": "Name the river with mouth as Thames Estuary and passes through Reading Berkshire ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Thames_Estuary> . ?uri <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Reading,_Berkshire>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river mouth",
			"seq": "9,19"
		}, {
			"uri": "http://dbpedia.org/property/city",
			"label": "with",
			"seq": "15,18"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thames_Estuary",
			"label": "estuary thames",
			"seq": "29,42"
		}, {
			"uri": "http://dbpedia.org/resource/Reading,_Berkshire",
			"label": "berkshire reading",
			"seq": "63,79"
		}]
	},
	{
		"id": "428c921bdffa437cab0215a722628dc4",
		"question": "What is the alma mater of the person, whose child is Samuel Moreno Rojas?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Samuel_Moreno_Rojas> . ?x <http://dbpedia.org/property/almaMater> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "child",
			"seq": "44,48"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Samuel_Moreno_Rojas",
			"label": "samuel moreno rojas",
			"seq": "53,71"
		}]
	},
	{
		"id": "aa41549ef9984639b16d39f1e418d06e",
		"question": "What provides the services of Nintendo eShop and Nintendo Network?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Nintendo_eShop> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Nintendo_Network> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "18,25"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "18,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nintendo_eShop",
			"label": "nintendo eshop",
			"seq": "30,43"
		}, {
			"uri": "http://dbpedia.org/resource/Nintendo_Network",
			"label": "nintendo network",
			"seq": "30,45"
		}]
	},
	{
		"id": "f1363bc48be643bd99b68fa31d8b0d19",
		"question": "Which Monty Python's movie is distributed by Cinema International Corporation ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Monty_Python> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "distributed",
			"seq": "30,40"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributed",
			"seq": "30,40"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "cinema",
			"seq": "45,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Monty_Python",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Cinema_International_Corporation",
			"label": "international corporation cinema",
			"seq": "45,76"
		}]
	},
	{
		"id": "ef6dc0a3edb54f33bf874f7c5b9dae0a",
		"question": "Name the local authority of Trinity School, Brentwood ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/localAuthority",
			"label": "authority local",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Trinity_School,_Brentwood",
			"label": "brentwood trinity school,",
			"seq": "28,52"
		}]
	},
	{
		"id": "5275df39ab1f4fea90a5740956d40966",
		"question": "What is the death place of the Abiye Abebe and is the birthplace of the Amsale Aberra?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Abiye_Abebe> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/Amsale_Aberra> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "place death",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birthplace",
			"seq": "54,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Abiye_Abebe",
			"label": "abiye abebe",
			"seq": "31,41"
		}, {
			"uri": "http://dbpedia.org/resource/Amsale_Aberra",
			"label": "amsale aberra",
			"seq": "72,84"
		}]
	},
	{
		"id": "e4aba45bbd7247a2849bb269cb3fc809",
		"question": "What is the label of Double Diamond (album) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Double_Diamond_(album)> <http://dbpedia.org/ontology/recordLabel> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "label",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Double_Diamond_(album)",
			"label": "diamond (album) double",
			"seq": "21,42"
		}]
	},
	{
		"id": "82ce66b7bf8f4a0dae15269c66cc2753",
		"question": "Count the number of cities around the American Mediterranean Sea?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/American_Mediterranean_Sea> <http://dbpedia.org/property/cities> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>}",
		"sparql_id": "402",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "20,25"
		}, {
			"uri": "http://dbpedia.org/ontology/City",
			"label": "cities",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Mediterranean_Sea",
			"label": "mediterranean american",
			"seq": "38,59"
		}]
	},
	{
		"id": "3412c129527f4e78a14421f84b364adf",
		"question": "What are some employees of Uni of California, santa cruz?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/University_of_California,_Santa_Cruz>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/employer",
			"label": "employees",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/University_of_California,_Santa_Cruz",
			"label": "california, santa cruz",
			"seq": "34,55"
		}]
	},
	{
		"id": "68d3363523454c20b8b113b8ca87eaed",
		"question": "What is the parent company of PrivateCore?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/PrivateCore> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsidiary",
			"label": "parent",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/PrivateCore",
			"label": "privatecore",
			"seq": "30,40"
		}]
	},
	{
		"id": "3e719418e0ae4a06bc1819295c66394e",
		"question": "Over how many cities did the Bellaton MMA, Season 11 take place?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Bellator_MMA:_Season_Eleven> <http://dbpedia.org/property/city> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "cities",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bellator_MMA:_Season_Eleven",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "59686a5c59394e02a601a3632e7c72bf",
		"question": "Waddy wachtel did the music for what movies?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Waddy_Wachtel>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "for",
			"seq": "28,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Waddy_Wachtel",
			"label": "wachtel waddy",
			"seq": "0,12"
		}]
	},
	{
		"id": "b6ac0f95224a4210893252cc4b6bda4d",
		"question": "Is Baker's Dozen Donuts in the coffee industry?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Baker's_Dozen_Donuts> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Coffee> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/industry",
			"label": "industry",
			"seq": "38,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Baker's_Dozen_Donuts",
			"label": "baker's donuts dozen",
			"seq": "3,22"
		}, {
			"uri": "http://dbpedia.org/resource/Coffee",
			"label": "coffee",
			"seq": "31,36"
		}]
	},
	{
		"id": "b4e9d31ac22848ffb74a0fea9cda6353",
		"question": "Who are the writer of the singles whose music genre is Rhythm and blues ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Rhythm_and_blues> . ?x <http://dbpedia.org/ontology/writer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genre",
			"seq": "46,50"
		}, {
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "writer",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Single",
			"label": "singles",
			"seq": "26,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rhythm_and_blues",
			"label": "rhythm blues",
			"seq": "55,66"
		}]
	},
	{
		"id": "7657e13a3b7e4ab58937e184cef0f93d",
		"question": "Name the hockey team which has head coach as Mike babcock and is based in Toronto ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Toronto> . ?uri <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Mike_Babcock>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HockeyTeam>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "toronto",
			"seq": "74,80"
		}, {
			"uri": "http://dbpedia.org/property/headCoach",
			"label": "coach head",
			"seq": "31,40"
		}, {
			"uri": "http://dbpedia.org/ontology/HockeyTeam",
			"label": "hockey team",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto",
			"label": "toronto",
			"seq": "74,80"
		}, {
			"uri": "http://dbpedia.org/resource/Mike_Babcock",
			"label": "babcock mike",
			"seq": "45,56"
		}]
	},
	{
		"id": "b630eb72fd3f4ca194622759e3fdeb79",
		"question": "Which incumbent of Al Gore presidential campaign wass also the president of Mike McCurry ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mike_McCurry_(press_secretary)> <http://dbpedia.org/ontology/president> ?uri. <http://dbpedia.org/resource/Al_Gore_presidential_campaign,_2000> <http://dbpedia.org/ontology/incumbent> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "president",
			"seq": "27,35"
		}, {
			"uri": "http://dbpedia.org/ontology/incumbent",
			"label": "incumbent",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mike_McCurry_(press_secretary)",
			"label": "mccurry",
			"seq": "81,87"
		}, {
			"uri": "http://dbpedia.org/resource/Al_Gore_presidential_campaign,_2000",
			"label": "presidential campaign gore",
			"seq": "22,47"
		}]
	},
	{
		"id": "dd8f04e29567432aa66d4872d3c8967d",
		"question": "What show has writing of Erik Jendresen and Graham Yost?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Graham_Yost> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writing",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "writing",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erik_Jendresen",
			"label": "jendresen erik",
			"seq": "25,38"
		}, {
			"uri": "http://dbpedia.org/resource/Graham_Yost",
			"label": "graham yost",
			"seq": "44,54"
		}]
	},
	{
		"id": "6dc74832279a48c5af2affb61a00842f",
		"question": "Which range of mountains are there in canton of Fribourg?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Canton_of_Fribourg> . ?x <http://dbpedia.org/ontology/mountainRange> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "there",
			"seq": "29,33"
		}, {
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountains",
			"seq": "15,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canton_of_Fribourg",
			"label": "fribourg canton",
			"seq": "38,52"
		}]
	},
	{
		"id": "e5477236f4194919a7df41836fd59a7b",
		"question": "Where in the us military did pierre r graham and edwin f hunter work?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/property/branch> ?uri. <http://dbpedia.org/resource/Edwin_F._Hunter> <http://dbpedia.org/property/branch> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "graham",
			"seq": "38,43"
		}, {
			"uri": "http://dbpedia.org/property/branch",
			"label": "graham",
			"seq": "38,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pierre_R._Graham",
			"label": "pierre graham",
			"seq": "29,41"
		}, {
			"uri": "http://dbpedia.org/resource/Edwin_F._Hunter",
			"label": "hunter edwin",
			"seq": "49,60"
		}]
	},
	{
		"id": "06a0979c7f4f45f09a242e2c9b4f9403",
		"question": "Count the number of ingredient of the foods which have one of the ingredient is Pork ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Pork> . ?x <http://dbpedia.org/ontology/ingredient> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "20,29"
		}, {
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "20,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pork",
			"label": "pork",
			"seq": "80,83"
		}]
	},
	{
		"id": "f012a543e72c4aea922b35c177311d35",
		"question": "In how many different highschools have people schooled in Penn State Nittany Lions football studied?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/school> <http://dbpedia.org/resource/Penn_State_Nittany_Lions_football> . ?x <http://dbpedia.org/property/highschool> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/school",
			"label": "schooled",
			"seq": "46,53"
		}, {
			"uri": "http://dbpedia.org/property/highschool",
			"label": "highschools",
			"seq": "22,32"
		}, {
			"uri": "http://dbpedia.org/ontology/EducationalInstitution",
			"label": "nittany",
			"seq": "69,75"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Penn_State_Nittany_Lions_football",
			"label": "football nittany state lions",
			"seq": "63,90"
		}]
	},
	{
		"id": "28d65bdcbc9a48288e72664ab13c4ddc",
		"question": "What are some products of the the company whose subsidiary is Sony Corp shareholders and subsidies?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Sony_Corporation_shareholders_and_subsidiaries> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsidiary",
			"label": "subsidiary",
			"seq": "48,57"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "are",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony_Corporation_shareholders_and_subsidiaries",
			"label": "shareholders",
			"seq": "72,83"
		}]
	},
	{
		"id": "6708b5842efe485a9e50e24afcbf8511",
		"question": "Who is associated to the predecessor of Dan Mica?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Dan_Mica> . ?uri <http://dbpedia.org/ontology/associate> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "25,35"
		}, {
			"uri": "http://dbpedia.org/ontology/associate",
			"label": "associated",
			"seq": "7,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dan_Mica",
			"label": "mica dan",
			"seq": "40,47"
		}]
	},
	{
		"id": "3c64c763bb4342f8abf5e919c69c9144",
		"question": "What is the show which opens with Gary Portnoy and Where Everybody Knows Your Name?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Gary_Portnoy> . ?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opens",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opens",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gary_Portnoy",
			"label": "portnoy gary",
			"seq": "34,45"
		}, {
			"uri": "http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name",
			"label": "everybody where knows your name",
			"seq": "51,81"
		}]
	},
	{
		"id": "b77c5d2495684b08978cc1e6f6efbd33",
		"question": "What is the birthplace of the netball player who is the relative of Rachel Rasmussen ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Rachel_Rasmussen> <http://dbpedia.org/property/relatives> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/NetballPlayer>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relative",
			"seq": "56,63"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birthplace",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/NetballPlayer",
			"label": "netball player",
			"seq": "30,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rachel_Rasmussen",
			"label": "rasmussen rachel",
			"seq": "68,83"
		}]
	},
	{
		"id": "27b20d124d814d06aef418de8062f60e",
		"question": "What is the Location of the Dofinivka Estuary which is also the  birthplace of the Liliya Lobanova ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dofinivka_Estuary> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Liliya_Lobanova> <http://dbpedia.org/property/birthplace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "location",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/property/birthplace",
			"label": "birthplace",
			"seq": "65,74"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dofinivka_Estuary",
			"label": "dofinivka estuary",
			"seq": "28,44"
		}, {
			"uri": "http://dbpedia.org/resource/Liliya_Lobanova",
			"label": "lobanova liliya",
			"seq": "83,97"
		}]
	},
	{
		"id": "ae6419f5a7924093b8efc0ecde37fa37",
		"question": "For how many different teams have the players debuted in Houston Astros played?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/debutTeam> <http://dbpedia.org/resource/Houston_Astros> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debuted",
			"seq": "46,52"
		}, {
			"uri": "http://dbpedia.org/ontology/team",
			"label": "teams",
			"seq": "23,27"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "23,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Houston_Astros",
			"label": "houston astros",
			"seq": "57,70"
		}]
	},
	{
		"id": "12e72b1d62c843d09c2b6f02cab2cd04",
		"question": "In which races did the horses of Mon Capitaine take part?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/sire> <http://dbpedia.org/resource/Mon_Capitaine> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sire",
			"label": "races",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/property/race",
			"label": "races",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Horse",
			"label": "horses",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mon_Capitaine",
			"label": "capitaine mon",
			"seq": "33,45"
		}]
	},
	{
		"id": "2ead55d30e1d4a53b7f6ef00e0fe8125",
		"question": "What is the profession of Claiborne Pell ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Claiborne_Pell> <http://dbpedia.org/ontology/profession> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "profession",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Claiborne_Pell",
			"label": "claiborne pell",
			"seq": "26,39"
		}]
	},
	{
		"id": "faf138a401bf48698aea3948d57fb21e",
		"question": "Name few TV shows aired by Prime Time Entertainment Network?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/Prime_Time_Entertainment_Network>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network",
			"seq": "52,58"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Prime_Time_Entertainment_Network",
			"label": "entertainment network prime time",
			"seq": "27,58"
		}]
	},
	{
		"id": "21891c4f2ea042b18e68729561fc981e",
		"question": "What is the ethnicity of the Maike Evers and state of origin of the Theodor Hillenhinrichs ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maike_Evers> <http://dbpedia.org/ontology/ethnicity> ?uri. <http://dbpedia.org/resource/Theodor_Hillenhinrichs> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ethnicity",
			"label": "ethnicity",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "origin state",
			"seq": "45,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maike_Evers",
			"label": "maike evers",
			"seq": "29,39"
		}, {
			"uri": "http://dbpedia.org/resource/Theodor_Hillenhinrichs",
			"label": "hillenhinrichs theodor",
			"seq": "68,89"
		}]
	},
	{
		"id": "a9898ec7205044eeb0890978e7e8c771",
		"question": "Is N. C. Wyeth the illustration by of The Mysterious Stranger?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Mysterious_Stranger> <http://dbpedia.org/property/illustrator> <http://dbpedia.org/resource/N._C._Wyeth> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/illustrator",
			"label": "illustration",
			"seq": "19,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Mysterious_Stranger",
			"label": "mysterious stranger",
			"seq": "42,60"
		}, {
			"uri": "http://dbpedia.org/resource/N._C._Wyeth",
			"label": "wyeth n. c.",
			"seq": "3,13"
		}]
	},
	{
		"id": "1ecda4810a44415cb8a4d88b3cc10c44",
		"question": "List the awards given to the key people in Pixar ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Pixar> <http://dbpedia.org/property/keyPeople> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people key",
			"seq": "29,38"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pixar",
			"label": "pixar",
			"seq": "43,47"
		}]
	},
	{
		"id": "380331c1f63e4822be0531e79d89d530",
		"question": "Which fictional character portrayed in Terminator 2: Judgment Day is painted by Josh Friedman?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_2:_Judgment_Day> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Josh_Friedman>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/portrayer",
			"label": "portrayed",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "terminator",
			"seq": "39,48"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "6,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Terminator_2:_Judgment_Day",
			"label": "terminator judgment",
			"seq": "39,57"
		}, {
			"uri": "http://dbpedia.org/resource/Josh_Friedman",
			"label": "friedman josh",
			"seq": "80,92"
		}]
	},
	{
		"id": "74b8aec435064e2cad30995e4949632b",
		"question": "What is the common ethnicity of the Maike Evers and Francisco Lachowski ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maike_Evers> <http://dbpedia.org/ontology/ethnicity> ?uri. <http://dbpedia.org/resource/Francisco_Lachowski> <http://dbpedia.org/ontology/ethnicity> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ethnicity",
			"label": "ethnicity",
			"seq": "19,27"
		}, {
			"uri": "http://dbpedia.org/ontology/ethnicity",
			"label": "ethnicity",
			"seq": "19,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maike_Evers",
			"label": "maike evers",
			"seq": "36,46"
		}, {
			"uri": "http://dbpedia.org/resource/Francisco_Lachowski",
			"label": "lachowski francisco",
			"seq": "52,70"
		}]
	},
	{
		"id": "7ebda29e423945b29162883cf737d24c",
		"question": "Count the different religions followed by Second Lieutenants in military.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Second_lieutenant> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryRank",
			"label": "military.",
			"seq": "64,72"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "20,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Second_lieutenant",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e887507cbcda4bd8956a82825a4a84ac",
		"question": "What is the base currency of the country which operates the Marion Dufresne?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Marion_Dufresne_(1995)> <http://dbpedia.org/ontology/operator> ?x . ?x <http://dbpedia.org/ontology/currency> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operates",
			"seq": "47,54"
		}, {
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currency",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marion_Dufresne_(1995)",
			"label": "dufresne marion",
			"seq": "60,74"
		}]
	},
	{
		"id": "6f8cdbe8fb024dcbb7da14e008bca23c",
		"question": "Journals of how many fields can be found in US?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/country> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/property/discipline> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/country",
			"label": "found",
			"seq": "35,39"
		}, {
			"uri": "http://dbpedia.org/property/discipline",
			"label": "in",
			"seq": "41,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1dd1b3f1468b4498bf6462c9d4d7e865",
		"question": "What nicknames do the universities in Norton, Massachusetts have?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Norton,_Massachusetts> . ?x <http://dbpedia.org/property/nickname> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "in",
			"seq": "35,36"
		}, {
			"uri": "http://dbpedia.org/property/nickname",
			"label": "nicknames",
			"seq": "5,13"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "22,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Norton,_Massachusetts",
			"label": "massachusetts norton,",
			"seq": "38,58"
		}]
	},
	{
		"id": "0b921ef38ba74acbaa82a41ca8554f5c",
		"question": "What is the official residence of the senator who is the deputy of Everett Dirksen?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Everett_Dirksen> <http://dbpedia.org/property/deputy> ?x . ?x <http://dbpedia.org/ontology/residence> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deputy",
			"label": "deputy",
			"seq": "57,62"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residence",
			"seq": "21,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Senator",
			"label": "senator",
			"seq": "38,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Everett_Dirksen",
			"label": "everett dirksen",
			"seq": "67,81"
		}]
	},
	{
		"id": "1e06f3b6c390495883e3b1fa35f74e6c",
		"question": "Which  office holder's resting place is Alta Mesa Memorial Park and Henry E. Catto, Jr. as predecessor ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Alta_Mesa_Memorial_Park> . ?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Henry_E._Catto,_Jr.>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingPlace",
			"label": "resting place",
			"seq": "23,35"
		}, {
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "91,101"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "7,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alta_Mesa_Memorial_Park",
			"label": "memorial park mesa alta",
			"seq": "40,62"
		}, {
			"uri": "http://dbpedia.org/resource/Henry_E._Catto,_Jr.",
			"label": "catto, henry",
			"seq": "68,79"
		}]
	},
	{
		"id": "0ac9e7c038dd486a87c27b58e9c6a6e4",
		"question": "Name the movie whose producer is Michael Deeley and music is given by Vangelis ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Michael_Deeley> . ?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Vangelis>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "52,56"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "30,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Deeley",
			"label": "michael deeley",
			"seq": "33,46"
		}, {
			"uri": "http://dbpedia.org/resource/Vangelis",
			"label": "vangelis",
			"seq": "70,77"
		}]
	},
	{
		"id": "88fe848accd14ee5a63e3264234651e8",
		"question": "People born in Saint-Amand-en-Puisaye are famous for what things ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Saint-Amand-en-Puisaye> . ?x <http://dbpedia.org/property/knownFor> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "people",
			"seq": "0,5"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "for",
			"seq": "49,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saint-Amand-en-Puisaye",
			"label": "saint-amand-en-puisaye",
			"seq": "15,36"
		}]
	},
	{
		"id": "4dbb409284b34e848777db3a91349022",
		"question": "Radios on what topics can be tuned in to in Washington DC?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/broadcastArea> <http://dbpedia.org/resource/Washington,_D.C.> . ?x <http://dbpedia.org/ontology/programmeFormat> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/broadcastArea",
			"label": "radios",
			"seq": "0,5"
		}, {
			"uri": "http://dbpedia.org/ontology/programmeFormat",
			"label": "radios",
			"seq": "0,5"
		}, {
			"uri": "http://dbpedia.org/ontology/RadioStation",
			"label": "radios",
			"seq": "0,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Washington,_D.C.",
			"label": "washington",
			"seq": "44,53"
		}]
	},
	{
		"id": "5088b38a69ba4f1f9f7c17c493dbb67e",
		"question": "List the goverener of Winston Bryant?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governor",
			"label": "goverener",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Winston_Bryant",
			"label": "winston bryant",
			"seq": "22,35"
		}]
	},
	{
		"id": "588648d7ead24862a8392d2cb6b7499f",
		"question": "Name the movie whose director is Stanley Kubrick and editor is Anthony Harvey?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Anthony_Harvey> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/editing",
			"label": "editor",
			"seq": "53,58"
		}, {
			"uri": "http://dbpedia.org/ontology/director",
			"label": "director",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "30,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anthony_Harvey",
			"label": "anthony harvey",
			"seq": "63,76"
		}, {
			"uri": "http://dbpedia.org/resource/Stanley_Kubrick",
			"label": "stanley kubrick",
			"seq": "33,47"
		}]
	},
	{
		"id": "aa54fbc2c1df4f47af6e7a074f77535f",
		"question": "Name the musician who was given label by Celluloid Records and has been associated with Africa'70 ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records> . ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Africa_'70_(band)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "32,36"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated",
			"seq": "72,81"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musician",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Celluloid_Records",
			"label": "celluloid records",
			"seq": "41,57"
		}, {
			"uri": "http://dbpedia.org/resource/Africa_'70_(band)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a74c7e7aafe049f6b82e092e907da465",
		"question": "What is the country where Sergei Ovchinnikov the volleyball player die, and Gumus was first aired ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/G\u00fcm\u00fc\u015f_(TV_series)> <http://dbpedia.org/property/firstAired> ?uri. <http://dbpedia.org/resource/Sergei_Ovchinnikov_(volleyball)> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstAired",
			"label": "first aired",
			"seq": "86,96"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "player",
			"seq": "60,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/G\u00fcm\u00fc\u015f_(TV_series)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Sergei_Ovchinnikov_(volleyball)",
			"label": "ovchinnikov volleyball sergei",
			"seq": "26,54"
		}]
	},
	{
		"id": "1ceed131fbfd408f8e4aa198f167a4b4",
		"question": "List all the movies whose directors were born in Kenosha, Wisconsin?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Kenosha,_Wisconsin> . ?uri <http://dbpedia.org/property/director> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/property/director",
			"label": "directors",
			"seq": "26,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kenosha,_Wisconsin",
			"label": "wisconsin kenosha,",
			"seq": "49,66"
		}]
	},
	{
		"id": "a608e83edd634349b19003da7befc70a",
		"question": "List down the TV shows whose producer is Stephen E. Ambros and writer is John Orloff ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/John_Orloff>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "29,36"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "63,68"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "17,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stephen_E._Ambrose",
			"label": "stephen ambros",
			"seq": "41,54"
		}, {
			"uri": "http://dbpedia.org/resource/John_Orloff",
			"label": "orloff john",
			"seq": "73,83"
		}]
	},
	{
		"id": "f08511a93db54c32a2dcbc4a4f4d74d4",
		"question": "Does Walson Augustin play for the Brothers Union?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Walson_Augustin> <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/Brothers_Union> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "union",
			"seq": "43,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Walson_Augustin",
			"label": "augustin walson",
			"seq": "5,19"
		}, {
			"uri": "http://dbpedia.org/resource/Brothers_Union",
			"label": "brothers union",
			"seq": "34,47"
		}]
	},
	{
		"id": "216cc8eb3adc4058b3dae6dc542bc2cc",
		"question": "What are the prizes won by the animator of The Skeleton Dance ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/animator",
			"label": "animator",
			"seq": "31,38"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "are",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Skeleton_Dance",
			"label": "skeleton dance the",
			"seq": "9,26"
		}]
	},
	{
		"id": "12811fd9d1ea480ca482f1b7a6f61ea8",
		"question": "List the Swedish newspaper headquarted in Stockholm ? ",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language> . ?uri <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Stockholm>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/language",
			"label": "headquarted",
			"seq": "27,37"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarted",
			"seq": "27,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Newspaper",
			"label": "newspaper",
			"seq": "17,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Swedish_language",
			"label": "swedish",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/resource/Stockholm",
			"label": "stockholm",
			"seq": "42,50"
		}]
	},
	{
		"id": "fdc1847b008e40cbb6cb07d1f3fefb7f",
		"question": "Which educational institutes have campuses at Iowa and Indiana ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Iowa> . ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Indiana> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "campuses",
			"seq": "34,41"
		}, {
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "campuses",
			"seq": "34,41"
		}, {
			"uri": "http://dbpedia.org/ontology/EducationalInstitution",
			"label": "educational",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Iowa",
			"label": "iowa",
			"seq": "46,49"
		}, {
			"uri": "http://dbpedia.org/resource/Indiana",
			"label": "indiana",
			"seq": "55,61"
		}]
	},
	{
		"id": "128a2ec9d8f842be81f9bbafd1edf43b",
		"question": "What mascot of the Galatasaray Handball Team is also the team name of Cristo Rey Jesuit high School ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cristo_Rey_Jesuit_High_School_(Chicago)> <http://dbpedia.org/property/teamName> ?uri. <http://dbpedia.org/resource/Galatasaray_Handball_Team> <http://dbpedia.org/property/mascot> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/teamName",
			"label": "team",
			"seq": "40,43"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cristo_Rey_Jesuit_High_School_(Chicago)",
			"label": "school jesuit cristo high rey",
			"seq": "70,98"
		}, {
			"uri": "http://dbpedia.org/resource/Galatasaray_Handball_Team",
			"label": "galatasaray handball team",
			"seq": "19,43"
		}]
	},
	{
		"id": "62c0c7b3421044339478d24834c3b09d",
		"question": "List down the associated musical artist of the writer of Rain Is a Good Thing ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Rain_Is_a_Good_Thing> <http://dbpedia.org/property/writer> ?x . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "47,52"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated musical artist",
			"seq": "14,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rain_Is_a_Good_Thing",
			"label": "thing rain good",
			"seq": "57,71"
		}]
	},
	{
		"id": "6814335360244dacab4516293e186458",
		"question": "Which countries led by Elizabeth II?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Elizabeth_II>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "led",
			"seq": "16,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "countries",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Elizabeth_II",
			"label": "elizabeth ii",
			"seq": "23,34"
		}]
	},
	{
		"id": "60524d1955cf4a6eba1f5eab56431ce4",
		"question": "Who is the developer of Dart (programming language) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dart_(programming_language)> <http://dbpedia.org/property/developer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "developer",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dart_(programming_language)",
			"label": "(programming language) dart",
			"seq": "24,50"
		}]
	},
	{
		"id": "5d24a8016b944ebd949de53d198f4823",
		"question": "How many different writers have written for Jump Square?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/magazine> <http://dbpedia.org/resource/Jump_Square> . ?x <http://dbpedia.org/property/author> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/magazine",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/property/author",
			"label": "how",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jump_Square",
			"label": "square jump",
			"seq": "44,54"
		}]
	},
	{
		"id": "e5211014e64e4cc3ba735304c32b59f7",
		"question": "Which official residence of hugh Scott is also the origin of Long Rifle ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Long_rifle> <http://dbpedia.org/property/origin> ?uri. <http://dbpedia.org/resource/Hugh_Scott> <http://dbpedia.org/ontology/residence> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/origin",
			"label": "origin",
			"seq": "51,56"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "residence",
			"seq": "15,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Long_rifle",
			"label": "rifle long",
			"seq": "61,70"
		}, {
			"uri": "http://dbpedia.org/resource/Hugh_Scott",
			"label": "scott hugh",
			"seq": "28,37"
		}]
	},
	{
		"id": "9169f5e7e04a45c59601fa1c275255eb",
		"question": "What is the base currency of the Benelux which can be used in Republic of Montenegro?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Benelux> <http://dbpedia.org/property/currency> ?uri. <http://dbpedia.org/resource/Republic_of_Montenegro_(1992\u20132006)> <http://dbpedia.org/property/currency> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currency",
			"label": "currency",
			"seq": "17,24"
		}, {
			"uri": "http://dbpedia.org/property/currency",
			"label": "currency",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Benelux",
			"label": "benelux",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/resource/Republic_of_Montenegro_(1992\u20132006)",
			"label": "montenegro republic",
			"seq": "62,80"
		}]
	},
	{
		"id": "2067b624202249069e8e6fa28ea3b460",
		"question": "How many politicians reside in Cape Town?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Cape_Town>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "reside",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "reside",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cape_Town",
			"label": "town cape",
			"seq": "31,39"
		}]
	},
	{
		"id": "08222072602a432fb36950cb1d93428a",
		"question": "Who wrote the mangas produced by Masahike Minami?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Masahiko_Minami> . ?x <http://dbpedia.org/ontology/author> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Manga>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "produced",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "who",
			"seq": "0,2"
		}, {
			"uri": "http://dbpedia.org/ontology/Manga",
			"label": "mangas",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Masahiko_Minami",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "b80824e9484341ffa682161fdd38a1fa",
		"question": "Who is the political figure whose military branch is Colonial troops?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Colonial_troops> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military branch",
			"seq": "34,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colonial_troops",
			"label": "colonial troops",
			"seq": "53,67"
		}]
	},
	{
		"id": "acbfdfd774604545abda627572f18dca",
		"question": "How many architects are there who have made something used by Oakland athletics?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Oakland_Athletics> . ?x <http://dbpedia.org/property/architect> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/property/architect",
			"label": "architects",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oakland_Athletics",
			"label": "athletics oakland",
			"seq": "62,78"
		}]
	},
	{
		"id": "9cf295983ac2497eaa90acc50a0e9839",
		"question": "Who has canonized someone who's a doctor of the church?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/titles> <http://dbpedia.org/resource/Doctor_of_the_Church> . ?x <http://dbpedia.org/ontology/canonizedBy> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/titles",
			"label": "the",
			"seq": "44,46"
		}, {
			"uri": "http://dbpedia.org/ontology/canonizedBy",
			"label": "canonized",
			"seq": "8,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Doctor_of_the_Church",
			"label": "doctor church the",
			"seq": "34,50"
		}]
	},
	{
		"id": "406cb0444b7849598998845f33cc549f",
		"question": "Give me all magazines whose founder died in Berkeley, California?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berkeley,_California> . ?uri <http://dbpedia.org/ontology/founder> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "magazines",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founder",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/Magazine",
			"label": "magazines",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Berkeley,_California",
			"label": "california berkeley,",
			"seq": "44,63"
		}]
	},
	{
		"id": "d008d95436354994a9c920a5c4118bd4",
		"question": "Give me a count of musical artists collaborating with Waylon Jennings?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Waylon_Jennings>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "musical",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Waylon_Jennings",
			"label": "jennings waylon",
			"seq": "54,68"
		}]
	},
	{
		"id": "5a3c7897625247c680bee70a5841b19a",
		"question": "Cologny and Lancy are the neighboring municipalities of which place ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> . ?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Lancy> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/neighboringMunicipalities",
			"label": "municipalities neighboring",
			"seq": "26,51"
		}, {
			"uri": "http://dbpedia.org/property/neighboringMunicipalities",
			"label": "municipalities neighboring",
			"seq": "26,51"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "place",
			"seq": "62,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cologny",
			"label": "cologny",
			"seq": "0,6"
		}, {
			"uri": "http://dbpedia.org/resource/Lancy",
			"label": "lancy",
			"seq": "12,16"
		}]
	},
	{
		"id": "6c664cbf0c8344ae93064a7d00fab47a",
		"question": "Who are the spouse of the actors of Wrongfully Accused?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Wrongfully_Accused> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/ontology/spouse> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "are",
			"seq": "4,6"
		}, {
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "spouse",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wrongfully_Accused",
			"label": "wrongfully accused",
			"seq": "36,53"
		}]
	},
	{
		"id": "3bf63415902341c8804e4053a565b1cc",
		"question": "What municipalities are adjacent to Chne-Bougeries?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Ch\u00eane-Bougeries>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/neighboringMunicipalities",
			"label": "municipalities",
			"seq": "5,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ch\u00eane-Bougeries",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "b01faa87ad5d492582e9236745d1282d",
		"question": "Which scientist is known for writing Philosophi Naturalis Principia Mathematica?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Philosophi\u00e6_Naturalis_Principia_Mathematica> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "19,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Philosophi\u00e6_Naturalis_Principia_Mathematica",
			"label": "mathematica philosophi principia naturalis",
			"seq": "37,78"
		}]
	},
	{
		"id": "d63aa2d8047143e494136822ba4d8766",
		"question": "What is the profession of the William Luther Hill and also the office of the Richard Coke ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri. <http://dbpedia.org/resource/Richard_Coke> <http://dbpedia.org/property/office> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "profession",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/property/office",
			"label": "office",
			"seq": "63,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Luther_Hill",
			"label": "william luther hill",
			"seq": "30,48"
		}, {
			"uri": "http://dbpedia.org/resource/Richard_Coke",
			"label": "richard coke",
			"seq": "77,88"
		}]
	},
	{
		"id": "6597dba043f3446ab99c8ec65686e304",
		"question": "Which river's source mountain is Baikal Mountains and is located in Laptev Sea ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Laptev_Sea>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceMountain",
			"label": "mountain",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "located",
			"seq": "57,63"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river's",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Baikal_Mountains",
			"label": "mountains baikal",
			"seq": "33,48"
		}, {
			"uri": "http://dbpedia.org/resource/Laptev_Sea",
			"label": "laptev",
			"seq": "68,73"
		}]
	},
	{
		"id": "c1be660170c343e1a9cfe8079b722267",
		"question": "What are some musical artists associated with the ones signed up with EMI?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/EMI> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "musical",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
			"label": "associated musical",
			"seq": "14,31"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/EMI",
			"label": "emi",
			"seq": "70,72"
		}]
	},
	{
		"id": "333d5b882d2a433abf4674b881d86b63",
		"question": "Los Angeles Lakers is the team of which basketball players?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Los_Angeles_Lakers>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/team",
			"label": "team",
			"seq": "26,29"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballPlayer",
			"label": "basketball",
			"seq": "40,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Los_Angeles_Lakers",
			"label": "angeles lakers",
			"seq": "4,17"
		}]
	},
	{
		"id": "02be653e65e640b390467b40c75c8113",
		"question": "To which state eorge M. Chilcott  belong ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_M._Chilcott> <http://dbpedia.org/property/state> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_M._Chilcott",
			"label": "chilcott eorge",
			"seq": "15,28"
		}]
	},
	{
		"id": "728abc0613c4486dac29a63aa6e90537",
		"question": "Ricky Gervais is the executive producer of the series having how many fictional characters?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Ricky_Gervais> . ?uri <http://dbpedia.org/ontology/series> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "21,38"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "47,52"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional",
			"seq": "70,78"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ricky_Gervais",
			"label": "gervais ricky",
			"seq": "0,12"
		}]
	},
	{
		"id": "b9af1aab1cdb4df3b8aad53370c82fd7",
		"question": "Give me the list of people who scaled mountains in Sierra Nevada?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/mountainRange> <http://dbpedia.org/resource/Sierra_Nevada_(U.S.)> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountains",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "list",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sierra_Nevada_(U.S.)",
			"label": "sierra nevada",
			"seq": "51,63"
		}]
	},
	{
		"id": "de004bcd703247ab981d0d8784c0b7e0",
		"question": "Who studied in universities located in suburbs?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Suburb> . ?uri <http://dbpedia.org/property/education> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/campus",
			"label": "located",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/property/education",
			"label": "located",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Suburb",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "ce0a65de462c4482be2bcc4c57c67e39",
		"question": "Name the river with Readin, Brekshire in its path and mouth place is Sothend-on-sea ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Reading,_Berkshire> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Southend-on-Sea>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "its",
			"seq": "41,43"
		}, {
			"uri": "http://dbpedia.org/ontology/mouthPlace",
			"label": "place mouth",
			"seq": "54,64"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Reading,_Berkshire",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Southend-on-Sea",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9713dcb7417545e492296544a6ea728d",
		"question": "What award has been awarded to both Dion Beebe and Charles LeMaire?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dion_Beebe> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/property/awards> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "5,9"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "award",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dion_Beebe",
			"label": "beebe dion",
			"seq": "36,45"
		}, {
			"uri": "http://dbpedia.org/resource/Charles_LeMaire",
			"label": "lemaire charles",
			"seq": "51,65"
		}]
	},
	{
		"id": "c2b361e703db47748197f55a513a8f91",
		"question": "What religion did the president follow which was served by Kang Young-hoon?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Kang_Young-hoon> <http://dbpedia.org/property/president> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "22,30"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "5,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kang_Young-hoon",
			"label": "young-hoon kang",
			"seq": "59,73"
		}]
	},
	{
		"id": "152b926438b04cc09ddbaf7259bc0d5f",
		"question": "Which is the common prospect team of Mikhail Pashnin and Robin kovacs ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mikhail_Pashnin> <http://dbpedia.org/property/prospectTeam> ?uri. <http://dbpedia.org/resource/Robin_Kovacs> <http://dbpedia.org/ontology/prospectTeam> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prospectTeam",
			"label": "prospect team",
			"seq": "20,32"
		}, {
			"uri": "http://dbpedia.org/ontology/prospectTeam",
			"label": "prospect team",
			"seq": "20,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mikhail_Pashnin",
			"label": "pashnin mikhail",
			"seq": "37,51"
		}, {
			"uri": "http://dbpedia.org/resource/Robin_Kovacs",
			"label": "kovacs robin",
			"seq": "57,68"
		}]
	},
	{
		"id": "135b3e40d914466e87cc236585e5a2ea",
		"question": "Name the person whose child is Irne Joliot-Curie?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Ir\u00e8ne_Joliot-Curie>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "child",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ir\u00e8ne_Joliot-Curie",
			"label": "joliot-curie",
			"seq": "36,47"
		}]
	},
	{
		"id": "ee40fd8fb95f42b7a50f05e872395ec7",
		"question": "Which TV show's company is PlayTone and is produced by Stephen E. Ambrose ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Playtone> . ?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "16,22"
		}, {
			"uri": "http://dbpedia.org/property/producer",
			"label": "produced",
			"seq": "43,50"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show's",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Playtone",
			"label": "playtone",
			"seq": "27,34"
		}, {
			"uri": "http://dbpedia.org/resource/Stephen_E._Ambrose",
			"label": "stephen ambrose",
			"seq": "55,69"
		}]
	},
	{
		"id": "d7e5d2254df0467f9540e90433f7ea55",
		"question": "Count the different genres of games published by Titus Software",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Titus_Software> . ?x <http://dbpedia.org/ontology/genre> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/publisher",
			"label": "published",
			"seq": "36,44"
		}, {
			"uri": "http://dbpedia.org/ontology/genre",
			"label": "genres",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Titus_Software",
			"label": "software titus",
			"seq": "49,62"
		}]
	},
	{
		"id": "adb40156d8b943db81c77206edceffb5",
		"question": "What religions are followed by members of the societies whose architectural influences can be seen on the Sanggar Agung ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Sanggar_Agung> <http://dbpedia.org/property/architecturalStyle> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architecturalStyle",
			"label": "architectural",
			"seq": "62,74"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sanggar_Agung",
			"label": "sanggar agung",
			"seq": "106,118"
		}]
	},
	{
		"id": "5aa7006cd15c46c2bb25952420fc9ab6",
		"question": "Who is the predecessor of Voere ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Voere> <http://dbpedia.org/ontology/predecessor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "11,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Voere",
			"label": "voere",
			"seq": "26,30"
		}]
	},
	{
		"id": "a6b5eb1806b843d1af6d909735bc52b6",
		"question": "Which stockholder of yale Repertory Theatre was training center of William Anthony ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Anthony_(artist)> <http://dbpedia.org/ontology/training> ?uri. <http://dbpedia.org/resource/Yale_Repertory_Theatre> <http://dbpedia.org/property/owner> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/training",
			"label": "training",
			"seq": "48,55"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "center",
			"seq": "57,62"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Anthony_(artist)",
			"label": "william anthony",
			"seq": "67,81"
		}, {
			"uri": "http://dbpedia.org/resource/Yale_Repertory_Theatre",
			"label": "repertory theatre yale",
			"seq": "21,42"
		}]
	},
	{
		"id": "7d3aa7abddce4885924e51a17c2b5e0d",
		"question": "Who  won the Lovelace Medal and the Norbert Wiener Award for Social and Professional Responsibility?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Lovelace_Medal> . ?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Norbert_Wiener_Award_for_Social_and_Professional_Responsibility> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prizes",
			"label": "professional",
			"seq": "72,83"
		}, {
			"uri": "http://dbpedia.org/property/prizes",
			"label": "professional",
			"seq": "72,83"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lovelace_Medal",
			"label": "lovelace medal",
			"seq": "13,26"
		}, {
			"uri": "http://dbpedia.org/resource/Norbert_Wiener_Award_for_Social_and_Professional_Responsibility",
			"label": "responsibility professional norbert wiener social",
			"seq": "36,84"
		}]
	},
	{
		"id": "d851da1144a243338aa3d47e27dcab4b",
		"question": "Where is the school which is the rival of Somerset Berkley Regional High?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Somerset_Berkley_Regional_High_School> <http://dbpedia.org/ontology/rival> ?x . ?x <http://dbpedia.org/ontology/region> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/rival",
			"label": "rival",
			"seq": "33,37"
		}, {
			"uri": "http://dbpedia.org/ontology/region",
			"label": "regional",
			"seq": "59,66"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "school",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Somerset_Berkley_Regional_High_School",
			"label": "somerset regional berkley school high",
			"seq": "13,49"
		}]
	},
	{
		"id": "179e610843e145489491954c3a91b179",
		"question": "Which TV show's setting is in Massachusetts and is the subsequent work of Fraiser ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Frasier> . ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Massachusetts>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "55,69"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "setting",
			"seq": "16,22"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show's",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frasier",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Massachusetts",
			"label": "massachusetts",
			"seq": "30,42"
		}]
	},
	{
		"id": "f6301e4382644f719c3ca7d13a774aa1",
		"question": "Who were the american football players who played for Dallas Cowboys?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Dallas_Cowboys>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football american",
			"seq": "13,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dallas_Cowboys",
			"label": "cowboys dallas",
			"seq": "54,67"
		}]
	},
	{
		"id": "f913c2429f424dccae257c7c4a5f5b83",
		"question": "What is the national origin of Dornier Aerodyne and Hirth Acrostar ?;",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dornier_Aerodyne> <http://dbpedia.org/property/nationalOrigin> ?uri. <http://dbpedia.org/resource/Hirth_Acrostar> <http://dbpedia.org/ontology/origin> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalOrigin",
			"label": "national origin",
			"seq": "12,26"
		}, {
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "origin",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dornier_Aerodyne",
			"label": "aerodyne dornier",
			"seq": "31,46"
		}, {
			"uri": "http://dbpedia.org/resource/Hirth_Acrostar",
			"label": "acrostar hirth",
			"seq": "52,65"
		}]
	},
	{
		"id": "84e39f9dfd9b421eaede863a68c7d3dd",
		"question": "Who is the writer of He's a Pirate ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/He's_a_Pirate> <http://dbpedia.org/property/writer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/He's_a_Pirate",
			"label": "pirate he's",
			"seq": "21,31"
		}]
	},
	{
		"id": "59b915743bb142afb10240174db2a7d0",
		"question": "Name the company whose key person is Raymond Conner and produces Boeing CH-47 Chinook?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Raymond_Conner> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "key",
			"seq": "23,25"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "produces",
			"seq": "56,63"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Raymond_Conner",
			"label": "raymond conner",
			"seq": "37,50"
		}, {
			"uri": "http://dbpedia.org/resource/Boeing_CH-47_Chinook",
			"label": "chinook boeing ch-47",
			"seq": "65,84"
		}]
	},
	{
		"id": "1f6af3eda6964bc7a5230797aaa04e0f",
		"question": "How many famous people are from the Filipinos?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/stateOfOrigin> <http://dbpedia.org/resource/Filipinos>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "filipinos",
			"seq": "36,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Filipinos",
			"label": "filipinos",
			"seq": "36,44"
		}]
	},
	{
		"id": "8da1f3a107bd45b2b6826f13b3e863b9",
		"question": "Count the number of artists in the Cirque du Soleil discography?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Cirque_du_Soleil_discography> <http://dbpedia.org/property/artist> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artists",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cirque_du_Soleil_discography",
			"label": "discography soleil cirque",
			"seq": "35,59"
		}]
	},
	{
		"id": "8f70005177114907b820b6cb4ca9396e",
		"question": "In which countries is coconut used as a food ingredient?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Coconut> . ?x <http://dbpedia.org/property/country> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredient",
			"seq": "45,54"
		}, {
			"uri": "http://dbpedia.org/property/country",
			"label": "countries",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Food",
			"label": "food",
			"seq": "40,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Coconut",
			"label": "coconut",
			"seq": "22,28"
		}]
	},
	{
		"id": "4803820b51af42549d4d664118ac2d00",
		"question": "Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Balanidae> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Crustacean>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "family",
			"seq": "92,97"
		}, {
			"uri": "http://dbpedia.org/ontology/binomialAuthority",
			"label": "balanidae",
			"seq": "82,90"
		}, {
			"uri": "http://dbpedia.org/ontology/Crustacean",
			"label": "crustaceans",
			"seq": "61,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Balanidae",
			"label": "balanidae",
			"seq": "82,90"
		}]
	},
	{
		"id": "249446474067450f80688ee178af8d63",
		"question": "Where did anton ausserer die?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Anton_Ausserer> <http://dbpedia.org/property/deathPlace> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "die",
			"seq": "25,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anton_Ausserer",
			"label": "ausserer anton",
			"seq": "10,23"
		}]
	},
	{
		"id": "c46c0c8dbcbe4bf091c8b520f9fa3805",
		"question": "What is the river whose source is Lake Ontario?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Lake_Ontario>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/source",
			"label": "source",
			"seq": "24,29"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lake_Ontario",
			"label": "ontario lake",
			"seq": "34,45"
		}]
	},
	{
		"id": "f791ffa9789549f19d8f53aff0f9e369",
		"question": "Which rivers have source origins asnorth western, Zambia ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceRegion",
			"label": "source",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North-Western_Province,_Zambia",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0e868d8761e84ba0981c4780e8fd572f",
		"question": "Name the subsidary of Tandem Computers which was founded by Jim Harris ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Tandem_Computers> . ?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsidiary",
			"label": "subsidary",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "founded",
			"seq": "49,55"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "computers",
			"seq": "29,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tandem_Computers",
			"label": "computers tandem",
			"seq": "22,37"
		}, {
			"uri": "http://dbpedia.org/resource/Jim_Harris_(entrepreneur)",
			"label": "harris",
			"seq": "64,69"
		}]
	},
	{
		"id": "1dcc7c9bfae6426bb72ab84d88afa0ed",
		"question": "How many races has Best Mate won?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Best_Mate> <http://dbpedia.org/property/race> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/race",
			"label": "races",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Best_Mate",
			"label": "mate best",
			"seq": "19,27"
		}]
	},
	{
		"id": "53694c0e5c2548419756478331137c13",
		"question": "Who is  related to Kelly Osbourne & Ozzy Osbourne?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Kelly_Osbourne> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ozzy_Osbourne> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "related",
			"seq": "8,14"
		}, {
			"uri": "http://dbpedia.org/property/relatives",
			"label": "related",
			"seq": "8,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kelly_Osbourne",
			"label": "osbourne kelly",
			"seq": "19,32"
		}, {
			"uri": "http://dbpedia.org/resource/Ozzy_Osbourne",
			"label": "osbourne ozzy",
			"seq": "25,37"
		}]
	},
	{
		"id": "846635db38f040eaa3478eac855e39e8",
		"question": "What has  location as Ontario?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Ontario>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "location",
			"seq": "10,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ontario",
			"label": "ontario",
			"seq": "22,28"
		}]
	},
	{
		"id": "5bcc534759a2403ca4f0e614344dc088",
		"question": "Where was  William Anthony  trained ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Anthony_(artist)> <http://dbpedia.org/ontology/training> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/training",
			"label": "trained",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Anthony_(artist)",
			"label": "william anthony",
			"seq": "11,25"
		}]
	},
	{
		"id": "e9d2d1d8bc8a4519b2b504c0b054b9e5",
		"question": "What are some famous companies founded in the US?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/United_States>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "21,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a3c789f47bd247b6be843aa13563bc36",
		"question": "City of Miami Cemetery is the governing body of which city?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/City_of_Miami_Cemetery> <http://dbpedia.org/property/governingBody> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governing body",
			"seq": "30,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/City_of_Miami_Cemetery",
			"label": "cemetery miami city",
			"seq": "0,18"
		}]
	},
	{
		"id": "7b6a1325fab14f1c91fb9c24f98be16c",
		"question": "What are some things people born in Louisiana are famous for?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Louisiana> . ?x <http://dbpedia.org/property/knownFor> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "people",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "for",
			"seq": "57,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Louisiana",
			"label": "louisiana",
			"seq": "36,44"
		}]
	},
	{
		"id": "c51d1f39ce0e4040be9f32af0eefad06",
		"question": "Is Neungin High school a buddhist school?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> <http://dbpedia.org/resource/Buddhism> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religiousAffiliation",
			"label": "neungin",
			"seq": "3,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neungin_High_School",
			"label": "neungin school high",
			"seq": "3,21"
		}, {
			"uri": "http://dbpedia.org/resource/Buddhism",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9b7068c9ee9b45a4b38e8b7da17bc32d",
		"question": "What is the  name of the television show whose developer is J. Michael Straczynski and actor is Jason Carter (actor)?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developer",
			"seq": "47,55"
		}, {
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "carter",
			"seq": "102,107"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "25,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/J._Michael_Straczynski",
			"label": "straczynski michael",
			"seq": "63,81"
		}, {
			"uri": "http://dbpedia.org/resource/Jason_Carter_(actor)",
			"label": "(actor) carter jason",
			"seq": "96,115"
		}]
	},
	{
		"id": "c0ee1e99d29e4deb86fc700898d5bed5",
		"question": "How many people have played for the ones who own the stadium of Bankers Life Fieldhouse?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/arena> <http://dbpedia.org/resource/Bankers_Life_Fieldhouse> . ?uri <http://dbpedia.org/property/team> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/arena",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/property/team",
			"label": "the",
			"seq": "32,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bankers_Life_Fieldhouse",
			"label": "fieldhouse bankers life",
			"seq": "64,86"
		}]
	},
	{
		"id": "f1a36818194047f59c627aa4e1e8b559",
		"question": "How many artists have their works in the Sao Paolo Museum of Art?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/S\u00e3o_Paulo_Museum_of_Art> . ?x <http://dbpedia.org/property/artist> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/museum",
			"label": "museum",
			"seq": "51,56"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "artists",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artists",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/S\u00e3o_Paulo_Museum_of_Art",
			"label": "museum",
			"seq": "51,56"
		}]
	},
	{
		"id": "074f740dbbf64210b7a84f51d6f9e6bd",
		"question": "Count the battles fought by Raoul Magrin-Vernerey?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Raoul_Magrin-Vernerey> <http://dbpedia.org/property/battles> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "402",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battles",
			"seq": "10,16"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "count",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Raoul_Magrin-Vernerey",
			"label": "magrin-vernerey raoul",
			"seq": "28,48"
		}]
	},
	{
		"id": "80b87ca88eaf4b569c9bcb66b3fca287",
		"question": "Name the university whose athletic department is called National Collegiate Athletic Association and has a chancellor named Nicholas S. Zeppos?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/athletics> <http://dbpedia.org/resource/National_Collegiate_Athletic_Association> . ?uri <http://dbpedia.org/property/chancellor> <http://dbpedia.org/resource/Nicholas_S._Zeppos>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/athletics",
			"label": "athletic",
			"seq": "26,33"
		}, {
			"uri": "http://dbpedia.org/property/chancellor",
			"label": "chancellor",
			"seq": "107,116"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Collegiate_Athletic_Association",
			"label": "association collegiate national athletic",
			"seq": "26,65"
		}, {
			"uri": "http://dbpedia.org/resource/Nicholas_S._Zeppos",
			"label": "nicholas zeppos",
			"seq": "124,138"
		}]
	},
	{
		"id": "a0360818041d40528ccba0161760b180",
		"question": "Who are the people whose phD advisor was Harry Harlow?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Harry_Harlow>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "advisor",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harry_Harlow",
			"label": "harlow harry",
			"seq": "41,52"
		}]
	},
	{
		"id": "e080bdada1b3440e8410f575e2cff662",
		"question": "What is the military branch of the William French Smith which is also the branch of Pierre R. Graham ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_French_Smith> <http://dbpedia.org/ontology/militaryBranch> ?uri. <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/property/branch> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military branch",
			"seq": "12,26"
		}, {
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_French_Smith",
			"label": "william french smith",
			"seq": "35,54"
		}, {
			"uri": "http://dbpedia.org/resource/Pierre_R._Graham",
			"label": "pierre graham",
			"seq": "84,96"
		}]
	},
	{
		"id": "8993e18e5aa946e8bbf8e70e4f8c96b5",
		"question": "Is Pulau Ubin the largest city of Singapore?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Singapore> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "18,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pulau_Ubin",
			"label": "pulau ubin",
			"seq": "3,12"
		}, {
			"uri": "http://dbpedia.org/resource/Singapore",
			"label": "singapore",
			"seq": "34,42"
		}]
	},
	{
		"id": "21af0cba33be4e3a978696b579445972",
		"question": "Which sitcoms are made by a company headquartered in NYC?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/New_York_City> . ?uri <http://dbpedia.org/ontology/company> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/headquarter",
			"label": "headquartered",
			"seq": "36,48"
		}, {
			"uri": "http://dbpedia.org/ontology/company",
			"label": "company",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "sitcoms",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York_City",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "70fbf64af7d749509853096246f02afd",
		"question": "Which mountains are contained in Inyo National Forest?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Inyo_National_Forest>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "contained",
			"seq": "20,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Mountain",
			"label": "mountains",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Inyo_National_Forest",
			"label": "national forest inyo",
			"seq": "33,52"
		}]
	},
	{
		"id": "6aabd01fc03b4eaa966294abc7d5be2d",
		"question": "In how many places have people canonized by John Paul II died?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_John_Paul_II> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/canonizedBy",
			"label": "canonized",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "places",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pope_John_Paul_II",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1c466c5bdf984fa28bf9ba070374e8a8",
		"question": "Which river starts from the county seat of Heathsville, Virginia?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/countySeat> <http://dbpedia.org/resource/Heathsville,_Virginia> . ?uri <http://dbpedia.org/property/mouthLocation> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/countySeat",
			"label": "county seat",
			"seq": "28,38"
		}, {
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "heathsville,",
			"seq": "43,54"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Heathsville,_Virginia",
			"label": "heathsville, virginia",
			"seq": "43,63"
		}]
	},
	{
		"id": "be80acb7f7b34c65b0e6ea8452711a51",
		"question": "Where were sverre krogh sundbo and havard vad petersson born?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/H\u00e5vard_Vad_Petersson> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "born",
			"seq": "56,59"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "petersson",
			"seq": "46,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8",
			"label": "sverre krogh",
			"seq": "11,22"
		}, {
			"uri": "http://dbpedia.org/resource/H\u00e5vard_Vad_Petersson",
			"label": "petersson",
			"seq": "46,54"
		}]
	},
	{
		"id": "a0f82706207747b0b7e49ff34a2321ab",
		"question": "where is the thorington train station located?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thorington_railway_station> <http://dbpedia.org/ontology/district> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/district",
			"label": "train",
			"seq": "24,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thorington_railway_station",
			"label": "thorington station",
			"seq": "13,30"
		}]
	},
	{
		"id": "acd83380bc52438a913b1294a017b418",
		"question": "Which arena of WPC Dynamo Moscow is the death palce of Mikhail Voronin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WPC_Dynamo_Moscow> <http://dbpedia.org/property/arena> ?uri. <http://dbpedia.org/resource/Mikhail_Voronin> <http://dbpedia.org/property/deathPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/arena",
			"label": "arena",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "death",
			"seq": "40,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WPC_Dynamo_Moscow",
			"label": "moscow dynamo wpc",
			"seq": "15,31"
		}, {
			"uri": "http://dbpedia.org/resource/Mikhail_Voronin",
			"label": "voronin mikhail",
			"seq": "55,69"
		}]
	},
	{
		"id": "f6bdf603e0004a3fa20c3ab3fc071309",
		"question": "How many theme musics have been composed by Julian Gingell?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "32,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Julian_Gingell",
			"label": "gingell julian",
			"seq": "44,57"
		}]
	},
	{
		"id": "534aa17cdbb94593be95eb3051ede21e",
		"question": "Name the company founded in US and created Visual Studio ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Microsoft_Visual_Studio>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/property/products",
			"label": "us",
			"seq": "28,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Microsoft_Visual_Studio",
			"label": "visual studio",
			"seq": "43,55"
		}]
	},
	{
		"id": "43525bb6aaec44c582028a0f297108ec",
		"question": "What are the musicals whose musicians worked under Sony Music Entertainment?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Musical",
			"label": "musicals",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony_Music_Entertainment",
			"label": "entertainment",
			"seq": "62,74"
		}]
	},
	{
		"id": "52db5fe19d374c4a99a23b55ecc4d93d",
		"question": "What is the place of the Geography Club (play) which is also the  official residence of the Scott Berkun?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Geography_Club_(play)> <http://dbpedia.org/property/place> ?uri. <http://dbpedia.org/resource/Scott_Berkun> <http://dbpedia.org/property/residence> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/place",
			"label": "place",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/property/residence",
			"label": "residence",
			"seq": "75,83"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Geography_Club_(play)",
			"label": "geography (play) club",
			"seq": "25,45"
		}, {
			"uri": "http://dbpedia.org/resource/Scott_Berkun",
			"label": "berkun scott",
			"seq": "92,103"
		}]
	},
	{
		"id": "5e45892fa3ce4473ba70cdeecaff4d39",
		"question": "What are the albums whose artists have performed with the Tangerine Dream?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Tangerine_Dream> . ?uri <http://dbpedia.org/property/artist> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "tangerine",
			"seq": "58,66"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "artists",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Album",
			"label": "albums",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tangerine_Dream",
			"label": "tangerine dream",
			"seq": "58,72"
		}]
	},
	{
		"id": "aa8ca34e4003474990f876a54b184d6b",
		"question": "Which house has published books about Jazz?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/nonFictionSubject> <http://dbpedia.org/resource/Jazz> . ?x <http://dbpedia.org/ontology/publisher> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nonFictionSubject",
			"label": "house",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "published",
			"seq": "16,24"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "26,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jazz",
			"label": "jazz",
			"seq": "38,41"
		}]
	},
	{
		"id": "78722f141f874d3caafa82adf3d45089",
		"question": "List the award which have been won by both Charles LeMaire and Nick Park ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Nick_Park> <http://dbpedia.org/ontology/award> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_LeMaire",
			"label": "lemaire charles",
			"seq": "43,57"
		}, {
			"uri": "http://dbpedia.org/resource/Nick_Park",
			"label": "park nick",
			"seq": "63,71"
		}]
	},
	{
		"id": "5d8fba40bf9544c5a9a55982712ad859",
		"question": "Count the number of members of the organization which have Austria as one of the member ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Austria> . ?x <http://dbpedia.org/property/membership> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/membership",
			"label": "members",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/property/membership",
			"label": "members",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Austria",
			"label": "austria",
			"seq": "59,65"
		}]
	},
	{
		"id": "56228aa5b26e4049b2a03f5745a23ed7",
		"question": "Name some relatives of the people studied in Manurewa High School?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/school> <http://dbpedia.org/resource/Manurewa_High_School> . ?x <http://dbpedia.org/ontology/relative> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/school",
			"label": "school",
			"seq": "59,64"
		}, {
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "10,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Manurewa_High_School",
			"label": "manurewa school high",
			"seq": "45,64"
		}]
	},
	{
		"id": "d1087a6ae2e640ee9b0c1458c8447ee8",
		"question": "Gregg Toland cinematographed how many things?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Gregg_Toland>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cinematography",
			"label": "cinematographed",
			"seq": "13,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gregg_Toland",
			"label": "toland gregg",
			"seq": "0,11"
		}]
	},
	{
		"id": "2ee9621573e44f3caa895a060b7ebda9",
		"question": "Whose military unit is 39th infantry regiment in 1812?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/39th_Infantry_Regiment_(War_of_1812)>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military unit",
			"seq": "6,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/39th_Infantry_Regiment_(War_of_1812)",
			"label": "regiment infantry 39th 1812",
			"seq": "23,49"
		}]
	},
	{
		"id": "3ba1c4f421364ee0be4dde8be5ba4558",
		"question": "Is Darcs released with a GNU license?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Darcs> <http://dbpedia.org/ontology/license> <http://dbpedia.org/resource/GNU> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/license",
			"label": "license",
			"seq": "29,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Darcs",
			"label": "darcs",
			"seq": "3,7"
		}, {
			"uri": "http://dbpedia.org/resource/GNU",
			"label": "gnu",
			"seq": "25,27"
		}]
	},
	{
		"id": "74c5d0464b124cb38cdf4cd48125cf81",
		"question": "List the current members of Metro Station (band) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Metro_Station_(band)> <http://dbpedia.org/property/currentMembers> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "members current",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Metro_Station_(band)",
			"label": "station (band) metro",
			"seq": "28,47"
		}]
	},
	{
		"id": "2fb718468f46401ea78bc4721495af49",
		"question": "Which sucessor of George Madison is the sucessor of levi Lincoln, Sr. ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_Madison> <http://dbpedia.org/ontology/relation> ?uri. <http://dbpedia.org/resource/Levi_Lincoln,_Sr.> <http://dbpedia.org/property/successor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "madison",
			"seq": "25,31"
		}, {
			"uri": "http://dbpedia.org/property/successor",
			"label": "sucessor",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_Madison",
			"label": "madison george",
			"seq": "18,31"
		}, {
			"uri": "http://dbpedia.org/resource/Levi_Lincoln,_Sr.",
			"label": "lincoln, levi sr.",
			"seq": "52,68"
		}]
	},
	{
		"id": "951936711e75498793c0cc4258ef5eb3",
		"question": "Who is the builder of Presidio Santa Cruz de Terrenate ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Presidio_Santa_Cruz_de_Terrenate> <http://dbpedia.org/ontology/builder> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "builder",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Presidio_Santa_Cruz_de_Terrenate",
			"label": "terrenate presidio santa cruz",
			"seq": "22,50"
		}]
	},
	{
		"id": "a0ea895157fe4bc6ac0e2ac8f852f6b0",
		"question": "What team is famous for Robert Nederlander and also the debuting team of Gary Sanchez?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_Nederlander> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Gary_S\u00e1nchez> <http://dbpedia.org/ontology/debutTeam> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "316",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "for",
			"seq": "20,22"
		}, {
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "team",
			"seq": "5,8"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "team",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Nederlander",
			"label": "nederlander robert",
			"seq": "24,41"
		}, {
			"uri": "http://dbpedia.org/resource/Gary_S\u00e1nchez",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "b9e63a276a7b43c8925247e323ca92f5",
		"question": "What is the award which is presented by Swedish Academy?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Swedish_Academy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/presenter",
			"label": "presented",
			"seq": "27,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Award",
			"label": "award",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Swedish_Academy",
			"label": "swedish academy",
			"seq": "40,54"
		}]
	},
	{
		"id": "3aa4bd1928004f1aa0fbb510009fc773",
		"question": "What is the common profession of DeWitt Clinton and Claiborne Pell ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/DeWitt_Clinton> <http://dbpedia.org/property/office> ?uri. <http://dbpedia.org/resource/Claiborne_Pell> <http://dbpedia.org/ontology/profession> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/office",
			"label": "of",
			"seq": "21,22"
		}, {
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "profession",
			"seq": "19,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/DeWitt_Clinton",
			"label": "clinton dewitt",
			"seq": "33,46"
		}, {
			"uri": "http://dbpedia.org/resource/Claiborne_Pell",
			"label": "claiborne pell",
			"seq": "52,65"
		}]
	},
	{
		"id": "0863ef35f0474efda395d6bdafbcde40",
		"question": "Which politicians died in cities built by the Roman emperor Charles 5?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/builder> <http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor> . ?uri <http://dbpedia.org/ontology/deathPlace> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "built",
			"seq": "33,37"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "42,44"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "which",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor",
			"label": "emperor charles roman",
			"seq": "46,66"
		}]
	},
	{
		"id": "5a183f932ebe44a9bc2b48aa7f73e605",
		"question": "List the ingredients of Kaszanka?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kaszanka> <http://dbpedia.org/ontology/ingredient> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingredients",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kaszanka",
			"label": "kaszanka",
			"seq": "24,31"
		}]
	},
	{
		"id": "da861f99dfe244209207a2f1ddbd8a39",
		"question": "Which broad cast area od CFRX is the country of North America Poker Tour ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/CFRX> <http://dbpedia.org/ontology/broadcastArea> ?uri. <http://dbpedia.org/resource/North_American_Poker_Tour> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/broadcastArea",
			"label": "broad cast area",
			"seq": "6,20"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "37,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CFRX",
			"label": "cfrx",
			"seq": "25,28"
		}, {
			"uri": "http://dbpedia.org/resource/North_American_Poker_Tour",
			"label": "america poker north tour",
			"seq": "48,71"
		}]
	},
	{
		"id": "eadddca2aa7a4d2daa245624e12ba871",
		"question": "Which scientist was advised by John Robert Woodyard?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/John_Robert_Woodyard>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/doctoralAdvisor",
			"label": "advised",
			"seq": "20,26"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Robert_Woodyard",
			"label": "woodyard robert john",
			"seq": "31,50"
		}]
	},
	{
		"id": "c73a4a3eacb742309e74d6f0c2e8e729",
		"question": "What religion did Gamini Seneviratne follow?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gamini_Seneviratne> <http://dbpedia.org/ontology/religion> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "5,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gamini_Seneviratne",
			"label": "seneviratne gamini",
			"seq": "18,35"
		}]
	},
	{
		"id": "deee0126b45443878ab649c3acfb2756",
		"question": "How many bacterias have taxonomy as Bacillales and domain as Bacteria? ",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/order",
			"label": "bacterias",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/property/domain",
			"label": "domain",
			"seq": "51,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bacillales",
			"label": "bacillales",
			"seq": "36,45"
		}, {
			"uri": "http://dbpedia.org/resource/Bacteria",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "b2aaecfc5ca24aa0a486a847584fd884",
		"question": "Were the bodies involved in the Westroads mall shootings discovered in Nebraska?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Westroads_Mall_shooting> <http://dbpedia.org/property/bodyDiscovered> <http://dbpedia.org/resource/Nebraska> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/bodyDiscovered",
			"label": "discovered",
			"seq": "57,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Westroads_Mall_shooting",
			"label": "westroads",
			"seq": "32,40"
		}, {
			"uri": "http://dbpedia.org/resource/Nebraska",
			"label": "nebraska",
			"seq": "71,78"
		}]
	},
	{
		"id": "dd10bc648d304c6e87f26f46a808f82d",
		"question": "In how many places are Marjas found?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Marja'> . ?x <http://dbpedia.org/ontology/location> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/title",
			"label": "places",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "in",
			"seq": "0,1"
		}, {
			"uri": "http://dbpedia.org/ontology/Location",
			"label": "in",
			"seq": "0,1"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marja'",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "dcf94c6a97794f5eaa21c501a7046906",
		"question": "What products do US companies make?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/product> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "products",
			"seq": "5,12"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "products",
			"seq": "5,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "20,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "04e3bd6b0c8e42cc847a95d2618c62fd",
		"question": "Which animator of The Skeleton Dance is also the animator of the Tommy Tucker's Tooth ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> ?uri. <http://dbpedia.org/resource/Tommy_Tucker's_Tooth> <http://dbpedia.org/property/animator> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/animator",
			"label": "animator",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/animator",
			"label": "animator",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Skeleton_Dance",
			"label": "skeleton dance the",
			"seq": "18,35"
		}, {
			"uri": "http://dbpedia.org/resource/Tommy_Tucker's_Tooth",
			"label": "tucker's tooth tommy",
			"seq": "65,84"
		}]
	},
	{
		"id": "df803beedd644f2685bc04e7975727c4",
		"question": "What is the common religious affiliation of the Wickramabahu Central College (National School) and that of  Vesak?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)> <http://dbpedia.org/property/religiousAffiliation> ?uri. <http://dbpedia.org/resource/Vesak> <http://dbpedia.org/ontology/type> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religiousAffiliation",
			"label": "affiliation religious",
			"seq": "19,39"
		}, {
			"uri": "http://dbpedia.org/ontology/type",
			"label": "the",
			"seq": "8,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)",
			"label": "wickramabahu (national school) college central",
			"seq": "48,93"
		}, {
			"uri": "http://dbpedia.org/resource/Vesak",
			"label": "vesak",
			"seq": "108,112"
		}]
	},
	{
		"id": "75fe6c8cbf564ad5b696120959659daf",
		"question": "Name the mountain range in which the mountain peak of Malatraix belongs?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Malatraix> <http://dbpedia.org/ontology/parentMountainPeak> ?x . ?x <http://dbpedia.org/ontology/mountainRange> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parentMountainPeak",
			"label": "mountain",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountain",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Malatraix",
			"label": "malatraix",
			"seq": "54,62"
		}]
	},
	{
		"id": "f468589935b448efb8923084dcbd1583",
		"question": "List education institute of the engineers whose alma mater is ChristChurch ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Christchurch> . ?x <http://dbpedia.org/ontology/education> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engineer>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/education",
			"label": "education",
			"seq": "5,13"
		}, {
			"uri": "http://dbpedia.org/ontology/education",
			"label": "education",
			"seq": "5,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Engineer",
			"label": "engineers",
			"seq": "32,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christchurch",
			"label": "christchurch",
			"seq": "62,73"
		}]
	},
	{
		"id": "43a276ac67384d1fb8baebc563b6eeb9",
		"question": "What is the headquarters of the public transit system which is the system of Bottineau LRT ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Bottineau_LRT> <http://dbpedia.org/property/system> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PublicTransitSystem>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/system",
			"label": "system",
			"seq": "47,52"
		}, {
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/PublicTransitSystem",
			"label": "transit system",
			"seq": "39,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bottineau_LRT",
			"label": "bottineau",
			"seq": "77,85"
		}]
	},
	{
		"id": "daeb019f166b4919bd323ccf3b8cf03a",
		"question": "What is the place of birth of the jockey who breeded De La Rose ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/De_La_Rose> <http://dbpedia.org/ontology/breeder> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Jockey>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/breeder",
			"label": "breeded",
			"seq": "45,51"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "place birth",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Jockey",
			"label": "jockey",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/De_La_Rose",
			"label": "rose",
			"seq": "59,62"
		}]
	},
	{
		"id": "495e4973e9eb4c7f8177e3e1c774d8c7",
		"question": "How many people are in the England national football team?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/England_national_football_team>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "national team",
			"seq": "35,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England_national_football_team",
			"label": "national football england team",
			"seq": "27,56"
		}]
	},
	{
		"id": "224dd25d50db49c89875b050e8c011a9",
		"question": "Who is  venerated in  Judaism and Islam?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Judaism> . ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/veneratedIn",
			"label": "venerated in",
			"seq": "8,19"
		}, {
			"uri": "http://dbpedia.org/ontology/veneratedIn",
			"label": "venerated in",
			"seq": "8,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Judaism",
			"label": "judaism",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/resource/Islam",
			"label": "islam",
			"seq": "34,38"
		}]
	},
	{
		"id": "829939d409714b7b9fb93dfd57ceccc9",
		"question": "What are some shows whose voice actors play the piano?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Piano> . ?uri <http://dbpedia.org/property/voices> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/instrument",
			"label": "some",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/property/voices",
			"label": "voice",
			"seq": "26,30"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Piano",
			"label": "piano",
			"seq": "48,52"
		}]
	},
	{
		"id": "77bba5ef70ba44d79cf600cc5ea05d22",
		"question": "Where is the building located whose architect was Francis Palmer Smith?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Francis_Palmer_Smith> . ?x <http://dbpedia.org/property/address> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architect",
			"label": "architect",
			"seq": "36,44"
		}, {
			"uri": "http://dbpedia.org/property/address",
			"label": "was",
			"seq": "46,48"
		}, {
			"uri": "http://dbpedia.org/ontology/Building",
			"label": "building",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Francis_Palmer_Smith",
			"label": "francis palmer smith",
			"seq": "50,69"
		}]
	},
	{
		"id": "97e43aacfe074efa83f9fb0ba572e632",
		"question": "Which child of Jack Ferguson became a Prime Minister?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Jack_Ferguson> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "child",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "minister prime",
			"seq": "38,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jack_Ferguson",
			"label": "ferguson jack",
			"seq": "15,27"
		}]
	},
	{
		"id": "80e469b7945f4f16a8801256c157cab0",
		"question": "Naval station mobile and naval support activity, naples are under which branch of Us military?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Naval_Station_Mobile> <http://dbpedia.org/ontology/type> ?uri. <http://dbpedia.org/resource/Naval_Support_Activity_Naples> <http://dbpedia.org/ontology/type> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
		"sparql_id": "315",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/type",
			"label": "naples",
			"seq": "49,54"
		}, {
			"uri": "http://dbpedia.org/ontology/type",
			"label": "naples",
			"seq": "49,54"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryUnit",
			"label": "military",
			"seq": "85,92"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Naval_Station_Mobile",
			"label": "station mobile naval",
			"seq": "0,19"
		}, {
			"uri": "http://dbpedia.org/resource/Naval_Support_Activity_Naples",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "aac76b1792794e92a8495c8f380e7818",
		"question": "How many members are there of the order of Bacillales?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/order",
			"label": "order",
			"seq": "34,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bacillales",
			"label": "bacillales",
			"seq": "43,52"
		}]
	},
	{
		"id": "e3851817df724055bf9d59adc6155746",
		"question": "Name the team manger of Middlebrough F.C season 2006-07 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2006\u201307_Middlesbrough_F.C._season> <http://dbpedia.org/ontology/manager> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manager",
			"label": "manger",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2006\u201307_Middlesbrough_F.C._season",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "cb3019596f1c466a8e0aa2fab2fe9b1d",
		"question": "In which fields are the graduates of Worcester College, Oxford working?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> . ?x <http://dbpedia.org/ontology/field> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "graduates",
			"seq": "24,32"
		}, {
			"uri": "http://dbpedia.org/ontology/field",
			"label": "fields",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Worcester_College,_Oxford",
			"label": "worcester college, oxford",
			"seq": "37,61"
		}]
	},
	{
		"id": "97488d1122824e838c6c54fae73101a3",
		"question": "What sports can be played in institutions in Bataan?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/province> <http://dbpedia.org/resource/Bataan> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/province",
			"label": "in",
			"seq": "26,27"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bataan",
			"label": "bataan",
			"seq": "45,50"
		}]
	},
	{
		"id": "a02542cdbf71477b8b35e4db7fa67cfa",
		"question": "Who was in missions of Gemini 8 and Apollo 11?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Gemini_8> . ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Apollo_11> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mission",
			"label": "missions",
			"seq": "11,18"
		}, {
			"uri": "http://dbpedia.org/property/mission",
			"label": "missions",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gemini_8",
			"label": "gemini",
			"seq": "23,28"
		}, {
			"uri": "http://dbpedia.org/resource/Apollo_11",
			"label": "apollo 11",
			"seq": "36,44"
		}]
	},
	{
		"id": "a222bccc883b4487896ae0312ec2c17c",
		"question": "Who founded the league which was won by Joe McKeehen?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/champion> <http://dbpedia.org/resource/Joe_McKeehen> . ?x <http://dbpedia.org/property/founded> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsLeague>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/champion",
			"label": "won",
			"seq": "33,35"
		}, {
			"uri": "http://dbpedia.org/property/founded",
			"label": "founded",
			"seq": "4,10"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsLeague",
			"label": "league",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Joe_McKeehen",
			"label": "mckeehen joe",
			"seq": "40,51"
		}]
	},
	{
		"id": "e905a1686f744be6b8e33f6c79a49c7b",
		"question": "Give me some nominees of politicians in the US?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/nominee> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "in",
			"seq": "16,17"
		}, {
			"uri": "http://dbpedia.org/ontology/nominee",
			"label": "nominees",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "nominees",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "c34b719cd3be44ab82c70eb8f169d6c6",
		"question": "To what did the parliament member swore her oath to, whose has sons is Lohan Ratwatte?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Lohan_Ratwatte> . ?x <http://dbpedia.org/property/allegiance> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MemberOfParliament>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "is",
			"seq": "68,69"
		}, {
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "parliament",
			"seq": "16,25"
		}, {
			"uri": "http://dbpedia.org/ontology/MemberOfParliament",
			"label": "parliament member",
			"seq": "16,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lohan_Ratwatte",
			"label": "ratwatte lohan",
			"seq": "71,84"
		}]
	},
	{
		"id": "0bd745b22ebe404a8b28d4cf5954c9e7",
		"question": "In which races have Tillingdale's horses participated?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Tillingdale> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "horses",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/property/race",
			"label": "races",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Horse",
			"label": "horses",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tillingdale",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0a9d5d8da34c44869fda9580b1ed1cea",
		"question": "Which country's national motto is \"Truth prevails\"?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nationalMotto> <http://dbpedia.org/resource/Truth_prevails>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalMotto",
			"label": "national motto",
			"seq": "16,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country's",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Truth_prevails",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "89e6c9790a3e43338859011415755939",
		"question": "What is the alma mater of Andrew W. Lewis ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Andrew_W._Lewis> <http://dbpedia.org/ontology/almaMater> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Andrew_W._Lewis",
			"label": "andrew lewis w.",
			"seq": "26,40"
		}]
	},
	{
		"id": "605675f72f0449d6a0b72908f4546a13",
		"question": "Name the tv series produced by Stephen Ambrose and Erik Bork?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose> . ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Erik_Bork> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "produced",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "produced",
			"seq": "19,26"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "series",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stephen_E._Ambrose",
			"label": "stephen ambrose",
			"seq": "31,45"
		}, {
			"uri": "http://dbpedia.org/resource/Erik_Bork",
			"label": "erik bork",
			"seq": "51,59"
		}]
	},
	{
		"id": "5dd00b4f9282453d994c9bacbec085e0",
		"question": "Which movies did Mark Steven edit?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editing",
			"label": "edit",
			"seq": "29,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "did",
			"seq": "13,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mark_Stevens_(film_editor)",
			"label": "steven mark edit",
			"seq": "17,32"
		}]
	},
	{
		"id": "e90f562181834b19b5ca9d4787d19f19",
		"question": "Where do the railroads owned by the Chicago and Northwestern Transportation company begin?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/system> <http://dbpedia.org/resource/Chicago_and_North_Western_Transportation_Company> . ?x <http://dbpedia.org/ontology/routeStart> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayLine>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/system",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "northwestern",
			"seq": "48,59"
		}, {
			"uri": "http://dbpedia.org/ontology/RailwayLine",
			"label": "railroads",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chicago_and_North_Western_Transportation_Company",
			"label": "transportation",
			"seq": "61,74"
		}]
	},
	{
		"id": "6fc13e0a9bc646d9ba9be4634f0ccaf0",
		"question": "What is the prize received by the one who wrote the screen play of The Postman  ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Postman_(film)> <http://dbpedia.org/property/screenplay> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screen play",
			"seq": "52,62"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "what",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Postman_(film)",
			"label": "postman the",
			"seq": "8,18"
		}]
	},
	{
		"id": "2c2a4120329e4f2a96503a5534340a63",
		"question": "Give me a list of all the buildings which are located in districts governed by John Tory.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/John_Tory> . ?uri <http://dbpedia.org/ontology/location> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "are",
			"seq": "42,44"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "46,52"
		}, {
			"uri": "http://dbpedia.org/ontology/Building",
			"label": "buildings",
			"seq": "26,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Tory",
			"label": "john",
			"seq": "79,82"
		}]
	},
	{
		"id": "fd0bdcd9fabe430a9c347af0563b0d4b",
		"question": "Count the total number of bacterias whose division is Firmicutes and domain is Bacteria?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes> . ?uri <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/division",
			"label": "division",
			"seq": "42,49"
		}, {
			"uri": "http://dbpedia.org/property/domain",
			"label": "domain",
			"seq": "69,74"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Firmicutes",
			"label": "firmicutes",
			"seq": "54,63"
		}, {
			"uri": "http://dbpedia.org/resource/Bacteria",
			"label": "bacteria",
			"seq": "26,33"
		}]
	},
	{
		"id": "c43401a585454b6f9d0987e6511a91f9",
		"question": "Where can one find the Dzogchen Ponolop Rinpoche?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dzogchen_Ponlop_Rinpoche> <http://dbpedia.org/property/location> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "can",
			"seq": "6,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dzogchen_Ponlop_Rinpoche",
			"label": "rinpoche dzogchen",
			"seq": "23,39"
		}]
	},
	{
		"id": "3d2c285604e2416d8b47fe68fdf2f52c",
		"question": "What is the mascot of the alma mater of Deborah Crombie?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Deborah_Crombie> <http://dbpedia.org/ontology/almaMater> ?x . ?x <http://dbpedia.org/property/mascot> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "26,35"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascot",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Deborah_Crombie",
			"label": "deborah crombie",
			"seq": "40,54"
		}]
	},
	{
		"id": "cb2281af4c674df6a881117802e8115c",
		"question": "Did Bob Suci play for the New England Patriots?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Bob_Suci> <http://dbpedia.org/property/pastteams> <http://dbpedia.org/resource/New_England_Patriots> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastteams",
			"label": "patriots",
			"seq": "38,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bob_Suci",
			"label": "suci bob",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/resource/New_England_Patriots",
			"label": "patriots england new",
			"seq": "26,45"
		}]
	},
	{
		"id": "2435496704084a5992c396fcba62cd33",
		"question": "What would be the most important creation which involved both Neil Cross and Russel Davies ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neil_Cross> <http://dbpedia.org/ontology/notableWork> ?uri. <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "involved",
			"seq": "48,55"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "involved",
			"seq": "48,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neil_Cross",
			"label": "cross neil",
			"seq": "62,71"
		}, {
			"uri": "http://dbpedia.org/resource/Russell_T_Davies",
			"label": "russel davies",
			"seq": "77,89"
		}]
	},
	{
		"id": "0115d9653fb44b66bb96c1af7d4296f3",
		"question": "Where do beauty queens with brown hair reside?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/hairColor> <http://dbpedia.org/resource/Brown_hair> . ?x <http://dbpedia.org/ontology/residence> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hairColor",
			"label": "hair",
			"seq": "34,37"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "reside",
			"seq": "39,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brown_hair",
			"label": "brown hair",
			"seq": "28,37"
		}]
	},
	{
		"id": "fa41d6a62ed040f5a195ea1fa799f2d4",
		"question": "Which TV show produced by Paramount Television and is located in Massachusetts ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television> . ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Massachusetts>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/company",
			"label": "and",
			"seq": "47,49"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "54,60"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paramount_Television",
			"label": "television paramount",
			"seq": "26,45"
		}, {
			"uri": "http://dbpedia.org/resource/Massachusetts",
			"label": "massachusetts",
			"seq": "65,77"
		}]
	},
	{
		"id": "cf34994e9bb545c3beff7e8a04d58823",
		"question": "Name the mountain which belongs to Sierra Nevada range and is located in Inyo National Forest?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mountainRange> <http://dbpedia.org/resource/Sierra_Nevada_(U.S.)> . ?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Inyo_National_Forest>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountain range",
			"seq": "9,22"
		}, {
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "located",
			"seq": "62,68"
		}, {
			"uri": "http://dbpedia.org/ontology/Mountain",
			"label": "mountain",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sierra_Nevada_(U.S.)",
			"label": "sierra nevada",
			"seq": "35,47"
		}, {
			"uri": "http://dbpedia.org/resource/Inyo_National_Forest",
			"label": "national forest inyo",
			"seq": "73,92"
		}]
	},
	{
		"id": "62f222b7e3e84a6cb4ce8193b63544d6",
		"question": "What is the company that has products with Windows RT as its OS?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/os> <http://dbpedia.org/resource/Windows_RT> . ?uri <http://dbpedia.org/ontology/product> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/os",
			"label": "os",
			"seq": "61,62"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "products",
			"seq": "29,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Windows_RT",
			"label": "windows",
			"seq": "43,49"
		}]
	},
	{
		"id": "17ce149639704a6da50a88f32bc5eff6",
		"question": "How many labels sign up progressive rock artists?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Progressive_rock> . ?x <http://dbpedia.org/ontology/recordLabel> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/genre",
			"label": "sign",
			"seq": "16,19"
		}, {
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "labels",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Progressive_rock",
			"label": "progressive rock",
			"seq": "24,39"
		}]
	},
	{
		"id": "3ebfa74639fb4cb4ba3c69a23d7f89a2",
		"question": "Does the AMC Gremlin use an Audi engine?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/AMC_Gremlin> <http://dbpedia.org/property/engine> <http://dbpedia.org/resource/Audi> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/engine",
			"label": "engine",
			"seq": "33,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/AMC_Gremlin",
			"label": "gremlin amc",
			"seq": "9,19"
		}, {
			"uri": "http://dbpedia.org/resource/Audi",
			"label": "audi",
			"seq": "28,31"
		}]
	},
	{
		"id": "bcaaf472d03649a3b3fe0f04e625219d",
		"question": "What is the resting place of the child of Linda Lee Cadwell?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Linda_Lee_Cadwell> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "child",
			"seq": "33,37"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "12,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Linda_Lee_Cadwell",
			"label": "cadwell linda",
			"seq": "42,54"
		}]
	},
	{
		"id": "9c14e0afc5d44598951f1f9037822b2b",
		"question": "What is the religion of the relatives of Carmela Soprano ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Carmela_Soprano> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carmela_Soprano",
			"label": "soprano carmela",
			"seq": "41,55"
		}]
	},
	{
		"id": "a3405b0ce1794c309e62e6db698ecfb1",
		"question": "What television shows's distributor is Eurovision?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Eurovision_(network)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributor",
			"seq": "24,34"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "5,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Eurovision_(network)",
			"label": "eurovision",
			"seq": "39,48"
		}]
	},
	{
		"id": "c1908db186d144338bc6f399f9c6864c",
		"question": "Did Stan Lee create Jean Grey?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Jean_Grey> <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Stan_Lee> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creators",
			"label": "create",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jean_Grey",
			"label": "jean grey",
			"seq": "20,28"
		}, {
			"uri": "http://dbpedia.org/resource/Stan_Lee",
			"label": "stan lee",
			"seq": "4,11"
		}]
	},
	{
		"id": "ee09ab7feb1344e7b513cd18e2f891e7",
		"question": "Which indian party has won the arunachal pradesh elections of 2014, and has been in the 4th legislative assembly?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arunachal_Pradesh_Legislative_Assembly_election,_2014> <http://dbpedia.org/property/party> ?uri. <http://dbpedia.org/resource/Fourth_Legislative_Assembly_of_Delhi> <http://dbpedia.org/property/party> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "13,17"
		}, {
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arunachal_Pradesh_Legislative_Assembly_election,_2014",
			"label": "legislative arunachal assembly",
			"seq": "31,60"
		}, {
			"uri": "http://dbpedia.org/resource/Fourth_Legislative_Assembly_of_Delhi",
			"label": "legislative assembly",
			"seq": "92,111"
		}]
	},
	{
		"id": "81ed6105f8064c79a73b3ad0ab2f0dcd",
		"question": "Name the architect of Marine Corps Air Station Kaneohe Bay ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/architect",
			"label": "architect",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay",
			"label": "station kaneohe marine corps",
			"seq": "22,49"
		}]
	},
	{
		"id": "0cd8980e09074dc185a0889b18d53657",
		"question": "What is the party of the politicians whose children is Sanjay Gandhi ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Sanjay_Gandhi> . ?x <http://dbpedia.org/ontology/party> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "43,50"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "children",
			"seq": "43,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sanjay_Gandhi",
			"label": "sanjay gandhi",
			"seq": "55,67"
		}]
	},
	{
		"id": "d348e34b15b34282bcca4892641b5f9d",
		"question": "Who is the owner of the FC which owns the Cobham Training Centre?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Cobham_Training_Centre> <http://dbpedia.org/property/owner> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owner",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClub",
			"label": "owner",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cobham_Training_Centre",
			"label": "training cobham centre",
			"seq": "42,63"
		}]
	},
	{
		"id": "a8f0980d732d4a9fb906625e2c72ca87",
		"question": "What are the other launch site of the rockets which also have been launched from  Cape Canaveral Air Force Station Launch Complex 5 ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station_Launch_Complex_5> . ?x <http://dbpedia.org/ontology/launchSite> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Rocket>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launched",
			"seq": "67,74"
		}, {
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launched",
			"seq": "67,74"
		}, {
			"uri": "http://dbpedia.org/ontology/Rocket",
			"label": "rockets",
			"seq": "38,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station_Launch_Complex_5",
			"label": "canaveral station complex",
			"seq": "87,111"
		}]
	},
	{
		"id": "a66b13e59b5d46a58da7b17ae209894b",
		"question": "What is the nationality of the David King-Wood and John Steed ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_King-Wood> <http://dbpedia.org/property/nationality> ?uri. <http://dbpedia.org/resource/John_Steed> <http://dbpedia.org/property/nationality> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationality",
			"label": "nationality",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/property/nationality",
			"label": "nationality",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_King-Wood",
			"label": "king-wood david",
			"seq": "31,45"
		}, {
			"uri": "http://dbpedia.org/resource/John_Steed",
			"label": "steed john",
			"seq": "51,60"
		}]
	},
	{
		"id": "b4321c4410c14121844377a286ff893f",
		"question": "Name the river whose source is located in Ikelenge  District and mouth in Mozambique?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Ikelenge_District> . ?uri <http://dbpedia.org/property/mouthCountry> <http://dbpedia.org/resource/Mozambique>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceLocation",
			"label": "source",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/property/mouthCountry",
			"label": "mouth",
			"seq": "65,69"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ikelenge_District",
			"label": "ikelenge district",
			"seq": "42,58"
		}, {
			"uri": "http://dbpedia.org/resource/Mozambique",
			"label": "mozambique",
			"seq": "74,83"
		}]
	},
	{
		"id": "62defef353b544b88cb983a010e92992",
		"question": "Which country's leader  is Giuseppe Bertello?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Giuseppe_Bertello>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leader",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country's",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Giuseppe_Bertello",
			"label": "giuseppe bertello",
			"seq": "27,43"
		}]
	},
	{
		"id": "3691b72c47ef41ecb0642a31737f3b86",
		"question": "Who is the founder of the trade union with whom Amalgamated Clothing Workers of America is affiliated?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Amalgamated_Clothing_Workers_of_America> <http://dbpedia.org/ontology/affiliation> ?x . ?x <http://dbpedia.org/property/founded> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "affiliated",
			"seq": "91,100"
		}, {
			"uri": "http://dbpedia.org/property/founded",
			"label": "founder",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Amalgamated_Clothing_Workers_of_America",
			"label": "amalgamated clothing workers america",
			"seq": "48,83"
		}]
	},
	{
		"id": "4af5c60efca84897ae3b0cf6c727f603",
		"question": "What are some people working for the New York Post?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/New_York_Post>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "people",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York_Post",
			"label": "york post",
			"seq": "41,49"
		}]
	},
	{
		"id": "001da0a604d74bae8d29e5bfc521e92e",
		"question": "Which gaming console's central processing unit is microprocessor and built by Sony?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Cell_(microprocessor)> . ?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Sony>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cpu",
			"label": "unit",
			"seq": "42,45"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "central",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cell_(microprocessor)",
			"label": "microprocessor",
			"seq": "50,63"
		}, {
			"uri": "http://dbpedia.org/resource/Sony",
			"label": "sony",
			"seq": "78,81"
		}]
	},
	{
		"id": "ee83374553104e4784b6847dc658c510",
		"question": "From where did the son of Gustavo Rojas Pinilla graduate?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Gustavo_Rojas_Pinilla> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "pinilla",
			"seq": "40,46"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "graduate",
			"seq": "48,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gustavo_Rojas_Pinilla",
			"label": "pinilla gustavo rojas",
			"seq": "26,46"
		}]
	},
	{
		"id": "18d456becb4d4972ad3a8f8d430291d5",
		"question": "What is the total number of software whose programming language is C++ and operating system is Microsoft Windows?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/programmingLanguage> <http://dbpedia.org/resource/C++> . ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/programmingLanguage",
			"label": "programming language",
			"seq": "43,62"
		}, {
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "operating system",
			"seq": "75,90"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/C++",
			"label": "c++",
			"seq": "67,69"
		}, {
			"uri": "http://dbpedia.org/resource/Microsoft_Windows",
			"label": "microsoft windows",
			"seq": "95,111"
		}]
	},
	{
		"id": "500a1a24138f4ee68a58423b2a86132d",
		"question": "In which races did Mouse Morris take part?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mouse_Morris> <http://dbpedia.org/property/race> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/race",
			"label": "races",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mouse_Morris",
			"label": "morris mouse",
			"seq": "19,30"
		}]
	},
	{
		"id": "cb1b7e3030df44b592c6bca8cf93d76f",
		"question": "How many things have made different people living in Canada famous?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Canadians> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "how",
			"seq": "0,2"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canadians",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "b9053f165ad74242808b096ce9040971",
		"question": "Which famous political figures are relatives to George Madison?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_Madison> <http://dbpedia.org/ontology/relation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "35,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_Madison",
			"label": "madison george",
			"seq": "48,61"
		}]
	},
	{
		"id": "170a69d8ac1c40e0930df1a674d5c1cf",
		"question": "Which TV show's composer is Judy  Hart  Angelo and executive producer as Glen and Les Charles?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Judy_Hart_Angelo> . ?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Glen_and_Les_Charles>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composer",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "51,68"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show's",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Judy_Hart_Angelo",
			"label": "angelo judy hart",
			"seq": "28,43"
		}, {
			"uri": "http://dbpedia.org/resource/Glen_and_Les_Charles",
			"label": "charles glen",
			"seq": "73,84"
		}]
	},
	{
		"id": "43d5d1b277764d509013b0740a1134cd",
		"question": "What is the meaning of Heydar ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heydar> <http://dbpedia.org/property/meaning> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/meaning",
			"label": "meaning",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Heydar",
			"label": "heydar",
			"seq": "23,28"
		}]
	},
	{
		"id": "76f197d00d1d4cf695613aa5f7089c3f",
		"question": "Name the fictional character whose species is American Pekin duck and has relatives named Ludwig Von Drake?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ludwig_Von_Drake>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/species",
			"label": "species",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "74,82"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "9,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Pekin_duck",
			"label": "american pekin duck",
			"seq": "46,64"
		}, {
			"uri": "http://dbpedia.org/resource/Ludwig_Von_Drake",
			"label": "ludwig drake",
			"seq": "90,101"
		}]
	},
	{
		"id": "dedf58280e9d4d9ea3379626fc434dd0",
		"question": "who are starring in the movies written by Mark Sandrich ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Mark_Sandrich> . ?x <http://dbpedia.org/ontology/starring> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "written",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "starring",
			"seq": "8,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "in",
			"seq": "13,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mark_Sandrich",
			"label": "sandrich mark",
			"seq": "42,54"
		}]
	},
	{
		"id": "9ac44261ad7c40989a2beefb39bb7b13",
		"question": "What is the religion of the governors whose office is the Bank of Thailand?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Bank_of_Thailand> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Governor>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/office",
			"label": "office",
			"seq": "44,49"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Governor",
			"label": "governors",
			"seq": "28,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bank_of_Thailand",
			"label": "thailand bank",
			"seq": "58,70"
		}]
	},
	{
		"id": "34fe2288fd964273ad3d8a6c884539e7",
		"question": "Name all the junctions of U.S. Route 59?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/U.S._Route_59> <http://dbpedia.org/property/junction> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/junction",
			"label": "junctions",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/U.S._Route_59",
			"label": "route u.s. 59",
			"seq": "26,38"
		}]
	},
	{
		"id": "4f7bb480e41d4360a942060f68dd6654",
		"question": "Count the number of  fields of the scientists whose one of the fields is Sanskrit?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/fields> <http://dbpedia.org/resource/Sanskrit> . ?x <http://dbpedia.org/property/fields> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/fields",
			"label": "fields",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/property/fields",
			"label": "fields",
			"seq": "21,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sanskrit",
			"label": "sanskrit",
			"seq": "73,80"
		}]
	},
	{
		"id": "0ab3de4c7c454c33ae9349c745121fa6",
		"question": "In which city is the sister station of KTXY located ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/KTXY> <http://dbpedia.org/ontology/sisterStation> ?x . ?x <http://dbpedia.org/ontology/city> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sisterStation",
			"label": "station sister",
			"seq": "21,34"
		}, {
			"uri": "http://dbpedia.org/ontology/city",
			"label": "city",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/KTXY",
			"label": "ktxy",
			"seq": "39,42"
		}]
	},
	{
		"id": "3efd4b46f83649b8b2b937bbe752427f",
		"question": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics  Women's singles?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Tennis_at_the_2012_Summer_Olympics_\u2013_Women's_singles> <http://dbpedia.org/ontology/silverMedalist> <http://dbpedia.org/resource/Maria_Sharapova> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/silverMedalist",
			"label": "medalist silver",
			"seq": "23,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tennis_at_the_2012_Summer_Olympics_\u2013_Women's_singles",
			"label": "olympics women's singles tennis summer",
			"seq": "42,79"
		}, {
			"uri": "http://dbpedia.org/resource/Maria_Sharapova",
			"label": "sharapova maria",
			"seq": "3,17"
		}]
	},
	{
		"id": "f2f115531d7445d49155fe03258dffe1",
		"question": "What is the layout of the cars similar to that of the Subaru Outback?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/relatedMeanOfTransportation> <http://dbpedia.org/resource/Subaru_Outback> . ?x <http://dbpedia.org/ontology/layout> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relatedMeanOfTransportation",
			"label": "layout",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/layout",
			"label": "layout",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "layout",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Subaru_Outback",
			"label": "outback subaru",
			"seq": "54,67"
		}]
	},
	{
		"id": "09a1b808c0fa4f2f8839a1ce8279556d",
		"question": "Where do the rivers starting from Zambia end?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "rivers",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "rivers",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zambia",
			"label": "zambia",
			"seq": "34,39"
		}]
	},
	{
		"id": "b7793671687a4f84826d505cfe9e14f1",
		"question": "Name the hubs of the airlines whose headquarters is in the Subang Interchange?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Subang_Interchange> . ?x <http://dbpedia.org/property/hubs> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarters",
			"seq": "36,47"
		}, {
			"uri": "http://dbpedia.org/property/hubs",
			"label": "hubs",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Airline",
			"label": "airlines",
			"seq": "21,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Subang_Interchange",
			"label": "interchange subang",
			"seq": "59,76"
		}]
	},
	{
		"id": "8ba2e0250a244acdb7b868be0b3a81eb",
		"question": "How many people work in the Massachusetts house of Representatives?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Massachusetts_House_of_Representatives>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/office",
			"label": "of",
			"seq": "48,49"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Massachusetts_House_of_Representatives",
			"label": "representatives massachusetts house",
			"seq": "28,62"
		}]
	},
	{
		"id": "81a79bece2344b4aaa91302154014fbc",
		"question": "What is Naval Support Activity Naples a part of?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Naval_Support_Activity_Naples> <http://dbpedia.org/ontology/type> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/type",
			"label": "naples",
			"seq": "31,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Naval_Support_Activity_Naples",
			"label": "activity support naples naval",
			"seq": "8,36"
		}]
	},
	{
		"id": "2fc623f7412b47e7b5f575b742471987",
		"question": "List the services provided by the company which provides Microsoft azure as one of the service ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Microsoft_Azure> . ?x <http://dbpedia.org/property/services> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "services",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "34,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Azure",
			"label": "microsoft azure",
			"seq": "57,71"
		}]
	},
	{
		"id": "adc0e04c11b74782ba42a521d28ce3ce",
		"question": "Who was member of boards at Royal Society and Trinity House?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Royal_Society> . ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Trinity_House> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/board",
			"label": "boards",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/ontology/board",
			"label": "boards",
			"seq": "18,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_Society",
			"label": "society royal",
			"seq": "28,40"
		}, {
			"uri": "http://dbpedia.org/resource/Trinity_House",
			"label": "trinity house",
			"seq": "46,58"
		}]
	},
	{
		"id": "53dd5747f1174fa8a6bc9eebbb9623c4",
		"question": "What is the debut team of the baseball player who was born in Williamsburg, Kansas ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Williamsburg,_Kansas> . ?x <http://dbpedia.org/property/debutteam> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "player",
			"seq": "39,44"
		}, {
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "debut team",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/BaseballPlayer",
			"label": "baseball player",
			"seq": "30,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Williamsburg,_Kansas",
			"label": "williamsburg, kansas",
			"seq": "62,81"
		}]
	},
	{
		"id": "34ea4723aa304817a374f7a97e602678",
		"question": "Which serving railway line of the Daund Junction railway station is the home port of INS Viraat ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/INS_Viraat_(R22)> <http://dbpedia.org/ontology/homeport> ?uri. <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/homeport",
			"label": "port home",
			"seq": "72,80"
		}, {
			"uri": "http://dbpedia.org/ontology/servingRailwayLine",
			"label": "serving railway",
			"seq": "6,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/INS_Viraat_(R22)",
			"label": "viraat ins",
			"seq": "85,94"
		}, {
			"uri": "http://dbpedia.org/resource/Daund_Junction_railway_station",
			"label": "junction station railway daund",
			"seq": "14,43"
		}]
	},
	{
		"id": "1bd54f6e697a4ec58721e61e66480394",
		"question": "How many religions are followed by organizations which are internationally known as the muslim brotherhood?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/international> <http://dbpedia.org/resource/Muslim_Brotherhood> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/international",
			"label": "internationally",
			"seq": "59,73"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Muslim_Brotherhood",
			"label": "brotherhood muslim",
			"seq": "88,105"
		}]
	},
	{
		"id": "60cca930301f44db9b136d974bf6b92e",
		"question": "Name the route start of Saint Petersburg  Moscow Railway ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saint_Petersburg_\u2013_Moscow_Railway> <http://dbpedia.org/ontology/routeStart> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "start route",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saint_Petersburg_\u2013_Moscow_Railway",
			"label": "petersburg railway moscow saint",
			"seq": "24,54"
		}]
	},
	{
		"id": "a9844619aaa14527a44829ee64b0658b",
		"question": "Which series was written by Eric Jendresen and John Orloff?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/John_Orloff> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "17,23"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "series",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erik_Jendresen",
			"label": "jendresen",
			"seq": "33,41"
		}, {
			"uri": "http://dbpedia.org/resource/John_Orloff",
			"label": "orloff john",
			"seq": "47,57"
		}]
	},
	{
		"id": "a3f36caa2ac0432a9aca31a86472fe19",
		"question": "Count the number of musical work which were sold by Sony Music?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "number",
			"seq": "10,15"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "20,24"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalWork",
			"label": "musical",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony_Music_Entertainment",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "47db1d0041e64e7da78f014fa6fd229f",
		"question": "Which county seats are in the district where I can find the Hylebos Creek?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Hylebos_Creek> <http://dbpedia.org/ontology/district> ?x . ?x <http://dbpedia.org/ontology/countySeat> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/district",
			"label": "district",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/ontology/countySeat",
			"label": "county",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hylebos_Creek",
			"label": "hylebos creek",
			"seq": "60,72"
		}]
	},
	{
		"id": "f59c8bc3349a4d1e8edfa572284dd9be",
		"question": "Who was succeeded by Arthur Gegei as the office ho0lder ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Art\u00far_G\u00f6rgei>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "succeeded",
			"seq": "8,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Art\u00far_G\u00f6rgei",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "cb5a9c76131d451b8570f5c627d5ef66",
		"question": "What other awards have been given to Goya Award Winners?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Goya_Awards> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Goya_Awards",
			"label": "awards goya",
			"seq": "11,21"
		}]
	},
	{
		"id": "2940479c5f6d439f9493a789b93b63f2",
		"question": "Which river inflow of the Cahora Bassa is also Batoka Gorge Hydroelectric Power Station's river ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cahora_Bassa> <http://dbpedia.org/property/inflow> ?uri. <http://dbpedia.org/resource/Batoka_Gorge_Hydroelectric_Power_Station> <http://dbpedia.org/ontology/river> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/inflow",
			"label": "inflow",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/river",
			"label": "river",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cahora_Bassa",
			"label": "cahora bassa",
			"seq": "26,37"
		}, {
			"uri": "http://dbpedia.org/resource/Batoka_Gorge_Hydroelectric_Power_Station",
			"label": "hydroelectric",
			"seq": "60,72"
		}]
	},
	{
		"id": "6b16d12e156b4bb294b527c83c07f76a",
		"question": "Does the mississippi orignate in the clearwater county, minnesota?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mississippi_River> <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/Clearwater_County,_Minnesota> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceRegion",
			"label": "orignate",
			"seq": "21,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mississippi_River",
			"label": "mississippi",
			"seq": "9,19"
		}, {
			"uri": "http://dbpedia.org/resource/Clearwater_County,_Minnesota",
			"label": "clearwater minnesota county,",
			"seq": "37,64"
		}]
	},
	{
		"id": "3328c78b14064c5abd3109faa8975548",
		"question": "Who owns the tunnels operated by the Massachusetts Department of Transportation?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/operatedBy> <http://dbpedia.org/resource/Massachusetts_Department_of_Transportation> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RoadTunnel>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operated by",
			"seq": "21,31"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owns",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/RoadTunnel",
			"label": "tunnels",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Massachusetts_Department_of_Transportation",
			"label": "transportation massachusetts department",
			"seq": "37,75"
		}]
	},
	{
		"id": "4cf188cc17a649e581603a456bda0d40",
		"question": "In how many districts is there a borough called tendring?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/borough> <http://dbpedia.org/resource/Tendring> . ?x <http://dbpedia.org/ontology/district> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/borough",
			"label": "borough",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/ontology/district",
			"label": "districts",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tendring",
			"label": "tendring",
			"seq": "48,55"
		}]
	},
	{
		"id": "a3c5942a30ca4e078b7cac835d4eb065",
		"question": "Name the company with product lines like Visual studio and Surface ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Microsoft_Visual_Studio> . ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Surface>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "product",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "product",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Visual_Studio",
			"label": "visual studio",
			"seq": "41,53"
		}, {
			"uri": "http://dbpedia.org/resource/Microsoft_Surface",
			"label": "surface",
			"seq": "59,65"
		}]
	},
	{
		"id": "5e0acf4fd80d47b995488704002ac947",
		"question": "How many awards have been given to the founder of Grameen Bank?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Grameen_Bank> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "103",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founder",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Grameen_Bank",
			"label": "grameen bank",
			"seq": "50,61"
		}]
	},
	{
		"id": "dbfcf2136b7344f1830bc4405769bc6d",
		"question": "Who is the appointer of Earl B. Ruth ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Earl_B._Ruth> <http://dbpedia.org/property/appointer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/appointer",
			"label": "appointer",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Earl_B._Ruth",
			"label": "ruth earl b.",
			"seq": "24,35"
		}]
	},
	{
		"id": "ba7f3c05cc5448ac90a3996feb0bd9f9",
		"question": "Which partner of the Tim Mathieson is also the primeminister of the Mike Kelly (Australian politician) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tim_Mathieson> <http://dbpedia.org/ontology/partner> ?uri. <http://dbpedia.org/resource/Mike_Kelly_(Australian_politician)> <http://dbpedia.org/property/primeminister> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/partner",
			"label": "partner",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/property/primeminister",
			"label": "primeminister",
			"seq": "47,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tim_Mathieson",
			"label": "mathieson tim",
			"seq": "21,33"
		}, {
			"uri": "http://dbpedia.org/resource/Mike_Kelly_(Australian_politician)",
			"label": "politician) (australian",
			"seq": "79,101"
		}]
	},
	{
		"id": "fb2bca9718884cd19844ef5476627883",
		"question": "Which river does Katima Mulilo Bridge cross?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Katima_Mulilo_Bridge> <http://dbpedia.org/property/crosses> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/crosses",
			"label": "cross",
			"seq": "38,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Katima_Mulilo_Bridge",
			"label": "mulilo katima bridge",
			"seq": "17,36"
		}]
	},
	{
		"id": "1a57597da91944a4ac167a67fcca0174",
		"question": "Which city is Black Grape Global located ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Black_Grape_Global> <http://dbpedia.org/ontology/locationCity> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "located",
			"seq": "33,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Black_Grape_Global",
			"label": "global grape black",
			"seq": "14,31"
		}]
	},
	{
		"id": "06750153a35042ba9ea9d0bd000bbf4d",
		"question": "To which company is the service \"Nintendo eShop\" associated with?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Nintendo_eShop>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/services",
			"label": "service",
			"seq": "24,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nintendo_eShop",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6f2c1b486fea4099ad02147fd9c090c8",
		"question": "Name the city of Phil-Ellena ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Phil-Ellena> <http://dbpedia.org/ontology/city> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "city",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Phil-Ellena",
			"label": "phil-ellena",
			"seq": "17,27"
		}]
	},
	{
		"id": "a234b1c5bf4d4ae29790e87b267333fc",
		"question": "Who preceded Lucius Crus as an office holder?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Lucius_Cornelius_Lentulus_Crus>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "preceded",
			"seq": "4,11"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "31,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lucius_Cornelius_Lentulus_Crus",
			"label": "lucius crus",
			"seq": "13,23"
		}]
	},
	{
		"id": "14230056a4a745b8b5ed6e10149011b0",
		"question": "To which nation did David Animle Hanses owe his allegiance?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Animle_Hansen> <http://dbpedia.org/property/allegiance> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "48,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/David_Animle_Hansen",
			"label": "animle david",
			"seq": "20,31"
		}]
	},
	{
		"id": "7106676e37f04720ba839ed381b3f9f4",
		"question": "Count the tenants of MasterCard Centre?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/tenants",
			"label": "tenants",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/MasterCard_Centre",
			"label": "mastercard centre",
			"seq": "21,37"
		}]
	},
	{
		"id": "76d138bb81fa4ba0bcdcaadcdd68dcc9",
		"question": "Name the key people of the non-profit organisations whose one of the key person is Lesley-Anne knight ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Lesley-Anne_Knight> . ?x <http://dbpedia.org/property/keyPeople> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people key",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people key",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lesley-Anne_Knight",
			"label": "lesley-anne knight",
			"seq": "83,100"
		}]
	},
	{
		"id": "3daabcc6a5b84e3084ede2d975008388",
		"question": "What show had NTSC format and theme music composed by  Ron Grainer?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/format> <http://dbpedia.org/resource/NTSC> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/format",
			"label": "format",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "42,49"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/NTSC",
			"label": "ntsc",
			"seq": "14,17"
		}, {
			"uri": "http://dbpedia.org/resource/Ron_Grainer",
			"label": "grainer ron",
			"seq": "55,65"
		}]
	},
	{
		"id": "893cf1fe221445378778ea0be0e9a571",
		"question": "Who was once married to both Kelly Brook and Rosie Huntington-Whiteley?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kelly_Brook> <http://dbpedia.org/ontology/partner> ?uri. <http://dbpedia.org/resource/Rosie_Huntington-Whiteley> <http://dbpedia.org/ontology/partner> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/partner",
			"label": "married",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/partner",
			"label": "married",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kelly_Brook",
			"label": "kelly brook",
			"seq": "29,39"
		}, {
			"uri": "http://dbpedia.org/resource/Rosie_Huntington-Whiteley",
			"label": "huntington-whiteley rosie",
			"seq": "45,69"
		}]
	},
	{
		"id": "d094fc39be5943518c758621e7598c9f",
		"question": "Which company has developed games whose music is done by Gerard Marino?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "company",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "18,26"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "28,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gerard_Marino",
			"label": "marino gerard",
			"seq": "57,69"
		}]
	},
	{
		"id": "d557c2e7c26a46f798ceb5f1f0006f57",
		"question": "Which board memeber of jimmy Wales also owns Latvian Wikipedia ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jimmy_Wales> <http://dbpedia.org/ontology/board> ?uri. <http://dbpedia.org/resource/Latvian_Wikipedia> <http://dbpedia.org/ontology/owner> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/board",
			"label": "board",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owns",
			"seq": "40,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jimmy_Wales",
			"label": "wales jimmy",
			"seq": "23,33"
		}, {
			"uri": "http://dbpedia.org/resource/Latvian_Wikipedia",
			"label": "wikipedia latvian",
			"seq": "45,61"
		}]
	},
	{
		"id": "27ec0051c6fa4b6c8224afcec91fc1ac",
		"question": "What would be a common border of Siberia and the shimsa plateau?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Shim\u014dsa_Plateau> <http://dbpedia.org/ontology/border> ?uri. <http://dbpedia.org/resource/Siberia> <http://dbpedia.org/ontology/border> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/border",
			"label": "border",
			"seq": "23,28"
		}, {
			"uri": "http://dbpedia.org/ontology/border",
			"label": "border",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shim\u014dsa_Plateau",
			"label": "plateau",
			"seq": "56,62"
		}, {
			"uri": "http://dbpedia.org/resource/Siberia",
			"label": "siberia",
			"seq": "33,39"
		}]
	},
	{
		"id": "c6c9dbbe628c4282bac952abf1b6d056",
		"question": "List the institute of Robert hall ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_Hall_(economist)> <http://dbpedia.org/ontology/institution> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "institute",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robert_Hall_(economist)",
			"label": "robert",
			"seq": "22,27"
		}]
	},
	{
		"id": "c46d642e8b374c718591fa89a18d4498",
		"question": "Name the ones who debuted in the San Francisco 49ers.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/debutTeam> <http://dbpedia.org/resource/San_Francisco_49ers>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/debutTeam",
			"label": "debuted",
			"seq": "18,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Francisco_49ers",
			"label": "francisco",
			"seq": "37,45"
		}]
	},
	{
		"id": "e7fab35dd5cf469895cae4ef222fbcd7",
		"question": "What are some shows by Comedy Central?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/network",
			"label": "central",
			"seq": "30,36"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "14,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Comedy_Central",
			"label": "central comedy",
			"seq": "23,36"
		}]
	},
	{
		"id": "691fc7827d724e6e993b3a3d505254d2",
		"question": "What is the county of the road whose route end is Pahang ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Pahang> . ?x <http://dbpedia.org/ontology/county> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Road>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "route end",
			"seq": "37,45"
		}, {
			"uri": "http://dbpedia.org/ontology/county",
			"label": "county",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Road",
			"label": "road",
			"seq": "26,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pahang",
			"label": "pahang",
			"seq": "50,55"
		}]
	},
	{
		"id": "b9b68b1ab73f47e48473bbb74c50ba1a",
		"question": "What are some magazines whose publishers are themselves Rock and Roll Hall of Fame members?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Rock_and_Roll_Hall_of_Fame> . ?uri <http://dbpedia.org/ontology/publisher> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "are",
			"seq": "5,7"
		}, {
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publishers",
			"seq": "30,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Magazine",
			"label": "magazines",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rock_and_Roll_Hall_of_Fame",
			"label": "roll rock hall fame",
			"seq": "56,74"
		}]
	},
	{
		"id": "25322000923943a3b7694bfcabc42a66",
		"question": "In which states can I find Truss bridges?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/style> <http://dbpedia.org/resource/Truss_bridge> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/style",
			"label": "states",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "states",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridges",
			"seq": "33,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Truss_bridge",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e3dd3f0c6fa442b6ad746b3be43c9d41",
		"question": "Does Richard Marx play guitar?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Richard_Marx> <http://dbpedia.org/property/instrument> <http://dbpedia.org/resource/Guitar> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/instrument",
			"label": "guitar",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Richard_Marx",
			"label": "richard marx",
			"seq": "5,16"
		}, {
			"uri": "http://dbpedia.org/resource/Guitar",
			"label": "guitar",
			"seq": "23,28"
		}]
	},
	{
		"id": "79a4891fa50c4add9ea19a97a185d544",
		"question": "Which sea is surrounded by Rostock and Kaliningrad?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Rostock> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "is",
			"seq": "10,11"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "is",
			"seq": "10,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "6,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rostock",
			"label": "rostock",
			"seq": "27,33"
		}, {
			"uri": "http://dbpedia.org/resource/Kaliningrad",
			"label": "kaliningrad",
			"seq": "39,49"
		}]
	},
	{
		"id": "4d42ac9615894cb8b1670248b35ff581",
		"question": "Which university is led by Jay Gogue?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Jay_Gogue>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/president",
			"label": "university",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "university",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jay_Gogue",
			"label": "gogue jay",
			"seq": "27,35"
		}]
	},
	{
		"id": "482e34b16844488ba0c95dae74b8a6b5",
		"question": "What is the river one of whose left tributary's native name is Arabic?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nativeName> <http://dbpedia.org/resource/Arabic> . ?uri <http://dbpedia.org/ontology/leftTributary> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nativeName",
			"label": "native name",
			"seq": "48,58"
		}, {
			"uri": "http://dbpedia.org/ontology/leftTributary",
			"label": "tributary's",
			"seq": "36,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arabic",
			"label": "arabic",
			"seq": "63,68"
		}]
	},
	{
		"id": "d604b6b4ecce418c9d201f852b152ea4",
		"question": "Name the office holder whose spouse is Dolley Madison and belongs to Militia branch ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Dolley_Madison> . ?uri <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Militia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "spouse",
			"seq": "29,34"
		}, {
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "77,82"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dolley_Madison",
			"label": "madison dolley",
			"seq": "39,52"
		}, {
			"uri": "http://dbpedia.org/resource/Militia",
			"label": "militia",
			"seq": "69,75"
		}]
	},
	{
		"id": "3132cf51e26240e8b86c33b5c052e34a",
		"question": "List sports managers who managed Middlesbrough F.C. and England national under-21 football team?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/Middlesbrough_F.C.> . ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/managerClub",
			"label": "managers",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/property/managerclubs",
			"label": "managers",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsManager",
			"label": "managers",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Middlesbrough_F.C.",
			"label": "middlesbrough f.c.",
			"seq": "33,50"
		}, {
			"uri": "http://dbpedia.org/resource/England_national_under-21_football_team",
			"label": "under-21 national football england",
			"seq": "56,89"
		}]
	},
	{
		"id": "598d49c1f1db4938ab50cc5492fbf488",
		"question": "Whose commanders are John Mc Ewen and Park Chunghee?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/John_McEwen> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Park_Chung-hee> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commanders",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_McEwen",
			"label": "john ewen mc",
			"seq": "21,32"
		}, {
			"uri": "http://dbpedia.org/resource/Park_Chung-hee",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "bf20ba7973af4b2d88c57f6a9d217c8b",
		"question": "What is the origin of the grape whose wine region is the Troodos Mountains ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/wineRegion> <http://dbpedia.org/resource/Troodos_Mountains> . ?x <http://dbpedia.org/ontology/origin> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/wineRegion",
			"label": "region wine",
			"seq": "38,48"
		}, {
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "origin",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Grape",
			"label": "grape",
			"seq": "26,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Troodos_Mountains",
			"label": "mountains troodos",
			"seq": "57,73"
		}]
	},
	{
		"id": "f0d17b5fa2ce4598ae52fa5bb9b644ab",
		"question": "Where is the headquarter of Regional Transit Authority of Southeast Michigan ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Regional_Transit_Authority_of_Southeast_Michigan> <http://dbpedia.org/property/headquarters> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquarter",
			"seq": "13,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Regional_Transit_Authority_of_Southeast_Michigan",
			"label": "southeast authority regional michigan transit",
			"seq": "28,72"
		}]
	},
	{
		"id": "7cecf227f82e424e953870dbd55f9a58",
		"question": "Who is the appointer of Charles Goodell ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_Goodell> <http://dbpedia.org/ontology/appointer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/appointer",
			"label": "appointer",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_Goodell",
			"label": "goodell charles",
			"seq": "24,38"
		}]
	},
	{
		"id": "88f545749cc4451988e2442225fa9bca",
		"question": "Which high school of jerry Tagge is also the nearest city of Tennie laura ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerry_Tagge> <http://dbpedia.org/property/highSchool> ?uri. <http://dbpedia.org/resource/Tennie_and_Laura_(schooner)> <http://dbpedia.org/property/nearestCity> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/highSchool",
			"label": "school high",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/property/nearestCity",
			"label": "nearest city",
			"seq": "45,56"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jerry_Tagge",
			"label": "tagge jerry",
			"seq": "21,31"
		}, {
			"uri": "http://dbpedia.org/resource/Tennie_and_Laura_(schooner)",
			"label": "tennie laura",
			"seq": "61,72"
		}]
	},
	{
		"id": "ca1c1caf133340b8b5806acbabd956a1",
		"question": "Name the common serving line of Daund Junction railway station and Ujjain Junction railway station?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri. <http://dbpedia.org/resource/Ujjain_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/servingRailwayLine",
			"label": "serving railway",
			"seq": "16,30"
		}, {
			"uri": "http://dbpedia.org/ontology/servingRailwayLine",
			"label": "serving railway",
			"seq": "16,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Daund_Junction_railway_station",
			"label": "junction station railway",
			"seq": "38,61"
		}, {
			"uri": "http://dbpedia.org/resource/Ujjain_Junction_railway_station",
			"label": "junction station railway",
			"seq": "38,61"
		}]
	},
	{
		"id": "ad0d34bb16504702b756a8c82100920b",
		"question": "In which cities were the chess grand masters born?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Grandmaster_(chess)> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/title",
			"label": "cities",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "21,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Grandmaster_(chess)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "eafba6d3f21b45828b0ba24f542a6182",
		"question": "Who owns the airport in Paphos?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Paphos_District> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airport>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "airport",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owns",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/ontology/Airport",
			"label": "airport",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paphos_District",
			"label": "paphos",
			"seq": "24,29"
		}]
	},
	{
		"id": "a9342361a49049748be5ff4a25048dd9",
		"question": "What is the common branch of military of Edward Joseph Schwartz  and John Tower ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edward_Joseph_Schwartz> <http://dbpedia.org/property/branch> ?uri. <http://dbpedia.org/resource/John_Tower> <http://dbpedia.org/ontology/militaryBranch> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "branch",
			"seq": "19,24"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "military branch",
			"seq": "19,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edward_Joseph_Schwartz",
			"label": "schwartz joseph edward",
			"seq": "41,62"
		}, {
			"uri": "http://dbpedia.org/resource/John_Tower",
			"label": "tower john",
			"seq": "69,78"
		}]
	},
	{
		"id": "433a238279f1423380425f507a28d1b7",
		"question": "What nation is the motherland of Ricardo Alfonso Cerna  where Apostolic Vicariate of El Petn is located?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ricardo_Alfonso_Cerna> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/Apostolic_Vicariate_of_El_Pet\u00e9n> <http://dbpedia.org/ontology/country> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "the",
			"seq": "15,17"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "motherland",
			"seq": "19,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ricardo_Alfonso_Cerna",
			"label": "ricardo alfonso",
			"seq": "33,47"
		}, {
			"uri": "http://dbpedia.org/resource/Apostolic_Vicariate_of_El_Pet\u00e9n",
			"label": "vicariate apostolic",
			"seq": "62,80"
		}]
	},
	{
		"id": "dd65031f3d5840d791f6a197a08b2fa5",
		"question": "Which border country of the Korean Peninsula is also the country of Krusty, a musical group ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Korean_Peninsula> <http://dbpedia.org/ontology/border> ?uri. <http://dbpedia.org/resource/Krusty_(music_group)> <http://dbpedia.org/ontology/country> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/border",
			"label": "border",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "country",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Korean_Peninsula",
			"label": "peninsula korean",
			"seq": "28,43"
		}, {
			"uri": "http://dbpedia.org/resource/Krusty_(music_group)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "6399efe5ee3f4af7853501362f0efde3",
		"question": "List the destinations of Novair International Airways ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Novair_International_Airways> <http://dbpedia.org/property/destinations> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/destinations",
			"label": "destinations",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Novair_International_Airways",
			"label": "international",
			"seq": "32,44"
		}]
	},
	{
		"id": "9fd4114ea96b48438d0091ba51b47a86",
		"question": "List the guests of On Broadway ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/On_Broadway_(Smash)> <http://dbpedia.org/property/guests> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/guests",
			"label": "guests",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/On_Broadway_(Smash)",
			"label": "broadway on",
			"seq": "19,29"
		}]
	},
	{
		"id": "9202537eff6a4bbba5a512ca97ef35ff",
		"question": "What does the river end on whose border we find in Bjelasnica?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/border> <http://dbpedia.org/resource/Bjela\u0161nica> . ?x <http://dbpedia.org/ontology/mouthCountry> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/border",
			"label": "border",
			"seq": "33,38"
		}, {
			"uri": "http://dbpedia.org/ontology/mouthCountry",
			"label": "on",
			"seq": "24,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bjela\u0161nica",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "0180e8e90b484b62bf0190b66b24c52b",
		"question": "What is the home town of the musical artist who is the current members of Slapstick?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Slapstick_(band)> <http://dbpedia.org/property/currentMembers> ?x . ?x <http://dbpedia.org/ontology/hometown> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "members current",
			"seq": "55,69"
		}, {
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "town home",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/MusicalArtist",
			"label": "musical artist",
			"seq": "29,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Slapstick_(band)",
			"label": "slapstick",
			"seq": "74,82"
		}]
	},
	{
		"id": "d219d8cfedec450192789f8d5c969ce9",
		"question": "Is Christchurch the largest city of South Island?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/South_Island> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Christchurch> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "20,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Island",
			"label": "island south",
			"seq": "36,47"
		}, {
			"uri": "http://dbpedia.org/resource/Christchurch",
			"label": "christchurch",
			"seq": "3,14"
		}]
	},
	{
		"id": "1aa73156801547f1babc504ef1f539a5",
		"question": "Which newspapers are owned by Oslo citizens?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Oslo> . ?uri <http://dbpedia.org/property/owners> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "citizens",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/property/owners",
			"label": "owned",
			"seq": "21,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Newspaper",
			"label": "newspapers",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oslo",
			"label": "oslo",
			"seq": "30,33"
		}]
	},
	{
		"id": "7794edb4bced489bad560bde6d7f1b1d",
		"question": "Which hockey teams have had people playing as Defenceman?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Defenceman> . ?x <http://dbpedia.org/property/playedFor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/IceHockeyPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/position",
			"label": "playing",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "playing",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/ontology/IceHockeyPlayer",
			"label": "hockey",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Defenceman",
			"label": "defenceman",
			"seq": "46,55"
		}]
	},
	{
		"id": "6eae72f3017e4cdb932b020311f66a93",
		"question": "What are the products of the company who published Robot Wars: Metal Mayhem ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Robot_Wars:_Metal_Mayhem> <http://dbpedia.org/ontology/publisher> ?x . ?x <http://dbpedia.org/ontology/product> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "published",
			"seq": "41,49"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "products",
			"seq": "13,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "29,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robot_Wars:_Metal_Mayhem",
			"label": "mayhem wars: robot metal",
			"seq": "51,74"
		}]
	},
	{
		"id": "f4f1a62862e44955aac1cdc42a0b530f",
		"question": "Name books with publisher as Francisco de Robles and writer as Miguel de Cervantes ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Francisco_de_Robles> . ?uri <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Miguel_de_Cervantes>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publisher",
			"seq": "16,24"
		}, {
			"uri": "http://dbpedia.org/property/author",
			"label": "with",
			"seq": "11,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Francisco_de_Robles",
			"label": "francisco robles",
			"seq": "29,44"
		}, {
			"uri": "http://dbpedia.org/resource/Miguel_de_Cervantes",
			"label": "cervantes miguel",
			"seq": "63,78"
		}]
	},
	{
		"id": "42a5180e4dc54977ac1383fad51c98c2",
		"question": "What is the political party to which Purnima Banerjee is a member of??",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Purnima_Banerjee> <http://dbpedia.org/ontology/party> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "22,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Purnima_Banerjee",
			"label": "banerjee purnima",
			"seq": "37,52"
		}]
	},
	{
		"id": "748e2f950c61435586ef72d009b2f7c1",
		"question": "What monument was unveiled in 1984 of fine arts of the Soviet Union ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1984_in_fine_arts_of_the_Soviet_Union> <http://dbpedia.org/property/title> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/title",
			"label": "the",
			"seq": "51,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1984_in_fine_arts_of_the_Soviet_Union",
			"label": "soviet union fine arts 1984",
			"seq": "30,56"
		}]
	},
	{
		"id": "f9d4553365b340d89df7041600ddb304",
		"question": "Which universities are also known as the Tulane Green wave?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nickname> <http://dbpedia.org/resource/Tulane_Green_Wave>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nickname",
			"label": "are",
			"seq": "19,21"
		}, {
			"uri": "http://dbpedia.org/ontology/University",
			"label": "universities",
			"seq": "6,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tulane_Green_Wave",
			"label": "tulane green wave",
			"seq": "41,57"
		}]
	},
	{
		"id": "d6166b09fb8c4c46ac27fcf5ae8dbb94",
		"question": "In how many places are the tombs of everyone who died in England?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/England> . ?x <http://dbpedia.org/property/placeOfBurial> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "places",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "places",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England",
			"label": "england",
			"seq": "57,63"
		}]
	},
	{
		"id": "ab4b39c73ed14299a95b7291b10d4f6c",
		"question": "In all the states which have a Uniontown, where does a Keller's mill covered bridge exist too?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Uniontown,_Pennsylvania> <http://dbpedia.org/ontology/state> ?uri. <http://dbpedia.org/resource/Keller's_Mill_Covered_Bridge> <http://dbpedia.org/ontology/state> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/state",
			"label": "states",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "states",
			"seq": "11,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Uniontown,_Pennsylvania",
			"label": "uniontown,",
			"seq": "31,40"
		}, {
			"uri": "http://dbpedia.org/resource/Keller's_Mill_Covered_Bridge",
			"label": "keller's covered bridge mill",
			"seq": "55,82"
		}]
	},
	{
		"id": "3783ed5014f64bc59ce995cf1be1dc9c",
		"question": "Count the religions followed by people living in British Columbia.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/British_Columbia> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "religions",
			"seq": "10,18"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "religions",
			"seq": "10,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/British_Columbia",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "75af9778518645edb1bbb6a0c7ac1f36",
		"question": "The sports team which played at the American Basketball League championship (1996-1998), have which stadiums?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/American_Basketball_League_(1996\u201398)> . ?x <http://dbpedia.org/ontology/stadium> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/league",
			"label": "league",
			"seq": "56,61"
		}, {
			"uri": "http://dbpedia.org/ontology/stadium",
			"label": "stadiums",
			"seq": "100,107"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "sports team",
			"seq": "4,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_Basketball_League_(1996\u201398)",
			"label": "basketball american",
			"seq": "36,54"
		}]
	},
	{
		"id": "2b8f54ebc176446f84b5cd9a0bf7f09a",
		"question": "What is the order of the Omar D. Conger where Robert Sarvis was also the nominee ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Omar_D._Conger> <http://dbpedia.org/property/order> ?uri. <http://dbpedia.org/resource/Robert_Sarvis> <http://dbpedia.org/ontology/nominee> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/order",
			"label": "order",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/nominee",
			"label": "nominee",
			"seq": "73,79"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Omar_D._Conger",
			"label": "conger",
			"seq": "33,38"
		}, {
			"uri": "http://dbpedia.org/resource/Robert_Sarvis",
			"label": "sarvis robert",
			"seq": "46,58"
		}]
	},
	{
		"id": "cf088542743d4f7c9471fde58a58f329",
		"question": "Who wrote the musical whose composer is Emil Dean Zoghby?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Emil_Dean_Zoghby> . ?x <http://dbpedia.org/ontology/author> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicBy",
			"label": "musical",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "who",
			"seq": "0,2"
		}, {
			"uri": "http://dbpedia.org/ontology/Musical",
			"label": "musical",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Emil_Dean_Zoghby",
			"label": "zoghby emil dean",
			"seq": "40,55"
		}]
	},
	{
		"id": "bd8a29101ec64bdaa50f4f3c3c3de808",
		"question": "Where did the conflict take place where Louis Briere de I'Isle was a commander?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Louis_Bri\u00e8re_de_l'Isle> . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "69,77"
		}, {
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "briere",
			"seq": "46,51"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "conflict",
			"seq": "14,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Louis_Bri\u00e8re_de_l'Isle",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1f1e8a30a2d348d09ee11446805e1382",
		"question": "How many publisher have been founded by american citizens?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/stateOfOrigin> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/ontology/founder> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Publisher>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "american",
			"seq": "40,47"
		}, {
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founded",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Publisher",
			"label": "publisher",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d018211e5cad471cb48e42286b59f8bc",
		"question": "what has been developed by John Fanning?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/John_Fanning_(businessman)> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Fanning_(businessman)",
			"label": "fanning john",
			"seq": "27,38"
		}]
	},
	{
		"id": "595fdea8ad964062b2b5fb39504fb305",
		"question": "Who was the chairman of Fort Lauderdale Strikers and also 2015 Fort Lauderdale Strikers season ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/chairman> ?uri. <http://dbpedia.org/resource/Fort_Lauderdale_Strikers> <http://dbpedia.org/ontology/chairman> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/chairman",
			"label": "chairman",
			"seq": "12,19"
		}, {
			"uri": "http://dbpedia.org/ontology/chairman",
			"label": "chairman",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2015_Fort_Lauderdale_Strikers_season",
			"label": "lauderdale strikers season",
			"seq": "29,54"
		}, {
			"uri": "http://dbpedia.org/resource/Fort_Lauderdale_Strikers",
			"label": "lauderdale strikers fort",
			"seq": "24,47"
		}]
	},
	{
		"id": "b3f0e60e97234014a7f3894713c38e83",
		"question": "What are the houses of the legislature where the leader is called Pullaiahgaripalli ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Pullaiahgaripalli> <http://dbpedia.org/property/leaderTitle> ?x . ?x <http://dbpedia.org/property/houses> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Legislature>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderTitle",
			"label": "leader",
			"seq": "49,54"
		}, {
			"uri": "http://dbpedia.org/property/houses",
			"label": "houses",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Legislature",
			"label": "legislature",
			"seq": "27,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pullaiahgaripalli",
			"label": "pullaiahgaripalli",
			"seq": "66,82"
		}]
	},
	{
		"id": "d0ee48eed66c4af68f17410f1026c1be",
		"question": "List some writers which speak one of the Germanic languages.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Germanic_languages> . ?uri <http://dbpedia.org/property/language> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/languageFamily",
			"label": "languages.",
			"seq": "50,59"
		}, {
			"uri": "http://dbpedia.org/property/language",
			"label": "languages.",
			"seq": "50,59"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writers",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Germanic_languages",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "00792920d6934b74b1aac3738f061200",
		"question": "In which city can I find both the office of Elasticsearch and the Yellow Claw DJ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Yellow_Claw_(DJs)> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Elasticsearch> <http://dbpedia.org/property/location> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "can",
			"seq": "14,16"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "can",
			"seq": "14,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Yellow_Claw_(DJs)",
			"label": "yellow claw",
			"seq": "66,76"
		}, {
			"uri": "http://dbpedia.org/resource/Elasticsearch",
			"label": "elasticsearch",
			"seq": "44,56"
		}]
	},
	{
		"id": "cc62ecdc3a6b49c0abb8041c806f783b",
		"question": "Give me all magazines whose editors live in Chicago?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Chicago> . ?uri <http://dbpedia.org/property/editor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/hometown",
			"label": "whose",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/property/editor",
			"label": "editors",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/Magazine",
			"label": "magazines",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chicago",
			"label": "chicago",
			"seq": "44,50"
		}]
	},
	{
		"id": "e14c2eb6c1784c0b8a72befd991b28b9",
		"question": "Which religions are followed by people in England?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/England> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "religions",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/property/religion",
			"label": "religions",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England",
			"label": "england",
			"seq": "42,48"
		}]
	},
	{
		"id": "4545adc58a0241e7a7f875171495d9db",
		"question": "Which televison shows have location as Massachusetts ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Massachusetts>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "location",
			"seq": "27,34"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "televison",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Massachusetts",
			"label": "massachusetts",
			"seq": "39,51"
		}]
	},
	{
		"id": "f42b1c36286b47c8958cf2d6a74f511a",
		"question": "Which governor of Charles Willing had a child named John Scott ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/governor> <http://dbpedia.org/resource/Charles_Willing_Byrd> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/John_Scott_Harrison>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/governor",
			"label": "governor",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/child",
			"label": "child",
			"seq": "40,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_Willing_Byrd",
			"label": "willing charles",
			"seq": "18,32"
		}, {
			"uri": "http://dbpedia.org/resource/John_Scott_Harrison",
			"label": "scott",
			"seq": "57,61"
		}]
	},
	{
		"id": "534303fe37fc4bf7b3ab0221994e27c4",
		"question": "Give me some series whose network's owning company is Warner Bros. Television?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Warner_Bros._Television> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owningCompany",
			"label": "company owning",
			"seq": "36,49"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "network's",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "67,76"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Warner_Bros._Television",
			"label": "television warner bros.",
			"seq": "54,76"
		}]
	},
	{
		"id": "a1b2a89fbda54f5aa1f4d78972f6b0ce",
		"question": "What is the province of Egypt Nanotechnology Center ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Egypt_Nanotechnology_Center> <http://dbpedia.org/property/province> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/province",
			"label": "province",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Egypt_Nanotechnology_Center",
			"label": "nanotechnology center egypt",
			"seq": "24,50"
		}]
	},
	{
		"id": "4a0378488d7a4e55b54af1494dd0452d",
		"question": "What is manufactured by a company founded by Akio Morita?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Akio_Morita> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founded",
			"seq": "34,40"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "8,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Akio_Morita",
			"label": "morita akio",
			"seq": "45,55"
		}]
	},
	{
		"id": "7909a81b56b34a5fb3669d704b262965",
		"question": "is blue lagoon island a part of the bahamas achipelago?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Blue_Lagoon_Island> <http://dbpedia.org/ontology/archipelago> <http://dbpedia.org/resource/The_Bahamas> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/archipelago",
			"label": "achipelago",
			"seq": "44,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Blue_Lagoon_Island",
			"label": "lagoon island blue",
			"seq": "3,20"
		}, {
			"uri": "http://dbpedia.org/resource/The_Bahamas",
			"label": "bahamas the",
			"seq": "32,42"
		}]
	},
	{
		"id": "22555965f19f4a6e92729f88efea818c",
		"question": "Where did Rheinmetall MG 60 originated ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rheinmetall_MG_60> <http://dbpedia.org/ontology/origin> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "originated",
			"seq": "28,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rheinmetall_MG_60",
			"label": "rheinmetall",
			"seq": "10,20"
		}]
	},
	{
		"id": "113e33dbe9dc46c58978e463ef3ce85f",
		"question": "What is the war in which both K Fordice and P Fitzwallace fight?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kirk_Fordice> <http://dbpedia.org/property/battles> ?uri. <http://dbpedia.org/resource/Percy_Fitzwallace> <http://dbpedia.org/property/battles> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "the",
			"seq": "8,10"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "the",
			"seq": "8,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kirk_Fordice",
			"label": "fordice",
			"seq": "32,38"
		}, {
			"uri": "http://dbpedia.org/resource/Percy_Fitzwallace",
			"label": "fitzwallace",
			"seq": "46,56"
		}]
	},
	{
		"id": "1ac2e9ce84374f78b8e3bcae3c1dcf03",
		"question": "Is The Orator in the National Archaeological Museum of Florence?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/The_Orator> <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/National_Archaeological_Museum_(Florence)> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/museum",
			"label": "museum",
			"seq": "45,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Orator",
			"label": "orator the",
			"seq": "3,12"
		}, {
			"uri": "http://dbpedia.org/resource/National_Archaeological_Museum_(Florence)",
			"label": "archaeological national florence museum",
			"seq": "21,59"
		}]
	},
	{
		"id": "0a8fde7c5b8543ea9cbcbe3cd2931cd0",
		"question": "Who are currently playing for Barcelona FC?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/FC_Barcelona> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "currently",
			"seq": "8,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/FC_Barcelona",
			"label": "barcelona",
			"seq": "30,38"
		}]
	},
	{
		"id": "a5f1adc3aeab47b59f5a845831b2e343",
		"question": "List all the notable work of the screen writer who produced Frasier ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Frasier> . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ScreenWriter>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "notable work",
			"seq": "13,24"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "notable work",
			"seq": "13,24"
		}, {
			"uri": "http://dbpedia.org/ontology/ScreenWriter",
			"label": "writer screen",
			"seq": "33,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Frasier",
			"label": "frasier",
			"seq": "60,66"
		}]
	},
	{
		"id": "b4dfd5c3a0424173bb8d70e4152cdbf7",
		"question": "Was Just Another day made by Queen Latifah?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Just_Another_Day...> <http://dbpedia.org/ontology/musicalBand> <http://dbpedia.org/resource/Queen_Latifah> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalBand",
			"label": "made",
			"seq": "21,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Just_Another_Day...",
			"label": "another just day",
			"seq": "4,19"
		}, {
			"uri": "http://dbpedia.org/resource/Queen_Latifah",
			"label": "latifah queen",
			"seq": "29,41"
		}]
	},
	{
		"id": "8cb03d7f98d14093b047782ba028ffa2",
		"question": "Who are the players whose current clubs have Ferran Soriano as chairman?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Ferran_Soriano> . ?uri <http://dbpedia.org/property/currentclub> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/chairman",
			"label": "chairman",
			"seq": "63,70"
		}, {
			"uri": "http://dbpedia.org/property/currentclub",
			"label": "current",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "players",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ferran_Soriano",
			"label": "soriano ferran",
			"seq": "45,58"
		}]
	},
	{
		"id": "c4229602891d40e0b35e90c5f8098d4b",
		"question": "Name the river mouth of Moordener Kill ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moordener_Kill> <http://dbpedia.org/ontology/riverMouth> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "river mouth",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Moordener_Kill",
			"label": "moordener kill",
			"seq": "24,37"
		}]
	},
	{
		"id": "15e2bcfdb55148b2a535b757cdfae2bd",
		"question": "Of the places where Kurt Vonnegut Memorial Library exists, where did Louis LeCocq die?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kurt_Vonnegut_Memorial_Library> <http://dbpedia.org/ontology/location> ?uri. <http://dbpedia.org/resource/Louis_LeCocq> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "louis",
			"seq": "69,73"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "places",
			"seq": "7,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kurt_Vonnegut_Memorial_Library",
			"label": "vonnegut memorial library kurt",
			"seq": "20,49"
		}, {
			"uri": "http://dbpedia.org/resource/Louis_LeCocq",
			"label": "lecocq louis",
			"seq": "69,80"
		}]
	},
	{
		"id": "e5230e04554e4a35be04d647faee20bd",
		"question": "In which series has Sean Young portrayed someone?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sean_Young> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/portrayer",
			"label": "portrayed",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sean_Young",
			"label": "young sean",
			"seq": "20,29"
		}]
	},
	{
		"id": "ca66cfc326e54da8afe7236d75e259f7",
		"question": "The people who did their high school in Palm City, Florida did their college where?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/highschool> <http://dbpedia.org/resource/Palm_City,_Florida> . ?x <http://dbpedia.org/ontology/college> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/highschool",
			"label": "school high",
			"seq": "25,35"
		}, {
			"uri": "http://dbpedia.org/ontology/college",
			"label": "college",
			"seq": "69,75"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "4,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Palm_City,_Florida",
			"label": "florida city, palm",
			"seq": "40,57"
		}]
	},
	{
		"id": "75fa0d818e204f15beda5bf1e16d1d58",
		"question": "What type of engines are utilised by Purvis Eureka?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/property/engine> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/engine",
			"label": "engines",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Purvis_Eureka",
			"label": "purvis eureka",
			"seq": "37,49"
		}]
	},
	{
		"id": "039cf22b96294857b744cfb1fa32e334",
		"question": "Is Egyptian Arabic belong to the Central Semitic Languages family?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Egyptian_Arabic> <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Central_Semitic_languages> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/languageFamily",
			"label": "languages",
			"seq": "49,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Egyptian_Arabic",
			"label": "egyptian arabic",
			"seq": "3,17"
		}, {
			"uri": "http://dbpedia.org/resource/Central_Semitic_languages",
			"label": "languages semitic central",
			"seq": "33,57"
		}]
	},
	{
		"id": "3fe61b9c19eb497db424c23986cb1dce",
		"question": "Which company developed Google Web Toolkit and Google custom search?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri. <http://dbpedia.org/resource/Google_Custom_Search> <http://dbpedia.org/ontology/author> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "custom",
			"seq": "54,59"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "custom",
			"seq": "54,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Google_Web_Toolkit",
			"label": "toolkit google web",
			"seq": "24,41"
		}, {
			"uri": "http://dbpedia.org/resource/Google_Custom_Search",
			"label": "search google custom",
			"seq": "24,43"
		}]
	},
	{
		"id": "65cb514fcc3148d6ba887e1d9e2d494f",
		"question": "Name the fictional character whose relatives are Huey, Dewey, and Louie and belongs to Duck family ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . ?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Duck_family_(Disney)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "35,43"
		}, {
			"uri": "http://dbpedia.org/ontology/relative",
			"label": "relatives",
			"seq": "35,43"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "9,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Huey,_Dewey,_and_Louie",
			"label": "dewey, louie huey,",
			"seq": "49,66"
		}, {
			"uri": "http://dbpedia.org/resource/Duck_family_(Disney)",
			"label": "family duck",
			"seq": "87,97"
		}]
	},
	{
		"id": "76e88d03b8924d729700e000cb86e234",
		"question": "What is the total number of other characters of the plays whose characters is Robin (comics)?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/characters> <http://dbpedia.org/resource/Robin_(comics)> . ?x <http://dbpedia.org/property/characters> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/characters",
			"label": "characters",
			"seq": "34,43"
		}, {
			"uri": "http://dbpedia.org/property/characters",
			"label": "characters",
			"seq": "34,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robin_(comics)",
			"label": "(comics) robin",
			"seq": "78,91"
		}]
	},
	{
		"id": "3b97fa49140f452d85633a8d1f63764f",
		"question": "From where did Ben Wilson (American football) do his highscool?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ben_Wilson_(American_football)> <http://dbpedia.org/ontology/highschool> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/highschool",
			"label": "highscool",
			"seq": "53,61"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ben_Wilson_(American_football)",
			"label": "football) (american wilson",
			"seq": "19,44"
		}]
	},
	{
		"id": "dd871c9e9b134d939271640e81c6095d",
		"question": "Which sports are played in the school which runs the Fr. Agnel Stadium?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Fr._Agnel_Stadium> <http://dbpedia.org/property/operator> ?x . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/operator",
			"label": "sports",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fr._Agnel_Stadium",
			"label": "stadium agnel fr.",
			"seq": "53,69"
		}]
	},
	{
		"id": "ea3bd4ab943c4ebf82618c545d171971",
		"question": "Name the route end of the North-South Transport Corridor and Mumbai Vadodara Expressway?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/North\u2013South_Transport_Corridor> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "route end",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "route end",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North\u2013South_Transport_Corridor",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Mumbai_Vadodara_Expressway",
			"label": "expressway vadodara mumbai",
			"seq": "61,86"
		}]
	},
	{
		"id": "f86382f06edd4519acfc00e730f5471e",
		"question": "Where did isabelle caro and judson huss both die?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Judson_Huss> <http://dbpedia.org/property/deathPlace> ?uri. <http://dbpedia.org/resource/Isabelle_Caro> <http://dbpedia.org/property/deathPlace> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "die",
			"seq": "45,47"
		}, {
			"uri": "http://dbpedia.org/property/deathPlace",
			"label": "die",
			"seq": "45,47"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Judson_Huss",
			"label": "judson huss",
			"seq": "28,38"
		}, {
			"uri": "http://dbpedia.org/resource/Isabelle_Caro",
			"label": "isabelle caro",
			"seq": "10,22"
		}]
	},
	{
		"id": "38373a19e5964230aaa2329c041ad1e3",
		"question": "Name the television show whose subsequent work is Crusade and Composer is Stewart Copeland?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Crusade_(TV_series)> . ?uri <http://dbpedia.org/property/composer> <http://dbpedia.org/resource/Stewart_Copeland>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "31,45"
		}, {
			"uri": "http://dbpedia.org/property/composer",
			"label": "composer",
			"seq": "62,69"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "9,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Crusade_(TV_series)",
			"label": "crusade",
			"seq": "50,56"
		}, {
			"uri": "http://dbpedia.org/resource/Stewart_Copeland",
			"label": "copeland stewart",
			"seq": "74,89"
		}]
	},
	{
		"id": "0312574f280d45a89cd5147313fad0b1",
		"question": "Katharevousa writers have been given which awards?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/movement> <http://dbpedia.org/resource/Katharevousa> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/movement",
			"label": "been",
			"seq": "26,29"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "43,48"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writers",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Katharevousa",
			"label": "katharevousa",
			"seq": "0,11"
		}]
	},
	{
		"id": "1063c970689c469e81a711a634edf521",
		"question": "Count the number of artists who trained at the San Francisco Art Institute?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/training> <http://dbpedia.org/resource/San_Francisco_Art_Institute>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/training",
			"label": "trained",
			"seq": "32,38"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artists",
			"seq": "20,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Francisco_Art_Institute",
			"label": "institute francisco",
			"seq": "51,69"
		}]
	},
	{
		"id": "83f39c859fbc4eeaa715eb2c8e319759",
		"question": "What are the movies whose director is Orson Welles?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Orson_Welles>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/director",
			"label": "director",
			"seq": "26,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "is",
			"seq": "35,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Orson_Welles",
			"label": "welles orson",
			"seq": "38,49"
		}]
	},
	{
		"id": "559339119ad341b2b9cfb630cc1bd6a0",
		"question": "Which scientist is known for anthrax and has Karl Ewald Hasse as his academic advisor ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Anthrax> . ?uri <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Karl_Ewald_Hasse>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "19,27"
		}, {
			"uri": "http://dbpedia.org/ontology/academicAdvisor",
			"label": "academic advisor",
			"seq": "69,84"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Anthrax",
			"label": "anthrax",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/resource/Karl_Ewald_Hasse",
			"label": "hasse ewald karl",
			"seq": "45,60"
		}]
	},
	{
		"id": "06288af112614c6cb006b87cc6b4d88b",
		"question": "How many mountain are there in Sierra Nevada range?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/mountainRange> <http://dbpedia.org/resource/Sierra_Nevada_(U.S.)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountain range",
			"seq": "9,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Mountain",
			"label": "mountain",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sierra_Nevada_(U.S.)",
			"label": "sierra nevada",
			"seq": "31,43"
		}]
	},
	{
		"id": "5c70e8faf9b847f3ac27fe491ccd6a65",
		"question": "To how many different species does the members of the Animal Kingdom belong?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> . ?x <http://dbpedia.org/ontology/species> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Species>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/kingdom",
			"label": "kingdom",
			"seq": "61,67"
		}, {
			"uri": "http://dbpedia.org/ontology/species",
			"label": "species",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Species",
			"label": "species",
			"seq": "22,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Animal",
			"label": "animal",
			"seq": "54,59"
		}]
	},
	{
		"id": "7d287a0404374984833426b01ed42751",
		"question": "List the subjects of the books whose one of the topics is Pau Broca ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/subject> <http://dbpedia.org/resource/Paul_Broca> . ?x <http://dbpedia.org/property/subject> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/subject",
			"label": "subjects",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/property/subject",
			"label": "subjects",
			"seq": "9,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "25,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paul_Broca",
			"label": "broca pau",
			"seq": "58,66"
		}]
	},
	{
		"id": "62f0ecc271674594a21cccef030cd45e",
		"question": "What are some mammals whose phylum is Chordate?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/phylum> <http://dbpedia.org/resource/Chordate>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/phylum",
			"label": "phylum",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/ontology/Mammal",
			"label": "mammals",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chordate",
			"label": "chordate",
			"seq": "38,45"
		}]
	},
	{
		"id": "2a9c6af7ea724bd49c834dd371c155c8",
		"question": "What is manufactured by Asus and Sony togather?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Asus> . ?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Sony> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "8,19"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "8,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Asus",
			"label": "asus",
			"seq": "24,27"
		}, {
			"uri": "http://dbpedia.org/resource/Sony",
			"label": "sony",
			"seq": "33,36"
		}]
	},
	{
		"id": "397233307bda42d486c73b3f774b5d9d",
		"question": "Who is the Artist of the singles whose film genre is Country music ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Country_music> . ?x <http://dbpedia.org/property/artist> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/genre",
			"label": "genre",
			"seq": "44,48"
		}, {
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "11,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Single",
			"label": "singles",
			"seq": "25,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Country_music",
			"label": "country music",
			"seq": "53,65"
		}]
	},
	{
		"id": "233b7a9099164868a3abc029100949c1",
		"question": "Which company owns instagram?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Instagram> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsidiary",
			"label": "instagram",
			"seq": "19,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Instagram",
			"label": "instagram",
			"seq": "19,27"
		}]
	},
	{
		"id": "4b249c6c2fef48e889eb99914a430034",
		"question": "Who did Daniel Gibson marry?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Daniel_Gibson>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/spouse",
			"label": "gibson",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Daniel_Gibson",
			"label": "gibson daniel",
			"seq": "8,20"
		}]
	},
	{
		"id": "7c1138e9bbe54bf79f56584f88d64515",
		"question": "Where were the sportsmen born, who started their careers with Homestead Grays?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/debutteam> <http://dbpedia.org/resource/Homestead_Grays> . ?x <http://dbpedia.org/property/birthDate> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/debutteam",
			"label": "homestead",
			"seq": "62,70"
		}, {
			"uri": "http://dbpedia.org/property/birthDate",
			"label": "the",
			"seq": "11,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Athlete",
			"label": "the",
			"seq": "11,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Homestead_Grays",
			"label": "homestead grays",
			"seq": "62,76"
		}]
	},
	{
		"id": "7197caeaf6804e9a9f9cb80097235c1b",
		"question": "Who studied at  Harvard-Westlake School and has Henry E. Catto, Jr. as   predecessor ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Harvard-Westlake_School> . ?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Henry_E._Catto,_Jr.>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "at",
			"seq": "12,13"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "73,83"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harvard-Westlake_School",
			"label": "harvard-westlake school",
			"seq": "16,38"
		}, {
			"uri": "http://dbpedia.org/resource/Henry_E._Catto,_Jr.",
			"label": "catto, henry",
			"seq": "48,59"
		}]
	},
	{
		"id": "67b58e4d4ed94311a8d0d1ab84d2154d",
		"question": "In which countries can i find some feminist writers?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/movement> <http://dbpedia.org/resource/Feminism> . ?x <http://dbpedia.org/ontology/nationality> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/movement",
			"label": "some",
			"seq": "30,33"
		}, {
			"uri": "http://dbpedia.org/ontology/nationality",
			"label": "feminist",
			"seq": "35,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writers",
			"seq": "44,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Feminism",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "794526bf2c154e83bd9954aed2e8d6ea",
		"question": "Which famous philosopher died on island Euboea?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/deathDate> <http://dbpedia.org/resource/Euboea>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Philosopher>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/deathDate",
			"label": "died",
			"seq": "25,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Philosopher",
			"label": "philosopher",
			"seq": "13,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Euboea",
			"label": "euboea",
			"seq": "40,45"
		}]
	},
	{
		"id": "3a1e1c8fbb3b4c09ba53450a4fd77cd7",
		"question": "Is Tamera Mowry the former band member of Voices?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Voices_(group)> <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Tamera_Mowry> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerBandMember",
			"label": "member former band",
			"seq": "20,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Voices_(group)",
			"label": "voices",
			"seq": "42,47"
		}, {
			"uri": "http://dbpedia.org/resource/Tamera_Mowry",
			"label": "tamera mowry",
			"seq": "3,14"
		}]
	},
	{
		"id": "6aa814339d6747cd82a103df2b4c228f",
		"question": "How many movies are distributed by Cinema International Corporation?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributed",
			"seq": "20,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "cinema",
			"seq": "35,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cinema_International_Corporation",
			"label": "international corporation cinema",
			"seq": "35,66"
		}]
	},
	{
		"id": "fece7229f9bf482dbebf1709a0fb8112",
		"question": "Who was the president under which a tennis player held office before John W. Weeks?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/John_W._Weeks> . ?x <http://dbpedia.org/property/president> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TennisPlayer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "president",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/ontology/TennisPlayer",
			"label": "tennis player",
			"seq": "36,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_W._Weeks",
			"label": "weeks john w.",
			"seq": "69,81"
		}]
	},
	{
		"id": "3ddc996f258946418b9ae66b9d03e234",
		"question": "List the birth city of the politicians of Democratic Party.",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Democratic_Party_(United_States)> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party.",
			"seq": "53,58"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "birth",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Politician",
			"label": "politicians",
			"seq": "27,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Democratic_Party_(United_States)",
			"label": "democratic",
			"seq": "42,51"
		}]
	},
	{
		"id": "43549d9a19ca408daf0fb2899e106312",
		"question": "Which American football player is a former team player of Indianapolis Colts and current team is Michigan Wolverines?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Indianapolis_Colts> . ?uri <http://dbpedia.org/property/currentteam> <http://dbpedia.org/resource/Michigan_Wolverines>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former team",
			"seq": "36,46"
		}, {
			"uri": "http://dbpedia.org/property/currentteam",
			"label": "current team",
			"seq": "43,54"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football american player",
			"seq": "6,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indianapolis_Colts",
			"label": "indianapolis colts",
			"seq": "58,75"
		}, {
			"uri": "http://dbpedia.org/resource/Michigan_Wolverines",
			"label": "wolverines michigan",
			"seq": "97,115"
		}]
	},
	{
		"id": "c82aa7a94ec5431eb6ef397da4551908",
		"question": "Which river's source country is Zambia and mouth country is Mozambique?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?uri <http://dbpedia.org/property/mouthCountry> <http://dbpedia.org/resource/Mozambique>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sourceCountry",
			"label": "country",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/property/mouthCountry",
			"label": "country",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river's",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zambia",
			"label": "zambia",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/resource/Mozambique",
			"label": "mozambique",
			"seq": "60,69"
		}]
	},
	{
		"id": "b7492b365add45569dcbee5b3db8650d",
		"question": "Which person works at the American Magazine?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/The_American_Magazine>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "person",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_American_Magazine",
			"label": "magazine american the",
			"seq": "22,42"
		}]
	},
	{
		"id": "0aef05bbe0154edd9c0c705a89a3c182",
		"question": "Name the regions served by Toll Global Express ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toll_Global_Express> <http://dbpedia.org/ontology/regionServed> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "regions served",
			"seq": "9,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toll_Global_Express",
			"label": "express global toll",
			"seq": "27,45"
		}]
	},
	{
		"id": "0fa03d2ba63f4f22b7c78644d60f399d",
		"question": "Who are the tenants of the stadium where the UFC 140 is located?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/UFC_140> <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "56,62"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenants",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/UFC_140",
			"label": "ufc 140",
			"seq": "45,51"
		}]
	},
	{
		"id": "5547e2421f8e4105b3248f3b3a2c7fbf",
		"question": "How many mountain ranges are located in the Canton of Fribourg?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Canton_of_Fribourg> . ?x <http://dbpedia.org/ontology/mountainRange> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "located",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/ontology/mountainRange",
			"label": "mountain",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canton_of_Fribourg",
			"label": "fribourg canton",
			"seq": "44,58"
		}]
	},
	{
		"id": "cbc87af1e755447fa98c05a0e64a2eb2",
		"question": "Which religion followers are in the Royal Thai Army?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Royal_Thai_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryBranch",
			"label": "army",
			"seq": "47,50"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Royal_Thai_Army",
			"label": "royal thai army",
			"seq": "36,50"
		}]
	},
	{
		"id": "572bc2bfc3424538bdc77b22722dfe47",
		"question": "In which teams did anyone who played as a defencemen, play previously?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Defenceman> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/position",
			"label": "in",
			"seq": "0,1"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Defenceman",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "dab9358e5ab14f72b0af6926cb98b371",
		"question": "Did James brown make the song Killing is Out, School Is In?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Killing_Is_Out,_School_Is_In> <http://dbpedia.org/ontology/musicalBand> <http://dbpedia.org/resource/James_Brown> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/musicalBand",
			"label": "school",
			"seq": "46,51"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Killing_Is_Out,_School_Is_In",
			"label": "killing school out, is",
			"seq": "30,51"
		}, {
			"uri": "http://dbpedia.org/resource/James_Brown",
			"label": "james brown",
			"seq": "4,14"
		}]
	},
	{
		"id": "47dcd274e3704296945ea9b12dd1ee6c",
		"question": "Is PIAS Recordings the distributing label of Wichita Recordings?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Wichita_Recordings> <http://dbpedia.org/ontology/distributingLabel> <http://dbpedia.org/resource/PIAS_Recordings> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributingLabel",
			"label": "distributing label",
			"seq": "23,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wichita_Recordings",
			"label": "recordings wichita",
			"seq": "8,25"
		}, {
			"uri": "http://dbpedia.org/resource/PIAS_Recordings",
			"label": "recordings pias",
			"seq": "3,17"
		}]
	},
	{
		"id": "16a642c2d9054f76866946a7e2aa742a",
		"question": "What party are Siddharta Shankar Ray and Kamla Beniwal from?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Siddhartha_Shankar_Ray> <http://dbpedia.org/ontology/party> ?uri. <http://dbpedia.org/resource/Kamla_Beniwal> <http://dbpedia.org/property/party> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "5,9"
		}, {
			"uri": "http://dbpedia.org/property/party",
			"label": "party",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Siddhartha_Shankar_Ray",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Kamla_Beniwal",
			"label": "beniwal kamla",
			"seq": "41,53"
		}]
	},
	{
		"id": "7246b56a6a294f789c8060bdd018db4b",
		"question": "Count all american football players whose former team owns Lucas Oil Stadium ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Lucas_Oil_Stadium> . ?uri <http://dbpedia.org/ontology/formerTeam> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "count",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "former team",
			"seq": "42,52"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "football american",
			"seq": "10,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lucas_Oil_Stadium",
			"label": "stadium lucas oil",
			"seq": "59,75"
		}]
	},
	{
		"id": "83c320a2818b4a279f69b7838f2668f8",
		"question": "How many cities are around the sea which flows into the Atlantic?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/inflow> <http://dbpedia.org/resource/Atlantic_Ocean> . ?x <http://dbpedia.org/property/cities> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/inflow",
			"label": "flows",
			"seq": "41,45"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/City",
			"label": "cities",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Atlantic_Ocean",
			"label": "atlantic",
			"seq": "56,63"
		}]
	},
	{
		"id": "09f4a767c4ef49b09ad81beafe0dcf61",
		"question": "How many apes are there?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "many",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ape",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "d26cda70df824bb19cc10cc4271643c3",
		"question": "What is the occupation of the Irving Chernev and Karen Grigorian?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Irving_Chernev> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Karen_Grigorian> <http://dbpedia.org/ontology/occupation> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "occupation",
			"seq": "12,21"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "occupation",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Irving_Chernev",
			"label": "chernev irving",
			"seq": "30,43"
		}, {
			"uri": "http://dbpedia.org/resource/Karen_Grigorian",
			"label": "grigorian karen",
			"seq": "49,63"
		}]
	},
	{
		"id": "209c460e684848fe9572d27a98ecbfea",
		"question": "How many cities are close to Lake Victoria?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Lake_Victoria> <http://dbpedia.org/ontology/nearestCity> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/nearestCity",
			"label": "are",
			"seq": "16,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lake_Victoria",
			"label": "victoria lake",
			"seq": "29,41"
		}]
	},
	{
		"id": "4c026c13b12440d5b522a35a7614900a",
		"question": "Name the ssignificant buildings of Ivan Fomin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ivan_Fomin> <http://dbpedia.org/ontology/significantBuilding> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/significantBuilding",
			"label": "ssignificant",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ivan_Fomin",
			"label": "fomin ivan",
			"seq": "35,44"
		}]
	},
	{
		"id": "98cf6110489945a29a7358a6ce88c7b3",
		"question": "Did Tupac write the lyrics of Holler If Ya Hear Me?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Holler_If_Ya_Hear_Me_(musical)> <http://dbpedia.org/property/lyrics> <http://dbpedia.org/resource/Tupac_Shakur> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/lyrics",
			"label": "lyrics",
			"seq": "20,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Holler_If_Ya_Hear_Me_(musical)",
			"label": "holler",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/resource/Tupac_Shakur",
			"label": "tupac",
			"seq": "4,8"
		}]
	},
	{
		"id": "e41dd0cd6d1140b8b8f3f4cf25ac51e1",
		"question": "Where did the war take place where one of the commander was Zuo Zongtang?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Zuo_Zongtang> . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "46,54"
		}, {
			"uri": "http://dbpedia.org/ontology/territory",
			"label": "the",
			"seq": "10,12"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "place",
			"seq": "23,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Zuo_Zongtang",
			"label": "zongtang zuo",
			"seq": "60,71"
		}]
	},
	{
		"id": "dbff72738b8a4eecaeeb1c92dd24ce41",
		"question": "Which largest city of Salsette Island is also the largest city of India ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/India> <http://dbpedia.org/ontology/largestCity> ?uri. <http://dbpedia.org/resource/Salsette_Island> <http://dbpedia.org/ontology/largestCity> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/India",
			"label": "india",
			"seq": "66,70"
		}, {
			"uri": "http://dbpedia.org/resource/Salsette_Island",
			"label": "salsette island",
			"seq": "22,36"
		}]
	},
	{
		"id": "6d665a3fde3242e690e58cf5a30b7331",
		"question": "Which route start of Moscow-Kazan high-speed railway is the home stadium of 2011-12 FC Spartak Moscow ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moscow-Kazan_high-speed_railway> <http://dbpedia.org/ontology/routeStart> ?uri. <http://dbpedia.org/resource/2011\u201312_FC_Spartak_Moscow_season> <http://dbpedia.org/ontology/homeStadium> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "start route",
			"seq": "6,16"
		}, {
			"uri": "http://dbpedia.org/ontology/homeStadium",
			"label": "stadium home",
			"seq": "60,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Moscow-Kazan_high-speed_railway",
			"label": "moscow-kazan high-speed railway",
			"seq": "21,51"
		}, {
			"uri": "http://dbpedia.org/resource/2011\u201312_FC_Spartak_Moscow_season",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e2c1089bbf4440f798c4e4415ab5b6c1",
		"question": "What is the name of the homeground of football team Panionios G.S.S.?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2013\u201314_Panionios_G.S.S._season> <http://dbpedia.org/ontology/ground> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ground",
			"label": "homeground",
			"seq": "24,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2013\u201314_Panionios_G.S.S._season",
			"label": "panionios g.s.s.",
			"seq": "52,67"
		}]
	},
	{
		"id": "a5f5c0c2445b4506b6b33166953033e2",
		"question": "Who was the PM under which William Deane served?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Deane> <http://dbpedia.org/ontology/primeMinister> ?uri  . }",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "under",
			"seq": "15,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Deane",
			"label": "william deane",
			"seq": "27,39"
		}]
	},
	{
		"id": "0fb28604c99742c0aa2963169472cd4f",
		"question": "How many teams was Garry Unger in, previously?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/formerTeam> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "402",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "teams",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Garry_Unger",
			"label": "unger garry",
			"seq": "19,29"
		}]
	},
	{
		"id": "a66454f689bf4ec393eef188c8ea0fb6",
		"question": "What killed John Thompson Mason and Martino Martini?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Thomson_Mason_(1787\u20131850)> <http://dbpedia.org/ontology/deathCause> ?uri. <http://dbpedia.org/resource/Martino_Martini> <http://dbpedia.org/ontology/deathCause> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "thompson",
			"seq": "17,24"
		}, {
			"uri": "http://dbpedia.org/ontology/deathCause",
			"label": "thompson",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Thomson_Mason_(1787\u20131850)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Martino_Martini",
			"label": "martino martini",
			"seq": "36,50"
		}]
	},
	{
		"id": "36e913ffdfe04f3c836be75b16def3a4",
		"question": "How many different currencies are used in the places governed by the president of France?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/leaderTitle> <http://dbpedia.org/resource/President_of_France> . ?x <http://dbpedia.org/ontology/currency> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderTitle",
			"label": "are",
			"seq": "30,32"
		}, {
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currencies",
			"seq": "19,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/President_of_France",
			"label": "president france",
			"seq": "69,84"
		}]
	},
	{
		"id": "24df8c770302477ea971c6535bda9937",
		"question": "Is Mona Lisa in the Louvre museum?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mona_Lisa> <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/Louvre> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/museum",
			"label": "museum",
			"seq": "27,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mona_Lisa",
			"label": "mona lisa",
			"seq": "3,11"
		}, {
			"uri": "http://dbpedia.org/resource/Louvre",
			"label": "louvre",
			"seq": "20,25"
		}]
	},
	{
		"id": "a850c2eb0a1a4e92b601ea447d0228f2",
		"question": "How many people play for the Dallas Cowboys?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Dallas_Cowboys>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "the",
			"seq": "25,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dallas_Cowboys",
			"label": "cowboys dallas",
			"seq": "29,42"
		}]
	},
	{
		"id": "84ede2491cf7408fbbb66c5db851f30a",
		"question": "List the judge of the TV show whose one of the judge is Ludacris ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Ludacris> . ?x <http://dbpedia.org/property/judges> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/judges",
			"label": "judge",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/property/judges",
			"label": "judge",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "25,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ludacris",
			"label": "ludacris",
			"seq": "56,63"
		}]
	},
	{
		"id": "2d3593472ac64342ae437da2e0f9880f",
		"question": "Where did the people die who were known for Young Life?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Young_Life> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/knownFor",
			"label": "known for",
			"seq": "34,42"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "people",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Young_Life",
			"label": "young life",
			"seq": "44,53"
		}]
	},
	{
		"id": "edcf0c29b7884073984ea20413f0eb1c",
		"question": "List the primary  subjects of A Christian Turn'd Turk?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A_Christian_Turn'd_Turk> <http://dbpedia.org/property/subject> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/subject",
			"label": "subjects",
			"seq": "18,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A_Christian_Turn'd_Turk",
			"label": "christian turn'd turk",
			"seq": "32,52"
		}]
	},
	{
		"id": "a0f6a9ff04114339bf934c012ed2f0b2",
		"question": "Which awards did the writer of Persona win ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Persona_(1966_film)> <http://dbpedia.org/ontology/writer> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "writer",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Persona_(1966_film)",
			"label": "persona",
			"seq": "31,37"
		}]
	},
	{
		"id": "eee1bb47d0ac48a0a79142e2a0ae6f48",
		"question": "Give me a count of movies whose editor is Mark Stevens?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editing",
			"label": "editor",
			"seq": "32,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "16,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mark_Stevens_(film_editor)",
			"label": "stevens editor mark",
			"seq": "32,50"
		}]
	},
	{
		"id": "0652b6c013d14959a266fdbb14f106ab",
		"question": "Who are the  judges of the television show whose anchor is Josh Groban?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Josh_Groban> . ?x <http://dbpedia.org/property/judges> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/presenter",
			"label": "the",
			"seq": "8,10"
		}, {
			"uri": "http://dbpedia.org/property/judges",
			"label": "judges",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "27,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Josh_Groban",
			"label": "groban josh",
			"seq": "59,69"
		}]
	},
	{
		"id": "dba124f2991542c596c0081858c11b79",
		"question": "Give me the total number of television shows whose theme music composer is Julian Gingell and created by  Simon Fuller?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell> . ?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composer theme music",
			"seq": "51,70"
		}, {
			"uri": "http://dbpedia.org/property/creator",
			"label": "created",
			"seq": "94,100"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Julian_Gingell",
			"label": "gingell julian",
			"seq": "75,88"
		}, {
			"uri": "http://dbpedia.org/resource/Simon_Fuller",
			"label": "fuller simon",
			"seq": "106,117"
		}]
	},
	{
		"id": "e83f61a2a503458487940f058dbc056a",
		"question": "List the area of radio stations whose sister station is WBCQ-FM?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/WBCQ-FM> <http://dbpedia.org/property/sisterStations> ?x . ?x <http://dbpedia.org/property/area> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterStations",
			"label": "stations",
			"seq": "23,30"
		}, {
			"uri": "http://dbpedia.org/property/area",
			"label": "area",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WBCQ-FM",
			"label": "wbcq-fm",
			"seq": "56,62"
		}]
	},
	{
		"id": "0d93df312f8448acb89d604531f0dcc3",
		"question": "What ethnicity do people in British Columbia belong to?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/British_Columbia> . ?x <http://dbpedia.org/ontology/ethnicity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/residence",
			"label": "in",
			"seq": "25,26"
		}, {
			"uri": "http://dbpedia.org/ontology/ethnicity",
			"label": "ethnicity",
			"seq": "5,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "18,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/British_Columbia",
			"label": "columbia british",
			"seq": "28,43"
		}]
	},
	{
		"id": "561e313df8b44f6f86beb08ed0ff7314",
		"question": "Is Latin the official language of Sovereign Military Order of Malta?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Sovereign_Military_Order_of_Malta> <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Latin> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/officialLanguage",
			"label": "official language",
			"seq": "13,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sovereign_Military_Order_of_Malta",
			"label": "sovereign military order malta",
			"seq": "34,63"
		}, {
			"uri": "http://dbpedia.org/resource/Latin",
			"label": "latin",
			"seq": "3,7"
		}]
	},
	{
		"id": "307417ba7c684e2887f17e9a33b81e3e",
		"question": "List the  outflow of Lake Uniamsi?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lake_Uniam\u00e9si> <http://dbpedia.org/ontology/outflow> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/outflow",
			"label": "outflow",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lake_Uniam\u00e9si",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "214ff25fe3d84f69a29dc354d42a6207",
		"question": "Which awards did the creator of A Barrel of Laughs, a Vale of Tears won ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/A_Barrel_of_Laughs,_a_Vale_of_Tears> <http://dbpedia.org/ontology/author> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "creator",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/ontology/ComicsCreator",
			"label": "creator",
			"seq": "21,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/A_Barrel_of_Laughs,_a_Vale_of_Tears",
			"label": "laughs, barrel tears",
			"seq": "34,53"
		}]
	},
	{
		"id": "8c3a21bdc66d4755b75c98c498773f1e",
		"question": "What is father's name who also served in military of Carlene Carter?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Carlene_Carter>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "carlene",
			"seq": "53,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carlene_Carter",
			"label": "carlene carter",
			"seq": "53,66"
		}]
	},
	{
		"id": "930ba27955d9475587dbbb75ffcae399",
		"question": "In which university did Harlan Mathews study, where Richard Meriil Atkinson went too?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Harlan_Mathews> <http://dbpedia.org/ontology/almaMater> ?uri. <http://dbpedia.org/resource/Richard_Merrill_Atkinson> <http://dbpedia.org/ontology/almaMater> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mathews",
			"seq": "31,37"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mathews",
			"seq": "31,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harlan_Mathews",
			"label": "mathews harlan",
			"seq": "24,37"
		}, {
			"uri": "http://dbpedia.org/resource/Richard_Merrill_Atkinson",
			"label": "atkinson richard",
			"seq": "52,67"
		}]
	},
	{
		"id": "e36c53ecf3f04cf7a35675ce5ff859ea",
		"question": "How many people have trained the wrestlers who were billed in Wisconsin?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/billed> <http://dbpedia.org/resource/Wisconsin> . ?x <http://dbpedia.org/ontology/trainer> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/billed",
			"label": "billed",
			"seq": "52,57"
		}, {
			"uri": "http://dbpedia.org/ontology/trainer",
			"label": "trained",
			"seq": "21,27"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wisconsin",
			"label": "wisconsin",
			"seq": "62,70"
		}]
	},
	{
		"id": "de4a17ef8b2f4b39b40ef30f83c56a81",
		"question": "List the major shrines of Jovan Vladimir?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jovan_Vladimir> <http://dbpedia.org/property/majorShrine> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/majorShrine",
			"label": "shrines",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jovan_Vladimir",
			"label": "vladimir jovan",
			"seq": "26,39"
		}]
	},
	{
		"id": "0396475ffe70439b901b07d6784e000b",
		"question": "Which shows are from a company whose subsidiary is Viacom Productions?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Viacom_Productions> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsidiary",
			"label": "subsidiary",
			"seq": "37,46"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "company",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Viacom_Productions",
			"label": "productions viacom",
			"seq": "51,68"
		}]
	},
	{
		"id": "df518a80342e4fb984830368c9884d96",
		"question": "Did Chant Mas originate in West Africa?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Chant\u00e9_mas> <http://dbpedia.org/ontology/stylisticOrigin> <http://dbpedia.org/resource/West_Africa> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/stylisticOrigin",
			"label": "originate",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chant\u00e9_mas",
			"label": "chant mas",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/resource/West_Africa",
			"label": "africa west",
			"seq": "27,37"
		}]
	},
	{
		"id": "15c9ac66e1244177b01e0b4386cf5efb",
		"question": "What are on the borders of Shimsa Plateau?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Shim\u014dsa_Plateau> <http://dbpedia.org/ontology/border> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/border",
			"label": "borders",
			"seq": "16,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shim\u014dsa_Plateau",
			"label": "plateau",
			"seq": "34,40"
		}]
	},
	{
		"id": "2e7e281583534d89b40fa6de036f5439",
		"question": "Who edited  British Gazette ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/British_Gazette> <http://dbpedia.org/property/editor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/editor",
			"label": "edited",
			"seq": "4,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/British_Gazette",
			"label": "gazette british",
			"seq": "12,26"
		}]
	},
	{
		"id": "baa53040546c4b7485dd8c3b4ecd311e",
		"question": "Which spanish novel was published by Francisco de Robles?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Francisco_de_Robles> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/publisher",
			"label": "published",
			"seq": "24,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Francisco_de_Robles",
			"label": "francisco robles",
			"seq": "37,52"
		}]
	},
	{
		"id": "105528dc63e94de280ca2dd24c29a603",
		"question": "Which current player of Chicago Bulls was drafted by Los Angeles Clippers ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls> . ?uri <http://dbpedia.org/property/draftTeam> <http://dbpedia.org/resource/Los_Angeles_Clippers>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/team",
			"label": "drafted",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "drafted",
			"seq": "42,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chicago_Bulls",
			"label": "chicago bulls",
			"seq": "24,36"
		}, {
			"uri": "http://dbpedia.org/resource/Los_Angeles_Clippers",
			"label": "clippers angeles los",
			"seq": "53,72"
		}]
	},
	{
		"id": "0feb39bf1e8f453bb816ea93a2b502c4",
		"question": "Count the total number  of hometown of the gymnasts whose one of the hometown in Russia ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/hometown> <http://dbpedia.org/resource/Russia> . ?x <http://dbpedia.org/property/hometown> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hometown",
			"label": "hometown",
			"seq": "27,34"
		}, {
			"uri": "http://dbpedia.org/property/hometown",
			"label": "hometown",
			"seq": "27,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Russia",
			"label": "russia",
			"seq": "81,86"
		}]
	},
	{
		"id": "e7550728ad6f41acb0ad81d2f95ffb96",
		"question": "What is the resting place of the children of Bruce Lee ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Bruce_Lee> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "resting place",
			"seq": "12,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bruce_Lee",
			"label": "bruce lee",
			"seq": "45,53"
		}]
	},
	{
		"id": "deea1a7029184a36887d5130ae3b7420",
		"question": "What are the television shows whose company's predecessor is Desilu Productions?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Desilu_Productions> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/predecessor",
			"label": "predecessor",
			"seq": "46,56"
		}, {
			"uri": "http://dbpedia.org/property/company",
			"label": "company's",
			"seq": "36,44"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Desilu_Productions",
			"label": "productions desilu",
			"seq": "61,78"
		}]
	},
	{
		"id": "cd0e2088c4334a499439865a4b8605d1",
		"question": "tell me the school to which Cyril Hume went?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cyril_Hume> <http://dbpedia.org/property/education> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/education",
			"label": "to",
			"seq": "19,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cyril_Hume",
			"label": "cyril hume",
			"seq": "28,37"
		}]
	},
	{
		"id": "2518d2b2d1ac4e4fbd3d905d8ea634bd",
		"question": "Who has built the stadiums which were rented by the Central american games of 2013?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/2013_Central_American_Games> . ?x <http://dbpedia.org/ontology/builder> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "rented",
			"seq": "38,43"
		}, {
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "built",
			"seq": "8,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadiums",
			"seq": "18,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2013_Central_American_Games",
			"label": "american central games 2013",
			"seq": "52,78"
		}]
	},
	{
		"id": "3f549a2b9eb34b59bd94ab9d9d2a60d2",
		"question": "Estimate the number of sports divisions at the universities under international association of universities.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/International_Association_of_Universities> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "association",
			"seq": "80,90"
		}, {
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "23,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/International_Association_of_Universities",
			"label": "international universities",
			"seq": "47,72"
		}]
	},
	{
		"id": "0f900abe071d458c8008e93f37f6c252",
		"question": "List the prospect team of Robin Kovacs ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robin_Kovacs> <http://dbpedia.org/property/prospectTeam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prospectTeam",
			"label": "prospect team",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robin_Kovacs",
			"label": "kovacs robin",
			"seq": "26,37"
		}]
	},
	{
		"id": "600bf1ca0e93442ba5fa63154cf524a9",
		"question": "What is sovereignity of the successor of Mr. George Robert Andrews ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/George_Roberts_Andrews> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/country",
			"label": "sovereignity",
			"seq": "8,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_Roberts_Andrews",
			"label": "andrews robert george",
			"seq": "45,65"
		}]
	},
	{
		"id": "425f07694cbb4f12a161b89c5d635e62",
		"question": "Is Labor relations the main interest of Karl Marx?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Karl_Marx> <http://dbpedia.org/ontology/mainInterest> <http://dbpedia.org/resource/Labor_relations> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mainInterest",
			"label": "interest main",
			"seq": "23,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Karl_Marx",
			"label": "marx karl",
			"seq": "40,48"
		}, {
			"uri": "http://dbpedia.org/resource/Labor_relations",
			"label": "relations labor",
			"seq": "3,17"
		}]
	},
	{
		"id": "aed72becd6f144b194afb38e15d9b5c2",
		"question": "Which show developed by Brain Graden has theme music composed by Primus ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Brian_Graden> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Primus_(band)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/developer",
			"label": "developed",
			"seq": "11,19"
		}, {
			"uri": "http://dbpedia.org/property/themeMusicComposer",
			"label": "composed",
			"seq": "53,60"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brian_Graden",
			"label": "graden",
			"seq": "30,35"
		}, {
			"uri": "http://dbpedia.org/resource/Primus_(band)",
			"label": "primus",
			"seq": "65,70"
		}]
	},
	{
		"id": "55b30011d61b4084beb7e4971374cac2",
		"question": "What mammals are classified into Diprotodontia ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Diprotodontia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/order",
			"label": "are",
			"seq": "13,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Mammal",
			"label": "mammals",
			"seq": "5,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Diprotodontia",
			"label": "diprotodontia",
			"seq": "33,45"
		}]
	},
	{
		"id": "acf96951be6c4bdda4d3fe9e77b9da55",
		"question": "Who all have succeeded the kings buried in Rome?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome> . ?x <http://dbpedia.org/ontology/successor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "buried",
			"seq": "33,38"
		}, {
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "succeeded",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Royalty",
			"label": "all",
			"seq": "4,6"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rome",
			"label": "rome",
			"seq": "43,46"
		}]
	},
	{
		"id": "6429713d75f449e0852eaa9a52a8540a",
		"question": "Name a office holder whose predecessor is Edward Douglass White and has son named Charles Phelps Taft II?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Edward_Douglass_White> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Charles_Phelps_Taft_II>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "predecessor",
			"seq": "27,37"
		}, {
			"uri": "http://dbpedia.org/ontology/child",
			"label": "holder",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "7,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edward_Douglass_White",
			"label": "douglass edward white",
			"seq": "42,62"
		}, {
			"uri": "http://dbpedia.org/resource/Charles_Phelps_Taft_II",
			"label": "charles phelps taft",
			"seq": "82,100"
		}]
	},
	{
		"id": "e0c15d9cbe7d442b90853f84915861a9",
		"question": "Where did the  designer of Monument to Salavat Yulaev die?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Monument_to_Salavat_Yulaev> <http://dbpedia.org/ontology/designer> ?x . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designer",
			"label": "designer",
			"seq": "15,22"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "salavat",
			"seq": "39,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Monument_to_Salavat_Yulaev",
			"label": "monument salavat yulaev",
			"seq": "27,49"
		}]
	},
	{
		"id": "0827b6115c1e42db887f851cff070db2",
		"question": "What is the club of Perianne Jones ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Perianne_Jones> <http://dbpedia.org/property/club> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/club",
			"label": "club",
			"seq": "12,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Perianne_Jones",
			"label": "perianne jones",
			"seq": "20,33"
		}]
	},
	{
		"id": "bea54664fe0f4bb38b817c38546b103d",
		"question": "Where is the constituency of John Smith Griffin ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/John_Smith_Griffin> <http://dbpedia.org/property/constituency> ?x . ?x <http://dbpedia.org/ontology/location> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "13,24"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "john",
			"seq": "29,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Smith_Griffin",
			"label": "griffin smith",
			"seq": "34,46"
		}]
	},
	{
		"id": "576e5c12a2c248b8830551d0f73df4b8",
		"question": "List the books by the authors buried in the Convent of the Barefoot Trinitarians?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Convent_of_the_Barefoot_Trinitarians> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "trinitarians",
			"seq": "68,79"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "authors",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Convent_of_the_Barefoot_Trinitarians",
			"label": "trinitarians barefoot convent",
			"seq": "44,72"
		}]
	},
	{
		"id": "55f6d1bfea1c4facbb55ebbb90805560",
		"question": "Which companies have launched from the Vandenberg Air Force Air base?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Vandenberg_Air_Force_Base> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launched",
			"seq": "21,28"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "launched",
			"seq": "21,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vandenberg_Air_Force_Base",
			"label": "vandenberg force",
			"seq": "39,54"
		}]
	},
	{
		"id": "b6350d2207344671bafd1d5b4cde9b63",
		"question": "Is Stephanie Rice the flagbearer of Australia at the 2008 Summer Olympics?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Australia_at_the_2008_Summer_Olympics> <http://dbpedia.org/property/flagbearer> <http://dbpedia.org/resource/Stephanie_Rice> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/flagbearer",
			"label": "flagbearer",
			"seq": "22,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Australia_at_the_2008_Summer_Olympics",
			"label": "australia olympics summer",
			"seq": "36,60"
		}, {
			"uri": "http://dbpedia.org/resource/Stephanie_Rice",
			"label": "stephanie rice",
			"seq": "3,16"
		}]
	},
	{
		"id": "04444d2be01e42628d4b68c281b03655",
		"question": "Spanish harlem incident and girl from the north country were originally composed by whom?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spanish_Harlem_Incident> <http://dbpedia.org/ontology/composer> ?uri. <http://dbpedia.org/resource/Girl_from_the_North_Country> <http://dbpedia.org/ontology/composer> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composed",
			"seq": "72,79"
		}, {
			"uri": "http://dbpedia.org/ontology/composer",
			"label": "composed",
			"seq": "72,79"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Spanish_Harlem_Incident",
			"label": "incident spanish harlem",
			"seq": "0,22"
		}, {
			"uri": "http://dbpedia.org/resource/Girl_from_the_North_Country",
			"label": "country north",
			"seq": "42,54"
		}]
	},
	{
		"id": "bef4d21a7f66422c8f6b906ff1dfc6ca",
		"question": "Who is the founder of Oprah Winfrey Network (U.S. TV channel) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oprah_Winfrey_Network_(U.S._TV_channel)> <http://dbpedia.org/property/founder> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/founder",
			"label": "founder",
			"seq": "11,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Oprah_Winfrey_Network_(U.S._TV_channel)",
			"label": "channel) winfrey network oprah (u.s.",
			"seq": "22,57"
		}]
	},
	{
		"id": "84f2de8922174f768151cc95ffc13a23",
		"question": " How many scientist have won an award by the society led by Venkatraman Ramakrishnan?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Venkatraman_Ramakrishnan> . ?uri <http://dbpedia.org/property/prizes> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "led",
			"seq": "53,55"
		}, {
			"uri": "http://dbpedia.org/property/prizes",
			"label": "ramakrishnan",
			"seq": "72,83"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "10,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Venkatraman_Ramakrishnan",
			"label": "ramakrishnan venkatraman",
			"seq": "60,83"
		}]
	},
	{
		"id": "e753060cd8dc4ad3bafcc132529aa7a8",
		"question": "Which place of Geography Club is the location of Seattle Great Wheel ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Seattle_Great_Wheel> <http://dbpedia.org/property/locationTown> ?uri. <http://dbpedia.org/resource/Geography_Club_(play)> <http://dbpedia.org/property/place> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationTown",
			"label": "location",
			"seq": "37,44"
		}, {
			"uri": "http://dbpedia.org/property/place",
			"label": "place",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Seattle_Great_Wheel",
			"label": "seattle wheel great",
			"seq": "49,67"
		}, {
			"uri": "http://dbpedia.org/resource/Geography_Club_(play)",
			"label": "geography club",
			"seq": "15,28"
		}]
	},
	{
		"id": "a94b8573bbf7434592b2463cc3700be8",
		"question": "Which television show is based in Massachusetts and has opening theme as \"Where Everybody Knows Your Name\" ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name> . ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Massachusetts>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/openingTheme",
			"label": "opening theme",
			"seq": "56,68"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "television",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television show",
			"seq": "6,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name",
			"label": "everybody",
			"seq": "80,88"
		}, {
			"uri": "http://dbpedia.org/resource/Massachusetts",
			"label": "massachusetts",
			"seq": "34,46"
		}]
	},
	{
		"id": "3bf7d79605ca4456a79601a892b1ce3a",
		"question": "What is the career of George Arceneaux, Jr. ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_Arceneaux,_Jr.> <http://dbpedia.org/ontology/occupation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "what",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/George_Arceneaux,_Jr.",
			"label": "arceneaux, george",
			"seq": "22,38"
		}]
	},
	{
		"id": "c762b3cd8bd848748e7d136d4b2588c3",
		"question": "Name the prospect team of Mikhail Pashnin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mikhail_Pashnin> <http://dbpedia.org/property/prospectTeam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/prospectTeam",
			"label": "prospect team",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mikhail_Pashnin",
			"label": "pashnin mikhail",
			"seq": "26,40"
		}]
	},
	{
		"id": "618bbb187ffc48cfa98b5a910a1e61fb",
		"question": "Who are the maintainers of the bridges which cross the pandaruan river?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Pandaruan_River> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/crosses",
			"label": "cross",
			"seq": "45,49"
		}, {
			"uri": "http://dbpedia.org/ontology/maintainedBy",
			"label": "maintainers",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/Bridge",
			"label": "bridges",
			"seq": "31,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pandaruan_River",
			"label": "pandaruan river",
			"seq": "55,69"
		}]
	},
	{
		"id": "0c72f7f8c4d549bc9c7f59b72394a598",
		"question": "Who all held a position when Gough Whitlam was the prime minister?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Gough_Whitlam> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/primeMinister",
			"label": "minister prime",
			"seq": "51,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gough_Whitlam",
			"label": "whitlam gough",
			"seq": "29,41"
		}]
	},
	{
		"id": "af5ba5ad9b42455eab9f628eba9d1e2c",
		"question": "Which veterans served at CBS?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/CBS>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "at",
			"seq": "22,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CBS",
			"label": "cbs",
			"seq": "25,27"
		}]
	},
	{
		"id": "03a102b6e3c94e6d819336676a2e112d",
		"question": "For which team do Guido Guerrini and Massimo Liverani currently play for?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Guido_Guerrini> <http://dbpedia.org/property/currentTeam> ?uri. <http://dbpedia.org/resource/Massimo_Liverani> <http://dbpedia.org/property/currentTeam> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/currentTeam",
			"label": "currently",
			"seq": "54,62"
		}, {
			"uri": "http://dbpedia.org/property/currentTeam",
			"label": "currently",
			"seq": "54,62"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Guido_Guerrini",
			"label": "guerrini guido",
			"seq": "18,31"
		}, {
			"uri": "http://dbpedia.org/resource/Massimo_Liverani",
			"label": "liverani massimo",
			"seq": "37,52"
		}]
	},
	{
		"id": "10f14cccfbd949feb78ff964c2f44eb9",
		"question": "Which games publishers are located in California?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/California> . ?uri <http://dbpedia.org/ontology/publisher> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "27,33"
		}, {
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "publishers",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/California",
			"label": "california",
			"seq": "38,47"
		}]
	},
	{
		"id": "71acf91b02794986a8ac6915c483a46f",
		"question": "How many other battles have the military person fought whose one of the battles is World War II ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/World_War_II> . ?x <http://dbpedia.org/property/battles> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battles",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "battles",
			"seq": "15,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/World_War_II",
			"label": "world war",
			"seq": "83,91"
		}]
	},
	{
		"id": "32d3e61eddc2407e87f186bc486cd36e",
		"question": "Who is the  distributor of Rev (drink) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rev_(drink)> <http://dbpedia.org/ontology/distributor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributor",
			"seq": "12,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rev_(drink)",
			"label": "(drink) rev",
			"seq": "27,37"
		}]
	},
	{
		"id": "86ef883773c04b44a83ea4b1ec8ee7c7",
		"question": "Who is the scientist whose doctoral student is Erich Bagge?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Erich_Bagge>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralStudent",
			"label": "doctoral student",
			"seq": "27,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientist",
			"seq": "11,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erich_Bagge",
			"label": "erich bagge",
			"seq": "47,57"
		}]
	},
	{
		"id": "2ca759d5f081472b8b48e96396caf9b4",
		"question": "How many bands are signed up with labels which were founded in Japan?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/Japan> . ?uri <http://dbpedia.org/property/label> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "founded",
			"seq": "52,58"
		}, {
			"uri": "http://dbpedia.org/property/label",
			"label": "labels",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "bands",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Japan",
			"label": "japan",
			"seq": "63,67"
		}]
	},
	{
		"id": "4a351ee20c4a44c3b120ab07ca56f7a7",
		"question": "Name the nationalteam of Trn Vit Hng ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tr\u1ea7n_Vi\u1ec7t_H\u01b0\u01a1ng> <http://dbpedia.org/property/nationalteam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/nationalteam",
			"label": "nationalteam",
			"seq": "9,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tr\u1ea7n_Vi\u1ec7t_H\u01b0\u01a1ng",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "7b40ce95904c467d8f1c01dccd0ce70c",
		"question": "What is the allegiance of Albert Kwesi Ocran ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Kwesi_Ocran> <http://dbpedia.org/property/allegiance> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Albert_Kwesi_Ocran",
			"label": "albert ocran kwesi",
			"seq": "26,43"
		}]
	},
	{
		"id": "bdd487c7a42548298552ee353383a88e",
		"question": "What is the owning company of the bank whose parent is Sony Financial ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/parent> <http://dbpedia.org/resource/Sony_Financial> . ?x <http://dbpedia.org/ontology/owningCompany> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/parent",
			"label": "parent",
			"seq": "45,50"
		}, {
			"uri": "http://dbpedia.org/ontology/owningCompany",
			"label": "company owning",
			"seq": "12,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sony_Financial",
			"label": "financial sony",
			"seq": "55,68"
		}]
	},
	{
		"id": "c0cf9476109b449782a8226a9ae2ae4f",
		"question": "Who appointed William L. Dayton ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_L._Dayton> <http://dbpedia.org/ontology/appointer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/appointer",
			"label": "appointed",
			"seq": "4,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_L._Dayton",
			"label": "william dayton",
			"seq": "14,27"
		}]
	},
	{
		"id": "e59b93cd1e8d40d8be26c41a243212cc",
		"question": "What is the fictional character whose voice over is done by the animator of Dick Lundy ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/animator> <http://dbpedia.org/resource/Dick_Lundy_(animator)> . ?uri <http://dbpedia.org/ontology/voice> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/animator",
			"label": "animator",
			"seq": "64,71"
		}, {
			"uri": "http://dbpedia.org/ontology/voice",
			"label": "voice",
			"seq": "38,42"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "12,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dick_Lundy_(animator)",
			"label": "animator lundy dick",
			"seq": "64,82"
		}]
	},
	{
		"id": "a2ec42a127424074b5d7bc144285dcd6",
		"question": "Name the Artist of Madagascar: Operation Penguin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Madagascar:_Operation_Penguin> <http://dbpedia.org/property/artist> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/artist",
			"label": "artist",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Madagascar:_Operation_Penguin",
			"label": "madagascar: operation penguin",
			"seq": "19,47"
		}]
	},
	{
		"id": "9dc0111186b24e9c86ae66f5bd0cefcb",
		"question": "Count the tenants of the stadiums owned by toronto.",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Toronto> . ?x <http://dbpedia.org/property/tenants> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owned",
			"seq": "34,38"
		}, {
			"uri": "http://dbpedia.org/property/tenants",
			"label": "tenants",
			"seq": "10,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "05243a944c564231bfbdcc7577bf0492",
		"question": "Name the company with product named Microsft Azure and provides OneDrive as a service ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Azure> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/OneDrive>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/product",
			"label": "product",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/property/services",
			"label": "service",
			"seq": "78,84"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Azure",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/OneDrive",
			"label": "onedrive",
			"seq": "64,71"
		}]
	},
	{
		"id": "047a2084681a4bc4b07d5e2e9995f2eb",
		"question": "list all the chairman of Vancouver Whitecaps FC?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vancouver_Whitecaps_FC> <http://dbpedia.org/property/chairman> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/chairman",
			"label": "chairman",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Vancouver_Whitecaps_FC",
			"label": "whitecaps vancouver",
			"seq": "25,43"
		}]
	},
	{
		"id": "11258ba9f4464dabb69a719605f61b78",
		"question": "Which famous commander led the Siege of forn meigs and was involved in the battle of fort stephenson?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Siege_of_Fort_Meigs> <http://dbpedia.org/ontology/commander> ?uri. <http://dbpedia.org/resource/Battle_of_Fort_Stephenson> <http://dbpedia.org/ontology/commander> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "13,21"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Siege_of_Fort_Meigs",
			"label": "siege meigs fort",
			"seq": "31,46"
		}, {
			"uri": "http://dbpedia.org/resource/Battle_of_Fort_Stephenson",
			"label": "stephenson battle fort",
			"seq": "75,96"
		}]
	},
	{
		"id": "0d3ce4f95ac74189a54701a42dda617d",
		"question": "Who is the label of The Producers (2005 film) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Producers_(2005_film)> <http://dbpedia.org/property/label> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/label",
			"label": "label",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Producers_(2005_film)",
			"label": "producers film) (2005 the",
			"seq": "7,31"
		}]
	},
	{
		"id": "8788b9a42eae46a7ae9f7ac2c79a8056",
		"question": "What is the movie whose producer is Michael Deeley and directed by  Ridley Scott?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Michael_Deeley> . ?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Ridley_Scott>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "producer",
			"seq": "24,31"
		}, {
			"uri": "http://dbpedia.org/property/director",
			"label": "directed",
			"seq": "55,62"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "ridley",
			"seq": "68,73"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Deeley",
			"label": "michael deeley",
			"seq": "36,49"
		}, {
			"uri": "http://dbpedia.org/resource/Ridley_Scott",
			"label": "ridley scott",
			"seq": "68,79"
		}]
	},
	{
		"id": "d6b6dd1b9b1f42b2a4339f0040398eca",
		"question": "What is the state whose largest city is Denver?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Denver>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "24,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Denver",
			"label": "denver",
			"seq": "40,45"
		}]
	},
	{
		"id": "5405afee486944e1976b7ba7911f045d",
		"question": "Give me some TV stations whose network's main language is American English?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/American_English> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/language",
			"label": "language",
			"seq": "46,53"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "network's",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionStation",
			"label": "stations",
			"seq": "16,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/American_English",
			"label": "american english",
			"seq": "58,73"
		}]
	},
	{
		"id": "d03cf8ab9ba54ead94c0ab2b0355b918",
		"question": "Where did the partner of Teriitaria II die?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Teriitaria_II> <http://dbpedia.org/property/spouse> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/spouse",
			"label": "partner",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Teriitaria_II",
			"label": "teriitaria",
			"seq": "25,34"
		}]
	},
	{
		"id": "e5fd26f8366941a1a8300ce006874f4c",
		"question": "Which work institue of andrew Schally belongs to WTUL ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Andrew_Schally> <http://dbpedia.org/property/workInstitutions> ?uri. <http://dbpedia.org/resource/WTUL> <http://dbpedia.org/property/owner> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/workInstitutions",
			"label": "institue",
			"seq": "11,18"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "work",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Andrew_Schally",
			"label": "schally andrew",
			"seq": "23,36"
		}, {
			"uri": "http://dbpedia.org/resource/WTUL",
			"label": "wtul",
			"seq": "49,52"
		}]
	},
	{
		"id": "106ea7f1234e4ae29451ff12ce6e4684",
		"question": "Who is the licensee of EXXV-TV ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/EXXV-TV> <http://dbpedia.org/property/licensee> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/licensee",
			"label": "licensee",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/EXXV-TV",
			"label": "exxv-tv",
			"seq": "23,29"
		}]
	},
	{
		"id": "c1514e50dd2f4538833f08a6bc8103c2",
		"question": "Through which states do the rivers flow which join in the republican river from the left?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Republican_River> <http://dbpedia.org/ontology/leftTributary> ?x . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leftTributary",
			"label": "left",
			"seq": "84,87"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "states",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Republican_River",
			"label": "republican river",
			"seq": "28,43"
		}]
	},
	{
		"id": "61cf658e0164453f858aee18ab264e25",
		"question": "In which language is All I need is Your Sweet lovin written ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/All_I_Need_Is_Your_Sweet_Lovin'> <http://dbpedia.org/property/language> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/language",
			"label": "language",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/All_I_Need_Is_Your_Sweet_Lovin'",
			"label": "sweet lovin your need",
			"seq": "27,47"
		}]
	},
	{
		"id": "28ad5ec354e644e4adfd4890503082b9",
		"question": "Under which common jurisdiction do Trinity School, Brentwood and Buckhurst Hill County High School fall?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri. <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/localAuthority",
			"label": "trinity",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/ontology/localAuthority",
			"label": "trinity",
			"seq": "35,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Trinity_School,_Brentwood",
			"label": "brentwood trinity school,",
			"seq": "35,59"
		}, {
			"uri": "http://dbpedia.org/resource/Buckhurst_Hill_County_High_School",
			"label": "buckhurst school county",
			"seq": "43,65"
		}]
	},
	{
		"id": "27b3911bc8e245c79e65ab3d86f02480",
		"question": "Who founded a company which served Mid Wales ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/regionServed> <http://dbpedia.org/resource/Mid_Wales> . ?x <http://dbpedia.org/ontology/foundedBy> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "served",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "founded",
			"seq": "4,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mid_Wales",
			"label": "wales mid",
			"seq": "35,43"
		}]
	},
	{
		"id": "b55cd5825f3f4a4a9dda3693609c3e4b",
		"question": "How many television shows have  Fox Broadcasting Company as their channel?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/channel",
			"label": "channel",
			"seq": "66,72"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fox_Broadcasting_Company",
			"label": "broadcasting company",
			"seq": "36,55"
		}]
	},
	{
		"id": "79277088dda94649b2348c07d0dd17e5",
		"question": "How many things are written in C++?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/C++>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "many",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/C++",
			"label": "c++",
			"seq": "31,33"
		}]
	},
	{
		"id": "4d5845bcd6044165bbcdfa12d79bd84d",
		"question": "How many artists play as Rickenbacker?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Rickenbacker>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/instrument",
			"label": "artists",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artists",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rickenbacker",
			"label": "rickenbacker",
			"seq": "25,36"
		}]
	},
	{
		"id": "5617f56ff171400ebf9650a950609f0c",
		"question": "Who were the opponents of employees of Henry Howard, the Northampton Earl?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/Henry_Howard,_1st_Earl_of_Northampton> . ?x <http://dbpedia.org/ontology/opponent> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "employees",
			"seq": "26,34"
		}, {
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponents",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Henry_Howard,_1st_Earl_of_Northampton",
			"label": "northampton howard, henry earl",
			"seq": "39,68"
		}]
	},
	{
		"id": "14fbed5378264537bb4a579854d59789",
		"question": "List the mammals whose taxonomy is Diprotodontia and phylum is Chordate?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Diprotodontia> . ?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/order",
			"label": "chordate",
			"seq": "63,70"
		}, {
			"uri": "http://dbpedia.org/ontology/phylum",
			"label": "phylum",
			"seq": "53,58"
		}, {
			"uri": "http://dbpedia.org/ontology/Mammal",
			"label": "mammals",
			"seq": "9,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Diprotodontia",
			"label": "diprotodontia",
			"seq": "35,47"
		}, {
			"uri": "http://dbpedia.org/resource/Chordate",
			"label": "chordate",
			"seq": "63,70"
		}]
	},
	{
		"id": "87d393b402be4c22859bc21ab59a82c4",
		"question": "List the junctions which lie on U.S. Route 59 in Texas and U.S. Route 59 ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/U.S._Route_59_in_Texas> <http://dbpedia.org/property/junction> ?uri. <http://dbpedia.org/resource/U.S._Route_59> <http://dbpedia.org/property/junction> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/junction",
			"label": "junctions",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/property/junction",
			"label": "junctions",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/U.S._Route_59_in_Texas",
			"label": "texas route u.s.",
			"seq": "32,47"
		}, {
			"uri": "http://dbpedia.org/resource/U.S._Route_59",
			"label": "route u.s. 59",
			"seq": "32,44"
		}]
	},
	{
		"id": "bb053b427bf8492cabece4ccf6a9a256",
		"question": "Name the river whose source region is North-Western Province, Zambia and source location is Ikelenge  District?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia> . ?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Ikelenge_District>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sourceRegion",
			"label": "source",
			"seq": "21,26"
		}, {
			"uri": "http://dbpedia.org/property/sourceLocation",
			"label": "location source",
			"seq": "21,35"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/North-Western_Province,_Zambia",
			"label": "north-western province, zambia",
			"seq": "38,67"
		}, {
			"uri": "http://dbpedia.org/resource/Ikelenge_District",
			"label": "ikelenge district",
			"seq": "92,108"
		}]
	},
	{
		"id": "6e9633d042bc4dc3abcab2f2841c1746",
		"question": "Who are some basketball players who played for Phoenix Suns?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Phoenix_Suns>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "are",
			"seq": "4,6"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballPlayer",
			"label": "basketball",
			"seq": "13,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Phoenix_Suns",
			"label": "phoenix suns",
			"seq": "47,58"
		}]
	},
	{
		"id": "b4b6cd2e49ad4a12b209a01e1eab720b",
		"question": "Which collaborator of Nice and Smooth wrote Same Song ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nice_&_Smooth> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Same_Song_(Digital_Underground_song)> <http://dbpedia.org/property/writer> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "and",
			"seq": "27,29"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "wrote",
			"seq": "38,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nice_&_Smooth",
			"label": "smooth nice",
			"seq": "22,32"
		}, {
			"uri": "http://dbpedia.org/resource/Same_Song_(Digital_Underground_song)",
			"label": "song same",
			"seq": "44,52"
		}]
	},
	{
		"id": "922da121de7d4c2b94f5704844a63b18",
		"question": "Who is the child of John Tyler, Sr.?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Tyler,_Sr.> <http://dbpedia.org/ontology/child> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "child",
			"seq": "11,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_Tyler,_Sr.",
			"label": "tyler, john sr.",
			"seq": "20,34"
		}]
	},
	{
		"id": "408ee042ce504f0d9e43f239bf62a596",
		"question": "What is the country with native language as Languages of Ethiopia?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Languages_of_Ethiopia>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/language",
			"label": "language",
			"seq": "32,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "12,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Languages_of_Ethiopia",
			"label": "languages ethiopia",
			"seq": "44,61"
		}]
	},
	{
		"id": "bc828e38946849059989fb94ae3eb760",
		"question": "The successor of Ulrich II, Count of East Frisia was born in what place?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ulrich_II,_Count_of_East_Frisia> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "4,12"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place",
			"seq": "66,70"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ulrich_II,_Count_of_East_Frisia",
			"label": "ulrich frisia count east ii,",
			"seq": "17,44"
		}]
	},
	{
		"id": "0dd98abb1d704acbaaaf373111ec2b6f",
		"question": "What company is the distributor of Bombay Sapphire?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bombay_Sapphire> <http://dbpedia.org/property/distributor> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributor",
			"seq": "20,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bombay_Sapphire",
			"label": "sapphire bombay",
			"seq": "35,49"
		}]
	},
	{
		"id": "a0c73428e66a4f2bb89939cc2149d2bf",
		"question": "How many awards have been given to screenwriters?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/occupation> <http://dbpedia.org/resource/Screenwriter> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/occupation",
			"label": "to",
			"seq": "32,33"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Screenwriter",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "3fabc75aa05d4a37873532407e1f9e53",
		"question": "Name the part of Liverpool city region >",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liverpool_City_Region> <http://dbpedia.org/ontology/part> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/part",
			"label": "part",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Liverpool_City_Region",
			"label": "liverpool region city",
			"seq": "17,37"
		}]
	},
	{
		"id": "068232e91e1c418898c1cecab28531cd",
		"question": "Which artists trained in San Francisco Art Institute?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/training> <http://dbpedia.org/resource/San_Francisco_Art_Institute>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/training",
			"label": "trained",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Artist",
			"label": "artists",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Francisco_Art_Institute",
			"label": "institute francisco",
			"seq": "29,47"
		}]
	},
	{
		"id": "db2a89ff91b04227888c9c20728914c9",
		"question": "To which county of New York city does the Tremount Avenue street belong?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tremont_Avenue> <http://dbpedia.org/property/counties> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/counties",
			"label": "county",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tremont_Avenue",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "092ac4c6d6c64b58b8891809b7dd67ff",
		"question": "What is the launch site of the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juno_I> <http://dbpedia.org/ontology/launchSite> ?uri. <http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launch site",
			"seq": "12,22"
		}, {
			"uri": "http://dbpedia.org/ontology/ground",
			"label": "ground",
			"seq": "57,62"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Juno_I",
			"label": "juno",
			"seq": "31,34"
		}, {
			"uri": "http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season",
			"label": "lauderdale strikers season fort",
			"seq": "72,102"
		}]
	},
	{
		"id": "0753a6cc55e24b9f8ae248cb0229faf0",
		"question": "What is the place of birth of the Michael Marder which is also the  place of death of the Tigran Petrosian",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Marder> <http://dbpedia.org/property/placeOfBirth> ?uri. <http://dbpedia.org/resource/Tigran_Petrosian> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "place",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Marder",
			"label": "michael marder",
			"seq": "34,47"
		}, {
			"uri": "http://dbpedia.org/resource/Tigran_Petrosian",
			"label": "petrosian tigran",
			"seq": "90,105"
		}]
	},
	{
		"id": "e3f73674fbdd41a38021d60204f7196f",
		"question": "Where is the tomb of son of Bruce Lee?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Bruce_Lee> . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "where",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/restingPlace",
			"label": "bruce",
			"seq": "28,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bruce_Lee",
			"label": "bruce lee",
			"seq": "28,36"
		}]
	},
	{
		"id": "9cb5f2b9db5b436c86a97a46a5c66290",
		"question": "What are the mascots of the teams participating in the Turkish Handball Super League?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/Turkish_Handball_Super_League> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/league",
			"label": "league",
			"seq": "78,83"
		}, {
			"uri": "http://dbpedia.org/property/mascot",
			"label": "mascots",
			"seq": "13,19"
		}, {
			"uri": "http://dbpedia.org/ontology/SportsTeam",
			"label": "teams",
			"seq": "28,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Turkish_Handball_Super_League",
			"label": "handball turkish league super",
			"seq": "55,83"
		}]
	},
	{
		"id": "5521a80bdcd04617a45aadea2164ffee",
		"question": "Give me a count of schools in Reading, Berkshire?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Reading,_Berkshire>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "count",
			"seq": "10,14"
		}, {
			"uri": "http://dbpedia.org/ontology/School",
			"label": "schools",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Reading,_Berkshire",
			"label": "berkshire reading,",
			"seq": "30,47"
		}]
	},
	{
		"id": "1b3644240f434186be027e3dc2df4afe",
		"question": "What team did Dan Daoust and Don Ashby play for?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dan_Daoust> <http://dbpedia.org/ontology/formerTeam> ?uri. <http://dbpedia.org/resource/Don_Ashby> <http://dbpedia.org/property/playedFor> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "team for",
			"seq": "5,12"
		}, {
			"uri": "http://dbpedia.org/property/playedFor",
			"label": "play for",
			"seq": "39,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dan_Daoust",
			"label": "daoust dan",
			"seq": "14,23"
		}, {
			"uri": "http://dbpedia.org/resource/Don_Ashby",
			"label": "ashby don",
			"seq": "29,37"
		}]
	},
	{
		"id": "cb46de89eece40c6a511ae4bb909b07f",
		"question": "Was the USS Tillamook built in Seattle?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/USS_Tillamook_(AT-16)> <http://dbpedia.org/property/shipBuilder> <http://dbpedia.org/resource/Seattle> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/shipBuilder",
			"label": "built",
			"seq": "22,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/USS_Tillamook_(AT-16)",
			"label": "tillamook",
			"seq": "12,20"
		}, {
			"uri": "http://dbpedia.org/resource/Seattle",
			"label": "seattle",
			"seq": "31,37"
		}]
	},
	{
		"id": "1c527306fea14763ad07d75de14f267f",
		"question": "Which university has a sports team member called Micheal Powell and also owns Syracuse University Press ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Powell_(lacrosse)> <http://dbpedia.org/ontology/team> ?uri. <http://dbpedia.org/resource/Syracuse_University_Press> <http://dbpedia.org/property/parent> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/team",
			"label": "team",
			"seq": "30,33"
		}, {
			"uri": "http://dbpedia.org/property/parent",
			"label": "press",
			"seq": "98,102"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Powell_(lacrosse)",
			"label": "powell",
			"seq": "57,62"
		}, {
			"uri": "http://dbpedia.org/resource/Syracuse_University_Press",
			"label": "university syracuse press",
			"seq": "6,30"
		}]
	},
	{
		"id": "b3189598edba497696316dbed48fd2fb",
		"question": "Which automobile platform provider of Chiva bus is also the parent company of the Ford Falcon Cobra ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri. <http://dbpedia.org/resource/Ford_Falcon_Cobra> <http://dbpedia.org/ontology/parentCompany> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/automobilePlatform",
			"label": "automobile platform",
			"seq": "6,24"
		}, {
			"uri": "http://dbpedia.org/ontology/parentCompany",
			"label": "company parent",
			"seq": "60,73"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chiva_bus",
			"label": "chiva bus",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/resource/Ford_Falcon_Cobra",
			"label": "falcon cobra ford",
			"seq": "82,98"
		}]
	},
	{
		"id": "8d5634ca304b423292db69a546b53974",
		"question": "Whihc successor of McDonnell Douglas was built bu Delta 3 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Delta_III> <http://dbpedia.org/ontology/manufacturer> ?uri. <http://dbpedia.org/resource/McDonnell_Douglas> <http://dbpedia.org/property/successor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "successor",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/property/successor",
			"label": "successor",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Delta_III",
			"label": "delta",
			"seq": "50,54"
		}, {
			"uri": "http://dbpedia.org/resource/McDonnell_Douglas",
			"label": "mcdonnell douglas",
			"seq": "19,35"
		}]
	},
	{
		"id": "7c78f74e4f404592838f82e9d563e6e0",
		"question": "List all the children of Barbara Bush?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barbara_Bush> <http://dbpedia.org/property/children> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "children",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Barbara_Bush",
			"label": "barbara bush",
			"seq": "25,36"
		}]
	},
	{
		"id": "6239f50c40b045fb92f0ad0b63792e7b",
		"question": "who is the husband of Rosie Huntington Whiteley?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rosie_Huntington-Whiteley> <http://dbpedia.org/ontology/partner> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/partner",
			"label": "the",
			"seq": "7,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rosie_Huntington-Whiteley",
			"label": "huntington whiteley rosie",
			"seq": "22,46"
		}]
	},
	{
		"id": "23a3176ce04642ab9202377c16bb86d2",
		"question": "What is the religious affiliation of the Neungin High School which is also the academic interest of Sylvain Lvi ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri. <http://dbpedia.org/resource/Sylvain_L\u00e9vi> <http://dbpedia.org/property/fields> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/religiousAffiliation",
			"label": "affiliation religious",
			"seq": "12,32"
		}, {
			"uri": "http://dbpedia.org/property/fields",
			"label": "is",
			"seq": "5,6"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Neungin_High_School",
			"label": "neungin school high",
			"seq": "41,59"
		}, {
			"uri": "http://dbpedia.org/resource/Sylvain_L\u00e9vi",
			"label": "sylvain",
			"seq": "100,106"
		}]
	},
	{
		"id": "d615e5224cae43fabb824a9522e63556",
		"question": "Which European sea has Oulu as one of the shore city ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Europe> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Oulu>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "european",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "city",
			"seq": "48,51"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "15,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Europe",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Oulu",
			"label": "oulu",
			"seq": "23,26"
		}]
	},
	{
		"id": "0fca46ab984148228bc912ac09c14cea",
		"question": "What is the official name of Arkansas wine ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arkansas_wine> <http://dbpedia.org/property/officialName> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/officialName",
			"label": "official name",
			"seq": "12,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arkansas_wine",
			"label": "arkansas wine",
			"seq": "29,41"
		}]
	},
	{
		"id": "fb6380523dad469aa76de43877543065",
		"question": "What are the houses of legislature in the political leader's seat of Medininagar?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Medininagar> <http://dbpedia.org/property/leaderTitle> ?x . ?x <http://dbpedia.org/property/houses> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Legislature>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderTitle",
			"label": "leader's",
			"seq": "52,59"
		}, {
			"uri": "http://dbpedia.org/property/houses",
			"label": "houses",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Legislature",
			"label": "legislature",
			"seq": "23,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Medininagar",
			"label": "medininagar",
			"seq": "69,79"
		}]
	},
	{
		"id": "da407b1a436f4844abc78ef45daebf4f",
		"question": "What is the alma mater of Julian Leow Beng Kim?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Julian_Leow_Beng_Kim> <http://dbpedia.org/property/almaMater> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Julian_Leow_Beng_Kim",
			"label": "julian leow beng kim",
			"seq": "26,45"
		}]
	},
	{
		"id": "8745414c54fd44fc805e024437bff491",
		"question": "What discipline was The Chess Monthly about ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Chess_Monthly> <http://dbpedia.org/property/discipline> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/discipline",
			"label": "discipline",
			"seq": "5,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Chess_Monthly",
			"label": "monthly chess the",
			"seq": "20,36"
		}]
	},
	{
		"id": "d90413f58c7e4ec4926d84d822483e59",
		"question": "In which province was Dick Redding born?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dick_Redding> <http://dbpedia.org/property/birthDate> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthDate",
			"label": "born",
			"seq": "35,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dick_Redding",
			"label": "redding dick",
			"seq": "22,33"
		}]
	},
	{
		"id": "527f030fe08c4739ae2be978d022c372",
		"question": "Which prospect team of Robin Kovacs is the draft team of Bob MacMillan ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bob_MacMillan> <http://dbpedia.org/property/draftTeam> ?uri. <http://dbpedia.org/resource/Robin_Kovacs> <http://dbpedia.org/property/prospectTeam> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/draftTeam",
			"label": "draft team",
			"seq": "15,24"
		}, {
			"uri": "http://dbpedia.org/property/prospectTeam",
			"label": "prospect team",
			"seq": "6,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bob_MacMillan",
			"label": "macmillan",
			"seq": "61,69"
		}, {
			"uri": "http://dbpedia.org/resource/Robin_Kovacs",
			"label": "kovacs robin",
			"seq": "23,34"
		}]
	},
	{
		"id": "eb14b1c3eb7d49fbb617c70a2c17156e",
		"question": "How many universities are in the National Collegiate Athletic Association?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/athletics> <http://dbpedia.org/resource/National_Collegiate_Athletic_Association>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/athletics",
			"label": "athletic",
			"seq": "53,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Collegiate_Athletic_Association",
			"label": "association collegiate national athletic",
			"seq": "33,72"
		}]
	},
	{
		"id": "8bacd9f637114aacb4f912ee3339497c",
		"question": "What are some cars related to the ones with a V8?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/engine> <http://dbpedia.org/resource/V8_engine> . ?x <http://dbpedia.org/property/related> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/engine",
			"label": "ones",
			"seq": "34,37"
		}, {
			"uri": "http://dbpedia.org/property/related",
			"label": "related",
			"seq": "19,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "some",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/V8_engine",
			"label": "v8",
			"seq": "46,47"
		}]
	},
	{
		"id": "211240c6dae54cc2a76f849270ff99e9",
		"question": "Where is the person from whose military rank is Airman first class?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Airman_first_class> . ?x <http://dbpedia.org/property/state> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryRank",
			"label": "military rank",
			"seq": "31,43"
		}, {
			"uri": "http://dbpedia.org/property/state",
			"label": "the",
			"seq": "9,11"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Airman_first_class",
			"label": "airman first class",
			"seq": "48,65"
		}]
	},
	{
		"id": "7ef60c109b4f45cb98d7a7b6edb63e86",
		"question": "List the total number of board members who share board with Creative commons ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Creative_Commons> . ?x <http://dbpedia.org/ontology/board> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/board",
			"label": "board",
			"seq": "25,29"
		}, {
			"uri": "http://dbpedia.org/ontology/board",
			"label": "board",
			"seq": "25,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Creative_Commons",
			"label": "creative commons",
			"seq": "60,75"
		}]
	},
	{
		"id": "3426ff612be940c48ddbf955846bbbfc",
		"question": "Is Fluidinfo written in PostgreSQL language?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Fluidinfo> <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/PostgreSQL> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/programmingLanguage",
			"label": "language",
			"seq": "35,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fluidinfo",
			"label": "fluidinfo",
			"seq": "3,11"
		}, {
			"uri": "http://dbpedia.org/resource/PostgreSQL",
			"label": "postgresql",
			"seq": "24,33"
		}]
	},
	{
		"id": "7e5cf8ddee13481fb0d168850d0ba814",
		"question": "Who currently operates the railway lines one of whose stockholder is Chicago, St Paul, Minneapolis and Omaha railway?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Chicago,_St._Paul,_Minneapolis_and_Omaha_Railway> . ?x <http://dbpedia.org/ontology/operatedBy> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayLine>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "one",
			"seq": "41,43"
		}, {
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operates",
			"seq": "14,21"
		}, {
			"uri": "http://dbpedia.org/ontology/RailwayLine",
			"label": "railway",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chicago,_St._Paul,_Minneapolis_and_Omaha_Railway",
			"label": "minneapolis chicago, railway",
			"seq": "27,54"
		}]
	},
	{
		"id": "bbf6d77abc1d4097b5073835a08375a0",
		"question": "In how many different people are alumini of the University of Oxford working?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> . ?x <http://dbpedia.org/ontology/field> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "alumini",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/ontology/field",
			"label": "people",
			"seq": "22,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Worcester_College,_Oxford",
			"label": "oxford",
			"seq": "62,67"
		}]
	},
	{
		"id": "22bc7e7fb2b44679a76b1872370adf4c",
		"question": "Which district of Fort Heath radar station is also the state of Joesph Story ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fort_Heath_radar_station> <http://dbpedia.org/property/district> ?uri. <http://dbpedia.org/resource/Joseph_Story> <http://dbpedia.org/property/state> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/district",
			"label": "district",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/property/state",
			"label": "state",
			"seq": "55,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fort_Heath_radar_station",
			"label": "station radar heath fort",
			"seq": "18,41"
		}, {
			"uri": "http://dbpedia.org/resource/Joseph_Story",
			"label": "story",
			"seq": "71,75"
		}]
	},
	{
		"id": "325df11498174809bd9488b134a0bf82",
		"question": "Who were the head of government agencies working in the German occupied Europe?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/jurisdiction> <http://dbpedia.org/resource/German-occupied_Europe> . ?x <http://dbpedia.org/ontology/leader> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GovernmentAgency>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/jurisdiction",
			"label": "europe",
			"seq": "72,77"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "head",
			"seq": "13,16"
		}, {
			"uri": "http://dbpedia.org/ontology/GovernmentAgency",
			"label": "government",
			"seq": "21,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/German-occupied_Europe",
			"label": "occupied german europe",
			"seq": "56,77"
		}]
	},
	{
		"id": "edd0fb4fe2274a5fb2e3de95d13d2066",
		"question": "How many ingedients are required to make the Ragout Fin?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ragout_fin> <http://dbpedia.org/ontology/ingredient> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ingredient",
			"label": "ingedients",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ragout_fin",
			"label": "ragout fin",
			"seq": "45,54"
		}]
	},
	{
		"id": "cd7f39c8d3324c20a0beff615cfa9063",
		"question": "Is Serbian Titieca a doctoral student of Werner Heisenberghttp://dbpedia.org/resource/Werner_Heisenberg",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Werner_Heisenberg> <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/\u0218erban_\u021ai\u021beica> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralStudent",
			"label": "doctoral student",
			"seq": "21,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Werner_Heisenberg",
			"label": "werner",
			"seq": "41,46"
		}, {
			"uri": "http://dbpedia.org/resource/\u0218erban_\u021ai\u021beica",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "54ca819c32f845f1830c057254adb0e4",
		"question": "What show has  judge as Randy Jackson sculptors as Simon Fuller?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/judges",
			"label": "judge",
			"seq": "15,19"
		}, {
			"uri": "http://dbpedia.org/property/creator",
			"label": "sculptors",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "5,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Randy_Jackson",
			"label": "jackson randy",
			"seq": "24,36"
		}, {
			"uri": "http://dbpedia.org/resource/Simon_Fuller",
			"label": "fuller simon",
			"seq": "51,62"
		}]
	},
	{
		"id": "1c9fa236fda340f4858626790e9ed794",
		"question": "What are the software which uses  platforms as ARM architecture?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/ARM_architecture>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "platforms",
			"seq": "34,42"
		}, {
			"uri": "http://dbpedia.org/ontology/Software",
			"label": "software",
			"seq": "13,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/ARM_architecture",
			"label": "architecture arm",
			"seq": "47,62"
		}]
	},
	{
		"id": "35de725b9a904932a4c7cad2d4f6d3dd",
		"question": "Where are the cooper mountain vineyards and Mt. bachelor ski area located?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cooper_Mountain_Vineyards> <http://dbpedia.org/ontology/location> ?uri. <http://dbpedia.org/resource/Mount_Bachelor_ski_area> <http://dbpedia.org/ontology/location> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "66,72"
		}, {
			"uri": "http://dbpedia.org/ontology/location",
			"label": "located",
			"seq": "66,72"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cooper_Mountain_Vineyards",
			"label": "vineyards mountain cooper",
			"seq": "14,38"
		}, {
			"uri": "http://dbpedia.org/resource/Mount_Bachelor_ski_area",
			"label": "bachelor",
			"seq": "48,55"
		}]
	},
	{
		"id": "db40ca055fe5457da9fb1e618ce07c22",
		"question": "Which developer of  the Spider-Man: Edge of Time is the  successor of PlayStation 2 ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spider-Man:_Edge_of_Time> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/PlayStation_2> <http://dbpedia.org/ontology/successor> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developer",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/successor",
			"label": "successor",
			"seq": "57,65"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Spider-Man:_Edge_of_Time",
			"label": "spider-man:",
			"seq": "24,34"
		}, {
			"uri": "http://dbpedia.org/resource/PlayStation_2",
			"label": "playstation",
			"seq": "70,80"
		}]
	},
	{
		"id": "be8e6c435f1e4b00978abbd40786446f",
		"question": "From which countries are the people from who are an academic authority of the Western pygmy blue species?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Western_pygmy_blue> <http://dbpedia.org/ontology/binomialAuthority> ?x . ?x <http://dbpedia.org/ontology/citizenship> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/binomialAuthority",
			"label": "authority",
			"seq": "61,69"
		}, {
			"uri": "http://dbpedia.org/ontology/citizenship",
			"label": "species",
			"seq": "97,103"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "29,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Western_pygmy_blue",
			"label": "western pygmy blue",
			"seq": "78,95"
		}]
	},
	{
		"id": "055b04c076074890acb3ea2db8886990",
		"question": "Is Henry Knox a commander of Continental Artillery Regiment?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Continental_Artillery_Regiment> <http://dbpedia.org/ontology/notableCommander> <http://dbpedia.org/resource/Henry_Knox> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableCommander",
			"label": "commander",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Continental_Artillery_Regiment",
			"label": "continental artillery regiment",
			"seq": "29,58"
		}, {
			"uri": "http://dbpedia.org/resource/Henry_Knox",
			"label": "henry knox",
			"seq": "3,12"
		}]
	},
	{
		"id": "37ea4965d2b64433a69300a0f28f5c84",
		"question": "Name the fictional character painted by Josh Friedman and portrayed in Terminator Genisys ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Josh_Friedman> . ?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_Genisys>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "terminator",
			"seq": "71,80"
		}, {
			"uri": "http://dbpedia.org/ontology/portrayer",
			"label": "portrayed",
			"seq": "58,66"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "9,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Josh_Friedman",
			"label": "friedman josh",
			"seq": "40,52"
		}, {
			"uri": "http://dbpedia.org/resource/Terminator_Genisys",
			"label": "terminator genisys",
			"seq": "71,88"
		}]
	},
	{
		"id": "0954f05704294cdc948715c7348303d7",
		"question": "What is the total number of religions that politicians have followed?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Politician> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/profession",
			"label": "religions",
			"seq": "28,36"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions",
			"seq": "28,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Politician",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "1b05eee4a4914768b1277460023765c7",
		"question": "What are the video games composed by Hirokazu Tanaka?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/composer> <http://dbpedia.org/resource/Hirokazu_Tanaka>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/composer",
			"label": "composed",
			"seq": "25,32"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "video",
			"seq": "13,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hirokazu_Tanaka",
			"label": "hirokazu tanaka",
			"seq": "37,51"
		}]
	},
	{
		"id": "85bb180bf8e34202b4aa22716ce5071a",
		"question": "Brian Moriarty designed video games written by whom?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/designer> <http://dbpedia.org/resource/Brian_Moriarty> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designer",
			"label": "designed",
			"seq": "15,22"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "written",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "video",
			"seq": "24,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brian_Moriarty",
			"label": "moriarty brian",
			"seq": "0,13"
		}]
	},
	{
		"id": "8bd39f68e84f4329a53977496d9dcc69",
		"question": "Which workplace of the Michael M. Sears is also the  governing body of the Burro Flats Painted Cave?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_M._Sears> <http://dbpedia.org/ontology/employer> ?uri. <http://dbpedia.org/resource/Burro_Flats_Painted_Cave> <http://dbpedia.org/ontology/governingBody> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/employer",
			"label": "workplace",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/ontology/governingBody",
			"label": "governing body",
			"seq": "53,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_M._Sears",
			"label": "michael sears",
			"seq": "23,35"
		}, {
			"uri": "http://dbpedia.org/resource/Burro_Flats_Painted_Cave",
			"label": "painted flats burro",
			"seq": "75,93"
		}]
	},
	{
		"id": "4bb6b234a89a4be49aac5792626314a1",
		"question": "For how many different presidents have people in the Continental Army served?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Continental_Army> . ?x <http://dbpedia.org/property/president> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/branch",
			"label": "many",
			"seq": "8,11"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "presidents",
			"seq": "23,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Continental_Army",
			"label": "continental army",
			"seq": "53,68"
		}]
	},
	{
		"id": "da38af790e6e4c63a38c8f834d67ca62",
		"question": "What is the religion of the president who won the Mongolian legislative election, 2004 ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Mongolian_legislative_election,_2004> <http://dbpedia.org/property/leader> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leader",
			"label": "legislative",
			"seq": "60,70"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mongolian_legislative_election,_2004",
			"label": "legislative mongolian election,",
			"seq": "50,80"
		}]
	},
	{
		"id": "d7d45064bde94687972a63ec05a2d4a6",
		"question": "Who is the executive producer of Into the Dalek ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Into_the_Dalek> <http://dbpedia.org/property/executiveProducer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/executiveProducer",
			"label": "executive producer",
			"seq": "11,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Into_the_Dalek",
			"label": "dalek into the",
			"seq": "7,20"
		}]
	},
	{
		"id": "fd11cddf34d54d3c87f3d536773a9c09",
		"question": "Was Citizen Kane cinematographed by Gregg Toland?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Citizen_Kane> <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/Gregg_Toland> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cinematography",
			"label": "cinematographed",
			"seq": "17,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Citizen_Kane",
			"label": "citizen kane",
			"seq": "4,15"
		}, {
			"uri": "http://dbpedia.org/resource/Gregg_Toland",
			"label": "toland gregg",
			"seq": "36,47"
		}]
	},
	{
		"id": "7d0fb5e551594d689aef4adfbadcb48a",
		"question": "What is the prize awarded to Bruce Beutler ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bruce_Beutler> <http://dbpedia.org/ontology/award> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awarded",
			"seq": "18,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bruce_Beutler",
			"label": "beutler bruce",
			"seq": "29,41"
		}]
	},
	{
		"id": "ba66549d7ede4f90ad8fa7a436face6c",
		"question": "Which leader of Trump Entertainment Resorts is a relative of Maryanne Barry?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maryanne_Trump_Barry> <http://dbpedia.org/ontology/relation> ?uri. <http://dbpedia.org/resource/Trump_Entertainment_Resorts> <http://dbpedia.org/ontology/keyPerson> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relative",
			"seq": "49,56"
		}, {
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "leader",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maryanne_Trump_Barry",
			"label": "maryanne trump barry",
			"seq": "16,35"
		}, {
			"uri": "http://dbpedia.org/resource/Trump_Entertainment_Resorts",
			"label": "entertainment resorts trump",
			"seq": "16,42"
		}]
	},
	{
		"id": "af0335e9c71440b287a6a62d2211645c",
		"question": "From which party is the politician who was selected  in Barasat constituency?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Barasat_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/ontology/party> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "64,75"
		}, {
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "11,15"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "which",
			"seq": "5,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Barasat_(Lok_Sabha_constituency)",
			"label": "constituency barasat",
			"seq": "56,75"
		}]
	},
	{
		"id": "edd76a1bcc4943bd98a488f2a226464f",
		"question": "Which writer of Alan Freeman Days is also the writer of Come On over ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alan_Freeman_Days> <http://dbpedia.org/ontology/writer> ?uri. <http://dbpedia.org/resource/Come_On_Over_(Bee_Gees_song)> <http://dbpedia.org/property/writer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "writer",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alan_Freeman_Days",
			"label": "freeman days alan",
			"seq": "16,32"
		}, {
			"uri": "http://dbpedia.org/resource/Come_On_Over_(Bee_Gees_song)",
			"label": "over come",
			"seq": "56,64"
		}]
	},
	{
		"id": "70c322e322db4335be2a68becb37f2fc",
		"question": "What is the religion of character of Janice Soprano from The Soprano television show?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Janice_Soprano> <http://dbpedia.org/ontology/religion> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Janice_Soprano",
			"label": "soprano janice",
			"seq": "37,50"
		}]
	},
	{
		"id": "168ccd9fd66449a2a3587324aa89e190",
		"question": "Was John muir one of the first to ascend a mountain on Mt hoffmann?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "first",
			"seq": "25,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mount_Hoffmann",
			"label": "hoffmann",
			"seq": "58,65"
		}, {
			"uri": "http://dbpedia.org/resource/John_Muir",
			"label": "muir john",
			"seq": "4,12"
		}]
	},
	{
		"id": "fab10ec7feeb4e3790ee4563b268c058",
		"question": "Which coach of England national under 21 footbal team is also the coach of Aston Villa F.C season ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/England_national_under-21_football_team> <http://dbpedia.org/property/coach> ?uri. <http://dbpedia.org/resource/2000\u201301_Aston_Villa_F.C._season> <http://dbpedia.org/property/name> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/coach",
			"label": "coach",
			"seq": "6,10"
		}, {
			"uri": "http://dbpedia.org/property/name",
			"label": "team",
			"seq": "49,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/England_national_under-21_football_team",
			"label": "national footbal england under team",
			"seq": "15,49"
		}, {
			"uri": "http://dbpedia.org/resource/2000\u201301_Aston_Villa_F.C._season",
			"label": "season villa aston",
			"seq": "75,92"
		}]
	},
	{
		"id": "9af1387628eb41aaaa7bfc96527b7dea",
		"question": "Name some comic characters created by Bruce Timm?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Bruce_Timm>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/creator",
			"label": "created",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bruce_Timm",
			"label": "bruce timm",
			"seq": "38,47"
		}]
	},
	{
		"id": "00a4428f08104601b9070ce9d2809034",
		"question": "Does AMC Gremlin have the Volkswagen engine?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/AMC_Gremlin> <http://dbpedia.org/property/engine> <http://dbpedia.org/resource/Volkswagen> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/engine",
			"label": "engine",
			"seq": "37,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/AMC_Gremlin",
			"label": "gremlin amc",
			"seq": "5,15"
		}, {
			"uri": "http://dbpedia.org/resource/Volkswagen",
			"label": "volkswagen",
			"seq": "26,35"
		}]
	},
	{
		"id": "736ca71b65cb49909c3190a1deaa4d69",
		"question": "Which appliance has cpu from Freescale Semiconductor and Marvell Technology Group?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Freescale_Semiconductor> . ?uri <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Marvell_Technology_Group> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/cpu",
			"label": "cpu",
			"seq": "20,22"
		}, {
			"uri": "http://dbpedia.org/ontology/cpu",
			"label": "cpu",
			"seq": "20,22"
		}, {
			"uri": "http://dbpedia.org/ontology/InformationAppliance",
			"label": "appliance",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Freescale_Semiconductor",
			"label": "semiconductor freescale",
			"seq": "29,51"
		}, {
			"uri": "http://dbpedia.org/resource/Marvell_Technology_Group",
			"label": "technology marvell group",
			"seq": "57,80"
		}]
	},
	{
		"id": "f579975baffd4d30bae921db2f6a22a3",
		"question": "Who all have appointed governess born in Magnolia Plantation gardens?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Magnolia_Plantation_and_Gardens_(Charleston,_South_Carolina)> . ?x <http://dbpedia.org/property/appointer> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "have",
			"seq": "8,11"
		}, {
			"uri": "http://dbpedia.org/property/appointer",
			"label": "appointed",
			"seq": "13,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Magnolia_Plantation_and_Gardens_(Charleston,_South_Carolina)",
			"label": "plantation magnolia gardens",
			"seq": "41,67"
		}]
	},
	{
		"id": "048f33e69989456e87cecd1566322fe2",
		"question": "In how many countries are people born who play cricket?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Cricket> . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "in",
			"seq": "0,1"
		}, {
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "born",
			"seq": "33,36"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "countries",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cricket",
			"label": "cricket",
			"seq": "47,53"
		}]
	},
	{
		"id": "6e87da5cf6f7420ea41d70b56af0a73a",
		"question": "Is Judy Garland a character of End of the Rainbow?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/End_of_the_Rainbow> <http://dbpedia.org/property/characters> <http://dbpedia.org/resource/Judy_Garland> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/characters",
			"label": "character",
			"seq": "18,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/End_of_the_Rainbow",
			"label": "rainbow the end",
			"seq": "31,45"
		}, {
			"uri": "http://dbpedia.org/resource/Judy_Garland",
			"label": "garland judy",
			"seq": "3,14"
		}]
	},
	{
		"id": "d4566c91a3a1479e8ed3152f7892af27",
		"question": "Who has authored books published by the Perkins school for the Blind?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Perkins_School_for_the_Blind> . ?x <http://dbpedia.org/ontology/author> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/publisher",
			"label": "published",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "authored",
			"seq": "8,15"
		}, {
			"uri": "http://dbpedia.org/ontology/WrittenWork",
			"label": "perkins",
			"seq": "40,46"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Perkins_School_for_the_Blind",
			"label": "perkins school blind",
			"seq": "40,59"
		}]
	},
	{
		"id": "a705fea63f8f4de8ba925717adbd4594",
		"question": "Which constructor's team won the 1967 Mexican Grand Prix ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstTeam",
			"label": "team",
			"seq": "20,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1967_Mexican_Grand_Prix",
			"label": "mexican grand prix 1967",
			"seq": "33,55"
		}]
	},
	{
		"id": "3aba37a171704d5ebb0b4ae966a6d176",
		"question": "Give me the name of the organization hqed at  Chaeng Watthana Govt Complex?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Chaeng_Watthana_Government_Complex> . ?x <http://dbpedia.org/property/agencyName> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/headquarter",
			"label": "hqed",
			"seq": "37,40"
		}, {
			"uri": "http://dbpedia.org/property/agencyName",
			"label": "name",
			"seq": "12,15"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organization",
			"seq": "24,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chaeng_Watthana_Government_Complex",
			"label": "watthana complex chaeng",
			"seq": "46,68"
		}]
	},
	{
		"id": "91ccac916105446b8d75a09eee63c100",
		"question": "Which footballers did their high school in west Sacramento california? ",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/West_Sacramento,_California>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/highSchool",
			"label": "school high",
			"seq": "28,38"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballPlayer",
			"label": "footballers",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/West_Sacramento,_California",
			"label": "sacramento",
			"seq": "48,57"
		}]
	},
	{
		"id": "4e3ab34be94d4669b8e12316056ff405",
		"question": "What is the state of origin of the president whose alma mater is Hellenic Naval Academy ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Hellenic_Naval_Academy> . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "51,60"
		}, {
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "origin state",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/President",
			"label": "president",
			"seq": "35,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hellenic_Naval_Academy",
			"label": "hellenic academy naval",
			"seq": "65,86"
		}]
	},
	{
		"id": "b1b8eee4fef548d282895877658d0862",
		"question": "Which company created BASIC and Language Integrated Query ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Microsoft_BASIC> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designer",
			"label": "integrated",
			"seq": "41,50"
		}, {
			"uri": "http://dbpedia.org/ontology/designer",
			"label": "integrated",
			"seq": "41,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_BASIC",
			"label": "basic",
			"seq": "22,26"
		}, {
			"uri": "http://dbpedia.org/resource/Language_Integrated_Query",
			"label": "integrated language query",
			"seq": "32,56"
		}]
	},
	{
		"id": "2808134095db47bfaa55a5b9ae17a35e",
		"question": "Who has recorded their singles in London?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/London> . ?x <http://dbpedia.org/ontology/writer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordedIn",
			"label": "recorded in",
			"seq": "8,18"
		}, {
			"uri": "http://dbpedia.org/ontology/writer",
			"label": "their",
			"seq": "17,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Single",
			"label": "singles",
			"seq": "23,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/London",
			"label": "london",
			"seq": "34,39"
		}]
	},
	{
		"id": "cd9216dbcecb43639fc1acb8f8f6e299",
		"question": "Among which basket ball team having arena as The Palace of Auburn hills has president as Stan Van Gundy ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/arena> <http://dbpedia.org/resource/The_Palace_of_Auburn_Hills> . ?uri <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Stan_Van_Gundy>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballTeam>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/arena",
			"label": "arena",
			"seq": "36,40"
		}, {
			"uri": "http://dbpedia.org/property/president",
			"label": "president",
			"seq": "76,84"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballTeam",
			"label": "basket team ball",
			"seq": "12,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Palace_of_Auburn_Hills",
			"label": "palace auburn hills the",
			"seq": "45,67"
		}, {
			"uri": "http://dbpedia.org/resource/Stan_Van_Gundy",
			"label": "gundy stan",
			"seq": "89,98"
		}]
	},
	{
		"id": "249281ef2b90405aba4523fe74c3f855",
		"question": "What awards have been given to the writers of Wallace and Gromit?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/notableworks> <http://dbpedia.org/resource/Wallace_and_Gromit> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "awards",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writers",
			"seq": "35,41"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wallace_and_Gromit",
			"label": "wallace gromit",
			"seq": "46,59"
		}]
	},
	{
		"id": "5fa75359b2f34008a02d32e4d86ae9f4",
		"question": "How many companies have built concrete bridges?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/material> <http://dbpedia.org/resource/Concrete> . ?x <http://dbpedia.org/ontology/builder> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/material",
			"label": "companies",
			"seq": "9,17"
		}, {
			"uri": "http://dbpedia.org/ontology/builder",
			"label": "built",
			"seq": "24,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Concrete",
			"label": "concrete",
			"seq": "30,37"
		}]
	},
	{
		"id": "a51285af64f54bbc8cc0e2548ad0b92f",
		"question": "What is the alma mater of Alvin Bell and Charles Plosser?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alvin_Bell> <http://dbpedia.org/ontology/college> ?uri. <http://dbpedia.org/resource/Charles_Plosser> <http://dbpedia.org/property/almaMater> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/college",
			"label": "charles",
			"seq": "41,47"
		}, {
			"uri": "http://dbpedia.org/property/almaMater",
			"label": "mater alma",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alvin_Bell",
			"label": "alvin bell",
			"seq": "26,35"
		}, {
			"uri": "http://dbpedia.org/resource/Charles_Plosser",
			"label": "plosser charles",
			"seq": "41,55"
		}]
	},
	{
		"id": "8679debda0a14d0a87042b3eb712b95b",
		"question": "How many producers have casted Michael Jackson?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Michael_Jackson> . ?x <http://dbpedia.org/property/producer> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "many",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/property/producer",
			"label": "producers",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michael_Jackson",
			"label": "michael jackson",
			"seq": "31,45"
		}]
	},
	{
		"id": "34cf6c9abf5c40c8a73553a1ea992f28",
		"question": "Who all have created new kinds of cookies?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Cookie> . ?x <http://dbpedia.org/property/creator> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/type",
			"label": "new",
			"seq": "21,23"
		}, {
			"uri": "http://dbpedia.org/property/creator",
			"label": "created",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cookie",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "a939d5ed61ef4060a81ee31509198135",
		"question": "What awards were given to the screenplayer of The Motorcycle Diaries?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/The_Motorcycle_Diaries_(film)> <http://dbpedia.org/property/screenplay> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/screenplay",
			"label": "screenplayer",
			"seq": "30,41"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Motorcycle_Diaries_(film)",
			"label": "motorcycle diaries the",
			"seq": "26,47"
		}]
	},
	{
		"id": "c00fa42c4aa643d4aad94464399b60ea",
		"question": "Name the fictional character who was in Terminator and portrayer is Terminator 2: Judgment Day?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/Terminator_(franchise)> . ?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_2:_Judgment_Day>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/series",
			"label": "is",
			"seq": "65,66"
		}, {
			"uri": "http://dbpedia.org/ontology/portrayer",
			"label": "portrayer",
			"seq": "55,63"
		}, {
			"uri": "http://dbpedia.org/ontology/FictionalCharacter",
			"label": "fictional character",
			"seq": "9,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Terminator_(franchise)",
			"label": "terminator",
			"seq": "40,49"
		}, {
			"uri": "http://dbpedia.org/resource/Terminator_2:_Judgment_Day",
			"label": "terminator judgment",
			"seq": "40,58"
		}]
	},
	{
		"id": "8a1d6eb70486401e9b03768061fb6933",
		"question": "Whose mayors are affiliated with Christen-Democratisch en Vlaams?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/affiliation> <http://dbpedia.org/resource/Christen-Democratisch_en_Vlaams> . ?uri <http://dbpedia.org/ontology/leaderName> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/affiliation",
			"label": "affiliated",
			"seq": "17,26"
		}, {
			"uri": "http://dbpedia.org/ontology/leaderName",
			"label": "vlaams",
			"seq": "58,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Christen-Democratisch_en_Vlaams",
			"label": "christen-democratisch vlaams",
			"seq": "33,60"
		}]
	},
	{
		"id": "98d2968030a145948b4b54314cb8aa7c",
		"question": "Where was Juno I launched from ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juno_I> <http://dbpedia.org/ontology/launchSite> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/launchSite",
			"label": "launched",
			"seq": "17,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Juno_I",
			"label": "juno",
			"seq": "10,13"
		}]
	},
	{
		"id": "f4f5ee1369484c24bff925aa0c0f67c5",
		"question": "What company is the one which wrote the google web toolkit and PlayN?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri. <http://dbpedia.org/resource/PlayN> <http://dbpedia.org/ontology/author> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "the",
			"seq": "16,18"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "the",
			"seq": "16,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Google_Web_Toolkit",
			"label": "toolkit google web",
			"seq": "40,57"
		}, {
			"uri": "http://dbpedia.org/resource/PlayN",
			"label": "playn",
			"seq": "63,67"
		}]
	},
	{
		"id": "888a270512ce4866be137aa13b94cb0a",
		"question": "How many TV shows have executive producer as Steven Moffat ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Steven_Moffat>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "23,40"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steven_Moffat",
			"label": "steven moffat",
			"seq": "45,57"
		}]
	},
	{
		"id": "37dd8f24e04d4c9693e47be13aca643a",
		"question": "BBC Two is the sister channel of networks having which shows?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/BBC_Two> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterNames",
			"label": "sister",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/ontology/network",
			"label": "networks",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "shows",
			"seq": "55,59"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC_Two",
			"label": "two bbc",
			"seq": "0,6"
		}]
	},
	{
		"id": "e479ae7b3a9c4819b494827f01d6bc9a",
		"question": "Who fought in the battle at Tupelo Mississippi?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Tupelo,_Mississippi> . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/place",
			"label": "tupelo",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/property/combatant",
			"label": "battle",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "mississippi",
			"seq": "35,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tupelo,_Mississippi",
			"label": "mississippi tupelo",
			"seq": "28,45"
		}]
	},
	{
		"id": "3ec897b53af44595bc48dcd851a91c4f",
		"question": "What were the awards won by the founder of Walt Disney Records ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Walt_Disney_Records> <http://dbpedia.org/ontology/foundedBy> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundedBy",
			"label": "founder",
			"seq": "32,38"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Walt_Disney_Records",
			"label": "records disney",
			"seq": "48,61"
		}]
	},
	{
		"id": "7306c480b5f0480e85dea19fd979e9c2",
		"question": "Which river goes through cohoes, NY",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cohoes,_New_York> <http://dbpedia.org/ontology/river> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/river",
			"label": "river",
			"seq": "6,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cohoes,_New_York",
			"label": "cohoes,",
			"seq": "25,31"
		}]
	},
	{
		"id": "f6bfc01b9f434dde973e7e2d6f7df70e",
		"question": "Is the Columbia University chaired by William Campbell?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Columbia_University> <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/William_Campbell_(business_executive)> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/chairman",
			"label": "chaired",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Columbia_University",
			"label": "university columbia",
			"seq": "7,25"
		}, {
			"uri": "http://dbpedia.org/resource/William_Campbell_(business_executive)",
			"label": "campbell william",
			"seq": "38,53"
		}]
	},
	{
		"id": "dc71852033ea4aa78c0988a5a8353b08",
		"question": "What is the purpose of some Maharashtran organizations?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Maharashtra> . ?x <http://dbpedia.org/property/purpose> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/headquarter",
			"label": "maharashtran",
			"seq": "28,39"
		}, {
			"uri": "http://dbpedia.org/property/purpose",
			"label": "purpose",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organizations",
			"seq": "41,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Maharashtra",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e7b65b4aecc7437f80afe8be2d2a53eb",
		"question": "which movies have been published by Cinema International Corporation?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "international",
			"seq": "43,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cinema_International_Corporation",
			"label": "international corporation cinema",
			"seq": "36,67"
		}]
	},
	{
		"id": "5737744543d348468c3951fddb9f25e1",
		"question": "Where the children of Ashot Grashi employed at?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ashot_Grashi> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "at",
			"seq": "44,45"
		}, {
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "children",
			"seq": "10,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ashot_Grashi",
			"label": "grashi ashot",
			"seq": "22,33"
		}]
	},
	{
		"id": "91316e105d274bdbae3927a547e2020a",
		"question": "Who is renowned for Ae Fond Kiss and poem of Halloween ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/notableworks> <http://dbpedia.org/resource/Ae_Fond_Kiss> . ?uri <http://dbpedia.org/property/notableworks> <http://dbpedia.org/resource/Halloween_(poem)> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "renowned",
			"seq": "7,14"
		}, {
			"uri": "http://dbpedia.org/property/notableworks",
			"label": "renowned",
			"seq": "7,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ae_Fond_Kiss",
			"label": "kiss fond",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/resource/Halloween_(poem)",
			"label": "halloween poem",
			"seq": "37,50"
		}]
	},
	{
		"id": "e2cc5e87ec094843ad79d8b454a8eab6",
		"question": "In what wars was Steve Buyer involved?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steve_Buyer> <http://dbpedia.org/ontology/battle> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/battle",
			"label": "what",
			"seq": "3,6"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steve_Buyer",
			"label": "steve buyer",
			"seq": "17,27"
		}]
	},
	{
		"id": "0fc6655da5464bec8b5a6df22edcaa86",
		"question": "Which  science fiction show has Steven Moffat as executive producer ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Steven_Moffat> . ?uri <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Science_fiction>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/executiveProducer",
			"label": "executive producer",
			"seq": "49,66"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "science",
			"seq": "7,13"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "23,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Steven_Moffat",
			"label": "steven moffat",
			"seq": "32,44"
		}, {
			"uri": "http://dbpedia.org/resource/Science_fiction",
			"label": "science fiction",
			"seq": "7,21"
		}]
	},
	{
		"id": "14efdca3006e4eb28b0abc03a9ab8fb8",
		"question": "Was Michael Schumacher the Pole driver of 1994 Spanish Grand Prix?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> <http://dbpedia.org/resource/Michael_Schumacher> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/poleDriver",
			"label": "driver pole",
			"seq": "27,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1994_Spanish_Grand_Prix",
			"label": "spanish grand prix 1994",
			"seq": "42,64"
		}, {
			"uri": "http://dbpedia.org/resource/Michael_Schumacher",
			"label": "schumacher michael",
			"seq": "4,21"
		}]
	},
	{
		"id": "a17ff3e0133f4d449e03ef1930da70d9",
		"question": "What is the style of architecture of Shaheed Minar, Kolkata ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Shaheed_Minar,_Kolkata> <http://dbpedia.org/ontology/architecturalStyle> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architecturalStyle",
			"label": "architecture",
			"seq": "21,32"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Shaheed_Minar,_Kolkata",
			"label": "shaheed kolkata minar,",
			"seq": "37,58"
		}]
	},
	{
		"id": "1d60b0de9bd444dabe4c059c4f7fde5f",
		"question": "What cars were built upon the cars which were assembled in Canada?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Canada> . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/assembly",
			"label": "assembled",
			"seq": "46,54"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "were",
			"seq": "10,13"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "assembled",
			"seq": "46,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canada",
			"label": "canada",
			"seq": "59,64"
		}]
	},
	{
		"id": "f705b781b41d468f94a33678d84952e3",
		"question": "Count the number of characters in Batman Live?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
		"sparql_id": "402",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/characters",
			"label": "characters",
			"seq": "20,29"
		}, {
			"uri": "http://dbpedia.org/ontology/ComicsCharacter",
			"label": "characters",
			"seq": "20,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Batman_Live",
			"label": "batman live",
			"seq": "34,44"
		}]
	},
	{
		"id": "c9bf804617e04cd194d2f8fcdad0d49c",
		"question": "Is San Salvador Island a part of the Bahamas?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/San_Salvador_Island> <http://dbpedia.org/ontology/archipelago> <http://dbpedia.org/resource/The_Bahamas> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/archipelago",
			"label": "salvador",
			"seq": "7,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/San_Salvador_Island",
			"label": "salvador island",
			"seq": "7,21"
		}, {
			"uri": "http://dbpedia.org/resource/The_Bahamas",
			"label": "bahamas the",
			"seq": "33,43"
		}]
	},
	{
		"id": "1e9caa7262cd4fd1a51cf31d4ba704e9",
		"question": "Which company's division is Audi India? Correct Question",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/divisions> <http://dbpedia.org/resource/Audi_India> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/divisions",
			"label": "division",
			"seq": "16,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Audi_India",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "89d93ab9db184098bea7201d4e1f85c0",
		"question": "Which  NASA astronaut was on mission Gemini 8?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/NASA> . ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Gemini_8>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/type",
			"label": "gemini",
			"seq": "37,42"
		}, {
			"uri": "http://dbpedia.org/property/mission",
			"label": "mission",
			"seq": "29,35"
		}, {
			"uri": "http://dbpedia.org/ontology/Astronaut",
			"label": "astronaut",
			"seq": "12,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/NASA",
			"label": "nasa",
			"seq": "7,10"
		}, {
			"uri": "http://dbpedia.org/resource/Gemini_8",
			"label": "gemini",
			"seq": "37,42"
		}]
	},
	{
		"id": "a045ba882fa04930b139d902ee4b03e2",
		"question": "South Side elevated railroad and twin cities 400 are operated by which city?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Twin_Cities_400> <http://dbpedia.org/ontology/operatedBy> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operated",
			"seq": "53,60"
		}, {
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operated",
			"seq": "53,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Side_Elevated_Railroad",
			"label": "railroad elevated",
			"seq": "11,27"
		}, {
			"uri": "http://dbpedia.org/resource/Twin_Cities_400",
			"label": "cities twin 400",
			"seq": "33,47"
		}]
	},
	{
		"id": "4b6f22e87e69458297229de03060b7c2",
		"question": "Is Michelle D. Johnson the superintendent of United States Air Force Academy?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/United_States_Air_Force_Academy> <http://dbpedia.org/property/superintendent> <http://dbpedia.org/resource/Michelle_D._Johnson> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/superintendent",
			"label": "superintendent",
			"seq": "27,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States_Air_Force_Academy",
			"label": "academy united states force",
			"seq": "45,71"
		}, {
			"uri": "http://dbpedia.org/resource/Michelle_D._Johnson",
			"label": "michelle johnson",
			"seq": "3,18"
		}]
	},
	{
		"id": "700c843d2d27481ab61b3a05fdad96e8",
		"question": "Which famous political figure appointed william cushing, and also founded Pittsburgh>",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pittsburgh> <http://dbpedia.org/ontology/founder> ?uri. <http://dbpedia.org/resource/William_Cushing> <http://dbpedia.org/ontology/appointer> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/founder",
			"label": "founded",
			"seq": "66,72"
		}, {
			"uri": "http://dbpedia.org/ontology/appointer",
			"label": "appointed",
			"seq": "30,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pittsburgh",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/William_Cushing",
			"label": "william",
			"seq": "40,46"
		}]
	},
	{
		"id": "6ad08f71a43048129e0b566148bb3665",
		"question": "Did Stanlee write the Tales of Suspense?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Tales_of_Suspense> <http://dbpedia.org/property/writers> <http://dbpedia.org/resource/Stan_Lee> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writers",
			"label": "write",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tales_of_Suspense",
			"label": "suspense tales",
			"seq": "22,35"
		}, {
			"uri": "http://dbpedia.org/resource/Stan_Lee",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "37ebf5a678ed42c3b38fc81a00ff30ff",
		"question": "Who is the head coach of the teams in Middlesbrough FC?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Middlesbrough_F.C.> . ?x <http://dbpedia.org/ontology/manager> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/club",
			"label": "fc",
			"seq": "52,53"
		}, {
			"uri": "http://dbpedia.org/ontology/manager",
			"label": "middlesbrough",
			"seq": "38,50"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Middlesbrough_F.C.",
			"label": "middlesbrough",
			"seq": "38,50"
		}]
	},
	{
		"id": "70bbdbe70a4046eeb6d90a238c8fd233",
		"question": "Which basketball players have played in the league of National Basketball Association?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/National_Basketball_Association>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/league",
			"label": "league",
			"seq": "44,49"
		}, {
			"uri": "http://dbpedia.org/ontology/BasketballPlayer",
			"label": "basketball",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/National_Basketball_Association",
			"label": "association basketball national",
			"seq": "6,36"
		}]
	},
	{
		"id": "2342c11d42084f99991a36ea402e5298",
		"question": "What is the award won of the scientists known for Cubic Hermite spline?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Cubic_Hermite_spline> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "40,48"
		}, {
			"uri": "http://dbpedia.org/ontology/award",
			"label": "award",
			"seq": "12,16"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientists",
			"seq": "29,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cubic_Hermite_spline",
			"label": "hermite spline cubic",
			"seq": "50,69"
		}]
	},
	{
		"id": "61613d09dbbe40fc987b96072987dea0",
		"question": "How many companies were founded in places where Dallas is the governing body ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Dallas> . ?uri <http://dbpedia.org/ontology/foundationPlace> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/governingBody",
			"label": "governing body",
			"seq": "62,75"
		}, {
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "founded",
			"seq": "24,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Dallas",
			"label": "dallas",
			"seq": "48,53"
		}]
	},
	{
		"id": "b2a4d8fce56a4890a9e803ec33770b7c",
		"question": "What is the bloomington viaduct built to cross?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bloomington_Viaduct> <http://dbpedia.org/property/crosses> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/crosses",
			"label": "cross",
			"seq": "41,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bloomington_Viaduct",
			"label": "bloomington viaduct",
			"seq": "12,30"
		}]
	},
	{
		"id": "f1a4a596441946deabb79234cff39587",
		"question": "What awards were presented to the person who produced Paradise place?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Paradise_Place> <http://dbpedia.org/property/producer> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/producer",
			"label": "produced",
			"seq": "45,52"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "5,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "34,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paradise_Place",
			"label": "paradise place",
			"seq": "54,67"
		}]
	},
	{
		"id": "2a59af2efcc74bec9b6f9b1d25486ae5",
		"question": "Copley Medal has been awarded to which scientists?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Copley_Medal>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "awarded",
			"seq": "22,28"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientists",
			"seq": "39,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Copley_Medal",
			"label": "copley medal",
			"seq": "0,11"
		}]
	},
	{
		"id": "6f97fe98633b44dcb7ba31cf7719b380",
		"question": "What is the religion of the leader of South Korean legislative election of 1992 ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/South_Korean_legislative_election,_1992> <http://dbpedia.org/property/leader> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leader",
			"label": "leader",
			"seq": "28,33"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religion",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_Korean_legislative_election,_1992",
			"label": "legislative election",
			"seq": "51,70"
		}]
	},
	{
		"id": "9f8aa6229d504392a15d7e77b795aadd",
		"question": "to which university did both, the Stanford Cardinal and Gerald Reaven go?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stanford_Cardinal> <http://dbpedia.org/ontology/university> ?uri. <http://dbpedia.org/resource/Gerald_Reaven> <http://dbpedia.org/ontology/institution> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/university",
			"label": "university",
			"seq": "9,18"
		}, {
			"uri": "http://dbpedia.org/ontology/institution",
			"label": "university",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stanford_Cardinal",
			"label": "stanford cardinal",
			"seq": "34,50"
		}, {
			"uri": "http://dbpedia.org/resource/Gerald_Reaven",
			"label": "reaven gerald",
			"seq": "56,68"
		}]
	},
	{
		"id": "c357921ea8ff43fda72ad08c8e216ab8",
		"question": "Which american football team is owned by Mark davis and is located in O.co Colliseum ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Mark_Davis_(American_football)> . ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/O.co_Coliseum>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owned",
			"seq": "32,36"
		}, {
			"uri": "http://dbpedia.org/ontology/locationCity",
			"label": "located",
			"seq": "59,65"
		}, {
			"uri": "http://dbpedia.org/ontology/AmericanFootballTeam",
			"label": "football american",
			"seq": "6,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mark_Davis_(American_football)",
			"label": "football american davis mark",
			"seq": "6,33"
		}, {
			"uri": "http://dbpedia.org/resource/O.co_Coliseum",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "17ca429ec4984bb7bc285f94d3de62b9",
		"question": "Which BBC's TV show is related with the Sarah Jane Adventures?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD> . ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/network",
			"label": "jane",
			"seq": "46,49"
		}, {
			"uri": "http://dbpedia.org/ontology/related",
			"label": "related",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "15,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC_HD",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/The_Sarah_Jane_Adventures",
			"label": "adventures sarah jane the",
			"seq": "36,60"
		}]
	},
	{
		"id": "2c3931e9e39447a6a5313df14a8934b6",
		"question": "Who were the first drivers in the grand prix which took place at Autodromo Enzo e Dino Ferrari?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Autodromo_Enzo_e_Dino_Ferrari> . ?x <http://dbpedia.org/ontology/firstDriver> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/location",
			"label": "in",
			"seq": "27,28"
		}, {
			"uri": "http://dbpedia.org/ontology/firstDriver",
			"label": "drivers",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Autodromo_Enzo_e_Dino_Ferrari",
			"label": "autodromo ferrari",
			"seq": "65,81"
		}]
	},
	{
		"id": "947e3ddd016d41a9b97ecc9eed2e370a",
		"question": "How many cars succeed the cars assembled in Canada?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Canada> . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/assembly",
			"label": "assembled",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/ontology/predecessor",
			"label": "cars",
			"seq": "9,12"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "assembled",
			"seq": "31,39"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Canada",
			"label": "canada",
			"seq": "44,49"
		}]
	},
	{
		"id": "d813efbf28c848ec9859bbc3ad45e3ea",
		"question": "How many books are written by the author who is famous for Novelas Ejemplares?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Novelas_ejemplares> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "books",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/author",
			"label": "author",
			"seq": "34,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Book",
			"label": "books",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Novelas_ejemplares",
			"label": "ejemplares novelas",
			"seq": "59,76"
		}]
	},
	{
		"id": "2f9db429754045d79c15661e9175997e",
		"question": "What is the largest city of the country where P. Sathyanarayanan was born?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/P._Sathyanarayanan> <http://dbpedia.org/property/birthplace> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/birthplace",
			"label": "the",
			"seq": "8,10"
		}, {
			"uri": "http://dbpedia.org/ontology/largestCity",
			"label": "largest city",
			"seq": "12,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "country",
			"seq": "32,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/P._Sathyanarayanan",
			"label": "sathyanarayanan",
			"seq": "49,63"
		}]
	},
	{
		"id": "69ff2b75810646209568b0df3e994b16",
		"question": "To which city does Northeast Library belong?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Northeast_Library> <http://dbpedia.org/ontology/city> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/city",
			"label": "city",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Northeast_Library",
			"label": "northeast library",
			"seq": "19,35"
		}]
	},
	{
		"id": "1cad7eba242f4238ab0cece8e171f786",
		"question": "What beverages originate in Leuven?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Leuven>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "originate",
			"seq": "15,23"
		}, {
			"uri": "http://dbpedia.org/ontology/Beverage",
			"label": "beverages",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Leuven",
			"label": "leuven",
			"seq": "28,33"
		}]
	},
	{
		"id": "f039556b67ef4cb1baad3d5fa816ba36",
		"question": "List the people whose are in the board of an organization kickstarted in New York.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_York> . ?uri <http://dbpedia.org/ontology/board> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/foundation",
			"label": "organization",
			"seq": "45,56"
		}, {
			"uri": "http://dbpedia.org/ontology/board",
			"label": "board",
			"seq": "33,37"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/New_York",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "43e17ab32b48408188702fc59b80e3d6",
		"question": "Which HBO's television series was produced by Erik Bork?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/HBO> . ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Erik_Bork>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/distributor",
			"label": "bork",
			"seq": "51,54"
		}, {
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "produced",
			"seq": "34,41"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/HBO",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Erik_Bork",
			"label": "erik bork",
			"seq": "46,54"
		}]
	},
	{
		"id": "1e5190197e764ad2852ced4917575e45",
		"question": "List the common sports between Fr. Agnel Multipurpose School  and Jamiatu Muslim Mindanao",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fr._Agnel_Multipurpose_School_and_Junior_College> <http://dbpedia.org/ontology/sport> ?uri. <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/ontology/athletics> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/sport",
			"label": "sports",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/ontology/athletics",
			"label": "the",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fr._Agnel_Multipurpose_School_and_Junior_College",
			"label": "multipurpose school",
			"seq": "41,59"
		}, {
			"uri": "http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao",
			"label": "mindanao jamiatu muslim",
			"seq": "66,88"
		}]
	},
	{
		"id": "1ebfba20e07d4dceb706cb7d0e02f7d5",
		"question": "Which comic characters were created by Paul Dini?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Paul_Dini>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/creators",
			"label": "created",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/ontology/ComicsCharacter",
			"label": "characters",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paul_Dini",
			"label": "paul dini",
			"seq": "39,47"
		}]
	},
	{
		"id": "2da4f5fb821747d58ff0f453f01748e0",
		"question": "What are the cities around the sea which flows into the Atlantic?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/inflow> <http://dbpedia.org/resource/Atlantic_Ocean> . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/inflow",
			"label": "flows",
			"seq": "41,45"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "cities",
			"seq": "13,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "31,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Atlantic_Ocean",
			"label": "atlantic",
			"seq": "56,63"
		}]
	},
	{
		"id": "8784014ab7f14b28871e97a0df2a4200",
		"question": "Which newspapers are owned by companies which are under Rolv Erik Ryssdal?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Rolv_Erik_Ryssdal> . ?uri <http://dbpedia.org/property/owners> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "newspapers",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/property/owners",
			"label": "owned",
			"seq": "21,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Newspaper",
			"label": "newspapers",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Rolv_Erik_Ryssdal",
			"label": "ryssdal rolv erik",
			"seq": "56,72"
		}]
	},
	{
		"id": "9028456938924abe93b5277af2137115",
		"question": "Which football managers managed Middlesbrough F.C.?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/Middlesbrough_F.C.> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/managerClub",
			"label": "managers",
			"seq": "15,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Middlesbrough_F.C.",
			"label": "middlesbrough f.c.",
			"seq": "32,49"
		}]
	},
	{
		"id": "69fc05f2eb85472d8f28a6dec16cf0a8",
		"question": "Who coached the Marquette golden eagles men team in 09 to 10 and then again in 13 to 14 ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2009\u201310_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/ontology/coach> ?uri. <http://dbpedia.org/resource/2013\u201314_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/ontology/coach> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coach",
			"label": "coached",
			"seq": "4,10"
		}, {
			"uri": "http://dbpedia.org/ontology/coach",
			"label": "coached",
			"seq": "4,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2009\u201310_Marquette_Golden_Eagles_men's_basketball_team",
			"label": "marquette golden eagles team men",
			"seq": "16,47"
		}, {
			"uri": "http://dbpedia.org/resource/2013\u201314_Marquette_Golden_Eagles_men's_basketball_team",
			"label": "marquette golden eagles team men",
			"seq": "16,47"
		}]
	},
	{
		"id": "8cc928e4d47048b1861ea9bb7b35471e",
		"question": "What developed EMMS?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/EMMS> <http://dbpedia.org/ontology/developer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "developed",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/EMMS",
			"label": "emms",
			"seq": "15,18"
		}]
	},
	{
		"id": "191f35e7fb4246f78353e02e6302361a",
		"question": "Which city is the route start of the Moscow-Kazan high-speed railway and birth place of the Ilya Savelev ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moscow-Kazan_high-speed_railway> <http://dbpedia.org/ontology/routeStart> ?uri. <http://dbpedia.org/resource/Ilya_Savelev> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "start route",
			"seq": "18,28"
		}, {
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "place birth",
			"seq": "73,83"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Moscow-Kazan_high-speed_railway",
			"label": "moscow-kazan high-speed railway",
			"seq": "37,67"
		}, {
			"uri": "http://dbpedia.org/resource/Ilya_Savelev",
			"label": "savelev ilya",
			"seq": "92,103"
		}]
	},
	{
		"id": "2ad75f9b93f64498968879d9c695fb02",
		"question": "Count the number of sports played by university which also plays Taekwondo ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/Taekwondo> . ?x <http://dbpedia.org/property/athletics> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/athletics",
			"label": "the",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/property/athletics",
			"label": "the",
			"seq": "6,8"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Taekwondo",
			"label": "taekwondo",
			"seq": "65,73"
		}]
	},
	{
		"id": "b98192ce06ab477dbe39eb6081bfb58c",
		"question": "Where did the narrators of the Championship snooker die?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Championship_Snooker> <http://dbpedia.org/property/narrated> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/narrated",
			"label": "narrators",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "the",
			"seq": "10,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Championship_Snooker",
			"label": "championship snooker",
			"seq": "31,50"
		}]
	},
	{
		"id": "259c7da5ba2e4d11814879c79da16742",
		"question": "Where is the lake located into which the Winnipeg River flows?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Winnipeg_River> . ?x <http://dbpedia.org/property/location> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/outflow",
			"label": "flows",
			"seq": "56,60"
		}, {
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "18,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Winnipeg_River",
			"label": "winnipeg river",
			"seq": "41,54"
		}]
	},
	{
		"id": "875e9a8ee0ce4454a79b9daa496dcbb6",
		"question": "Which government agency is run by Supachai Somcharoen?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Supachai_Somcharoen> . ?x <http://dbpedia.org/property/agencyName> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GovernmentAgency>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "agency",
			"seq": "17,22"
		}, {
			"uri": "http://dbpedia.org/property/agencyName",
			"label": "agency",
			"seq": "17,22"
		}, {
			"uri": "http://dbpedia.org/ontology/GovernmentAgency",
			"label": "government agency",
			"seq": "6,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Supachai_Somcharoen",
			"label": "somcharoen supachai",
			"seq": "34,52"
		}]
	},
	{
		"id": "3f12f94aa6634573be6b156f1c4db655",
		"question": "Which hockey team is head coached by Bill Peters?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Bill_Peters_(ice_hockey)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HockeyTeam>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headCoach",
			"label": "coached",
			"seq": "26,32"
		}, {
			"uri": "http://dbpedia.org/ontology/HockeyTeam",
			"label": "hockey team",
			"seq": "6,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Bill_Peters_(ice_hockey)",
			"label": "peters hockey bill",
			"seq": "6,23"
		}]
	},
	{
		"id": "3b485c94a86c4c4e8a6f8929cc0dde2b",
		"question": "Is Grand Bahama lie in the achipelago of the bahamas?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Grand_Bahama> <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/The_Bahamas> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/archipelago",
			"label": "achipelago",
			"seq": "27,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Grand_Bahama",
			"label": "bahama",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/resource/The_Bahamas",
			"label": "bahamas the",
			"seq": "23,33"
		}]
	},
	{
		"id": "bed9c24aa6cd405ab16165885735645b",
		"question": "What is the genre of Battle Chess?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_Chess> <http://dbpedia.org/property/genre> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/genre",
			"label": "genre",
			"seq": "12,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Battle_Chess",
			"label": "battle chess",
			"seq": "21,32"
		}]
	},
	{
		"id": "08e93b8d4249442b88762e1a51910088",
		"question": "Which colonel has allegiance to Colony of Virginia ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/allegiance> <http://dbpedia.org/resource/Colony_of_Virginia> . ?uri <http://dbpedia.org/property/rank> <http://dbpedia.org/resource/Colonel_(United_States)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/allegiance",
			"label": "allegiance",
			"seq": "18,27"
		}, {
			"uri": "http://dbpedia.org/property/rank",
			"label": "virginia",
			"seq": "42,49"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "colonel",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colony_of_Virginia",
			"label": "virginia colony",
			"seq": "32,46"
		}, {
			"uri": "http://dbpedia.org/resource/Colonel_(United_States)",
			"label": "colonel",
			"seq": "6,12"
		}]
	},
	{
		"id": "f01fe449ce054eacad63ba079a2cdd2e",
		"question": "How many companies were started in the states?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/United_States>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "states",
			"seq": "39,44"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "companies",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_States",
			"label": "states",
			"seq": "39,44"
		}]
	},
	{
		"id": "944f7d6fd1da4f1592e9d9056d5986b7",
		"question": "How many bands are signed up with Kobalt Label Services?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Kobalt_Label_Services>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "label",
			"seq": "41,45"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "bands",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kobalt_Label_Services",
			"label": "services kobalt label",
			"seq": "34,54"
		}]
	},
	{
		"id": "1da410830ef64a70bdaf8bedfba7a0ad",
		"question": "where are the sister stations of CFRB broadcasted?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/sisterStations> <http://dbpedia.org/resource/CFRB> . ?x <http://dbpedia.org/ontology/broadcastArea> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterStations",
			"label": "stations sister",
			"seq": "14,28"
		}, {
			"uri": "http://dbpedia.org/ontology/broadcastArea",
			"label": "broadcasted",
			"seq": "38,48"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/CFRB",
			"label": "cfrb",
			"seq": "33,36"
		}]
	},
	{
		"id": "c23cebef882b4a39806aaf8d5adac8ad",
		"question": "List the television shows one of whose distributor's divisions is Warner Bros. Animation.",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/divisions> <http://dbpedia.org/resource/Warner_Bros._Animation> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/divisions",
			"label": "divisions",
			"seq": "53,61"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributor's",
			"seq": "39,51"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "9,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Warner_Bros._Animation",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "3065422e5ed048afbfe5677cff2a318b",
		"question": "Namt the fields of Paul Demiville ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paul_Demi\u00e9ville> <http://dbpedia.org/property/fields> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/fields",
			"label": "fields",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Paul_Demi\u00e9ville",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "8595807efc4449d68eed8d38166a812a",
		"question": "What is the sea connected to Kaliningrad and Gdask?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Gda\u0144sk> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cities",
			"label": "is",
			"seq": "5,6"
		}, {
			"uri": "http://dbpedia.org/property/cities",
			"label": "is",
			"seq": "5,6"
		}, {
			"uri": "http://dbpedia.org/ontology/Sea",
			"label": "sea",
			"seq": "12,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kaliningrad",
			"label": "kaliningrad",
			"seq": "29,39"
		}, {
			"uri": "http://dbpedia.org/resource/Gda\u0144sk",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "9d9692a4132c4495ae0f5931957e586b",
		"question": "From how many countries did the aeroplanes designed by Alexander Lippisch originate?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Alexander_Lippisch> . ?x <http://dbpedia.org/property/nationalOrigin> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "designed",
			"seq": "43,50"
		}, {
			"uri": "http://dbpedia.org/property/nationalOrigin",
			"label": "originate",
			"seq": "74,82"
		}, {
			"uri": "http://dbpedia.org/ontology/Country",
			"label": "countries",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alexander_Lippisch",
			"label": "alexander lippisch",
			"seq": "55,72"
		}]
	},
	{
		"id": "efdf8aa050864451b985d0ff5e49cbd0",
		"question": "Which district of Thorington railway station is the location of death of  David Lewis (poet) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thorington_railway_station> <http://dbpedia.org/ontology/district> ?uri. <http://dbpedia.org/resource/David_Lewis_(poet)> <http://dbpedia.org/ontology/deathPlace> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/district",
			"label": "district",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/deathPlace",
			"label": "death",
			"seq": "64,68"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Thorington_railway_station",
			"label": "thorington station railway",
			"seq": "18,43"
		}, {
			"uri": "http://dbpedia.org/resource/David_Lewis_(poet)",
			"label": "(poet) lewis david",
			"seq": "74,91"
		}]
	},
	{
		"id": "b4e0d76805604866bf173ea2e1b23a30",
		"question": "Who has manufactured vehicles designed originally by NASA?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/NASA> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designCompany",
			"label": "designed",
			"seq": "30,37"
		}, {
			"uri": "http://dbpedia.org/ontology/manufacturer",
			"label": "manufactured",
			"seq": "8,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Automobile",
			"label": "vehicles",
			"seq": "21,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/NASA",
			"label": "nasa",
			"seq": "53,56"
		}]
	},
	{
		"id": "fd5f1f21c5d84d139a078d7c277185cd",
		"question": "How many people are famous for the Gibson Les Paul?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Gibson_Les_Paul>  . }",
		"sparql_id": "101",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableInstruments",
			"label": "les",
			"seq": "42,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Gibson_Les_Paul",
			"label": "gibson paul les",
			"seq": "35,49"
		}]
	},
	{
		"id": "a6ed413a6d5445999356286aac0836d9",
		"question": "Who is the office holder for constituencies  Castro District and Haight-Ashbury?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Castro_District,_San_Francisco> . ?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury> . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "307",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituencies",
			"seq": "29,42"
		}, {
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituencies",
			"seq": "29,42"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "11,23"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Castro_District,_San_Francisco",
			"label": "district",
			"seq": "52,59"
		}, {
			"uri": "http://dbpedia.org/resource/Haight-Ashbury",
			"label": "haight-ashbury",
			"seq": "65,78"
		}]
	},
	{
		"id": "c19ff6e63850447cbc240443c789c4f2",
		"question": "Count the number of movies whose editors were born in UK?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/United_Kingdom> . ?uri <http://dbpedia.org/property/editing> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "406",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/birthPlace",
			"label": "the",
			"seq": "6,8"
		}, {
			"uri": "http://dbpedia.org/property/editing",
			"label": "editors",
			"seq": "33,39"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "of",
			"seq": "17,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/United_Kingdom",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "e6a2aa8819844614aa86e76b7ef9cc94",
		"question": "What subsequent work of Moondog Matinee has the composer of Motorpsycho Nitemare ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?uri. <http://dbpedia.org/resource/Moondog_Matinee> <http://dbpedia.org/ontology/subsequentWork> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/composer",
			"label": "composer",
			"seq": "48,55"
		}, {
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "5,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Motorpsycho_Nitemare",
			"label": "motorpsycho nitemare",
			"seq": "60,79"
		}, {
			"uri": "http://dbpedia.org/resource/Moondog_Matinee",
			"label": "moondog matinee",
			"seq": "24,38"
		}]
	},
	{
		"id": "112be4e032d2473e8a45c73e9689419f",
		"question": "In how many places did the Schutzstaffels die?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Schutzstaffel> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryRank",
			"label": "many",
			"seq": "7,10"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "places",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Schutzstaffel",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "93b33f2e4d4f4d07a6dbd2be5baba794",
		"question": "What faith do hang chuon naron and Kron Ngoy follow?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hang_Chuon_Naron> <http://dbpedia.org/ontology/religion> ?uri. <http://dbpedia.org/resource/Krom_Ngoy> <http://dbpedia.org/ontology/religion> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "kron",
			"seq": "35,38"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "kron",
			"seq": "35,38"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Hang_Chuon_Naron",
			"label": "naron chuon hang",
			"seq": "14,29"
		}, {
			"uri": "http://dbpedia.org/resource/Krom_Ngoy",
			"label": "ngoy",
			"seq": "40,43"
		}]
	},
	{
		"id": "6904a39015e041cdb5b9e4c8100f6f6a",
		"question": "Name the people living in a place governed by William W Brien?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/William_W._Brien> . ?uri <http://dbpedia.org/ontology/residence> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/leaderName",
			"label": "name",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "brien",
			"seq": "56,60"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_W._Brien",
			"label": "william brien",
			"seq": "46,58"
		}]
	},
	{
		"id": "4e15567ee9b34922b7ffeb5e3b835c65",
		"question": "How many game series exist for iOS?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/IOS> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "for",
			"seq": "27,29"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "14,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/IOS",
			"label": "ios",
			"seq": "31,33"
		}]
	},
	{
		"id": "c43336ea3f5f4a078eae1b1cdbb23ae0",
		"question": "Who is the narrator of The Incredible Hulk , 1982 TV series ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)> <http://dbpedia.org/property/narrated> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/narrated",
			"label": "narrator",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)",
			"label": "incredible series hulk 1982 the",
			"seq": "7,37"
		}]
	},
	{
		"id": "120552b5f83c4469b65f4e0a718d330b",
		"question": "Name the stock holders of soccer club whose one of the stockholder is Carl Sanders ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Carl_Sanders> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "one",
			"seq": "44,46"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "one",
			"seq": "44,46"
		}, {
			"uri": "http://dbpedia.org/ontology/SoccerClub",
			"label": "soccer club",
			"seq": "26,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Carl_Sanders",
			"label": "sanders",
			"seq": "75,81"
		}]
	},
	{
		"id": "ce1c25a295524cd3ad8096741360c0a5",
		"question": "Who was the parent of person whose child is William C P breckinridge?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/William_Campbell_Preston_Breckinridge> . ?x <http://dbpedia.org/ontology/parent> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/children",
			"label": "child",
			"seq": "35,39"
		}, {
			"uri": "http://dbpedia.org/ontology/parent",
			"label": "parent",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "22,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Campbell_Preston_Breckinridge",
			"label": "breckinridge william",
			"seq": "44,63"
		}]
	},
	{
		"id": "5e448ee7e7a347909af9a05fd941d609",
		"question": "What is the location of the pope whose major shrine is St. Peter's Basilica ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/majorShrine> <http://dbpedia.org/resource/St._Peter's_Basilica> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Pope>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/majorShrine",
			"label": "shrine major",
			"seq": "39,50"
		}, {
			"uri": "http://dbpedia.org/property/birthPlace",
			"label": "the",
			"seq": "8,10"
		}, {
			"uri": "http://dbpedia.org/ontology/Pope",
			"label": "pope",
			"seq": "28,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/St._Peter's_Basilica",
			"label": "basilica peter's st.",
			"seq": "55,74"
		}]
	},
	{
		"id": "fd8b42814a494505a95d0aad81dbb23d",
		"question": "Which TV show's producer is Stephen E. Ambrose and company is DreamWorks Television?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose> . ?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/DreamWorks_Television>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "16,23"
		}, {
			"uri": "http://dbpedia.org/ontology/company",
			"label": "company",
			"seq": "51,57"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "television",
			"seq": "73,82"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stephen_E._Ambrose",
			"label": "stephen ambrose",
			"seq": "28,42"
		}, {
			"uri": "http://dbpedia.org/resource/DreamWorks_Television",
			"label": "television dreamworks",
			"seq": "62,82"
		}]
	},
	{
		"id": "c4b41b17bd6e461f9bab1fd5d18fb1cb",
		"question": "Where does the rivers ending in lake washington begin?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Lake_Washington> . ?x <http://dbpedia.org/property/sourceLocation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/riverMouth",
			"label": "rivers",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/property/sourceLocation",
			"label": "washington",
			"seq": "37,46"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Lake_Washington",
			"label": "washington lake",
			"seq": "32,46"
		}]
	},
	{
		"id": "26c83a9e8dd7414ba4b9740120278949",
		"question": "What is operated by FedExField ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/FedExField> <http://dbpedia.org/ontology/operator> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operator",
			"label": "operated",
			"seq": "8,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/FedExField",
			"label": "fedexfield",
			"seq": "20,29"
		}]
	},
	{
		"id": "c3101002a14d4415b13183cee4ce5c19",
		"question": "Who owns the company that made the Edsel Villager?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Edsel_Villager> . ?x <http://dbpedia.org/property/parent> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/products",
			"label": "owns",
			"seq": "4,7"
		}, {
			"uri": "http://dbpedia.org/property/parent",
			"label": "company",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edsel_Villager",
			"label": "villager edsel",
			"seq": "35,48"
		}]
	},
	{
		"id": "22fd27d058e34064ab9f3f5f1a1a85b9",
		"question": "Where does the river flow into, which starts at the Sierra Madre de Chiapas?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Sierra_Madre_de_Chiapas> . ?x <http://dbpedia.org/property/mouthCountry> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/source",
			"label": "does",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/property/mouthCountry",
			"label": "the",
			"seq": "11,13"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "15,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sierra_Madre_de_Chiapas",
			"label": "chiapas sierra madre",
			"seq": "52,71"
		}]
	},
	{
		"id": "c8a69f49e96b42b896b722fd19267e70",
		"question": "How many other race are there of the adult (pornographic) actors whose ethnicity is Cherokee ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/ethnicity> <http://dbpedia.org/resource/Cherokee> . ?x <http://dbpedia.org/property/ethnicity> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ethnicity",
			"label": "ethnicity",
			"seq": "71,79"
		}, {
			"uri": "http://dbpedia.org/property/ethnicity",
			"label": "ethnicity",
			"seq": "71,79"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Cherokee",
			"label": "cherokee",
			"seq": "84,91"
		}]
	},
	{
		"id": "1b5bc20a93da4301bfd74cf0424d6a5d",
		"question": "Who is the producer of the single which was the subsequent work of He's a Liar?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/He's_a_Liar> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/ontology/producer> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/subsequentWork",
			"label": "subsequent work",
			"seq": "48,62"
		}, {
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "11,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/He's_a_Liar",
			"label": "liar he's",
			"seq": "67,75"
		}]
	},
	{
		"id": "a600e69fac2b46a58ff1d1fe22877e45",
		"question": "What series is Mazes of Time from, and is produced by BBC multimedia?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/BBC_Multimedia> <http://dbpedia.org/ontology/product> ?uri. <http://dbpedia.org/resource/Doctor_Who:_The_Mazes_of_Time> <http://dbpedia.org/ontology/series> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/product",
			"label": "produced",
			"seq": "42,49"
		}, {
			"uri": "http://dbpedia.org/ontology/series",
			"label": "series",
			"seq": "5,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC_Multimedia",
			"label": "multimedia bbc",
			"seq": "54,67"
		}, {
			"uri": "http://dbpedia.org/resource/Doctor_Who:_The_Mazes_of_Time",
			"label": "mazes",
			"seq": "15,19"
		}]
	},
	{
		"id": "e1a45956b7a142a8bf2eef25850435d5",
		"question": "WHo gave the lyrcis of Doonesbury ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Doonesbury_(musical)> <http://dbpedia.org/ontology/lyrics> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/lyrics",
			"label": "lyrcis",
			"seq": "13,18"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Doonesbury_(musical)",
			"label": "doonesbury",
			"seq": "23,32"
		}]
	},
	{
		"id": "de05f30a4e304ecc8294fe2c50948518",
		"question": "Whose shrine is in aachen cathedral?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/majorShrine> <http://dbpedia.org/resource/Aachen_Cathedral>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/majorShrine",
			"label": "shrine",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Aachen_Cathedral",
			"label": "cathedral aachen",
			"seq": "19,34"
		}]
	},
	{
		"id": "db1c3fdf8d784274b4e27db7dd62b263",
		"question": "Who are the parents of  Charles Phelps Taft II and Robert A. Taft?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Charles_Phelps_Taft_II> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Robert_A._Taft> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "charles",
			"seq": "24,30"
		}, {
			"uri": "http://dbpedia.org/ontology/child",
			"label": "charles",
			"seq": "24,30"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_Phelps_Taft_II",
			"label": "charles phelps taft",
			"seq": "24,42"
		}, {
			"uri": "http://dbpedia.org/resource/Robert_A._Taft",
			"label": "robert taft",
			"seq": "39,49"
		}]
	},
	{
		"id": "543de17bf3734e12bdf36bd202942338",
		"question": "Giorgos Kaminis is the mayor of what?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/Giorgos_Kaminis> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mayor",
			"label": "mayor",
			"seq": "23,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Giorgos_Kaminis",
			"label": "kaminis giorgos",
			"seq": "0,14"
		}]
	},
	{
		"id": "40ce6c3ca38043918ce00a735a2e4c98",
		"question": "Name the incumbent of Linda Jenness ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Jenness> <http://dbpedia.org/ontology/incumbent> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/incumbent",
			"label": "incumbent",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Linda_Jenness",
			"label": "jenness linda",
			"seq": "22,34"
		}]
	},
	{
		"id": "5bf74194f313453a92938a6069178a82",
		"question": "Which assembly of the Plymouth Savoy is the route end of the NorthSouth Transport Corridor?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Plymouth_Savoy> <http://dbpedia.org/ontology/assembly> ?uri. <http://dbpedia.org/resource/North\u2013South_Transport_Corridor> <http://dbpedia.org/ontology/routeEnd> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/assembly",
			"label": "assembly",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/routeEnd",
			"label": "route end",
			"seq": "44,52"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Plymouth_Savoy",
			"label": "plymouth savoy",
			"seq": "22,35"
		}, {
			"uri": "http://dbpedia.org/resource/North\u2013South_Transport_Corridor",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "433e3e8781da456b9fc1184bb9815b88",
		"question": "Name the band atleast one of whose members is famous for playing the Fender Stratocaster?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Fender_Stratocaster> . ?uri <http://dbpedia.org/property/currentMembers> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/notableInstruments",
			"label": "atleast",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/property/currentMembers",
			"label": "members",
			"seq": "35,41"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Fender_Stratocaster",
			"label": "stratocaster fender",
			"seq": "69,87"
		}]
	},
	{
		"id": "1db54969ed89429596435519a1e8fbf2",
		"question": "Give me a count of mammals which have their order as Primate?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Primate>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/order",
			"label": "order",
			"seq": "44,48"
		}, {
			"uri": "http://dbpedia.org/ontology/Mammal",
			"label": "mammals",
			"seq": "19,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Primate",
			"label": "primate",
			"seq": "53,59"
		}]
	},
	{
		"id": "c062bc8772114beb9ceec478ec91a279",
		"question": "What are the things whose leader was a monarch of Willem-Alexander of the Netherlands?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/monarch> <http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands> . ?uri <http://dbpedia.org/ontology/leader> ?x  . }",
		"sparql_id": "6",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/monarch",
			"label": "monarch",
			"seq": "39,45"
		}, {
			"uri": "http://dbpedia.org/ontology/leader",
			"label": "leader",
			"seq": "26,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands",
			"label": "willem-alexander netherlands",
			"seq": "50,77"
		}]
	},
	{
		"id": "5901e1cf900d4564b0ad6a25eb733684",
		"question": "Who owns Chelsea F.C.?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Chelsea_F.C.>  . }",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/occupation",
			"label": "owns",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Chelsea_F.C.",
			"label": "chelsea f.c.",
			"seq": "9,20"
		}]
	},
	{
		"id": "d3ccc70090cb4f15a0c1e6340f773d93",
		"question": "During the reigns of which monarchs was the name to the  Israelite kingdom as United Monarch?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Kingdom_of_Israel_(united_monarchy)> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/title",
			"label": "united",
			"seq": "78,83"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Kingdom_of_Israel_(united_monarchy)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "396cc549a7c941308fc6490554d328b0",
		"question": "Tell me the total number of organizations who maintain the bridges made by the malaysian PWD?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Malaysian_Public_Works_Department> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/designer",
			"label": "number",
			"seq": "18,23"
		}, {
			"uri": "http://dbpedia.org/ontology/maintainedBy",
			"label": "maintain",
			"seq": "46,53"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organizations",
			"seq": "28,40"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Malaysian_Public_Works_Department",
			"label": "malaysian",
			"seq": "79,87"
		}]
	},
	{
		"id": "d49b451c4f0b4b8ea1109469adecf4f1",
		"question": "Which county seat of the King County, Washington and PLACE OF DEATH of the Phil Lumpkin ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/King_County,_Washington> <http://dbpedia.org/ontology/countySeat> ?uri. <http://dbpedia.org/resource/Phil_Lumpkin> <http://dbpedia.org/property/placeOfDeath> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/countySeat",
			"label": "county",
			"seq": "6,11"
		}, {
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "place death",
			"seq": "53,63"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/King_County,_Washington",
			"label": "washington county, king",
			"seq": "25,47"
		}, {
			"uri": "http://dbpedia.org/resource/Phil_Lumpkin",
			"label": "lumpkin phil",
			"seq": "75,86"
		}]
	},
	{
		"id": "6e2e3195d6044ab2890e512d68f6fc15",
		"question": "Name the river whose mouth place is Old Lyme, Connecticut?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Old_Lyme,_Connecticut>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthPlace",
			"label": "place mouth",
			"seq": "21,31"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "river",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Old_Lyme,_Connecticut",
			"label": "connecticut lyme,",
			"seq": "40,56"
		}]
	},
	{
		"id": "090fdd1b6e04464eb2afffb08d7868dd",
		"question": "list the  software which works on both the OS  - Microsoft Windows and Mac OS ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> . ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Mac_OS> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "list",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/ontology/operatingSystem",
			"label": "list",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Microsoft_Windows",
			"label": "microsoft windows",
			"seq": "49,65"
		}, {
			"uri": "http://dbpedia.org/resource/Mac_OS",
			"label": "mac",
			"seq": "71,73"
		}]
	},
	{
		"id": "56f3779c92104d1396a551a1d1dbf549",
		"question": "Which  person has opponent Ike Clanton?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Ike_Clanton>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/opponent",
			"label": "opponent",
			"seq": "18,25"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "person",
			"seq": "7,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ike_Clanton",
			"label": "clanton ike",
			"seq": "27,37"
		}]
	},
	{
		"id": "b45a5663ebe3439a9c8032edaa8750b3",
		"question": "List the affiliation of Indian general election, 2004 (Andhra Pradesh) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/affiliation",
			"label": "affiliation",
			"seq": "9,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)",
			"label": "election, pradesh) general (andhra",
			"seq": "31,64"
		}]
	},
	{
		"id": "276666cb2dd442d29983656956c65930",
		"question": "Which idelogy of the Palang Dharma Party is also the  faith of Miao people ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Palang_Dharma_Party> <http://dbpedia.org/ontology/ideology> ?uri. <http://dbpedia.org/resource/Miao_people> <http://dbpedia.org/ontology/religion> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/ideology",
			"label": "idelogy",
			"seq": "6,12"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "idelogy",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Palang_Dharma_Party",
			"label": "palang dharma party",
			"seq": "21,39"
		}, {
			"uri": "http://dbpedia.org/resource/Miao_people",
			"label": "people miao",
			"seq": "63,73"
		}]
	},
	{
		"id": "d8be9b09c9444929b370acbb8f2f1d66",
		"question": "Which municipality of the Brown's Corners, toronto also place of birth of Krista Kelly ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brown's_Corners,_Toronto> <http://dbpedia.org/ontology/municipality> ?uri. <http://dbpedia.org/resource/Krista_Kelly> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/municipality",
			"label": "municipality",
			"seq": "6,17"
		}, {
			"uri": "http://dbpedia.org/property/placeOfBirth",
			"label": "place birth",
			"seq": "56,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brown's_Corners,_Toronto",
			"label": "corners, toronto brown's",
			"seq": "26,49"
		}, {
			"uri": "http://dbpedia.org/resource/Krista_Kelly",
			"label": "krista kelly",
			"seq": "74,85"
		}]
	},
	{
		"id": "ca35959e3aa54d29a210ae778908d977",
		"question": "Where did the members of judge advocate general corps study?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Judge_Advocate_General's_Corps,_United_States_Army> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/militaryRank",
			"label": "study",
			"seq": "54,58"
		}, {
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "members",
			"seq": "14,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Judge_Advocate_General's_Corps,_United_States_Army",
			"label": "advocate general judge corps",
			"seq": "25,52"
		}]
	},
	{
		"id": "33a68bbb7cbb44749a300fcafe94dadf",
		"question": "Where are the shrines of the saints who were beatified by Pope Pius XI?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/beatifiedBy> <http://dbpedia.org/resource/Pope_Pius_XI> . ?x <http://dbpedia.org/ontology/majorShrine> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Saint>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/beatifiedBy",
			"label": "beatified by",
			"seq": "45,56"
		}, {
			"uri": "http://dbpedia.org/ontology/majorShrine",
			"label": "shrines",
			"seq": "14,20"
		}, {
			"uri": "http://dbpedia.org/ontology/Saint",
			"label": "saints",
			"seq": "29,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Pope_Pius_XI",
			"label": "pope pius xi",
			"seq": "58,69"
		}]
	},
	{
		"id": "7544359cc60644078fbfd6ee91abdf55",
		"question": "In how many different places are Brown haired models living?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/hairColor> <http://dbpedia.org/resource/Brown_hair> . ?x <http://dbpedia.org/ontology/residence> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/hairColor",
			"label": "haired",
			"seq": "39,44"
		}, {
			"uri": "http://dbpedia.org/ontology/residence",
			"label": "haired",
			"seq": "39,44"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Brown_hair",
			"label": "brown",
			"seq": "33,37"
		}]
	},
	{
		"id": "901504aad5414f9b8ea3323d9f9f9e3a",
		"question": "Solon Spencer Beman has architected in how many cities?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Solon_Spencer_Beman> . ?x <http://dbpedia.org/property/locationTown> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/architect",
			"label": "architected",
			"seq": "24,34"
		}, {
			"uri": "http://dbpedia.org/property/locationTown",
			"label": "solon",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/City",
			"label": "cities",
			"seq": "48,53"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Solon_Spencer_Beman",
			"label": "spencer solon beman",
			"seq": "0,18"
		}]
	},
	{
		"id": "6bfad60b196445aea7c5be7ba2412166",
		"question": "What was a common first team at the 1967 Mexican Grand Prix and 1971 US one?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri. <http://dbpedia.org/resource/1971_United_States_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/firstTeam",
			"label": "first team",
			"seq": "18,27"
		}, {
			"uri": "http://dbpedia.org/property/firstTeam",
			"label": "first team",
			"seq": "18,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/1967_Mexican_Grand_Prix",
			"label": "mexican grand prix 1967",
			"seq": "36,58"
		}, {
			"uri": "http://dbpedia.org/resource/1971_United_States_Grand_Prix",
			"label": "grand prix 1971",
			"seq": "49,63"
		}]
	},
	{
		"id": "3eedc8d9fc1842a88f9158d88e77eb21",
		"question": "What is the location of Sam Sen Railway Station ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sam_Sen_Railway_Station> <http://dbpedia.org/property/other> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/other",
			"label": "the",
			"seq": "8,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Sam_Sen_Railway_Station",
			"label": "station railway",
			"seq": "32,46"
		}]
	},
	{
		"id": "d3003f279fce43c2bd590feb5ea35a89",
		"question": "In how many places have the companies started in Newcastle worked?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/City_of_Newcastle> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/foundationPlace",
			"label": "places",
			"seq": "12,17"
		}, {
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "worked",
			"seq": "59,64"
		}, {
			"uri": "http://dbpedia.org/ontology/Place",
			"label": "places",
			"seq": "12,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/City_of_Newcastle",
			"label": "newcastle",
			"seq": "49,57"
		}]
	},
	{
		"id": "2c4dcb51677a45c2b824fb2b6faee585",
		"question": "How many things are produced by companies located in Tehran?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Tehran> . ?x <http://dbpedia.org/ontology/product> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "42,48"
		}, {
			"uri": "http://dbpedia.org/ontology/product",
			"label": "produced",
			"seq": "20,27"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Tehran",
			"label": "tehran",
			"seq": "53,58"
		}]
	},
	{
		"id": "836e49a87e9346fa8ff7e57ab6d765c1",
		"question": "In which areas is the radio station broadcasted which is a sister station of WXME ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/WXME> <http://dbpedia.org/property/sisterStations> ?x . ?x <http://dbpedia.org/property/area> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/sisterStations",
			"label": "station",
			"seq": "28,34"
		}, {
			"uri": "http://dbpedia.org/property/area",
			"label": "areas",
			"seq": "9,13"
		}, {
			"uri": "http://dbpedia.org/ontology/RadioStation",
			"label": "station",
			"seq": "28,34"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WXME",
			"label": "wxme",
			"seq": "77,80"
		}]
	},
	{
		"id": "c750e7c0608b41ceb0f89a608bc35174",
		"question": "Who was the director of photography of Mickey's Mellerdrammer and the animator of Tommy Tucker's Tooth?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mickey's_Mellerdrammer> <http://dbpedia.org/property/cinematography> ?uri. <http://dbpedia.org/resource/Tommy_Tucker's_Tooth> <http://dbpedia.org/property/animator> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/cinematography",
			"label": "photography",
			"seq": "24,34"
		}, {
			"uri": "http://dbpedia.org/property/animator",
			"label": "animator",
			"seq": "70,77"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Mickey's_Mellerdrammer",
			"label": "mellerdrammer mickey's",
			"seq": "39,60"
		}, {
			"uri": "http://dbpedia.org/resource/Tommy_Tucker's_Tooth",
			"label": "tucker's",
			"seq": "88,95"
		}]
	},
	{
		"id": "da6a53f6df164501ac3e5ca040d30802",
		"question": "Name the origins of the river with Quich Department as one of the origin ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Quich\u00e9_Department> . ?x <http://dbpedia.org/ontology/origin> ?uri  . }",
		"sparql_id": "11",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "origin",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/origin",
			"label": "origin",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Quich\u00e9_Department",
			"label": "department quich",
			"seq": "35,50"
		}]
	},
	{
		"id": "4f474c1d102d429188592e6442f0dc85",
		"question": "Who was in the missions of Apollo 11 and Gemini 8?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Apollo_11> . ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Gemini_8> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mission",
			"label": "missions",
			"seq": "15,22"
		}, {
			"uri": "http://dbpedia.org/property/mission",
			"label": "missions",
			"seq": "15,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Apollo_11",
			"label": "apollo 11",
			"seq": "27,35"
		}, {
			"uri": "http://dbpedia.org/resource/Gemini_8",
			"label": "gemini",
			"seq": "41,46"
		}]
	},
	{
		"id": "0e96324fa1db4239b4f08a7cc5d7d4a1",
		"question": "What is the location town of Seattle Great Wheel ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Seattle_Great_Wheel> <http://dbpedia.org/property/locationTown> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/locationTown",
			"label": "location town",
			"seq": "12,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Seattle_Great_Wheel",
			"label": "seattle wheel great",
			"seq": "29,47"
		}]
	},
	{
		"id": "c2b314ca2fe44f229ce588a5c38f9e76",
		"question": "Name the office holder whose alma mater is Harvard-Westlake School and resting place is Alta Mesa Memorial Park?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Harvard-Westlake_School> . ?uri <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Alta_Mesa_Memorial_Park>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "mater alma",
			"seq": "29,38"
		}, {
			"uri": "http://dbpedia.org/property/restingPlace",
			"label": "resting place",
			"seq": "71,83"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office holder",
			"seq": "9,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Harvard-Westlake_School",
			"label": "harvard-westlake school",
			"seq": "43,65"
		}, {
			"uri": "http://dbpedia.org/resource/Alta_Mesa_Memorial_Park",
			"label": "memorial park mesa alta",
			"seq": "88,110"
		}]
	},
	{
		"id": "e06bff7bae994f78aab16d712b680296",
		"question": "Which band had members who are now in The Bleeding Heart Band?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Bleeding_Heart_Band> . ?uri <http://dbpedia.org/ontology/formerBandMember> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/associatedBand",
			"label": "band",
			"seq": "6,9"
		}, {
			"uri": "http://dbpedia.org/ontology/formerBandMember",
			"label": "members",
			"seq": "15,21"
		}, {
			"uri": "http://dbpedia.org/ontology/Band",
			"label": "band",
			"seq": "6,9"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Bleeding_Heart_Band",
			"label": "bleeding heart band",
			"seq": "6,24"
		}]
	},
	{
		"id": "f2000de1be65469e8d691b9d6e3732e5",
		"question": "In which cities do some railways operated by Russian railways start?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/operatedBy> <http://dbpedia.org/resource/Russian_Railways> . ?x <http://dbpedia.org/ontology/routeStart> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/operatedBy",
			"label": "operated",
			"seq": "33,40"
		}, {
			"uri": "http://dbpedia.org/ontology/routeStart",
			"label": "start",
			"seq": "62,66"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Russian_Railways",
			"label": "railways russian",
			"seq": "24,39"
		}]
	},
	{
		"id": "3b829598cada4093999a79cba952861b",
		"question": "Which producer of Wizards and the aliens is also the notable work of russell T Davies ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wizards_vs_Aliens> <http://dbpedia.org/ontology/producer> ?uri. <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "producer",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/notableWork",
			"label": "notable work",
			"seq": "53,64"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Wizards_vs_Aliens",
			"label": "wizards aliens",
			"seq": "18,31"
		}, {
			"uri": "http://dbpedia.org/resource/Russell_T_Davies",
			"label": "russell davies",
			"seq": "69,82"
		}]
	},
	{
		"id": "1f3d2c8c9b824f60ab080077dcff3dc9",
		"question": "Rivers which end in Arkansas go through which cities?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Arkansas> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/mouthMountain",
			"label": "through",
			"seq": "32,38"
		}, {
			"uri": "http://dbpedia.org/ontology/city",
			"label": "cities",
			"seq": "46,51"
		}, {
			"uri": "http://dbpedia.org/ontology/River",
			"label": "rivers",
			"seq": "0,5"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Arkansas",
			"label": "arkansas",
			"seq": "20,27"
		}]
	},
	{
		"id": "aaded2628d52480a81d952c6157fbd13",
		"question": "What is the religion of the academic authority on Ceratosoma tenue?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Ceratosoma_tenue> <http://dbpedia.org/ontology/binomialAuthority> ?x . ?x <http://dbpedia.org/property/veneratedIn> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/binomialAuthority",
			"label": "authority",
			"seq": "37,45"
		}, {
			"uri": "http://dbpedia.org/property/veneratedIn",
			"label": "religion",
			"seq": "12,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ceratosoma_tenue",
			"label": "ceratosoma tenue",
			"seq": "50,65"
		}]
	},
	{
		"id": "6b2c6038daa7480ea340b9f0afc64454",
		"question": "Which ethinicity of  Riley Reid is the state of origin of Holmes Colbert?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/property/ethnicity> ?uri. <http://dbpedia.org/resource/Holmes_Colbert> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/ethnicity",
			"label": "ethinicity",
			"seq": "6,15"
		}, {
			"uri": "http://dbpedia.org/ontology/stateOfOrigin",
			"label": "origin state of",
			"seq": "17,31"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Riley_Reid",
			"label": "riley reid",
			"seq": "21,30"
		}, {
			"uri": "http://dbpedia.org/resource/Holmes_Colbert",
			"label": "colbert holmes",
			"seq": "58,71"
		}]
	},
	{
		"id": "47f4b2253dac4f8f978ff5b8c2166041",
		"question": "Where was Girls (The Prodigy song)  recorded ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Girls_(The_Prodigy_song)> <http://dbpedia.org/property/recorded> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/recorded",
			"label": "recorded",
			"seq": "36,43"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Girls_(The_Prodigy_song)",
			"label": "prodigy song) girls (the",
			"seq": "10,33"
		}]
	},
	{
		"id": "01dc45d5615b43ea9c0888c88020fb68",
		"question": "Name the party of Indira Gandhi ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indira_Gandhi> <http://dbpedia.org/ontology/party> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/party",
			"label": "party",
			"seq": "9,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Indira_Gandhi",
			"label": "indira gandhi",
			"seq": "18,30"
		}]
	},
	{
		"id": "cea7ee307d2845a187dc51d08d6f2047",
		"question": "Who are the scientists known for the Manhattan Project?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Manhattan_Project>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/knownFor",
			"label": "known for",
			"seq": "23,31"
		}, {
			"uri": "http://dbpedia.org/ontology/Scientist",
			"label": "scientists",
			"seq": "12,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Manhattan_Project",
			"label": "manhattan project",
			"seq": "37,53"
		}]
	},
	{
		"id": "175941bf0105430bb779fd7038f266bf",
		"question": "What are the regions in which the distributor of Secrets and Lies serves ? ",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Secrets_and_Lies_(U.S._TV_series)> <http://dbpedia.org/ontology/distributor> ?x . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/distributor",
			"label": "distributor",
			"seq": "34,44"
		}, {
			"uri": "http://dbpedia.org/ontology/regionServed",
			"label": "regions",
			"seq": "13,19"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Secrets_and_Lies_(U.S._TV_series)",
			"label": "secrets",
			"seq": "49,55"
		}]
	},
	{
		"id": "fbb1dc5dc78144d4b151528772891c5a",
		"question": "Who all have been a commander during the battles of Ohio?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/place> <http://dbpedia.org/resource/Ohio> . ?x <http://dbpedia.org/ontology/commander> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/place",
			"label": "have",
			"seq": "8,11"
		}, {
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "20,28"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "commander",
			"seq": "20,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ohio",
			"label": "ohio",
			"seq": "52,55"
		}]
	},
	{
		"id": "44b54ea88b4c437bbca297ca3c04a6d3",
		"question": "Where did john o conner study?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_O'Connor_(archbishop_of_New_York)> <http://dbpedia.org/ontology/almaMater> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/almaMater",
			"label": "where",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/John_O'Connor_(archbishop_of_New_York)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "adbab66762494d168acfc5e78c49f7e6",
		"question": "Which is the common past team of the Charlie Justice (American football player) and Bobby Hoppe ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charlie_Justice_(American_football_player)> <http://dbpedia.org/property/pastteams> ?uri. <http://dbpedia.org/resource/Bobby_Hoppe> <http://dbpedia.org/property/pastteams> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/pastteams",
			"label": "team past",
			"seq": "20,28"
		}, {
			"uri": "http://dbpedia.org/property/pastteams",
			"label": "team past",
			"seq": "20,28"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charlie_Justice_(American_football_player)",
			"label": "(american football player) justice charlie",
			"seq": "37,78"
		}, {
			"uri": "http://dbpedia.org/resource/Bobby_Hoppe",
			"label": "hoppe bobby",
			"seq": "84,94"
		}]
	},
	{
		"id": "0d41f404ff594266aac5f28f38fdb49f",
		"question": "Who owns the websites for which Jimmy wales writes?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Jimmy_Wales> . ?x <http://dbpedia.org/ontology/owner> ?uri  . }",
		"sparql_id": "5",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/author",
			"label": "who",
			"seq": "0,2"
		}, {
			"uri": "http://dbpedia.org/ontology/owner",
			"label": "owns",
			"seq": "4,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Jimmy_Wales",
			"label": "wales jimmy",
			"seq": "32,42"
		}]
	},
	{
		"id": "92f7bcc8b88145149f59ce244d965e37",
		"question": "Which city council owns the Ted Williams tunnel and Leonard Memorial ridge?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ted_Williams_Tunnel> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/Leonard_P._Zakim_Bunker_Hill_Memorial_Bridge> <http://dbpedia.org/property/owner> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/owner",
			"label": "owns",
			"seq": "19,22"
		}, {
			"uri": "http://dbpedia.org/property/owner",
			"label": "owns",
			"seq": "19,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ted_Williams_Tunnel",
			"label": "williams tunnel",
			"seq": "32,46"
		}, {
			"uri": "http://dbpedia.org/resource/Leonard_P._Zakim_Bunker_Hill_Memorial_Bridge",
			"label": "memorial leonard ridge",
			"seq": "52,73"
		}]
	},
	{
		"id": "c65bca36d5634c848c7619d8c6a1f36c",
		"question": "How many other school are there of the rugby players whose school is Michaelhouse ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/school> <http://dbpedia.org/resource/Michaelhouse> . ?x <http://dbpedia.org/property/school> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/school",
			"label": "school",
			"seq": "15,20"
		}, {
			"uri": "http://dbpedia.org/property/school",
			"label": "school",
			"seq": "15,20"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Michaelhouse",
			"label": "michaelhouse",
			"seq": "69,80"
		}]
	},
	{
		"id": "8ccd8b60f2ef4e8bb9158dd030afb484",
		"question": "How many people have been the first one to scale a peak in the Yosemite Park?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Yosemite_National_Park> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "405",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/locatedInArea",
			"label": "one",
			"seq": "36,38"
		}, {
			"uri": "http://dbpedia.org/ontology/firstAscentPerson",
			"label": "first",
			"seq": "30,34"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Yosemite_National_Park",
			"label": "yosemite park",
			"seq": "63,75"
		}]
	},
	{
		"id": "aad9f9ceb4364ee9b570d43ca42ce29c",
		"question": "Name the battle fought by the people which also fought in Levant ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Levant> . ?x <http://dbpedia.org/property/battles> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
		"sparql_id": "311",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battle",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/property/battles",
			"label": "battle",
			"seq": "9,14"
		}, {
			"uri": "http://dbpedia.org/ontology/Person",
			"label": "people",
			"seq": "30,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Levant",
			"label": "levant",
			"seq": "58,63"
		}]
	},
	{
		"id": "c1e28310cb5443f18804bfc7fb1af725",
		"question": "Who starred in Awakening and fifety five days at peknig ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Awakening_(1980_film)> <http://dbpedia.org/property/starring> ?uri. <http://dbpedia.org/resource/55_Days_at_Peking> <http://dbpedia.org/ontology/starring> ?uri . }",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "starred",
			"seq": "4,10"
		}, {
			"uri": "http://dbpedia.org/ontology/starring",
			"label": "starred",
			"seq": "4,10"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Awakening_(1980_film)",
			"label": "awakening",
			"seq": "15,23"
		}, {
			"uri": "http://dbpedia.org/resource/55_Days_at_Peking",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "8adc86df67ad4f3694781a4fe7f98495",
		"question": "Whose relatives are Clan McDuck and Huey, Dewey, and Louie?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "6,14"
		}, {
			"uri": "http://dbpedia.org/property/relatives",
			"label": "relatives",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Clan_McDuck",
			"label": "mcduck clan",
			"seq": "20,30"
		}, {
			"uri": "http://dbpedia.org/resource/Huey,_Dewey,_and_Louie",
			"label": "dewey, louie huey,",
			"seq": "36,53"
		}]
	},
	{
		"id": "bc2f6bbbd8bb4055b65d42a97608f366",
		"question": "Which location country of Ennejma Ezzahra is also the origin of Boga ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Boga_(soft_drink)> <http://dbpedia.org/property/origin> ?uri. <http://dbpedia.org/resource/Ennejma_Ezzahra> <http://dbpedia.org/property/locationCountry> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/origin",
			"label": "origin",
			"seq": "54,59"
		}, {
			"uri": "http://dbpedia.org/property/locationCountry",
			"label": "location country",
			"seq": "6,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Boga_(soft_drink)",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/Ennejma_Ezzahra",
			"label": "ezzahra ennejma",
			"seq": "26,40"
		}]
	},
	{
		"id": "f22fef56a0c84c86886dc2dc2243a721",
		"question": "What is the PLACE OF DEATH of Charles Gordon (artist) ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_Gordon_(artist)> <http://dbpedia.org/property/placeOfDeath> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfDeath",
			"label": "place death of",
			"seq": "12,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Charles_Gordon_(artist)",
			"label": "(artist) charles gordon",
			"seq": "30,52"
		}]
	},
	{
		"id": "649d452e63834157a29c6a1db0e777fa",
		"question": "What actor of Le Cirque is a relative of Maryanne Trump barry?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Le_Cirque:_A_Table_in_Heaven> <http://dbpedia.org/property/starring> ?uri. <http://dbpedia.org/resource/Maryanne_Trump_Barry> <http://dbpedia.org/ontology/relation> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/starring",
			"label": "barry",
			"seq": "56,60"
		}, {
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relative",
			"seq": "29,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Le_Cirque:_A_Table_in_Heaven",
			"label": "cirque",
			"seq": "17,22"
		}, {
			"uri": "http://dbpedia.org/resource/Maryanne_Trump_Barry",
			"label": "maryanne trump barry",
			"seq": "41,60"
		}]
	},
	{
		"id": "6a6a9694fbb44140ada81d7a8c89aa0f",
		"question": "How many buildings are located in Toronto ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Toronto>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
		"sparql_id": "401",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/location",
			"label": "located",
			"seq": "23,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Building",
			"label": "buildings",
			"seq": "9,17"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Toronto",
			"label": "toronto",
			"seq": "34,40"
		}]
	},
	{
		"id": "d5f39362abb34bc4a563caa4d12fa4ce",
		"question": "List the Stanley Kubrick's movies which has music by Laurie Johnson  ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> . ?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Laurie_Johnson>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/director",
			"label": "list",
			"seq": "0,3"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "44,48"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "list",
			"seq": "0,3"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Stanley_Kubrick",
			"label": "stanley",
			"seq": "9,15"
		}, {
			"uri": "http://dbpedia.org/resource/Laurie_Johnson",
			"label": "johnson laurie",
			"seq": "53,66"
		}]
	},
	{
		"id": "b35488681e4c4dbb94efcbc1eb49a31d",
		"question": "Which office holder's constituency is Haight-Ashbury and has military unit as USS Kittiwake ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/USS_Kittiwake_(ASR-13)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/constituency",
			"label": "constituency",
			"seq": "22,33"
		}, {
			"uri": "http://dbpedia.org/ontology/militaryUnit",
			"label": "military unit",
			"seq": "61,73"
		}, {
			"uri": "http://dbpedia.org/ontology/OfficeHolder",
			"label": "office",
			"seq": "6,11"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Haight-Ashbury",
			"label": "haight-ashbury",
			"seq": "38,51"
		}, {
			"uri": "http://dbpedia.org/resource/USS_Kittiwake_(ASR-13)",
			"label": "kittiwake",
			"seq": "82,90"
		}]
	},
	{
		"id": "9b3d41fd10154e0099da01bfaf7daf4a",
		"question": "Name the composer of motorpsycho Nitemare ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/composer",
			"label": "composer",
			"seq": "9,16"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Motorpsycho_Nitemare",
			"label": "motorpsycho nitemare",
			"seq": "21,40"
		}]
	},
	{
		"id": "812a3d6cf42c439cb59c16744da1932d",
		"question": "Which TV show's writer is Erik Jendresen and distributor is HBO?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/HBO>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/writer",
			"label": "writer",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/property/distributor",
			"label": "distributor",
			"seq": "45,55"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show's",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erik_Jendresen",
			"label": "jendresen erik",
			"seq": "26,39"
		}, {
			"uri": "http://dbpedia.org/resource/HBO",
			"label": "hbo",
			"seq": "60,62"
		}]
	},
	{
		"id": "219e980d18d243f3a491b427da37633b",
		"question": "What are some relatives of Battle of the Bulge veterans?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Battle_of_the_Bulge> . ?x <http://dbpedia.org/ontology/relation> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/battles",
			"label": "battle",
			"seq": "27,32"
		}, {
			"uri": "http://dbpedia.org/ontology/relation",
			"label": "relatives",
			"seq": "14,22"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryPerson",
			"label": "veterans",
			"seq": "47,54"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Battle_of_the_Bulge",
			"label": "battle bulge the",
			"seq": "27,42"
		}]
	},
	{
		"id": "8246341ae9094f0e9ddd0b1becf8a139",
		"question": "Name the military conflict whose commander was Colin Powell and took place in israel ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Colin_Powell> . ?uri <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Israel>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/commander",
			"label": "commander",
			"seq": "33,41"
		}, {
			"uri": "http://dbpedia.org/ontology/place",
			"label": "place",
			"seq": "69,73"
		}, {
			"uri": "http://dbpedia.org/ontology/MilitaryConflict",
			"label": "military conflict",
			"seq": "9,25"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Colin_Powell",
			"label": "powell colin",
			"seq": "47,58"
		}, {
			"uri": "http://dbpedia.org/resource/Israel",
			"label": "israel",
			"seq": "78,83"
		}]
	},
	{
		"id": "bc638eba36ac42a4ad637b88465f433e",
		"question": "In which city did The Ultimate Fighter: Team Rousey vs. Team Tate take place ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Ultimate_Fighter:_Team_Rousey_vs._Team_Tate> <http://dbpedia.org/property/city> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/city",
			"label": "city",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/The_Ultimate_Fighter:_Team_Rousey_vs._Team_Tate",
			"label": "ultimate fighter: rousey team",
			"seq": "22,50"
		}]
	},
	{
		"id": "a6b97c0cc3ad4ba4964258498472eafa",
		"question": "Who are all the people who used to figure skate with the current partner of Alexa Scimeca?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Alexa_Scimeca> <http://dbpedia.org/ontology/currentPartner> ?x . ?x <http://dbpedia.org/ontology/formerPartner> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currentPartner",
			"label": "partner current",
			"seq": "57,71"
		}, {
			"uri": "http://dbpedia.org/ontology/formerPartner",
			"label": "partner",
			"seq": "65,71"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Alexa_Scimeca",
			"label": "scimeca alexa",
			"seq": "76,88"
		}]
	},
	{
		"id": "066bf38e50c649399528f93568815cf5",
		"question": "Which company was the designer of South African class 11e and RENFE class 333 ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_African_Class_11E> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/RENFE_Class_333> <http://dbpedia.org/ontology/designer> ?uri . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
		"sparql_id": "315",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/designer",
			"label": "designer",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/designer",
			"label": "designer",
			"seq": "22,29"
		}, {
			"uri": "http://dbpedia.org/ontology/Company",
			"label": "company",
			"seq": "6,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/South_African_Class_11E",
			"label": "african south class",
			"seq": "34,52"
		}, {
			"uri": "http://dbpedia.org/resource/RENFE_Class_333",
			"label": "renfe class 333",
			"seq": "48,62"
		}]
	},
	{
		"id": "10c135a7b31546cc91c3dacf6c470b5c",
		"question": "What is the scientist whose doctoral students are Erich Bagge and erban ieica?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Erich_Bagge> . ?uri <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/\u0218erban_\u021ai\u021beica> . }",
		"sparql_id": "7",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/doctoralStudent",
			"label": "doctoral",
			"seq": "28,35"
		}, {
			"uri": "http://dbpedia.org/ontology/doctoralStudent",
			"label": "doctoral",
			"seq": "28,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Erich_Bagge",
			"label": "erich bagge",
			"seq": "50,60"
		}, {
			"uri": "http://dbpedia.org/resource/\u0218erban_\u021ai\u021beica",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "3b7d789c05074466884d8e0d189d97c4",
		"question": " Who astronaut from NASA was on the mission of Apollo 11?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Apollo_11> . ?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/NASA>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mission",
			"label": "mission",
			"seq": "36,42"
		}, {
			"uri": "http://dbpedia.org/property/type",
			"label": "the",
			"seq": "32,34"
		}, {
			"uri": "http://dbpedia.org/ontology/Astronaut",
			"label": "astronaut",
			"seq": "5,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Apollo_11",
			"label": "apollo 11",
			"seq": "47,55"
		}, {
			"uri": "http://dbpedia.org/resource/NASA",
			"label": "nasa",
			"seq": "20,23"
		}]
	},
	{
		"id": "f14140c456b043708cbc1405ee4fbde7",
		"question": "How many have family as Ape and order (taxonomy) is Primate ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape> . ?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Primate> } ",
		"sparql_id": "108",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/family",
			"label": "family",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/order",
			"label": "order",
			"seq": "32,36"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Ape",
			"label": "ape",
			"seq": "24,26"
		}, {
			"uri": "http://dbpedia.org/resource/Primate",
			"label": "primate",
			"seq": "52,58"
		}]
	},
	{
		"id": "2549956a9313466db645ee46bb1f01b8",
		"question": "Count the total awards won by the writer who has won Goethe Prize ?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Goethe_Prize> . ?x <http://dbpedia.org/property/awards> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "16,21"
		}, {
			"uri": "http://dbpedia.org/property/awards",
			"label": "awards",
			"seq": "16,21"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Goethe_Prize",
			"label": "goethe prize",
			"seq": "53,64"
		}]
	},
	{
		"id": "c26fb222e05a44ed915b27a0b62b1f35",
		"question": "Games on amiga are typically of what kind?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Amiga> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/computingPlatform",
			"label": "games",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "are",
			"seq": "15,17"
		}, {
			"uri": "http://dbpedia.org/ontology/VideoGame",
			"label": "games",
			"seq": "0,4"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Amiga",
			"label": "amiga",
			"seq": "9,13"
		}]
	},
	{
		"id": "79debf2d75fe4c2c9651c15e18116af1",
		"question": "Whose resting place is William Henry Harrison Tomb State Memorial and has kids named John Scott Harrison?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/William_Henry_Harrison_Tomb_State_Memorial> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/John_Scott_Harrison>  . }",
		"sparql_id": "8",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/restingplace",
			"label": "resting place",
			"seq": "6,18"
		}, {
			"uri": "http://dbpedia.org/ontology/child",
			"label": "kids",
			"seq": "74,77"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/William_Henry_Harrison_Tomb_State_Memorial",
			"label": "memorial harrison william",
			"seq": "23,47"
		}, {
			"uri": "http://dbpedia.org/resource/John_Scott_Harrison",
			"label": "harrison scott john",
			"seq": "37,55"
		}]
	},
	{
		"id": "29513d9bf3fb453da72170be9f27bc0d",
		"question": "Muhammad Yunus has won how many awards?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Muhammad_Yunus> <http://dbpedia.org/ontology/award> ?uri  . }",
		"sparql_id": "102",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/award",
			"label": "awards",
			"seq": "32,37"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Muhammad_Yunus",
			"label": "muhammad yunus",
			"seq": "0,13"
		}]
	},
	{
		"id": "ac2cdf6aeebd49aba3049d487a9ce8a1",
		"question": "Through which states does the stream ending at Saunders county go?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Saunders_County,_Nebraska> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stream>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/mouthLocation",
			"label": "states",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/state",
			"label": "states",
			"seq": "14,19"
		}, {
			"uri": "http://dbpedia.org/ontology/Stream",
			"label": "stream",
			"seq": "30,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Saunders_County,_Nebraska",
			"label": "saunders county",
			"seq": "47,61"
		}]
	},
	{
		"id": "5bba92da3db5463eb604709023bbdce3",
		"question": "Which religions' people fought in the Miao rebellion?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/Miao_Rebellion_(1795\u20131806)> <http://dbpedia.org/property/combatant> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
		"sparql_id": "3",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/combatant",
			"label": "miao",
			"seq": "38,41"
		}, {
			"uri": "http://dbpedia.org/ontology/religion",
			"label": "religions'",
			"seq": "6,15"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Miao_Rebellion_(1795\u20131806)",
			"label": "rebellion",
			"seq": "43,51"
		}]
	},
	{
		"id": "639d2cebd1c947d086337507434c201d",
		"question": "What are some languages in the italic family of languages?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Italic_languages> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/languageFamily",
			"label": "languages",
			"seq": "14,22"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Italic_languages",
			"label": "languages italic",
			"seq": "14,29"
		}]
	},
	{
		"id": "bef5d2d4a45a4e84bdc7a586d4247c3c",
		"question": "What is the product of the BBC Multimedia and is the theme of Visions, the convention?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/BBC_Multimedia> <http://dbpedia.org/ontology/product> ?uri. <http://dbpedia.org/resource/Visions_(convention)> <http://dbpedia.org/property/genre> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/product",
			"label": "product",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/property/genre",
			"label": "theme",
			"seq": "53,57"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/BBC_Multimedia",
			"label": "multimedia bbc",
			"seq": "27,40"
		}, {
			"uri": "http://dbpedia.org/resource/Visions_(convention)",
			"label": "convention",
			"seq": "75,84"
		}]
	},
	{
		"id": "aa9357296bd640539d42bcd5e05bca8a",
		"question": "How many people hold important positions alongwith Donna Shalala?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Donna_Shalala> . ?x <http://dbpedia.org/property/keyPeople> ?uri  . }",
		"sparql_id": "105",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/keyPerson",
			"label": "positions",
			"seq": "31,39"
		}, {
			"uri": "http://dbpedia.org/property/keyPeople",
			"label": "people",
			"seq": "9,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Donna_Shalala",
			"label": "shalala donna",
			"seq": "51,63"
		}]
	},
	{
		"id": "7fb2e2a29f6247bf9a36f9dae36fa67d",
		"question": "Which currency can I use both in Kerguelen islands and French southern and antarctic lands?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> <http://dbpedia.org/ontology/currency> ?uri. <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri . }",
		"sparql_id": "15",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currency",
			"seq": "6,13"
		}, {
			"uri": "http://dbpedia.org/ontology/currency",
			"label": "currency",
			"seq": "6,13"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands",
			"label": "antarctic southern french",
			"seq": "55,79"
		}, {
			"uri": "http://dbpedia.org/resource/Kerguelen_Islands",
			"label": "kerguelen islands",
			"seq": "33,49"
		}]
	},
	{
		"id": "c002ce3102a6429a849b2bc1c63213c8",
		"question": "Where do I find buildings rented by Weber Thompson?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Weber_Thompson> . ?x <http://dbpedia.org/property/address> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "rented",
			"seq": "26,31"
		}, {
			"uri": "http://dbpedia.org/property/address",
			"label": "where",
			"seq": "0,4"
		}, {
			"uri": "http://dbpedia.org/ontology/Building",
			"label": "buildings",
			"seq": "16,24"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Weber_Thompson",
			"label": "thompson weber",
			"seq": "36,49"
		}]
	},
	{
		"id": "ab3856e5604443d1967a40d89f070cc9",
		"question": "Who is the father of Edith Vonnegut and is also a writer?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edith_Vonnegut>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>}",
		"sparql_id": "301",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/child",
			"label": "is",
			"seq": "4,5"
		}, {
			"uri": "http://dbpedia.org/ontology/Writer",
			"label": "writer",
			"seq": "50,55"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Edith_Vonnegut",
			"label": "vonnegut edith",
			"seq": "21,34"
		}]
	},
	{
		"id": "88fe11d131e142dfa0952fca359787eb",
		"question": "What is the burial place of Iyoas I ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Iyoas_I> <http://dbpedia.org/property/placeOfBurial> ?uri } ",
		"sparql_id": "2",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/placeOfBurial",
			"label": "burial place of",
			"seq": "12,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Iyoas_I",
			"label": "iyoas",
			"seq": "28,32"
		}]
	},
	{
		"id": "a05e1d00e47e4843ac91a9fc0905efba",
		"question": "Who are the tenants of the stadium which is a venue of WCW Mayhem ?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { <http://dbpedia.org/resource/WCW_Mayhem> <http://dbpedia.org/property/venue> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
		"sparql_id": "303",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/venue",
			"label": "venue",
			"seq": "46,50"
		}, {
			"uri": "http://dbpedia.org/ontology/tenant",
			"label": "tenants",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Stadium",
			"label": "stadium",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/WCW_Mayhem",
			"label": "mayhem wcw",
			"seq": "55,64"
		}]
	},
	{
		"id": "61779d70e408400886f2c2932d7b5e69",
		"question": "List all the movies whose music has been made up with someone under RCA records?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/RCA_Records> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
		"sparql_id": "306",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/recordLabel",
			"label": "records",
			"seq": "72,78"
		}, {
			"uri": "http://dbpedia.org/property/music",
			"label": "music",
			"seq": "26,30"
		}, {
			"uri": "http://dbpedia.org/ontology/Film",
			"label": "all",
			"seq": "5,7"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/RCA_Records",
			"label": "records rca",
			"seq": "68,78"
		}]
	},
	{
		"id": "b7433a3ea1cf4a279f781878b61b08b5",
		"question": "Is Brazilian jiu-jitsu the trainer of Nick Diaz?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Nick_Diaz> <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Brazilian_jiu-jitsu> }",
		"sparql_id": "151",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/trainer",
			"label": "trainer",
			"seq": "27,33"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Nick_Diaz",
			"label": "nick diaz",
			"seq": "38,46"
		}, {
			"uri": "http://dbpedia.org/resource/Brazilian_jiu-jitsu",
			"label": "jiu-jitsu brazilian",
			"seq": "3,21"
		}]
	},
	{
		"id": "824317de97054fe7b674e6cf7d41721f",
		"question": "Who are the members of organizations headquartered at Amstelveen?",
		"sparql_query": "SELECT DISTINCT ?uri, ?x WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Amstelveen> . ?x <http://dbpedia.org/property/membership> ?uri  . ?x <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
		"sparql_id": "305",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/headquarters",
			"label": "headquartered",
			"seq": "37,49"
		}, {
			"uri": "http://dbpedia.org/property/membership",
			"label": "members",
			"seq": "12,18"
		}, {
			"uri": "http://dbpedia.org/ontology/Organisation",
			"label": "organizations",
			"seq": "23,35"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Amstelveen",
			"label": "amstelveen",
			"seq": "54,63"
		}]
	},
	{
		"id": "56b56d6d68fc4235bafbf28b726a4dff",
		"question": "What is the total number of other combatant of the military conflicts whose combatant is Choctaw?",
		"sparql_query": " SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/combatant> <http://dbpedia.org/resource/Choctaw> . ?x <http://dbpedia.org/property/combatant> ?uri }",
		"sparql_id": "111",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/combatant",
			"label": "combatant",
			"seq": "34,42"
		}, {
			"uri": "http://dbpedia.org/property/combatant",
			"label": "combatant",
			"seq": "34,42"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Choctaw",
			"label": "choctaw",
			"seq": "89,95"
		}]
	},
	{
		"id": "f81e51fa36714841b71d71f2c518a477",
		"question": "What movies have been produced by the production house owned by Larry J. Franco?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Larry_J._Franco> } ",
		"sparql_id": "1",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/producer",
			"label": "produced",
			"seq": "22,29"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Larry_J._Franco",
			"label": "franco larry j.",
			"seq": "64,78"
		}]
	},
	{
		"id": "03dc94e9c928474f91e0414b14f9e1e4",
		"question": "Name the show formed by J. Michael Stroczynski and had network as TNT ?",
		"sparql_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski> . ?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/TNT_(TV_channel)>  . ?uri <https://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
		"sparql_id": "308",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/developer",
			"label": "network",
			"seq": "55,61"
		}, {
			"uri": "http://dbpedia.org/property/network",
			"label": "network",
			"seq": "55,61"
		}, {
			"uri": "http://dbpedia.org/ontology/TelevisionShow",
			"label": "show",
			"seq": "9,12"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/J._Michael_Straczynski",
			"label": "",
			"seq": "1000,999"
		}, {
			"uri": "http://dbpedia.org/resource/TNT_(TV_channel)",
			"label": "",
			"seq": "1000,999"
		}]
	},
	{
		"id": "2ca6c46d4387400999f62cc8354d3f73",
		"question": "Count all those who previously played for a team which ownes Varsity Stadium ?",
		"sparql_query": "SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/field> <http://dbpedia.org/resource/Varsity_Stadium> . ?uri <http://dbpedia.org/ontology/formerTeam> ?x  . }",
		"sparql_id": "106",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/property/field",
			"label": "played",
			"seq": "31,36"
		}, {
			"uri": "http://dbpedia.org/ontology/formerTeam",
			"label": "team for",
			"seq": "38,45"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Varsity_Stadium",
			"label": "varsity stadium",
			"seq": "61,75"
		}]
	},
	{
		"id": "2b9759c6010b4d4181dbad7e72db419c",
		"question": "Is NY Rangers a prospective team for Robin Kovacs?",
		"sparql_query": "ASK WHERE { <http://dbpedia.org/resource/Robin_Kovacs> <http://dbpedia.org/ontology/prospectTeam> <http://dbpedia.org/resource/New_York_Rangers> }",
		"sparql_id": "152",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/prospectTeam",
			"label": "prospective",
			"seq": "16,26"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/Robin_Kovacs",
			"label": "kovacs robin",
			"seq": "37,48"
		}, {
			"uri": "http://dbpedia.org/resource/New_York_Rangers",
			"label": "rangers",
			"seq": "6,12"
		}]
	},
	{
		"id": "1740f374977d429492e5c58dce8e4273",
		"question": "Which headcoach of Marquette Golden Eagles men's basketball team, 2008-09 was also the coach of Marquette Golden Eagles team ?",
		"sparql_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2013\u201314_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/ontology/coach> ?uri. <http://dbpedia.org/resource/2008\u201309_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/property/headcoach> ?uri} ",
		"sparql_id": "16",
		"checked": "false",
		"predicate mapping": [{
			"uri": "http://dbpedia.org/ontology/coach",
			"label": "coach",
			"seq": "10,14"
		}, {
			"uri": "http://dbpedia.org/property/headcoach",
			"label": "headcoach",
			"seq": "6,14"
		}],
		"entity mapping": [{
			"uri": "http://dbpedia.org/resource/2013\u201314_Marquette_Golden_Eagles_men's_basketball_team",
			"label": "basketball marquette golden",
			"seq": "19,45"
		}, {
			"uri": "http://dbpedia.org/resource/2008\u201309_Marquette_Golden_Eagles_men's_basketball_team",
			"label": "basketball marquette golden",
			"seq": "19,45"
		}]
	}
]