[
  {
    "sparql_id": "2",
    "question": "Name the municipality of Roberto Clemente Bridge ?",
    "SerialNumber": "5",
    "Words": "[Name, the, municipality, of, Roberto, Clemente, Bridge, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Roberto_Clemente_Bridge\u003e \u003chttp://dbpedia.org/ontology/municipality\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 1,
        "label": "Roberto Clemente Bridge",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Roberto_Clemente_Bridge",
        "seq": "25,48"
      }
    ],
    "CleanPhrase": "[municipality, Roberto Clemente Bridge]",
    "id": "8216e5b6033a407191548689994aa32e",
    "Phrase": "[Name;;, the municipality;;, of;;, Roberto Clemente Bridge;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "municipality",
        "uri": "http://dbpedia.org/ontology/municipality",
        "seq": "9,20",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the operator of SR class 3Sub ?",
    "SerialNumber": "23",
    "Words": "[What, is, the, operator, of, SR, class, 3Sub, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/SR_class_3Sub\u003e \u003chttp://dbpedia.org/ontology/operator\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 0,
        "label": "SR class 3Sub",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/SR_class_3Sub",
        "seq": "24,37"
      }
    ],
    "CleanPhrase": "[operator, SR class]",
    "id": "df8a83a06ca941c3b6f30667a64bc305",
    "Phrase": "[What;;, is;;, the operator;;, of;;, SR class;;]",
    "predicate mapping": [
      {
        "score": 7,
        "label": "operator",
        "uri": "http://dbpedia.org/ontology/operator",
        "seq": "12,19",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the tenants of O.co Coliseum ?",
    "SerialNumber": "26",
    "Words": "[Name, the, tenants, of, O, co, Coliseum, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/O.co_Coliseum\u003e \u003chttp://dbpedia.org/ontology/tenant\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 1,
        "label": "O.co Coliseum",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/O.co_Coliseum",
        "seq": "20,33"
      }
    ],
    "CleanPhrase": "[tenants, O Coliseum]",
    "id": "a649a19bfcbc4f2e962d2199f8e9598d",
    "Phrase": "[Name;;, the tenants;;, of;;, O co Coliseum;;]",
    "predicate mapping": [
      {
        "score": 12,
        "label": "tenants",
        "uri": "http://dbpedia.org/ontology/tenant",
        "seq": "9,15",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "which politician is currently ruling over Rishikesh?",
    "SerialNumber": "27",
    "Words": "[which, politician, is, currently, ruling, over, Rishikesh, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Rishikesh\u003e \u003chttp://dbpedia.org/ontology/leaderName\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 3,
        "label": "Rishikesh",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Rishikesh",
        "seq": "42,51"
      }
    ],
    "CleanPhrase": "[politician, ruling, Rishikesh]",
    "id": "30e697b1548c4671bb748f26a165543c",
    "Phrase": "[which;;, politician;;, is currently ruling;;, over;;, Rishikesh;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "politician",
        "uri": "http://dbpedia.org/ontology/leaderName",
        "seq": "6,15",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the type of Greenup County High School?",
    "SerialNumber": "36",
    "Words": "[What, are, the, type, of, Greenup, County, High, School, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Greenup_County_High_School\u003e \u003chttp://dbpedia.org/property/type\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 0,
        "label": "Greenup County High School",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Greenup_County_High_School",
        "seq": "21,47"
      }
    ],
    "CleanPhrase": "[type, Greenup County High School]",
    "id": "42d9e558edd840a0a310036f7f9bb9b2",
    "Phrase": "[What;;, are;;, the type;;, of;;, Greenup County High School;;]",
    "predicate mapping": [
      {
        "score": 732,
        "label": "type",
        "uri": "http://dbpedia.org/property/type",
        "seq": "13,16",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the teams for which Bobby Hoppe played ?",
    "SerialNumber": "37",
    "Words": "[List, the, teams, for, which, Bobby, Hoppe, played, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bobby_Hoppe\u003e \u003chttp://dbpedia.org/property/pastteams\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 1,
        "label": "Bobby Hoppe",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Bobby_Hoppe",
        "seq": "25,36"
      }
    ],
    "CleanPhrase": "[List, teams, Bobby Hoppe, played]",
    "id": "082ecdc0056f4f3192e3b13e46d0ee0c",
    "Phrase": "[List;;, the teams;;, for;;, which;;, Bobby Hoppe;;, played;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "teams",
        "uri": "http://dbpedia.org/property/pastteams",
        "seq": "9,13",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What are the schools whose city is Reading, Berkshire?",
    "SerialNumber": "41",
    "Words": "[What, are, the, schools, whose, city, is, Reading, ,, Berkshire, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/city\u003e \u003chttp://dbpedia.org/resource/Reading,_Berkshire\u003e } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 0,
        "label": "Reading, Berkshire",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Reading,_Berkshire",
        "seq": "35,53"
      }
    ],
    "CleanPhrase": "[schools, city, Reading, Berkshire]",
    "id": "9a7523469c8c45b58ec65ed56af6e306",
    "Phrase": "[What;;, are;;, the schools;;, whose city;;, is;;, Reading;;, Berkshire;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "city",
        "uri": "http://dbpedia.org/ontology/city",
        "seq": "27,30",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the actors of  Lucy Sullivan Is Getting Married?",
    "SerialNumber": "54",
    "Words": "[List, the, actors, of, Lucy, Sullivan, Is, Getting, Married, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Lucy_Sullivan_Is_Getting_Married\u003e \u003chttp://dbpedia.org/property/starring\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 1,
        "label": "Lucy Sullivan Is Getting Married",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Lucy_Sullivan_Is_Getting_Married",
        "seq": "20,52"
      }
    ],
    "CleanPhrase": "[List, actors, Lucy Sullivan, Married]",
    "id": "f3110585cbc94fc69f9f61aeb1c3555f",
    "Phrase": "[List;;, the actors;;, of;;, Lucy Sullivan;;, Is Getting;;, Married \\;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "actors of",
        "uri": "http://dbpedia.org/property/starring",
        "seq": "9,17",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the style of architecture of South Loop Printing House District ?",
    "SerialNumber": "61",
    "Words": "[What, is, the, style, of, architecture, of, South, Loop, Printing, House, District, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/South_Loop_Printing_House_District\u003e \u003chttp://dbpedia.org/ontology/architecturalStyle\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 0,
        "label": "South Loop Printing House District",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/South_Loop_Printing_House_District",
        "seq": "37,71"
      }
    ],
    "CleanPhrase": "[style, architecture, South Loop Printing House District]",
    "id": "2a11aeb11ce248cfaf63be2b6701fe9a",
    "Phrase": "[What;;, is;;, the style;;, of;;, architecture;;, of;;, South Loop Printing House District;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "style of architecture",
        "uri": "http://dbpedia.org/ontology/architecturalStyle",
        "seq": "12,32",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the nationality of Newin Chidchob ?",
    "SerialNumber": "64",
    "Words": "[What, is, the, nationality, of, Newin, Chidchob, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Newin_Chidchob\u003e \u003chttp://dbpedia.org/property/nationality\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 0,
        "label": "Newin Chidchob",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Newin_Chidchob",
        "seq": "27,41"
      }
    ],
    "CleanPhrase": "[nationality, Newin Chidchob]",
    "id": "873c3fe1ec484dcfbb114320042f298d",
    "Phrase": "[What;;, is;;, the nationality;;, of;;, Newin Chidchob;;]",
    "predicate mapping": [
      {
        "score": 24,
        "label": "nationality",
        "uri": "http://dbpedia.org/property/nationality",
        "seq": "12,22",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who gave the voice for Allen Walker ?",
    "SerialNumber": "75",
    "Words": "[Who, gave, the, voice, for, Allen, Walker, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Allen_Walker\u003e \u003chttp://dbpedia.org/ontology/voice\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 6,
        "label": "Allen Walker",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Allen_Walker",
        "seq": "23,35"
      }
    ],
    "CleanPhrase": "[gave, voice, Allen Walker]",
    "id": "48584c830439478e9272821ca6fac246",
    "Phrase": "[Who;;, gave;;, the voice;;, for;;, Allen Walker;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "voice",
        "uri": "http://dbpedia.org/ontology/voice",
        "seq": "13,17",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is the swedish covenant hospital?",
    "SerialNumber": "80",
    "Words": "[Where, is, the, swedish, covenant, hospital, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Swedish_Covenant_Hospital\u003e \u003chttp://dbpedia.org/ontology/location\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 0,
        "label": "swedish covenant hospital",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Swedish_Covenant_Hospital",
        "seq": "13,38"
      }
    ],
    "CleanPhrase": "[swedish covenant hospital]",
    "id": "ef9db1b8f7de4e319db223cee9531bb4",
    "Phrase": "[Where;;, is;;, the swedish covenant hospital;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "Where",
        "uri": "http://dbpedia.org/ontology/location",
        "seq": "0,4",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the alma mater of Michael hahn ?",
    "SerialNumber": "91",
    "Words": "[Name, the, alma, mater, of, Michael, hahn, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Michael_Hahn\u003e \u003chttp://dbpedia.org/ontology/almaMater\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 2,
        "label": "Michael hahn",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Michael_Hahn",
        "seq": "23,35"
      }
    ],
    "CleanPhrase": "[alma mater, Michael]",
    "id": "d87c7466bde24cb3a5fcc03dc0c210fe",
    "Phrase": "[Name;;, the alma mater;;, of;;, Michael;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "mater alma",
        "uri": "http://dbpedia.org/ontology/almaMater",
        "seq": "9,18",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the cast members of The Simpsons Ride?",
    "SerialNumber": "94",
    "Words": "[Who, are, the, cast, members, of, The, Simpsons, Ride, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Simpsons_Ride\u003e \u003chttp://dbpedia.org/property/starring\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 2,
        "label": "The Simpsons Ride",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/The_Simpsons_Ride",
        "seq": "28,45"
      }
    ],
    "CleanPhrase": "[cast members, Simpsons Ride]",
    "id": "1df652b299e84ef4a467b353d91a9eff",
    "Phrase": "[Who;;, are;;, the cast members;;, of;;, The Simpsons Ride;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "cast members",
        "uri": "http://dbpedia.org/property/starring",
        "seq": "12,23",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the products of Playboy Enterprises?",
    "SerialNumber": "97",
    "Words": "[List, the, products, of, Playboy, Enterprises, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Playboy_Enterprises\u003e \u003chttp://dbpedia.org/property/products\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 1,
        "label": "Playboy Enterprises",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Playboy_Enterprises",
        "seq": "21,40"
      }
    ],
    "CleanPhrase": "[List, products, Playboy Enterprises]",
    "id": "5e3b1b3d67c14e79a69346483e72f30e",
    "Phrase": "[List;;, the products;;, of;;, Playboy Enterprises;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "products",
        "uri": "http://dbpedia.org/property/products",
        "seq": "9,16",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was Antonio Giannini born?",
    "SerialNumber": "110",
    "Words": "[Where, was, Antonio, Giannini, born, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Antonio_Giannini\u003e \u003chttp://dbpedia.org/ontology/birthPlace\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 3,
        "label": "Antonio Giannini",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Antonio_Giannini",
        "seq": "10,26"
      }
    ],
    "CleanPhrase": "[Antonio Giannini, born]",
    "id": "30e7fe4d37d4480d8bcd9e85057504ab",
    "Phrase": "[Where;;, was;;, Antonio Giannini;;, born;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "born",
        "uri": "http://dbpedia.org/ontology/birthPlace",
        "seq": "27,30",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was David Scherman trained ?",
    "SerialNumber": "111",
    "Words": "[Where, was, David, Scherman, trained, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/David_Scherman\u003e \u003chttp://dbpedia.org/ontology/training\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 3,
        "label": "David Scherman",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/David_Scherman",
        "seq": "10,24"
      }
    ],
    "CleanPhrase": "[David Scherman, trained]",
    "id": "b1eb16707621406e83de3269573e6703",
    "Phrase": "[Where;;, was;;, David Scherman;;, trained;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "trained",
        "uri": "http://dbpedia.org/ontology/training",
        "seq": "25,31",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the province of Rouen Business School ?",
    "SerialNumber": "113",
    "Words": "[What, is, the, province, of, Rouen, Business, School, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Rouen_Business_School\u003e \u003chttp://dbpedia.org/property/province\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 4,
        "label": "Rouen Business School",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Rouen_Business_School",
        "seq": "24,45"
      }
    ],
    "CleanPhrase": "[province, Rouen Business School]",
    "id": "b7ac1b81508e4f6081ad0dc4b5b009f5",
    "Phrase": "[What;;, is;;, the province;;, of;;, Rouen Business School;;]",
    "predicate mapping": [
      {
        "score": 72,
        "label": "province",
        "uri": "http://dbpedia.org/property/province",
        "seq": "12,19",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was Live in Detroit, MI recorded ?",
    "SerialNumber": "117",
    "Words": "[Where, was, Live, in, Detroit, ,, MI, recorded, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Live_in_Detroit,_MI\u003e \u003chttp://dbpedia.org/ontology/recordedIn\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 1,
        "label": "Live in Detroit, MI",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Live_in_Detroit,_MI",
        "seq": "10,29"
      }
    ],
    "CleanPhrase": "[Live, Detroit, MI, recorded]",
    "id": "e9800af29b274e64b6e1d8fe78b11a40",
    "Phrase": "[Where;;, was;;, Live;;, in;;, Detroit;;, MI;;, recorded;;]",
    "predicate mapping": [
      {
        "score": 26,
        "label": "recorded",
        "uri": "http://dbpedia.org/ontology/recordedIn",
        "seq": "30,37",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "who all have been a manager of english under twenty one football team?",
    "SerialNumber": "118",
    "Words": "[who, all, have, been, a, manager, of, english, under, twenty, one, football, team, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/managerclubs\u003e \u003chttp://dbpedia.org/resource/England_national_under-21_football_team\u003e } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": -1,
        "label": "twenty one football team",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/England_national_under-21_football_team",
        "seq": "45,55"
      }
    ],
    "CleanPhrase": "[manager, english, twenty football team]",
    "id": "5c2a0fdd797b4369b317ef7541f9dc35",
    "Phrase": "[who;;, all;;, have been;;, a manager;;, of;;, english;;, under;;, twenty one football team;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "manager",
        "uri": "http://dbpedia.org/property/managerclubs",
        "seq": "20,26",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the district of Fort Heath radar station ?",
    "SerialNumber": "121",
    "Words": "[What, is, the, district, of, Fort, Heath, radar, station, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Fort_Heath_radar_station\u003e \u003chttp://dbpedia.org/property/district\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 0,
        "label": "Fort Heath radar station",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Fort_Heath_radar_station",
        "seq": "24,48"
      }
    ],
    "CleanPhrase": "[district, Fort Heath radar station]",
    "id": "37a0e0437d3549d1ab607f3bcc29d49b",
    "Phrase": "[What;;, is;;, the district;;, of;;, Fort Heath radar station;;]",
    "predicate mapping": [
      {
        "score": 119,
        "label": "district",
        "uri": "http://dbpedia.org/property/district",
        "seq": "12,19",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In which time zone is Pong Pha?",
    "SerialNumber": "134",
    "Words": "[In, which, time, zone, is, Pong, Pha, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Pong_Pha\u003e \u003chttp://dbpedia.org/ontology/timeZone\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 5,
        "label": "Pong Pha",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Pong_Pha",
        "seq": "22,30"
      }
    ],
    "CleanPhrase": "[time zone, Pong Pha]",
    "id": "d1e59f4659f1447daf1f03518db7111e",
    "Phrase": "[In;;, which;;, time zone;;, is;;, Pong Pha;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "zone time",
        "uri": "http://dbpedia.org/ontology/timeZone",
        "seq": "9,17",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What  is the Nickname of Daniel O\u0027Regan ?",
    "SerialNumber": "140",
    "Words": "[What, is, the, Nickname, of, Daniel, O\u0027Regan, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Daniel_O\u0027Regan\u003e \u003chttp://dbpedia.org/property/nickname\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 3,
        "label": "Daniel O\u0027Regan",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Daniel_O\u0027Regan",
        "seq": "25,39"
      }
    ],
    "CleanPhrase": "[Nickname, Daniel O\u0027Regan]",
    "id": "a12c261c27154991801e5701a39bdc5b",
    "Phrase": "[What;;, is;;, the Nickname;;, of;;, Daniel O\u0027Regan;;]",
    "predicate mapping": [
      {
        "score": 52,
        "label": "nickname",
        "uri": "http://dbpedia.org/property/nickname",
        "seq": "13,20",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who were all the people in office when bob hawke was the PM?",
    "SerialNumber": "150",
    "Words": "[Who, were, all, the, people, in, office, when, bob, hawke, was, the, PM, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/primeMinister\u003e \u003chttp://dbpedia.org/resource/Bob_Hawke\u003e } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 0,
        "label": "bob hawke",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Bob_Hawke",
        "seq": "39,48"
      }
    ],
    "CleanPhrase": "[people, office, bob hawke, PM]",
    "id": "98df0f1a194d4bb1861607e4d2a1477a",
    "Phrase": "[Who;;, were;;, all the people;;, in;;, office;;, when;;, bob hawke;;, was;;, the PM;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "PM",
        "uri": "http://dbpedia.org/ontology/primeMinister",
        "seq": "57,58",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Raymond Johansen is the mayor of what city?",
    "SerialNumber": "155",
    "Words": "[Raymond, Johansen, is, the, mayor, of, what, city, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/leaderName\u003e \u003chttp://dbpedia.org/resource/Raymond_Johansen\u003e  . }",
    "checked": "true",
    "entity mapping": [
      {
        "score": 6,
        "label": "Raymond Johansen",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Raymond_Johansen",
        "seq": "0,16"
      }
    ],
    "CleanPhrase": "[Raymond Johansen, mayor, city]",
    "id": "be6db808f6ae400989a772e77e8e9ff1",
    "Phrase": "[Raymond Johansen;;, is;;, the mayor;;, of;;, what;;, city;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "mayor",
        "uri": "http://dbpedia.org/ontology/leaderName",
        "seq": "24,28",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is Temenos Group founded ?",
    "SerialNumber": "160",
    "Words": "[Where, is, Temenos, Group, founded, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Temenos_Group\u003e \u003chttp://dbpedia.org/property/foundation\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 3,
        "label": "Temenos Group",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Temenos_Group",
        "seq": "9,22"
      }
    ],
    "CleanPhrase": "[Temenos Group, founded]",
    "id": "bbcc0bde9178475b83167718e3f7f63c",
    "Phrase": "[Where;;, is;;, Temenos Group;;, founded;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "founded",
        "uri": "http://dbpedia.org/property/foundation",
        "seq": "23,29",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the sports played by PATTS College of Aeronautics?",
    "SerialNumber": "174",
    "Words": "[Name, the, sports, played, by, PATTS, College, of, Aeronautics, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/PATTS_College_of_Aeronautics\u003e \u003chttp://dbpedia.org/property/athletics\u003e ?uri } ",
    "checked": "true",
    "entity mapping": [
      {
        "score": 1,
        "label": "PATTS College of Aeronautics",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/PATTS_College_of_Aeronautics",
        "seq": "26,54"
      }
    ],
    "CleanPhrase": "[sports, played, PATTS College, Aeronautics]",
    "id": "fee7a4bf34654f22a3e70e7544af3f20",
    "Phrase": "[the sports;;, played;;, by;;, PATTS College;;, of;;, Aeronautics;;]",
    "predicate mapping": [
      {
        "score": 277,
        "label": "sports",
        "uri": "http://dbpedia.org/property/athletics",
        "seq": "9,14",
        "mappedBy": "manual corrections"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the major shrine of Bogumilus?",
    "SerialNumber": "179",
    "Words": "[Name, the, major, shrine, of, Bogumilus, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bogumilus\u003e \u003chttp://dbpedia.org/ontology/majorShrine\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Bogumilus",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Bogumilus",
        "seq": "25,34"
      }
    ],
    "CleanPhrase": "[major shrine, Bogumilus]",
    "id": "49e05cb4c7b944b687a0c3d8d1766fc5",
    "Phrase": "[Name;;, the major shrine;;, of;;, Bogumilus;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "major shrine",
        "uri": "http://dbpedia.org/ontology/majorShrine",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the broadcast area of WBCQ (SW) ?",
    "SerialNumber": "204",
    "Words": "[What, is, the, broadcast, area, of, WBCQ, \\, (, SW, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/WBCQ_(SW)\u003e \u003chttp://dbpedia.org/property/area\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "WBCQ",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/WBCQ_(SW)",
        "seq": "30,34"
      }
    ],
    "CleanPhrase": "[broadcast area, WBCQ]",
    "id": "c4acb6859ef2400a8989bd05cdf3f766",
    "Phrase": "[What;;, is;;, the broadcast area;;, of;;, WBCQ;;]",
    "predicate mapping": [
      {
        "score": 406,
        "label": "area",
        "uri": "http://dbpedia.org/property/area",
        "seq": "22,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "God Defend New Zealand is the national anthem of which country?",
    "SerialNumber": "207",
    "Words": "[God, Defend, New, Zealand, is, the, national, anthem, of, which, country, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/nationalAnthem\u003e \u003chttp://dbpedia.org/resource/God_Defend_New_Zealand\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "God Defend New Zealand",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/God_Defend_New_Zealand",
        "seq": "0,22"
      }
    ],
    "CleanPhrase": "[God Defend Zealand, national anthem, country]",
    "id": "dc045b68c18349d693ff758050108ee5",
    "Phrase": "[God Defend New Zealand;;, is;;, the national anthem;;, of;;, which;;, country;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "national anthem",
        "uri": "http://dbpedia.org/property/nationalAnthem",
        "seq": "30,45",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the border of High Desert (Oregon)?",
    "SerialNumber": "212",
    "Words": "[What, are, the, border, of, High, Desert, \\, (, Oregon, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/High_Desert_(Oregon)\u003e \u003chttp://dbpedia.org/ontology/border\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "High Desert (Oregon)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/High_Desert_(Oregon)",
        "seq": "23,43"
      }
    ],
    "CleanPhrase": "[border, High Desert, Oregon]",
    "id": "f90fbf38ccac4a54915b9f68886b7257",
    "Phrase": "[What;;, are;;, the border;;, of;;, High Desert;;, Oregon;;]",
    "predicate mapping": [
      {
        "score": 7,
        "label": "border",
        "uri": "http://dbpedia.org/ontology/border",
        "seq": "13,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where did Goran Cengic die?",
    "SerialNumber": "217",
    "Words": "[Where, did, Goran, Cengic, die, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Goran_Čengić\u003e \u003chttp://dbpedia.org/property/deathPlace\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 508,
        "label": "Goran Cengic",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Goran_Čengić",
        "seq": "10,22"
      }
    ],
    "CleanPhrase": "[Goran Cengic, die]",
    "id": "789d45349934476b8ebaf084f1161fc0",
    "Phrase": "[Where;;, Goran Cengic;;, die;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "die",
        "uri": "http://dbpedia.org/property/deathPlace",
        "seq": "23,26",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the major shrine of Jacques-Dsir Laval ?",
    "SerialNumber": "237",
    "Words": "[What, is, the, major, shrine, of, Jacques, Dsir, Laval, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Jacques-Désiré_Laval\u003e \u003chttp://dbpedia.org/ontology/majorShrine\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Jacques-Dsir Laval",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Jacques-Désiré_Laval",
        "seq": "28,46"
      }
    ],
    "CleanPhrase": "[major shrine, Jacques Dsir Laval]",
    "id": "624847b205bc4cfdb3fc6d5a3bb94089",
    "Phrase": "[What;;, is;;, the major shrine;;, of;;, Jacques Dsir Laval;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "major shrine",
        "uri": "http://dbpedia.org/ontology/majorShrine",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which series does the character of Londo Mollari belong?",
    "SerialNumber": "245",
    "Words": "[To, which, series, does, the, character, of, Londo, Mollari, belong, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Londo_Mollari\u003e \u003chttp://dbpedia.org/ontology/series\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Londo Mollari",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Londo_Mollari",
        "seq": "38,51"
      }
    ],
    "CleanPhrase": "[series, character, Londo Mollari, belong]",
    "id": "8c42485e42e641b297c1b7b9bc431f71",
    "Phrase": "[To;;, which;;, series;;, does;;, the character;;, of;;, Londo Mollari;;, belong;;]",
    "predicate mapping": [
      {
        "score": 7,
        "label": "series",
        "uri": "http://dbpedia.org/ontology/series",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Under which archipelago does Canary Islands fall?",
    "SerialNumber": "252",
    "Words": "[Under, which, archipelago, does, Canary, Islands, fall, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/archipelago\u003e \u003chttp://dbpedia.org/resource/Canary_Islands\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 445,
        "label": "Canary Islands",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Canary_Islands",
        "seq": "29,43"
      }
    ],
    "CleanPhrase": "[archipelago, Canary Islands, fall]",
    "id": "588353d070ef46ebab76b15f479bafda",
    "Phrase": "[Under;;, which;;, archipelago;;, does;;, Canary Islands;;, fall;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "archipelago",
        "uri": "http://dbpedia.org/property/archipelago",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the route junction of Rhode Island Route 15 ?",
    "SerialNumber": "262",
    "Words": "[What, is, the, route, junction, of, Rhode, Island, Route, 15, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Rhode_Island_Route_15\u003e \u003chttp://dbpedia.org/ontology/routeJunction\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 144,
        "label": "Route 15",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Rhode_Island_Route_15",
        "seq": "43,51"
      }
    ],
    "CleanPhrase": "[route junction, Rhode Island Route 15]",
    "id": "eb58dda4372c4a6596673f32df5a1ef4",
    "Phrase": "[What;;, is;;, the route junction;;, of;;, Rhode Island Route 15;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "route junction",
        "uri": "http://dbpedia.org/ontology/routeJunction",
        "seq": "12,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the  primeministers of Victor Hope, 2nd Marquess of Linlithgow ?",
    "SerialNumber": "283",
    "Words": "[List, the, primeministers, of, Victor, Hope, ,, 2nd, Marquess, of, Linlithgow, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Victor_Hope,_2nd_Marquess_of_Linlithgow\u003e \u003chttp://dbpedia.org/property/primeminister\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Victor Hope, 2nd Marquess of Linlithgow",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Victor_Hope,_2nd_Marquess_of_Linlithgow",
        "seq": "28,67"
      }
    ],
    "CleanPhrase": "[List, primeministers, Victor Hope, 2nd Marquess, Linlithgow]",
    "id": "9d8981bec314421cbc7ab5fa19b35a8b",
    "Phrase": "[List;;, the primeministers;;, of;;, Victor Hope;;, 2nd Marquess;;, of;;, Linlithgow;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "primeminister",
        "uri": "http://dbpedia.org/property/primeminister",
        "seq": "10,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In which state is the Channel district?",
    "SerialNumber": "286",
    "Words": "[In, which, state, is, the, Channel, district, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Channel_District\u003e \u003chttp://dbpedia.org/ontology/state\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 32,
        "label": "Channel district",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Channel_District",
        "seq": "22,38"
      }
    ],
    "CleanPhrase": "[state, Channel district]",
    "id": "df2e76ce3304460b96e4bc1004ba31ff",
    "Phrase": "[In;;, which;;, state;;, is;;, the Channel district;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "district",
        "uri": "http://dbpedia.org/ontology/state",
        "seq": "30,38",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the religious affiliation of Vagif Aliyev ?",
    "SerialNumber": "287",
    "Words": "[Name, the, religious, affiliation, of, Vagif, Aliyev, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Vagif_Aliyev\u003e \u003chttp://dbpedia.org/ontology/religion\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Vagif Aliyev",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Vagif_Aliyev",
        "seq": "34,46"
      }
    ],
    "CleanPhrase": "[religious affiliation, Vagif Aliyev]",
    "id": "72e904a0c1464fa49e6a57b90d012b10",
    "Phrase": "[Name;;, the religious affiliation;;, of;;, Vagif Aliyev;;]",
    "predicate mapping": [
      {
        "score": 75,
        "label": "religious affiliation",
        "uri": "http://dbpedia.org/ontology/religion",
        "seq": "9,30",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "what cities are located on the sides of mediterranean sea?",
    "SerialNumber": "291",
    "Words": "[what, cities, are, located, on, the, sides, of, mediterranean, sea, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Mediterranean_Sea\u003e \u003chttp://dbpedia.org/property/cities\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 15,
        "label": "mediterranean sea",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Mediterranean_Sea",
        "seq": "40,57"
      }
    ],
    "CleanPhrase": "[cities, located, sides, mediterranean sea]",
    "id": "a216ea53e375474aa3d2a23273a88807",
    "Phrase": "[what cities;;, are located;;, on;;, the sides;;, of;;, mediterranean sea;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "cities",
        "uri": "http://dbpedia.org/property/cities",
        "seq": "5,11",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What city is the residence of Cheryl Teigs?",
    "SerialNumber": "308",
    "Words": "[What, city, is, the, residence, of, Cheryl, Teigs, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Cheryl_Tiegs\u003e \u003chttp://dbpedia.org/ontology/residence\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Cheryl Teigs",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Cheryl_Tiegs",
        "seq": "30,42"
      }
    ],
    "CleanPhrase": "[city, residence, Cheryl Teigs]",
    "id": "6229161c4acd41e5ba294a148a25abfb",
    "Phrase": "[What city;;, is;;, the residence;;, of;;, Cheryl Teigs;;]",
    "predicate mapping": [
      {
        "score": 9,
        "label": "residence",
        "uri": "http://dbpedia.org/ontology/residence",
        "seq": "17,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the nearest city to  Lake Victoria?",
    "SerialNumber": "311",
    "Words": "[Name, the, nearest, city, to, Lake, Victoria, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Lake_Victoria\u003e \u003chttp://dbpedia.org/ontology/nearestCity\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1286,
        "label": "Lake Victoria",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Lake_Victoria",
        "seq": "26,39"
      }
    ],
    "CleanPhrase": "[nearest city, Lake Victoria]",
    "id": "a622cb449bde410c8c3e8c5c11a18ebb",
    "Phrase": "[Name;;, the nearest city;;, to;;, Lake Victoria;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "nearest city",
        "uri": "http://dbpedia.org/ontology/nearestCity",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the constituency of Domenico Modugno ?",
    "SerialNumber": "312",
    "Words": "[Name, the, constituency, of, Domenico, Modugno, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Domenico_Modugno\u003e \u003chttp://dbpedia.org/property/constituency\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Domenico Modugno",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Domenico_Modugno",
        "seq": "25,41"
      }
    ],
    "CleanPhrase": "[constituency, Domenico Modugno]",
    "id": "416fe4e82425427cb42f2d36b6e64527",
    "Phrase": "[the constituency;;, of;;, Domenico Modugno;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "constituency",
        "uri": "http://dbpedia.org/property/constituency",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the opponents of Gervase Helwys?",
    "SerialNumber": "324",
    "Words": "[Who, are, the, opponents, of, Gervase, Helwys, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Gervase_Helwys\u003e \u003chttp://dbpedia.org/ontology/opponent\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Gervase Helwys",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Gervase_Helwys",
        "seq": "25,39"
      }
    ],
    "CleanPhrase": "[opponents, Gervase Helwys]",
    "id": "a9e1cae212ba4c2699ddcc5aa1686c2e",
    "Phrase": "[Who;;, are;;, the opponents;;, of;;, Gervase Helwys;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "opponent",
        "uri": "http://dbpedia.org/ontology/opponent",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was Ganefo hosted?",
    "SerialNumber": "345",
    "Words": "[Where, was, Ganefo, hosted, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/GANEFO\u003e \u003chttp://dbpedia.org/property/hostCity\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 80,
        "label": "Ganefo",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/GANEFO",
        "seq": "10,16"
      }
    ],
    "CleanPhrase": "[Ganefo, hosted]",
    "id": "3f84c71fa3754d4c8efa129eb69a81a7",
    "Phrase": "[Where;;, was;;, Ganefo;;, hosted;;]",
    "predicate mapping": [
      {
        "score": 61,
        "label": "hosted",
        "uri": "http://dbpedia.org/property/hostCity",
        "seq": "17,23",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What company\u0027s founder is Jim Harris?",
    "SerialNumber": "353",
    "Words": "[What, company, \u0027s, founder, is, Jim, Harris, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/founder\u003e \u003chttp://dbpedia.org/resource/Jim_Harris_(entrepreneur)\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 55,
        "label": "Jim Harris",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Jim_Harris_(entrepreneur)",
        "seq": "26,36"
      }
    ],
    "CleanPhrase": "[company, \u0027s founder, Jim Harris]",
    "id": "3cdc8e8ea823409f959acead754885e6",
    "Phrase": "[What company;;, \u0027s founder;;, is;;, Jim Harris;;]",
    "predicate mapping": [
      {
        "score": 205,
        "label": "founder",
        "uri": "http://dbpedia.org/property/founder",
        "seq": "15,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the company of Ford Theatre ?",
    "SerialNumber": "384",
    "Words": "[What, is, the, company, of, Ford, Theatre, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ford_Theatre\u003e \u003chttp://dbpedia.org/property/company\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "Ford Theatre",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Ford_Theatre",
        "seq": "23,35"
      }
    ],
    "CleanPhrase": "[company, Ford Theatre]",
    "id": "966ba5310c7049799db0464434010003",
    "Phrase": "[What;;, is;;, the company;;, of;;, Ford Theatre;;]",
    "predicate mapping": [
      {
        "score": 169,
        "label": "company",
        "uri": "http://dbpedia.org/property/company",
        "seq": "12,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the director of The Adventures of mimi ?",
    "SerialNumber": "385",
    "Words": "[List, the, director, of, The, Adventures, of, mimi, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Adventures_of_Mimi_(video)\u003e \u003chttp://dbpedia.org/property/director\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "The Adventures of mimi",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/The_Adventures_of_Mimi_(video)",
        "seq": "21,43"
      }
    ],
    "CleanPhrase": "[List, director, Adventures, mimi]",
    "id": "f77569069e6d41b692071d0350ab2d1d",
    "Phrase": "[List;;, the director;;, of;;, The Adventures;;, of;;, mimi;;]",
    "predicate mapping": [
      {
        "score": 483,
        "label": "director",
        "uri": "http://dbpedia.org/property/director",
        "seq": "9,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the products of Den norske Bank ?",
    "SerialNumber": "391",
    "Words": "[Name, the, products, of, Den, norske, Bank, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Den_norske_Bank\u003e \u003chttp://dbpedia.org/property/products\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Den norske Bank",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Den_norske_Bank",
        "seq": "21,36"
      }
    ],
    "CleanPhrase": "[products, Den norske Bank]",
    "id": "33bedb8ae5c1409fb0ba92d69816a355",
    "Phrase": "[Name;;, the products;;, of;;, Den norske Bank;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "products",
        "uri": "http://dbpedia.org/property/products",
        "seq": "9,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who coached the marquet golden eagels during 2013",
    "SerialNumber": "402",
    "Words": "[Who, coached, the, marquet, golden, eagels, during, 2013]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/2013–14_Marquette_Golden_Eagles_men\u0027s_basketball_team\u003e \u003chttp://dbpedia.org/ontology/coach\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 21,
        "label": "marquet golden eagels during 2013",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/2013–14_Marquette_Golden_Eagles_men\u0027s_basketball_team",
        "seq": "45,49"
      }
    ],
    "CleanPhrase": "[coached, marquet golden eagels, 2013]",
    "id": "0cec5868cc27426382d0ebfcbf2272bf",
    "Phrase": "[Who;;, coached;;, the marquet golden eagels;;, during;;, 2013;;]",
    "predicate mapping": [
      {
        "score": 10,
        "label": "coach",
        "uri": "http://dbpedia.org/ontology/coach",
        "seq": "4,9",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the ingredient of Blodpalt ?",
    "SerialNumber": "420",
    "Words": "[List, the, ingredient, of, Blodpalt, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Blodpalt\u003e \u003chttp://dbpedia.org/ontology/ingredient\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Blodpalt",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Blodpalt",
        "seq": "23,31"
      }
    ],
    "CleanPhrase": "[ingredient, Blodpalt]",
    "id": "8bba670b59bb421ca58a524a0c474e00",
    "Phrase": "[the ingredient;;, of;;, Blodpalt;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "ingredient",
        "uri": "http://dbpedia.org/ontology/ingredient",
        "seq": "9,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the performer of Bengali in Platforms ?",
    "SerialNumber": "422",
    "Words": "[Who, is, the, performer, of, Bengali, in, Platforms, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bengali_in_Platforms\u003e \u003chttp://dbpedia.org/ontology/artist\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Bengali in Platforms",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Bengali_in_Platforms",
        "seq": "24,44"
      }
    ],
    "CleanPhrase": "[performer, Bengali, Platforms]",
    "id": "89689724b652439cbc83fd0be32e637c",
    "Phrase": "[Who;;, is;;, the performer;;, of;;, Bengali;;, in;;, Platforms;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "performer",
        "uri": "http://dbpedia.org/ontology/artist",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What are some fictional characters whose voice is in the peanuts movie?",
    "SerialNumber": "426",
    "Words": "[What, are, some, fictional, characters, whose, voice, is, in, the, peanuts, movie, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/voice\u003e \u003chttp://dbpedia.org/resource/The_Peanuts_Movie\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "the peanuts movie",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/The_Peanuts_Movie",
        "seq": "53,70"
      }
    ],
    "CleanPhrase": "[fictional characters, voice, peanuts, movie]",
    "id": "6b6b25414e6d41a79396ddd1c583fe07",
    "Phrase": "[What;;, are;;, some fictional characters;;, whose voice;;, is;;, in;;, the peanuts;;, movie;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "voice",
        "uri": "http://dbpedia.org/ontology/voice",
        "seq": "41,46",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the Team Name  of St. Viator High School ?",
    "SerialNumber": "455",
    "Words": "[What, is, the, Team, Name, of, St, Viator, High, School, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/St._Viator_High_School\u003e \u003chttp://dbpedia.org/property/teamName\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "St. Viator High School",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/St._Viator_High_School",
        "seq": "26,48"
      }
    ],
    "CleanPhrase": "[Team, St Viator High School]",
    "id": "b86a96a710634f0c85c57c051dbd247d",
    "Phrase": "[What;;, is;;, the Team Name;;, of;;, St Viator High School;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "Team Name",
        "uri": "http://dbpedia.org/property/teamName",
        "seq": "12,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the battles fought by  Ali Habib Mahmud ?",
    "SerialNumber": "456",
    "Words": "[List, the, battles, fought, by, Ali, Habib, Mahmud, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ali_Habib_Mahmud\u003e \u003chttp://dbpedia.org/property/battles\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Ali Habib Mahmud",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Ali_Habib_Mahmud",
        "seq": "28,44"
      }
    ],
    "CleanPhrase": "[List, battles, fought, Ali Habib Mahmud]",
    "id": "1b0b90cd44a24c30a8e58ca7fe099d30",
    "Phrase": "[List;;, the battles;;, fought;;, by;;, Ali Habib Mahmud;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "battles",
        "uri": "http://dbpedia.org/property/battles",
        "seq": "9,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the author of Karakuri Dji Ultimo ?",
    "SerialNumber": "460",
    "Words": "[Who, is, the, author, of, Karakuri, Dji, Ultimo, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Karakuri_Dôji_Ultimo\u003e \u003chttp://dbpedia.org/ontology/author\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Karakuri Dji Ultimo",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Karakuri_Dôji_Ultimo",
        "seq": "21,40"
      }
    ],
    "CleanPhrase": "[author, Karakuri Dji Ultimo]",
    "id": "1aee4c637a91415f9d690c4c5315ded9",
    "Phrase": "[Who;;, is;;, the author;;, of;;, Karakuri Dji Ultimo;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "author",
        "uri": "http://dbpedia.org/ontology/author",
        "seq": "11,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the founder of Hohenau, Paraguay?",
    "SerialNumber": "465",
    "Words": "[Who, is, the, founder, of, Hohenau, ,, Paraguay, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Hohenau,_Paraguay\u003e \u003chttp://dbpedia.org/ontology/founder\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "Hohenau",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Hohenau,_Paraguay",
        "seq": "22,29"
      }
    ],
    "CleanPhrase": "[founder, Hohenau, Paraguay]",
    "id": "a813050ed3c340158c9e4c5fbb61fb8f",
    "Phrase": "[Who;;, is;;, the founder;;, of;;, Hohenau;;, Paraguay;;]",
    "predicate mapping": [
      {
        "score": 23,
        "label": "founder of",
        "uri": "http://dbpedia.org/ontology/founder",
        "seq": "11,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who gives the license of WXXV-DT2 ?",
    "SerialNumber": "469",
    "Words": "[Who, gives, the, license, of, WXXV, DT2, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/WXXV-DT2\u003e \u003chttp://dbpedia.org/property/licensee\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "WXXV-DT2",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/WXXV-DT2",
        "seq": "25,33"
      }
    ],
    "CleanPhrase": "[license, WXXV DT2]",
    "id": "02bb53dca86a4babb87a656db5452944",
    "Phrase": "[Who;;, gives;;, the license;;, of;;, WXXV DT2;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "license",
        "uri": "http://dbpedia.org/property/licensee",
        "seq": "14,21",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which political figures were awarded Screen Actors Guild Life Achievement Award?",
    "SerialNumber": "473",
    "Words": "[Which, political, figures, were, awarded, Screen, Actors, Guild, Life, Achievement, Award, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/award\u003e \u003chttp://dbpedia.org/resource/Screen_Actors_Guild_Life_Achievement_Award\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Screen Actors Guild Life Achievement Award",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Screen_Actors_Guild_Life_Achievement_Award",
        "seq": "37,79"
      }
    ],
    "CleanPhrase": "[political figures, awarded, Screen Actors Guild Life Achievement Award]",
    "id": "fb1cfb6030934cd2843217941b60cbe7",
    "Phrase": "[Which;;, political figures;;, were awarded;;, Screen Actors Guild Life Achievement Award;;]",
    "predicate mapping": [
      {
        "score": 48,
        "label": "awarded",
        "uri": "http://dbpedia.org/ontology/award",
        "seq": "29,36",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the species of Southwest African lion ?",
    "SerialNumber": "490",
    "Words": "[Name, the, species, of, Southwest, African, lion, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Southwest_African_lion\u003e \u003chttp://dbpedia.org/ontology/species\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Southwest African lion",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Southwest_African_lion",
        "seq": "20,42"
      }
    ],
    "CleanPhrase": "[species, Southwest African lion]",
    "id": "ac98a0220f7340f187466f3e2d99aab4",
    "Phrase": "[Name;;, the species;;, of;;, Southwest African lion;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "species",
        "uri": "http://dbpedia.org/ontology/species",
        "seq": "9,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the leader of United States House of Representatives elections, 1788 and 1789 ?",
    "SerialNumber": "502",
    "Words": "[Who, is, the, leader, of, United, States, House, of, Representatives, elections, ,, 1788, and, 1789, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789\u003e \u003chttp://dbpedia.org/property/leader\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "United States House of Representatives elections, 1788 and 1789",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789",
        "seq": "21,84"
      }
    ],
    "CleanPhrase": "[leader, United States House, Representatives elections, 1788 1789]",
    "id": "4fa56e45fedf4969b8ccfc846a78dc9a",
    "Phrase": "[Who;;, is;;, the leader;;, of;;, United States House;;, of;;, Representatives elections;;, 1788 and 1789;;]",
    "predicate mapping": [
      {
        "score": 286,
        "label": "leader",
        "uri": "http://dbpedia.org/property/leader",
        "seq": "11,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What honours did Reigh Count receive?",
    "SerialNumber": "505",
    "Words": "[What, honours, did, Reigh, Count, receive, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Reigh_Count\u003e \u003chttp://dbpedia.org/ontology/honours\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Reigh Count",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Reigh_Count",
        "seq": "17,28"
      }
    ],
    "CleanPhrase": "[honours, Reigh Count, receive]",
    "id": "82880466af6a4a07bb1bcd89ed90af00",
    "Phrase": "[What honours;;, did;;, Reigh Count;;, receive;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "honours",
        "uri": "http://dbpedia.org/ontology/honours",
        "seq": "5,12",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the place of birth of Lauren Briggs ?",
    "SerialNumber": "510",
    "Words": "[What, is, the, place, of, birth, of, Lauren, Briggs, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Lauren_Briggs\u003e \u003chttp://dbpedia.org/property/placeOfBirth\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 11,
        "label": "Lauren Briggs",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Lauren_Briggs",
        "seq": "30,43"
      }
    ],
    "CleanPhrase": "[place, birth, Lauren Briggs]",
    "id": "5ac4dc8f112e464796c31164eb0f3a64",
    "Phrase": "[What;;, is;;, the place;;, of;;, birth;;, of;;, Lauren Briggs;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "place of birth",
        "uri": "http://dbpedia.org/property/placeOfBirth",
        "seq": "12,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What type of government is elected in Kumta?",
    "SerialNumber": "516",
    "Words": "[What, type, of, government, is, elected, in, Kumta, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Kumta\u003e \u003chttp://dbpedia.org/ontology/governmentType\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Kumta",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Kumta",
        "seq": "38,43"
      }
    ],
    "CleanPhrase": "[type, government, elected, Kumta]",
    "id": "f976333c9df44935b5cb741fdfd342ea",
    "Phrase": "[What type;;, of;;, government;;, is elected;;, in;;, Kumta;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "government type",
        "uri": "http://dbpedia.org/ontology/governmentType",
        "seq": "-1,14",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the debut team of Dan Otero ?",
    "SerialNumber": "526",
    "Words": "[Name, the, debut, team, of, Dan, Otero, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Dan_Otero\u003e \u003chttp://dbpedia.org/ontology/debutTeam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Dan Otero",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Dan_Otero",
        "seq": "23,32"
      }
    ],
    "CleanPhrase": "[debut team, Dan Otero]",
    "id": "509e179ae21a44d68ac494defe1b32e7",
    "Phrase": "[the debut team;;, of;;, Dan Otero;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "debut team",
        "uri": "http://dbpedia.org/ontology/debutTeam",
        "seq": "9,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the producer of Captain EO ?",
    "SerialNumber": "528",
    "Words": "[Who, is, the, producer, of, Captain, EO, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Captain_EO\u003e \u003chttp://dbpedia.org/property/producer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Captain EO",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Captain_EO",
        "seq": "23,33"
      }
    ],
    "CleanPhrase": "[producer, Captain EO]",
    "id": "d15ac9a40bb143a0a3da0de817e8d832",
    "Phrase": "[Who;;, is;;, the producer;;, of;;, Captain EO;;]",
    "predicate mapping": [
      {
        "score": 135,
        "label": "producer",
        "uri": "http://dbpedia.org/property/producer",
        "seq": "11,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the academic interest of Philip Novak?",
    "SerialNumber": "532",
    "Words": "[What, are, the, academic, interest, of, Philip, Novak, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Philip_Novak\u003e \u003chttp://dbpedia.org/property/mainInterests\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Philip Novak",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Philip_Novak",
        "seq": "34,46"
      }
    ],
    "CleanPhrase": "[academic interest, Philip Novak]",
    "id": "593a45b09e04430e9687b99f34b3e709",
    "Phrase": "[What;;, are;;, the academic interest;;, of;;, Philip Novak;;]",
    "predicate mapping": [
      {
        "score": 16,
        "label": "interest",
        "uri": "http://dbpedia.org/property/mainInterests",
        "seq": "22,30",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which company owns Evraz ?",
    "SerialNumber": "543",
    "Words": "[Which, company, owns, Evraz, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Evraz\u003e \u003chttp://dbpedia.org/ontology/owningCompany\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Evraz",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Evraz",
        "seq": "19,24"
      }
    ],
    "CleanPhrase": "[company, owns, Evraz]",
    "id": "86346cf018e9417da21aae023485460f",
    "Phrase": "[Which company;;, owns;;, Evraz;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "company",
        "uri": "http://dbpedia.org/ontology/owningCompany",
        "seq": "6,13",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the leader of Panki block ?",
    "SerialNumber": "544",
    "Words": "[Who, is, the, leader, of, Panki, block, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Panki_block\u003e \u003chttp://dbpedia.org/ontology/leaderName\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Panki block",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Panki_block",
        "seq": "21,32"
      }
    ],
    "CleanPhrase": "[leader, Panki block]",
    "id": "3c5ec517b1a14c2bbccc65ce6c1db5c7",
    "Phrase": "[Who;;, is;;, the leader;;, of;;, Panki block;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "leader",
        "uri": "http://dbpedia.org/ontology/leaderName",
        "seq": "11,17",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the species of Liger ?",
    "SerialNumber": "547",
    "Words": "[Name, the, species, of, Liger, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Liger\u003e \u003chttp://dbpedia.org/ontology/species\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 11,
        "label": "Liger",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Liger",
        "seq": "20,25"
      }
    ],
    "CleanPhrase": "[species, Liger]",
    "id": "c1231c9ac8174bc4bb544853d3faf6ca",
    "Phrase": "[Name;;, the species;;, of;;, Liger;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "species",
        "uri": "http://dbpedia.org/ontology/species",
        "seq": "9,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the owner of Saumarez ?",
    "SerialNumber": "560",
    "Words": "[Who, is, the, owner, of, Saumarez, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Saumarez_(horse)\u003e \u003chttp://dbpedia.org/ontology/owner\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Saumarez",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Saumarez_(horse)",
        "seq": "20,28"
      }
    ],
    "CleanPhrase": "[owner, Saumarez]",
    "id": "a100cb0681104c81aeaeb99a2e615d66",
    "Phrase": "[Who;;, is;;, the owner;;, of;;, Saumarez;;]",
    "predicate mapping": [
      {
        "score": 16,
        "label": "owner",
        "uri": "http://dbpedia.org/ontology/owner",
        "seq": "11,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Whose doctoral student is etienne bieler\\xc9tienne_Bi\\xe9ler",
    "SerialNumber": "578",
    "Words": "[Whose, doctoral, student, is, etienne, bieler, xc9tienne, Bi, xe9ler]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/doctoralStudent\u003e \u003chttp://dbpedia.org/resource/Étienne_Biéler\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "etienne bieler",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Étienne_Biéler",
        "seq": "40,41"
      }
    ],
    "CleanPhrase": "[doctoral student, etienne bieler xc9tienne Bi xe9ler]",
    "id": "59ee66fc1eb648ff9ca0e751825f1de1",
    "Phrase": "[Whose doctoral student;;, is;;, etienne bieler xc9tienne Bi xe9ler;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "doctoral student",
        "uri": "http://dbpedia.org/ontology/doctoralStudent",
        "seq": "6,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "what awards have been giving to Muhammad Yunus?",
    "SerialNumber": "580",
    "Words": "[what, awards, have, been, giving, to, Muhammad, Yunus, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Muhammad_Yunus\u003e \u003chttp://dbpedia.org/ontology/award\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "Muhammad Yunus",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Muhammad_Yunus",
        "seq": "32,46"
      }
    ],
    "CleanPhrase": "[awards, giving, Muhammad Yunus]",
    "id": "cf3c2cbbbde94259a9b3d4194d90ac28",
    "Phrase": "[what awards;;, have been giving;;, to;;, Muhammad Yunus;;]",
    "predicate mapping": [
      {
        "score": 58,
        "label": "awards",
        "uri": "http://dbpedia.org/ontology/award",
        "seq": "5,11",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who are the people which ITV(TV network) has employed?",
    "SerialNumber": "583",
    "Words": "[Who, are, the, people, which, ITV, \\, (, TV, network, \\, ), has, employed, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/employer\u003e \u003chttp://dbpedia.org/resource/ITV_(TV_network)\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 420,
        "label": "ITV",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/ITV_(TV_network)",
        "seq": "25,28"
      }
    ],
    "CleanPhrase": "[people, ITV, TV network, employed]",
    "id": "900ef117ddb54ad0b9686cde649bc3d0",
    "Phrase": "[Who;;, are;;, the people;;, which;;, ITV;;, TV network;;, has employed;;]",
    "predicate mapping": [
      {
        "score": 47,
        "label": "employed",
        "uri": "http://dbpedia.org/property/employer",
        "seq": "45,53",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the coach of England national under-21 football team ?",
    "SerialNumber": "588",
    "Words": "[Who, is, the, coach, of, England, national, under, 21, football, team, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/England_national_under-21_football_team\u003e \u003chttp://dbpedia.org/property/coach\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "England national under-21 football team",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/England_national_under-21_football_team",
        "seq": "20,59"
      }
    ],
    "CleanPhrase": "[coach, England, national, 21 football team]",
    "id": "5bc08a17c2874dc7b7711f0329ab4fb2",
    "Phrase": "[Who;;, is;;, the coach;;, of;;, England;;, national;;, under;;, 21 football team;;]",
    "predicate mapping": [
      {
        "score": 177,
        "label": "coach",
        "uri": "http://dbpedia.org/property/coach",
        "seq": "11,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the region of Tom Perriello ?",
    "SerialNumber": "590",
    "Words": "[What, is, the, region, of, Tom, Perriello, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Tom_Perriello\u003e \u003chttp://dbpedia.org/ontology/region\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Tom Perriello",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Tom_Perriello",
        "seq": "22,35"
      }
    ],
    "CleanPhrase": "[region, Tom Perriello]",
    "id": "249843fe379e4bc29f4510be1e62d055",
    "Phrase": "[What;;, is;;, the region;;, of;;, Tom Perriello;;]",
    "predicate mapping": [
      {
        "score": 12,
        "label": "region",
        "uri": "http://dbpedia.org/ontology/region",
        "seq": "12,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the associate musical artists of Dalma Kovcs ?",
    "SerialNumber": "598",
    "Words": "[Who, are, the, associate, musical, artists, of, Dalma, Kovcs, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Dalma_Kovács\u003e \u003chttp://dbpedia.org/ontology/associatedMusicalArtist\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Dalma Kovcs",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Dalma_Kovács",
        "seq": "41,52"
      }
    ],
    "CleanPhrase": "[associate musical artists, Dalma Kovcs]",
    "id": "390b74bcdbcb43668fa738a6a5ae5bc9",
    "Phrase": "[Who;;, are;;, the associate musical artists;;, of;;, Dalma Kovcs;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "associate musical",
        "uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
        "seq": "12,29",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the commander of Battle of Brownstown ?",
    "SerialNumber": "607",
    "Words": "[What, is, the, commander, of, Battle, of, Brownstown, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Battle_of_Brownstown\u003e \u003chttp://dbpedia.org/ontology/commander\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Battle of Brownstown",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Battle_of_Brownstown",
        "seq": "25,45"
      }
    ],
    "CleanPhrase": "[commander, Battle, Brownstown]",
    "id": "28908ee4e3754d90b904645e4f1156b2",
    "Phrase": "[What;;, is;;, the commander;;, of;;, Battle;;, of;;, Brownstown;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "commander",
        "uri": "http://dbpedia.org/ontology/commander",
        "seq": "12,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List down the prime ministers of Peter Thorneycroft ?",
    "SerialNumber": "611",
    "Words": "[List, down, the, prime, ministers, of, Peter, Thorneycroft, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Peter_Thorneycroft\u003e \u003chttp://dbpedia.org/ontology/primeMinister\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Peter Thorneycroft",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Peter_Thorneycroft",
        "seq": "33,51"
      }
    ],
    "CleanPhrase": "[List, prime ministers, Peter Thorneycroft]",
    "id": "1894061d4693487abbac158ae035218c",
    "Phrase": "[List;;, down;;, the prime ministers;;, of;;, Peter Thorneycroft;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "prime minister",
        "uri": "http://dbpedia.org/ontology/primeMinister",
        "seq": "14,28",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "list some companies founded by Jim Harris.",
    "SerialNumber": "617",
    "Words": "[list, some, companies, founded, by, Jim, Harris]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/foundedBy\u003e \u003chttp://dbpedia.org/resource/Jim_Harris_(entrepreneur)\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 55,
        "label": "Jim Harris",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Jim_Harris_(entrepreneur)",
        "seq": "31,41"
      }
    ],
    "CleanPhrase": "[list, companies, founded, Jim Harris]",
    "id": "f9d991647aae449285e9d5867ea64911",
    "Phrase": "[list;;, some companies;;, founded;;, by;;, Jim Harris;;]",
    "predicate mapping": [
      {
        "score": 89,
        "label": "founded by",
        "uri": "http://dbpedia.org/ontology/foundedBy",
        "seq": "20,30",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which company is the parent company of Chevrolet Spark ?",
    "SerialNumber": "631",
    "Words": "[Which, company, is, the, parent, company, of, Chevrolet, Spark, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Chevrolet_Spark\u003e \u003chttp://dbpedia.org/property/parentCompany\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 44,
        "label": "Chevrolet Spark",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Chevrolet_Spark",
        "seq": "39,54"
      }
    ],
    "CleanPhrase": "[company, parent company, Chevrolet Spark]",
    "id": "d43e1ffd1be04f37bd53e99b819bcd08",
    "Phrase": "[Which company;;, is;;, the parent company;;, of;;, Chevrolet Spark;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "parent company",
        "uri": "http://dbpedia.org/property/parentCompany",
        "seq": "21,35",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Whose deputy is Neil Brown?",
    "SerialNumber": "638",
    "Words": "[Whose, deputy, is, Neil, Brown, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/deputy\u003e \u003chttp://dbpedia.org/resource/Neil_Brown_(Australian_politician)\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "Neil Brown",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Neil_Brown_(Australian_politician)",
        "seq": "16,26"
      }
    ],
    "CleanPhrase": "[deputy, Neil Brown]",
    "id": "52c67daa68c74c3aba9e745ba14b242c",
    "Phrase": "[Whose deputy;;, is;;, Neil Brown;;]",
    "predicate mapping": [
      {
        "score": 173,
        "label": "deputy",
        "uri": "http://dbpedia.org/property/deputy",
        "seq": "6,12",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who founded the Not on our Watch NGO?",
    "SerialNumber": "639",
    "Words": "[Who, founded, the, Not, on, our, Watch, NGO, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Not_on_Our_Watch_(organization)\u003e \u003chttp://dbpedia.org/ontology/foundedBy\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Not on our Watch",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Not_on_Our_Watch_(organization)",
        "seq": "16,32"
      }
    ],
    "CleanPhrase": "[founded, Watch NGO]",
    "id": "2ae88829677d41d4aea8ccfc94157dc9",
    "Phrase": "[Who;;, founded;;, the Not;;, on;;, our Watch NGO;;]",
    "predicate mapping": [
      {
        "score": 88,
        "label": "founded",
        "uri": "http://dbpedia.org/ontology/foundedBy",
        "seq": "4,11",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who first ascented a mountain of Mount Hoffmann ?",
    "SerialNumber": "640",
    "Words": "[Who, first, ascented, a, mountain, of, Mount, Hoffmann, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Mount_Hoffmann\u003e \u003chttp://dbpedia.org/ontology/firstAscentPerson\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 15,
        "label": "Mount Hoffmann",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Mount_Hoffmann",
        "seq": "33,47"
      }
    ],
    "CleanPhrase": "[ascented, mountain, Mount Hoffmann]",
    "id": "689d2f8f512742b78ba168d386e52220",
    "Phrase": "[Who;;, first;;, ascented;;, a mountain;;, of;;, Mount Hoffmann;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "ascented",
        "uri": "http://dbpedia.org/ontology/firstAscentPerson",
        "seq": "10,18",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What was founded by Congress of Industrial Organizations ?",
    "SerialNumber": "650",
    "Words": "[What, was, founded, by, Congress, of, Industrial, Organizations, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Congress_of_Industrial_Organizations\u003e \u003chttp://dbpedia.org/property/founded\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Congress of Industrial Organizations",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Congress_of_Industrial_Organizations",
        "seq": "20,56"
      }
    ],
    "CleanPhrase": "[founded, Congress, Industrial Organizations]",
    "id": "b39e52f81f1a4c8db50b35e3a82ebb1d",
    "Phrase": "[What;;, was founded;;, by;;, Congress;;, of;;, Industrial Organizations;;]",
    "predicate mapping": [
      {
        "score": 7,
        "label": "was founded by",
        "uri": "http://dbpedia.org/property/founded",
        "seq": "5,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which holy things canonized John of Damascus?",
    "SerialNumber": "652",
    "Words": "[Which, holy, things, canonized, John, of, Damascus, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/John_of_Damascus\u003e \u003chttp://dbpedia.org/ontology/canonizedBy\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "John of Damascus",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/John_of_Damascus",
        "seq": "28,44"
      }
    ],
    "CleanPhrase": "[holy things, canonized, John, Damascus]",
    "id": "e9207f57106645a098206a135438489b",
    "Phrase": "[Which;;, holy things;;, canonized;;, John;;, of;;, Damascus;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "canonized",
        "uri": "http://dbpedia.org/ontology/canonizedBy",
        "seq": "18,27",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the notable work of David Isaacs (writer)?",
    "SerialNumber": "661",
    "Words": "[List, the, notable, work, of, David, Isaacs, \\, (, writer, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/David_Isaacs_(writer)\u003e \u003chttp://dbpedia.org/ontology/notableWork\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 67,
        "label": "David Isaacs",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/David_Isaacs_(writer)",
        "seq": "25,37"
      }
    ],
    "CleanPhrase": "[List, notable work, David Isaacs]",
    "id": "47315c1388d2459d9fa1ecc1723ffcf6",
    "Phrase": "[List;;, the notable work;;, of;;, David Isaacs;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "notable work",
        "uri": "http://dbpedia.org/ontology/notableWork",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is Bob Adams (American football) known for?",
    "SerialNumber": "677",
    "Words": "[What, is, Bob, Adams, \\, (, American, football, \\, ), known, for, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bob_Adams_(American_football)\u003e \u003chttp://dbpedia.org/property/knownFor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Bob Adams (American football)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Bob_Adams_(American_football)",
        "seq": "8,37"
      }
    ],
    "CleanPhrase": "[Bob Adams, American football]",
    "id": "3a948631dd8441caa4bea0a1acc65d97",
    "Phrase": "[What;;, is;;, Bob Adams;;, American football;;, known;;, for;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "known for",
        "uri": "http://dbpedia.org/property/knownFor",
        "seq": "38,47",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which football players have Newell\u0027s Old Boys as youthclub?",
    "SerialNumber": "679",
    "Words": "[Which, football, players, have, Newell, \u0027s, Old, Boys, as, youthclub, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/youthclubs\u003e \u003chttp://dbpedia.org/resource/Newell\u0027s_Old_Boys\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "Newell\u0027s Old Boys",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Newell\u0027s_Old_Boys",
        "seq": "28,45"
      }
    ],
    "CleanPhrase": "[football players, Newell, \u0027s Boys, youthclub]",
    "id": "08ebfe3921a342c3affe388dd2aea32c",
    "Phrase": "[Which football players;;, have;;, Newell;;, \u0027s Old Boys;;, as;;, youthclub;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "youthclub",
        "uri": "http://dbpedia.org/property/youthclubs",
        "seq": "49,58",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the ceremonial county of East Tilbury ?",
    "SerialNumber": "692",
    "Words": "[List, the, ceremonial, county, of, East, Tilbury, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/East_Tilbury\u003e \u003chttp://dbpedia.org/ontology/ceremonialCounty\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "East Tilbury",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/East_Tilbury",
        "seq": "30,42"
      }
    ],
    "CleanPhrase": "[List, ceremonial county, East Tilbury]",
    "id": "78f031f16717475180bc9868531bd502",
    "Phrase": "[List;;, the ceremonial county;;, of;;, East Tilbury \\;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "ceremonial county",
        "uri": "http://dbpedia.org/ontology/ceremonialCounty",
        "seq": "9,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who is the spouse of Daniel Gibson? ",
    "SerialNumber": "707",
    "Words": "[Who, is, the, spouse, of, Daniel, Gibson, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/spouse\u003e \u003chttp://dbpedia.org/resource/Daniel_Gibson\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Daniel Gibson",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Daniel_Gibson",
        "seq": "21,34"
      }
    ],
    "CleanPhrase": "[spouse, Daniel Gibson]",
    "id": "1f0f16883a764370b8cb9aae06e6d527",
    "Phrase": "[Who;;, is;;, the spouse;;, of;;, Daniel Gibson;;]",
    "predicate mapping": [
      {
        "score": 74,
        "label": "spouse",
        "uri": "http://dbpedia.org/property/spouse",
        "seq": "11,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the mouth country of Upper Neretva ?",
    "SerialNumber": "708",
    "Words": "[Name, the, mouth, country, of, Upper, Neretva, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Upper_Neretva\u003e \u003chttp://dbpedia.org/ontology/mouthCountry\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Upper Neretva",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Upper_Neretva",
        "seq": "26,39"
      }
    ],
    "CleanPhrase": "[mouth country, Upper Neretva]",
    "id": "afc1eb64cfc24a95975afaf3b10c8429",
    "Phrase": "[Name;;, the mouth country;;, of;;, Upper Neretva;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "mouth country",
        "uri": "http://dbpedia.org/ontology/mouthCountry",
        "seq": "9,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the leader of Hackweiser ?",
    "SerialNumber": "724",
    "Words": "[Who, is, the, leader, of, Hackweiser, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Hackweiser\u003e \u003chttp://dbpedia.org/property/leaderName\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Hackweiser",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Hackweiser",
        "seq": "21,31"
      }
    ],
    "CleanPhrase": "[leader, Hackweiser]",
    "id": "8dc28cce9d654bfe8fbf70dc2b8673e9",
    "Phrase": "[Who;;, is;;, the leader;;, of;;, Hackweiser;;]",
    "predicate mapping": [
      {
        "score": 64,
        "label": "leader",
        "uri": "http://dbpedia.org/property/leaderName",
        "seq": "11,17",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the city served by Juhu Aerodrome ?",
    "SerialNumber": "727",
    "Words": "[Name, the, city, served, by, Juhu, Aerodrome, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Juhu_Aerodrome\u003e \u003chttp://dbpedia.org/property/cityServed\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Juhu Aerodrome",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Juhu_Aerodrome",
        "seq": "24,38"
      }
    ],
    "CleanPhrase": "[city, served, Juhu Aerodrome]",
    "id": "bdab35771cbc423897c8ea4079e34696",
    "Phrase": "[the city;;, served;;, by;;, Juhu Aerodrome;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "served city",
        "uri": "http://dbpedia.org/property/cityServed",
        "seq": "-1,10",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the religious affiliation of Wickramabahu Central College (National School) ?",
    "SerialNumber": "739",
    "Words": "[What, is, the, religious, affiliation, of, Wickramabahu, Central, College, \\, (, National, School, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)\u003e \u003chttp://dbpedia.org/property/religiousAffiliation\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Wickramabahu Central College (National School)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)",
        "seq": "37,83"
      }
    ],
    "CleanPhrase": "[religious affiliation, Wickramabahu Central College]",
    "id": "418dfe53e2ba43708a7884f5047d9093",
    "Phrase": "[What;;, is;;, the religious affiliation;;, of;;, Wickramabahu Central College;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "religious affiliation",
        "uri": "http://dbpedia.org/property/religiousAffiliation",
        "seq": "12,33",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who was the opponent of Robert Carr, 1st Earl of Somerset ?",
    "SerialNumber": "755",
    "Words": "[Who, was, the, opponent, of, Robert, Carr, ,, 1st, Earl, of, Somerset, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Robert_Carr,_1st_Earl_of_Somerset\u003e \u003chttp://dbpedia.org/ontology/opponent\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1656,
        "label": "Robert Carr",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Robert_Carr,_1st_Earl_of_Somerset",
        "seq": "24,35"
      }
    ],
    "CleanPhrase": "[opponent, Robert Carr, 1st Earl, Somerset]",
    "id": "86746719f387413aaf461a7c70f4ef96",
    "Phrase": "[Who;;, was;;, the opponent;;, of;;, Robert Carr;;, 1st Earl;;, of;;, Somerset;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "opponent",
        "uri": "http://dbpedia.org/ontology/opponent",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the home town of Cline Buckens ?",
    "SerialNumber": "766",
    "Words": "[Name, the, home, town, of, Cline, Buckens, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Céline_Buckens\u003e \u003chttp://dbpedia.org/ontology/hometown\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Cline Buckens",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Céline_Buckens",
        "seq": "22,35"
      }
    ],
    "CleanPhrase": "[home town, Cline, Buckens]",
    "id": "e45dcefc54af4edbbb07b37331ca8f14",
    "Phrase": "[the home town;;, of;;, Cline;;, Buckens;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "home town",
        "uri": "http://dbpedia.org/ontology/hometown",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "By which companies is RENFE Class 333 designed?",
    "SerialNumber": "773",
    "Words": "[By, which, companies, is, RENFE, Class, 333, designed, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/RENFE_Class_333\u003e \u003chttp://dbpedia.org/ontology/designer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "RENFE Class 333",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/RENFE_Class_333",
        "seq": "22,37"
      }
    ],
    "CleanPhrase": "[companies, RENFE Class 333, designed]",
    "id": "5943549088b54cd687dab2cb1cd0bde2",
    "Phrase": "[By;;, which companies;;, is;;, RENFE Class 333;;, designed;;]",
    "predicate mapping": [
      {
        "score": 13,
        "label": "designed",
        "uri": "http://dbpedia.org/ontology/designer",
        "seq": "38,46",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which military division does Clark Daniel Stearns belong?",
    "SerialNumber": "789",
    "Words": "[To, which, military, division, does, Clark, Daniel, Stearns, belong, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Clark_Daniel_Stearns\u003e \u003chttp://dbpedia.org/ontology/militaryBranch\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Clark Daniel Stearns",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Clark_Daniel_Stearns",
        "seq": "32,52"
      }
    ],
    "CleanPhrase": "[military division, Clark Daniel Stearns, belong]",
    "id": "7e03672a7f204b4e97641dcfd07042af",
    "Phrase": "[To;;, which;;, military division;;, does;;, Clark Daniel Stearns;;, belong;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "military",
        "uri": "http://dbpedia.org/ontology/militaryBranch",
        "seq": "9,17",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which educational institutes is Samuel Isham associated to?",
    "SerialNumber": "792",
    "Words": "[To, which, educational, institutes, is, Samuel, Isham, associated, to, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Samuel_Isham\u003e \u003chttp://dbpedia.org/property/education\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Samuel Isham",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Samuel_Isham",
        "seq": "35,47"
      }
    ],
    "CleanPhrase": "[educational institutes, Samuel Isham]",
    "id": "62d41f3590914838b15d806cdd5e887b",
    "Phrase": "[To;;, which;;, educational institutes;;, is;;, Samuel Isham;;, associated;;, to;;]",
    "predicate mapping": [
      {
        "score": 78,
        "label": "education",
        "uri": "http://dbpedia.org/property/education",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the origin of Henry Cluney ?",
    "SerialNumber": "795",
    "Words": "[Name, the, origin, of, Henry, Cluney, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Henry_Cluney\u003e \u003chttp://dbpedia.org/property/origin\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Henry Cluney",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Henry_Cluney",
        "seq": "19,31"
      }
    ],
    "CleanPhrase": "[origin, Henry Cluney]",
    "id": "0737179a939545608332c4f961a2373c",
    "Phrase": "[Name;;, the origin;;, of;;, Henry Cluney;;]",
    "predicate mapping": [
      {
        "score": 156,
        "label": "origin",
        "uri": "http://dbpedia.org/property/origin",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What are the current music bands of Chester Bennington?",
    "SerialNumber": "798",
    "Words": "[What, are, the, current, music, bands, of, Chester, Bennington, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/currentMembers\u003e \u003chttp://dbpedia.org/resource/Chester_Bennington\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Chester Bennington",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Chester_Bennington",
        "seq": "36,54"
      }
    ],
    "CleanPhrase": "[current music bands, Chester Bennington]",
    "id": "1d04a828ba6f427eac7fe74af1769003",
    "Phrase": "[What;;, are;;, the current music bands;;, of;;, Chester Bennington;;]",
    "predicate mapping": [
      {
        "score": 199,
        "label": "current",
        "uri": "http://dbpedia.org/property/currentMembers",
        "seq": "13,20",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "For which team does Ramiro Pea play ?",
    "SerialNumber": "799",
    "Words": "[For, which, team, does, Ramiro, Pea, play, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ramiro_Peña\u003e \u003chttp://dbpedia.org/ontology/team\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 24,
        "label": "Ramiro Pea",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Ramiro_Peña",
        "seq": "20,30"
      }
    ],
    "CleanPhrase": "[team, Ramiro Pea, play]",
    "id": "6e7de39eb6f7486286b10b30a81637ab",
    "Phrase": "[For;;, which team;;, does;;, Ramiro Pea;;, play;;]",
    "predicate mapping": [
      {
        "score": 15,
        "label": "team",
        "uri": "http://dbpedia.org/ontology/team",
        "seq": "10,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the serving line of Daund Junction railway station?",
    "SerialNumber": "804",
    "Words": "[Name, the, serving, line, of, Daund, Junction, railway, station, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Daund_Junction_railway_station\u003e \u003chttp://dbpedia.org/ontology/servingRailwayLine\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Daund Junction railway station",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Daund_Junction_railway_station",
        "seq": "25,55"
      }
    ],
    "CleanPhrase": "[serving line, Daund Junction railway station]",
    "id": "222add5c80274f5b86e1221896e34865",
    "Phrase": "[Name;;, the serving line;;, of;;, Daund Junction railway station;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "serving railway line",
        "uri": "http://dbpedia.org/ontology/servingRailwayLine",
        "seq": "-1,19",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "On what subjects was Broca\u0027s Brain written?",
    "SerialNumber": "805",
    "Words": "[On, what, subjects, was, Broca, \u0027s, Brain, written, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Broca\u0027s_Brain\u003e \u003chttp://dbpedia.org/property/subject\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Broca\u0027s Brain",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Broca\u0027s_Brain",
        "seq": "21,34"
      }
    ],
    "CleanPhrase": "[subjects, Broca, \u0027s Brain, written]",
    "id": "80f74a9018ae47769a3c567eee3066b9",
    "Phrase": "[On;;, what subjects;;, was;;, Broca;;, \u0027s Brain;;, written;;]",
    "predicate mapping": [
      {
        "score": 24,
        "label": "subject",
        "uri": "http://dbpedia.org/property/subject",
        "seq": "8,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the Languages of Zabbaleen ?",
    "SerialNumber": "819",
    "Words": "[What, are, the, Languages, of, Zabbaleen, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Zabbaleen\u003e \u003chttp://dbpedia.org/property/languages\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Zabbaleen",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Zabbaleen",
        "seq": "26,35"
      }
    ],
    "CleanPhrase": "[Languages, Zabbaleen]",
    "id": "9985f6fa134e4a0eb0cb51e125757840",
    "Phrase": "[What;;, are;;, the Languages;;, of;;, Zabbaleen;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "Languages",
        "uri": "http://dbpedia.org/property/languages",
        "seq": "13,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List down the important people of The Elders ?",
    "SerialNumber": "820",
    "Words": "[List, down, the, important, people, of, The, Elders, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Elders_(organization)\u003e \u003chttp://dbpedia.org/property/keyPeople\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 330,
        "label": "The Elders",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/The_Elders_(organization)",
        "seq": "34,44"
      }
    ],
    "CleanPhrase": "[List, important people, Elders]",
    "id": "498a45b06c174d1d87a2f97ad4d3cd8c",
    "Phrase": "[List;;, down;;, the important people;;, of;;, The Elders;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "people",
        "uri": "http://dbpedia.org/property/keyPeople",
        "seq": "24,30",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the spouse of Willian Menalaus?",
    "SerialNumber": "832",
    "Words": "[Who, is, the, spouse, of, Willian, Menalaus, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/William_Menelaus\u003e \u003chttp://dbpedia.org/ontology/spouse\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 12,
        "label": "Willian Menalaus",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/William_Menelaus",
        "seq": "21,37"
      }
    ],
    "CleanPhrase": "[spouse, Willian, Menalaus]",
    "id": "ea6c7a88f9a643beb176f5c9e5c2a632",
    "Phrase": "[Who;;, is;;, the spouse;;, of;;, Willian;;, Menalaus;;]",
    "predicate mapping": [
      {
        "score": 12,
        "label": "spouse",
        "uri": "http://dbpedia.org/ontology/spouse",
        "seq": "11,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the associate acts of  Martin Pugh?",
    "SerialNumber": "835",
    "Words": "[Name, the, associate, acts, of, Martin, Pugh, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Martin_Pugh\u003e \u003chttp://dbpedia.org/property/associatedActs\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Martin Pugh",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Martin_Pugh",
        "seq": "28,39"
      }
    ],
    "CleanPhrase": "[associate acts, Martin Pugh]",
    "id": "e491eb48c1824d5b8ae4e30f80a67e90",
    "Phrase": "[Name;;, the associate acts;;, of;;, Martin Pugh;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "associate acts",
        "uri": "http://dbpedia.org/property/associatedActs",
        "seq": "9,23",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the cover artist of Doctor Mirabilis (novel) ?",
    "SerialNumber": "848",
    "Words": "[Who, is, the, cover, artist, of, Doctor, Mirabilis, \\, (, novel, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Doctor_Mirabilis_(novel)\u003e \u003chttp://dbpedia.org/property/coverArtist\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Doctor Mirabilis (novel)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Doctor_Mirabilis_(novel)",
        "seq": "27,51"
      }
    ],
    "CleanPhrase": "[cover artist, Doctor Mirabilis]",
    "id": "ecbda26b25fc4319a9c2f2b629abdd69",
    "Phrase": "[Who;;, is;;, the cover artist;;, of;;, Doctor Mirabilis;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "cover artist",
        "uri": "http://dbpedia.org/property/coverArtist",
        "seq": "11,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where did Whitney Wistert debut?",
    "SerialNumber": "849",
    "Words": "[Where, did, Whitney, Wistert, debut, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Whitey_Wistert\u003e \u003chttp://dbpedia.org/property/debutteam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 43,
        "label": "Whitney Wistert",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Whitey_Wistert",
        "seq": "10,25"
      }
    ],
    "CleanPhrase": "[Whitney Wistert, debut]",
    "id": "5a09891ab68147329f938e2031e236a0",
    "Phrase": "[Where;;, did;;, Whitney Wistert;;, debut;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "debut",
        "uri": "http://dbpedia.org/property/debutteam",
        "seq": "26,31",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the sport league of Hampton Roads Rhinos ?",
    "SerialNumber": "851",
    "Words": "[Name, the, sport, league, of, Hampton, Roads, Rhinos, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Hampton_Roads_Rhinos\u003e \u003chttp://dbpedia.org/property/league\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Hampton Roads Rhinos",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Hampton_Roads_Rhinos",
        "seq": "25,45"
      }
    ],
    "CleanPhrase": "[sport league, Hampton Roads Rhinos]",
    "id": "d6d6f6e87c26462fb54e12d67e50ba61",
    "Phrase": "[the sport league;;, of;;, Hampton Roads Rhinos;;, \\;;]",
    "predicate mapping": [
      {
        "score": 158,
        "label": "league",
        "uri": "http://dbpedia.org/property/league",
        "seq": "15,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What novels are belong to the genre of Utopian and dystopian fiction?",
    "SerialNumber": "852",
    "Words": "[What, novels, are, belong, to, the, genre, of, Utopian, and, dystopian, fiction, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/literaryGenre\u003e \u003chttp://dbpedia.org/resource/Utopian_and_dystopian_fiction\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 220,
        "label": "Utopian",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Utopian_and_dystopian_fiction",
        "seq": "39,46"
      }
    ],
    "CleanPhrase": "[novels, belong, genre, Utopian dystopian fiction]",
    "id": "55717a4e06d940f9a6e2d0fee2b4709d",
    "Phrase": "[What novels;;, are belong;;, to;;, the genre;;, of;;, Utopian and dystopian fiction;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "genre",
        "uri": "http://dbpedia.org/ontology/literaryGenre",
        "seq": "30,35",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the programme format of WWTR ?",
    "SerialNumber": "854",
    "Words": "[What, is, the, programme, format, of, WWTR, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/WWTR\u003e \u003chttp://dbpedia.org/ontology/programmeFormat\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "WWTR",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/WWTR",
        "seq": "32,36"
      }
    ],
    "CleanPhrase": "[programme format, WWTR]",
    "id": "1e42c94409f64658a8d74bc8554ae63d",
    "Phrase": "[What;;, is;;, the programme format;;, of;;, WWTR;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "programme format",
        "uri": "http://dbpedia.org/ontology/programmeFormat",
        "seq": "12,28",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the university of Alexandre Tichonov ?",
    "SerialNumber": "858",
    "Words": "[Name, the, university, of, Alexandre, Tichonov, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Alexandre_Tichonov\u003e \u003chttp://dbpedia.org/property/university\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Alexandre Tichonov",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Alexandre_Tichonov",
        "seq": "23,41"
      }
    ],
    "CleanPhrase": "[university, Alexandre Tichonov]",
    "id": "f0185fa38b024eb1acf082b227049b42",
    "Phrase": "[the university;;, of;;, Alexandre Tichonov;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "university",
        "uri": "http://dbpedia.org/property/university",
        "seq": "9,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the office of Richard Coke ?",
    "SerialNumber": "861",
    "Words": "[Name, the, office, of, Richard, Coke, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Richard_Coke\u003e \u003chttp://dbpedia.org/property/office\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 8,
        "label": "Richard Coke",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Richard_Coke",
        "seq": "19,31"
      }
    ],
    "CleanPhrase": "[office, Richard Coke]",
    "id": "793d70e3bef54e1eaf081dc7e518ec08",
    "Phrase": "[the office;;, of;;, Richard Coke;;]",
    "predicate mapping": [
      {
        "score": 191,
        "label": "office",
        "uri": "http://dbpedia.org/property/office",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the guest of the show The Other Side (The Outer Limits)?",
    "SerialNumber": "875",
    "Words": "[List, the, guest, of, the, show, The, Other, Side, \\, (, The, Outer, Limits, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Other_Side_(The_Outer_Limits)\u003e \u003chttp://dbpedia.org/property/guests\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "The Other Side (The Outer Limits)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/The_Other_Side_(The_Outer_Limits)",
        "seq": "27,60"
      }
    ],
    "CleanPhrase": "[guest, show, Side, Outer Limits]",
    "id": "9e935a3e2d31428c87992e9f8bca00bd",
    "Phrase": "[the guest;;, of;;, the show;;, The Other Side;;, The Outer Limits;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "guest",
        "uri": "http://dbpedia.org/property/guests",
        "seq": "9,14",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the characters of Batman Live?",
    "SerialNumber": "876",
    "Words": "[Who, are, the, characters, of, Batman, Live, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Batman_Live\u003e \u003chttp://dbpedia.org/property/characters\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 89,
        "label": "Batman Live",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Batman_Live",
        "seq": "26,37"
      }
    ],
    "CleanPhrase": "[characters, Batman, Live]",
    "id": "9ae7378d981c4a9ca527a177a3042a8e",
    "Phrase": "[Who;;, are;;, the characters;;, of;;, Batman;;, Live;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "characters",
        "uri": "http://dbpedia.org/property/characters",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who produced wizards vs aliens?",
    "SerialNumber": "885",
    "Words": "[Who, produced, wizards, vs, aliens, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Wizards_vs_Aliens\u003e \u003chttp://dbpedia.org/ontology/producer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "wizards vs aliens",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Wizards_vs_Aliens",
        "seq": "13,30"
      }
    ],
    "CleanPhrase": "[produced, wizards, aliens]",
    "id": "53a85329c96443f8b76e32e8ee53d78c",
    "Phrase": "[Who;;, produced;;, wizards;;, vs;;, aliens;;]",
    "predicate mapping": [
      {
        "score": 22,
        "label": "produced",
        "uri": "http://dbpedia.org/ontology/producer",
        "seq": "4,12",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the draft team of Gene Conley ?",
    "SerialNumber": "887",
    "Words": "[What, is, the, draft, team, of, Gene, Conley, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Gene_Conley\u003e \u003chttp://dbpedia.org/property/draftTeam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Gene Conley",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Gene_Conley",
        "seq": "26,37"
      }
    ],
    "CleanPhrase": "[draft team, Gene Conley]",
    "id": "fb00be1561c84ae488c92a78ab96340e",
    "Phrase": "[What;;, is;;, the draft team;;, of;;, Gene Conley;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "draft team",
        "uri": "http://dbpedia.org/property/draftTeam",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the things Eric Schiller known for ?",
    "SerialNumber": "893",
    "Words": "[What, are, the, things, Eric, Schiller, known, for, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Eric_Schiller\u003e \u003chttp://dbpedia.org/ontology/knownFor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 7,
        "label": "Eric Schiller",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Eric_Schiller",
        "seq": "20,33"
      }
    ],
    "CleanPhrase": "[things Eric Schiller]",
    "id": "4988ef2fd0df4d35b243ffe31755c171",
    "Phrase": "[What;;, are;;, the things Eric Schiller;;, known;;, for;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "known for",
        "uri": "http://dbpedia.org/ontology/knownFor",
        "seq": "34,43",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which political party does Virendra Kataria belongs ?",
    "SerialNumber": "900",
    "Words": "[To, which, political, party, does, Virendra, Kataria, belongs, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Virendra_Kataria\u003e \u003chttp://dbpedia.org/property/party\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Virendra Kataria",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Virendra_Kataria",
        "seq": "30,46"
      }
    ],
    "CleanPhrase": "[political party, Virendra Kataria, belongs]",
    "id": "80973c292e414e8890ed3a1de7f362bf",
    "Phrase": "[To;;, which;;, political party;;, does;;, Virendra Kataria;;, belongs;;]",
    "predicate mapping": [
      {
        "score": 285,
        "label": "political party",
        "uri": "http://dbpedia.org/property/party",
        "seq": "9,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List all the former broadcast network of WMDN ?",
    "SerialNumber": "903",
    "Words": "[List, all, the, former, broadcast, network, of, WMDN, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/WMDN\u003e \u003chttp://dbpedia.org/ontology/formerBroadcastNetwork\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "WMDN",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/WMDN",
        "seq": "41,45"
      }
    ],
    "CleanPhrase": "[List, broadcast network, WMDN]",
    "id": "76fc4d62d2b74c798a3b6b61c4d1ff6f",
    "Phrase": "[List;;, all the former broadcast network;;, of;;, WMDN;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "former broadcast network",
        "uri": "http://dbpedia.org/ontology/formerBroadcastNetwork",
        "seq": "13,37",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who is married to Tony Ramo",
    "SerialNumber": "907",
    "Words": "[Who, is, married, to, Tony, Ramo]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/partner\u003e \u003chttp://dbpedia.org/resource/Tony_Romo\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 291,
        "label": "Tony Ramo",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Tony_Romo",
        "seq": "18,27"
      }
    ],
    "CleanPhrase": "[married, Tony Ramo]",
    "id": "75d8ae08f021434f8b64b8c089efb56e",
    "Phrase": "[Who;;, is married;;, to;;, Tony Ramo;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "married to",
        "uri": "http://dbpedia.org/property/partner",
        "seq": "7,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who first ascented a mountain of Cathedral Peak (California) ?",
    "SerialNumber": "914",
    "Words": "[Who, first, ascented, a, mountain, of, Cathedral, Peak, \\, (, California, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Cathedral_Peak_(California)\u003e \u003chttp://dbpedia.org/ontology/firstAscentPerson\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 29,
        "label": "Cathedral Peak",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Cathedral_Peak_(California)",
        "seq": "33,47"
      }
    ],
    "CleanPhrase": "[ascented, mountain, Cathedral Peak, California]",
    "id": "e118a1a544bf48ee9836c7b3ce7fc651",
    "Phrase": "[Who;;, first;;, ascented;;, a mountain;;, of;;, Cathedral Peak;;, California;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "ascented",
        "uri": "http://dbpedia.org/ontology/firstAscentPerson",
        "seq": "10,18",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the municipality of Liberty Bell ?",
    "SerialNumber": "924",
    "Words": "[What, is, the, municipality, of, Liberty, Bell, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Liberty_Bell\u003e \u003chttp://dbpedia.org/ontology/municipality\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 48,
        "label": "Liberty Bell",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Liberty_Bell",
        "seq": "28,40"
      }
    ],
    "CleanPhrase": "[municipality, Liberty Bell]",
    "id": "b5774df2305a4772bad9f84bc85d5d62",
    "Phrase": "[What;;, is;;, the municipality;;, of;;, Liberty Bell;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "municipality",
        "uri": "http://dbpedia.org/ontology/municipality",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which country\u0027s largest city is Lima?",
    "SerialNumber": "932",
    "Words": "[Which, country, \u0027s, largest, city, is, Lima, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/largestCity\u003e \u003chttp://dbpedia.org/resource/Lima\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 19,
        "label": "Lima",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Lima",
        "seq": "32,36"
      }
    ],
    "CleanPhrase": "[country, \u0027s largest city, Lima]",
    "id": "ac8eb701fbd94707ac65d5bd874c8b7a",
    "Phrase": "[Which country;;, \u0027s largest city;;, is;;, Lima;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "largest city",
        "uri": "http://dbpedia.org/ontology/largestCity",
        "seq": "16,28",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the title of Kakae ?",
    "SerialNumber": "944",
    "Words": "[What, is, the, title, of, Kakae, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Kakae\u003e \u003chttp://dbpedia.org/property/title\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "Kakae",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Kakae",
        "seq": "21,26"
      }
    ],
    "CleanPhrase": "[title, Kakae]",
    "id": "1ccd1c0a38d94273b20369bad3a4e3e6",
    "Phrase": "[What;;, is;;, the title;;, of;;, Kakae;;]",
    "predicate mapping": [
      {
        "score": 498,
        "label": "title",
        "uri": "http://dbpedia.org/property/title",
        "seq": "12,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List all the line of Vadodara Junction railway station?",
    "SerialNumber": "945",
    "Words": "[List, all, the, line, of, Vadodara, Junction, railway, station, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Vadodara_Junction_railway_station\u003e \u003chttp://dbpedia.org/property/line\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Vadodara Junction railway station",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Vadodara_Junction_railway_station",
        "seq": "21,54"
      }
    ],
    "CleanPhrase": "[List, line, Vadodara Junction railway station]",
    "id": "bf81c3eaa06d49e9b4022d317a8b2af0",
    "Phrase": "[List;;, all the line;;, of;;, Vadodara Junction railway station;;]",
    "predicate mapping": [
      {
        "score": 388,
        "label": "line",
        "uri": "http://dbpedia.org/property/line",
        "seq": "13,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the team for which Doug Acomb played ?",
    "SerialNumber": "947",
    "Words": "[List, the, team, for, which, Doug, Acomb, played, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Doug_Acomb\u003e \u003chttp://dbpedia.org/property/playedFor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Doug Acomb",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Doug_Acomb",
        "seq": "24,34"
      }
    ],
    "CleanPhrase": "[List, team, Doug Acomb, played]",
    "id": "2832515b3cd94fbaba52612934519520",
    "Phrase": "[List;;, the team;;, for;;, which;;, Doug Acomb;;, played;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "team",
        "uri": "http://dbpedia.org/property/playedFor",
        "seq": "9,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the military branch of John Tower ?",
    "SerialNumber": "956",
    "Words": "[What, is, the, military, branch, of, John, Tower, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/John_Tower\u003e \u003chttp://dbpedia.org/ontology/militaryBranch\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "John Tower",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/John_Tower",
        "seq": "31,41"
      }
    ],
    "CleanPhrase": "[military branch, John Tower]",
    "id": "94efeafa9ef24e1391fdb5bed1b465b0",
    "Phrase": "[What;;, is;;, the military branch;;, of;;, John Tower;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "military branch",
        "uri": "http://dbpedia.org/ontology/militaryBranch",
        "seq": "12,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the type of Naval Station Bremerton ?",
    "SerialNumber": "958",
    "Words": "[What, is, the, type, of, Naval, Station, Bremerton, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Naval_Station_Bremerton\u003e \u003chttp://dbpedia.org/property/type\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Naval Station Bremerton",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Naval_Station_Bremerton",
        "seq": "20,43"
      }
    ],
    "CleanPhrase": "[type, Naval Station Bremerton]",
    "id": "09496228c50d4dd0829420bde30ad222",
    "Phrase": "[What;;, is;;, the type;;, of;;, Naval Station Bremerton \\;;]",
    "predicate mapping": [
      {
        "score": 732,
        "label": "type",
        "uri": "http://dbpedia.org/property/type",
        "seq": "12,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the tenants of MasterCard Centre?",
    "SerialNumber": "963",
    "Words": "[Who, are, the, tenants, of, MasterCard, Centre, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/MasterCard_Centre\u003e \u003chttp://dbpedia.org/property/tenants\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "MasterCard Centre",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/MasterCard_Centre",
        "seq": "23,40"
      }
    ],
    "CleanPhrase": "[tenants, MasterCard Centre]",
    "id": "694a307769eb4f02b15d499978c98c6a",
    "Phrase": "[Who;;, are;;, the tenants;;, of;;, MasterCard Centre;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "tenants",
        "uri": "http://dbpedia.org/property/tenants",
        "seq": "12,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the President of United World College of Costa Rica ?",
    "SerialNumber": "964",
    "Words": "[Who, is, the, President, of, United, World, College, of, Costa, Rica, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/United_World_College_of_Costa_Rica\u003e \u003chttp://dbpedia.org/property/president\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "United World College of Costa Rica",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/United_World_College_of_Costa_Rica",
        "seq": "24,58"
      }
    ],
    "CleanPhrase": "[President, United World College, Costa Rica]",
    "id": "ba8179bb4b874d8a8ec1115fefbd1fb2",
    "Phrase": "[Who;;, is;;, the President;;, of;;, United World College;;, of;;, Costa Rica;;]",
    "predicate mapping": [
      {
        "score": 276,
        "label": "President",
        "uri": "http://dbpedia.org/property/president",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the editor of Hearth and Home ?",
    "SerialNumber": "979",
    "Words": "[Who, is, the, editor, of, Hearth, and, Home, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Hearth_and_Home\u003e \u003chttp://dbpedia.org/ontology/editor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Hearth and Home",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Hearth_and_Home",
        "seq": "21,36"
      }
    ],
    "CleanPhrase": "[editor, Hearth Home]",
    "id": "3bcdc25b65614b0487c429348217ea4b",
    "Phrase": "[Who;;, is;;, the editor;;, of;;, Hearth and Home;;]",
    "predicate mapping": [
      {
        "score": 18,
        "label": "editor",
        "uri": "http://dbpedia.org/ontology/editor",
        "seq": "11,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Mike Shinoda is in which band?",
    "SerialNumber": "980",
    "Words": "[Mike, Shinoda, is, in, which, band, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/bandMember\u003e \u003chttp://dbpedia.org/resource/Mike_Shinoda\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Mike Shinoda",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Mike_Shinoda",
        "seq": "0,12"
      }
    ],
    "CleanPhrase": "[Mike Shinoda, band]",
    "id": "a2ccd223b18049ec8f3baa631c19db91",
    "Phrase": "[Mike Shinoda;;, is;;, in;;, which;;, band;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "band",
        "uri": "http://dbpedia.org/ontology/bandMember",
        "seq": "25,29",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "name the mountain range of Le Gibloux ?",
    "SerialNumber": "995",
    "Words": "[name, the, mountain, range, of, Le, Gibloux, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Le_Gibloux\u003e \u003chttp://dbpedia.org/ontology/mountainRange\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 11,
        "label": "Gibloux",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Le_Gibloux",
        "seq": "30,37"
      }
    ],
    "CleanPhrase": "[mountain range, Le Gibloux]",
    "id": "1a7add8911774e34a9753b1970a42b0f",
    "Phrase": "[name;;, the mountain range;;, of;;, Le Gibloux;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "mountain range",
        "uri": "http://dbpedia.org/ontology/mountainRange",
        "seq": "9,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is the headquarters of Metro Transit (Minnesota) ?",
    "SerialNumber": "996",
    "Words": "[Where, is, the, headquarters, of, Metro, Transit, \\, (, Minnesota, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Metro_Transit_(Minnesota)\u003e \u003chttp://dbpedia.org/property/headquarters\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 105,
        "label": "Metro Transit",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Metro_Transit_(Minnesota)",
        "seq": "29,42"
      }
    ],
    "CleanPhrase": "[headquarters, Metro Transit, Minnesota]",
    "id": "020c57dc849e4ed79054a420fb7f59ff",
    "Phrase": "[Where;;, is;;, the headquarters;;, of;;, Metro Transit \\;;, Minnesota;;]",
    "predicate mapping": [
      {
        "score": 27,
        "label": "headquarters",
        "uri": "http://dbpedia.org/property/headquarters",
        "seq": "13,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the current members of Insects vs Robots?",
    "SerialNumber": "1003",
    "Words": "[Who, are, the, current, members, of, Insects, vs, Robots, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Insects_vs_Robots\u003e \u003chttp://dbpedia.org/property/currentMembers\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Insects vs Robots",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Insects_vs_Robots",
        "seq": "31,48"
      }
    ],
    "CleanPhrase": "[current members, Insects, Robots]",
    "id": "69644dc7516e4f57a68e2ef38707770b",
    "Phrase": "[Who;;, are;;, the current members;;, of;;, Insects;;, Robots;;, \\;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "current members",
        "uri": "http://dbpedia.org/property/currentMembers",
        "seq": "12,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "name the races where bobby beasley took part ?",
    "SerialNumber": "1007",
    "Words": "[name, the, races, where, bobby, beasley, took, part, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bobby_Beasley\u003e \u003chttp://dbpedia.org/ontology/race\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "bobby beasley",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Bobby_Beasley",
        "seq": "21,34"
      }
    ],
    "CleanPhrase": "[races, bobby beasley, part]",
    "id": "760c753b13f2446a9330ada587e18873",
    "Phrase": "[name;;, the races;;, where;;, bobby beasley;;, took;;, part;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "race",
        "uri": "http://dbpedia.org/ontology/race",
        "seq": "9,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the content license of Darcs ?",
    "SerialNumber": "1008",
    "Words": "[What, is, the, content, license, of, Darcs, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Darcs\u003e \u003chttp://dbpedia.org/ontology/license\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Darcs",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Darcs",
        "seq": "31,36"
      }
    ],
    "CleanPhrase": "[content license, Darcs]",
    "id": "acc08e9a7a55497086586e40d6223753",
    "Phrase": "[What;;, is;;, the content license;;, of;;, Darcs;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "content license",
        "uri": "http://dbpedia.org/ontology/license",
        "seq": "12,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the game platform of Google Cloud Connect ?",
    "SerialNumber": "1042",
    "Words": "[What, is, the, game, platform, of, Google, Cloud, Connect, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Google_Cloud_Connect\u003e \u003chttp://dbpedia.org/ontology/computingPlatform\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Google Cloud Connect",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Google_Cloud_Connect",
        "seq": "29,49"
      }
    ],
    "CleanPhrase": "[game platform, Google Cloud Connect]",
    "id": "fd948db9a1074ffca0b870175bf8308e",
    "Phrase": "[What;;, is;;, the game platform;;, of;;, Google Cloud Connect;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "game platform",
        "uri": "http://dbpedia.org/ontology/computingPlatform",
        "seq": "12,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the allegiance of John Kotelawala ?",
    "SerialNumber": "1056",
    "Words": "[What, is, the, allegiance, of, John, Kotelawala, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/John_Kotelawala\u003e \u003chttp://dbpedia.org/property/allegiance\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "John Kotelawala",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/John_Kotelawala",
        "seq": "26,41"
      }
    ],
    "CleanPhrase": "[allegiance, John Kotelawala]",
    "id": "0496d085c1c84057847b2b47a44df27d",
    "Phrase": "[What;;, is;;, the allegiance;;, of;;, John Kotelawala;;]",
    "predicate mapping": [
      {
        "score": 18,
        "label": "allegiance",
        "uri": "http://dbpedia.org/property/allegiance",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which is the university of Vanderbilt Commodores ?",
    "SerialNumber": "1066",
    "Words": "[Which, is, the, university, of, Vanderbilt, Commodores, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Vanderbilt_Commodores\u003e \u003chttp://dbpedia.org/ontology/university\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Vanderbilt Commodores",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Vanderbilt_Commodores",
        "seq": "27,48"
      }
    ],
    "CleanPhrase": "[university, Vanderbilt Commodores]",
    "id": "c9b8f77f399f4f88b60f4a252aa7e825",
    "Phrase": "[Which;;, is;;, the university;;, of;;, Vanderbilt Commodores;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "university",
        "uri": "http://dbpedia.org/ontology/university",
        "seq": "13,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the successor of McDonnell Douglas ?",
    "SerialNumber": "1075",
    "Words": "[Who, is, the, successor, of, McDonnell, Douglas, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/McDonnell_Douglas\u003e \u003chttp://dbpedia.org/property/successor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 65,
        "label": "McDonnell Douglas",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/McDonnell_Douglas",
        "seq": "24,41"
      }
    ],
    "CleanPhrase": "[successor, McDonnell Douglas]",
    "id": "e496a9c37c484d349983cda8defe8e0e",
    "Phrase": "[Who;;, is;;, the successor;;, of;;, McDonnell Douglas;;]",
    "predicate mapping": [
      {
        "score": 27,
        "label": "successor",
        "uri": "http://dbpedia.org/property/successor",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "where did Boga originate?",
    "SerialNumber": "1076",
    "Words": "[where, did, Boga, originate, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Boga_(soft_drink)\u003e \u003chttp://dbpedia.org/property/origin\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "Boga",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Boga_(soft_drink)",
        "seq": "10,14"
      }
    ],
    "CleanPhrase": "[Boga, originate]",
    "id": "dbd91640b99b4b68accaf939e7b660b6",
    "Phrase": "[where;;, Boga;;, originate;;]",
    "predicate mapping": [
      {
        "score": 156,
        "label": "origin",
        "uri": "http://dbpedia.org/property/origin",
        "seq": "15,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "what does the cahora bassa flow into?",
    "SerialNumber": "1080",
    "Words": "[what, does, the, cahora, bassa, flow, into, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Cahora_Bassa\u003e \u003chttp://dbpedia.org/property/inflow\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 8,
        "label": "cahora bassa",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Cahora_Bassa",
        "seq": "14,26"
      }
    ],
    "CleanPhrase": "[cahora bassa flow]",
    "id": "84d8ee90740d450784488c785a892205",
    "Phrase": "[what;;, does;;, the cahora bassa flow;;, into;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "flow",
        "uri": "http://dbpedia.org/property/inflow",
        "seq": "27,31",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the resting place of Charles Edward Magoon ?",
    "SerialNumber": "1085",
    "Words": "[Name, the, resting, place, of, Charles, Edward, Magoon, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Charles_Edward_Magoon\u003e \u003chttp://dbpedia.org/property/restingplace\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Charles Edward Magoon",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Charles_Edward_Magoon",
        "seq": "26,47"
      }
    ],
    "CleanPhrase": "[resting place, Charles Edward Magoon]",
    "id": "20d4fbedbfba402298cd46213df4550e",
    "Phrase": "[Name;;, the resting place;;, of;;, Charles Edward Magoon;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "resting place",
        "uri": "http://dbpedia.org/property/restingplace",
        "seq": "9,22",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In which region was political figure Wayne Allard elected?",
    "SerialNumber": "1089",
    "Words": "[In, which, region, was, political, figure, Wayne, Allard, elected, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Wayne_Allard\u003e \u003chttp://dbpedia.org/ontology/region\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 8,
        "label": "Wayne Allard",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Wayne_Allard",
        "seq": "37,49"
      }
    ],
    "CleanPhrase": "[region, political figure Wayne Allard, elected]",
    "id": "bc55397cdb6c4e01b5cb95814c0c9662",
    "Phrase": "[In;;, which;;, region;;, was;;, political figure Wayne Allard;;, elected;;]",
    "predicate mapping": [
      {
        "score": 12,
        "label": "region",
        "uri": "http://dbpedia.org/ontology/region",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the district of Robert William Wilcox ?",
    "SerialNumber": "1092",
    "Words": "[Name, the, district, of, Robert, William, Wilcox, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Robert_William_Wilcox\u003e \u003chttp://dbpedia.org/property/district\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Robert William Wilcox",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Robert_William_Wilcox",
        "seq": "21,42"
      }
    ],
    "CleanPhrase": "[district, Robert William Wilcox]",
    "id": "ba1296ab79d44a72b90bc4eda20551f0",
    "Phrase": "[the district;;, of;;, Robert William Wilcox;;]",
    "predicate mapping": [
      {
        "score": 119,
        "label": "district",
        "uri": "http://dbpedia.org/property/district",
        "seq": "9,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the author of Karakuri Dji Ultimo ?",
    "SerialNumber": "1093",
    "Words": "[Who, is, the, author, of, Karakuri, Dji, Ultimo, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Karakuri_Dôji_Ultimo\u003e \u003chttp://dbpedia.org/property/author\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Karakuri Dji Ultimo",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Karakuri_Dôji_Ultimo",
        "seq": "21,40"
      }
    ],
    "CleanPhrase": "[author, Karakuri Dji Ultimo]",
    "id": "3c2822d238f74e5d8723e577709dbc0d",
    "Phrase": "[Who;;, is;;, the author;;, of;;, Karakuri Dji Ultimo;;]",
    "predicate mapping": [
      {
        "score": 104,
        "label": "author",
        "uri": "http://dbpedia.org/property/author",
        "seq": "11,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which universities are alma mater to Charles Plosser?",
    "SerialNumber": "1113",
    "Words": "[Which, universities, are, alma, mater, to, Charles, Plosser, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Charles_Plosser\u003e \u003chttp://dbpedia.org/property/almaMater\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "Charles Plosser",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Charles_Plosser",
        "seq": "37,52"
      }
    ],
    "CleanPhrase": "[universities, alma mater, Charles Plosser]",
    "id": "63e6c4e6a8e54d1d84d524f2d2efec81",
    "Phrase": "[Which universities;;, are;;, alma mater;;, to;;, Charles Plosser;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "alma mater",
        "uri": "http://dbpedia.org/property/almaMater",
        "seq": "23,33",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was the Temptation Waits recorded?",
    "SerialNumber": "1114",
    "Words": "[Where, was, the, Temptation, Waits, recorded, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Temptation_Waits\u003e \u003chttp://dbpedia.org/ontology/recordedIn\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Temptation Waits",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Temptation_Waits",
        "seq": "14,30"
      }
    ],
    "CleanPhrase": "[Temptation, Waits recorded]",
    "id": "e8ba1b2b3f3944aa9e7a39ebfb9d8640",
    "Phrase": "[Where;;, was;;, the Temptation;;, Waits recorded;;]",
    "predicate mapping": [
      {
        "score": 26,
        "label": "recorded",
        "uri": "http://dbpedia.org/ontology/recordedIn",
        "seq": "31,39",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the species of Panthera leo fossilis ?",
    "SerialNumber": "1115",
    "Words": "[Name, the, species, of, Panthera, leo, fossilis, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Panthera_leo_fossilis\u003e \u003chttp://dbpedia.org/ontology/species\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Panthera leo fossilis",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Panthera_leo_fossilis",
        "seq": "20,41"
      }
    ],
    "CleanPhrase": "[species, Panthera leo]",
    "id": "571fc2015ffd4fc78f1f711b2042fbe1",
    "Phrase": "[Name;;, the species;;, of;;, Panthera leo;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "species",
        "uri": "http://dbpedia.org/ontology/species",
        "seq": "9,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the driver who had a pole finish in 1989 Portuguese Grand Prix ?",
    "SerialNumber": "1117",
    "Words": "[Name, the, driver, who, had, a, pole, finish, in, 1989, Portuguese, Grand, Prix, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/1989_Portuguese_Grand_Prix\u003e \u003chttp://dbpedia.org/ontology/poleDriver\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "1989 Portuguese Grand Prix",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/1989_Portuguese_Grand_Prix",
        "seq": "41,67"
      }
    ],
    "CleanPhrase": "[driver, pole finish, 1989 Portuguese Grand Prix]",
    "id": "af1582bae86d4e2dbb0237cb9e880064",
    "Phrase": "[Name;;, the driver;;, who;;, had;;, a pole finish;;, in;;, 1989 Portuguese Grand Prix;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "driver pole",
        "uri": "http://dbpedia.org/ontology/poleDriver",
        "seq": "-1,10",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the municipality of Patterson Houses ?",
    "SerialNumber": "1130",
    "Words": "[What, is, the, municipality, of, Patterson, Houses, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Patterson_Houses\u003e \u003chttp://dbpedia.org/ontology/municipality\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 91,
        "label": "Patterson Houses",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Patterson_Houses",
        "seq": "28,44"
      }
    ],
    "CleanPhrase": "[municipality, Patterson Houses]",
    "id": "696529855616457e86adf4ee2c4833a9",
    "Phrase": "[What;;, is;;, the municipality;;, of;;, Patterson Houses;;, \\;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "municipality",
        "uri": "http://dbpedia.org/ontology/municipality",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the partners of Kelly Brook?",
    "SerialNumber": "1146",
    "Words": "[Name, the, partners, of, Kelly, Brook, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Kelly_Brook\u003e \u003chttp://dbpedia.org/ontology/partner\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 13,
        "label": "Kelly Brook",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Kelly_Brook",
        "seq": "21,32"
      }
    ],
    "CleanPhrase": "[partners, Kelly Brook]",
    "id": "c6210ff5ca7d44fd8d63a4a8c291e777",
    "Phrase": "[the partners;;, of;;, Kelly Brook;;]",
    "predicate mapping": [
      {
        "score": 9,
        "label": "partner",
        "uri": "http://dbpedia.org/ontology/partner",
        "seq": "9,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the location town of First Church of Christ, Scientist (Pittsburgh) ?",
    "SerialNumber": "1152",
    "Words": "[What, is, the, location, town, of, First, Church, of, Christ, ,, Scientist, \\, (, Pittsburgh, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/First_Church_of_Christ,_Scientist_(Pittsburgh)\u003e \u003chttp://dbpedia.org/property/locationTown\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "First Church of Christ, Scientist (Pittsburgh)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/First_Church_of_Christ,_Scientist_(Pittsburgh)",
        "seq": "29,75"
      }
    ],
    "CleanPhrase": "[location town, Church, Christ, Pittsburgh]",
    "id": "1b2911efce6c47eca4f936300c9bb041",
    "Phrase": "[What;;, is;;, the location town;;, of;;, First Church;;, of;;, Christ;;, Pittsburgh;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "location town",
        "uri": "http://dbpedia.org/property/locationTown",
        "seq": "12,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who all play for the Ivory Coast football team?",
    "SerialNumber": "1171",
    "Words": "[Who, all, play, for, the, Ivory, Coast, football, team, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/nationalteam\u003e \u003chttp://dbpedia.org/resource/Ivory_Coast_national_football_team\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Ivory Coast football team",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Ivory_Coast_national_football_team",
        "seq": "21,32"
      }
    ],
    "CleanPhrase": "[play, Ivory Coast football team]",
    "id": "68b47db5171449cab76dfcb3095290e0",
    "Phrase": "[Who;;, all;;, play;;, for;;, the Ivory Coast football team;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "team",
        "uri": "http://dbpedia.org/property/nationalteam",
        "seq": "42,46",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "For which team does hunter pence play for?",
    "SerialNumber": "1195",
    "Words": "[For, which, team, does, hunter, pence, play, for, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Hunter_Pence\u003e \u003chttp://dbpedia.org/ontology/team\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 29,
        "label": "hunter pence",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Hunter_Pence",
        "seq": "20,32"
      }
    ],
    "CleanPhrase": "[team, hunter pence, play]",
    "id": "a82ecf0242f748acbf844b9c3181614a",
    "Phrase": "[For;;, which team;;, does;;, hunter pence;;, play;;, for;;, \\;;]",
    "predicate mapping": [
      {
        "score": 15,
        "label": "team",
        "uri": "http://dbpedia.org/ontology/team",
        "seq": "10,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Of what all has David Ian Salter been an editor of?",
    "SerialNumber": "1197",
    "Words": "[Of, what, all, has, David, Ian, Salter, been, an, editor, of, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/editing\u003e \u003chttp://dbpedia.org/resource/David_Ian_Salter\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "David Ian Salter",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/David_Ian_Salter",
        "seq": "16,32"
      }
    ],
    "CleanPhrase": "[David Ian Salter, editor]",
    "id": "5932978b97be44fd926095c0dfaad785",
    "Phrase": "[Of;;, what;;, all;;, has;;, David Ian Salter;;, been;;, an editor;;, of;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "editor",
        "uri": "http://dbpedia.org/property/editing",
        "seq": "41,47",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What was the result of Operation Autumn Clouds ?",
    "SerialNumber": "1223",
    "Words": "[What, was, the, result, of, Operation, Autumn, Clouds, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Operation_Autumn_Clouds\u003e \u003chttp://dbpedia.org/property/result\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Operation Autumn Clouds",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Operation_Autumn_Clouds",
        "seq": "23,46"
      }
    ],
    "CleanPhrase": "[result, Operation Autumn Clouds]",
    "id": "1c72a1337f9d4e5aabf86018b6b52340",
    "Phrase": "[What;;, was;;, the result;;, of;;, Operation Autumn Clouds;;]",
    "predicate mapping": [
      {
        "score": 104,
        "label": "result",
        "uri": "http://dbpedia.org/property/result",
        "seq": "13,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What softwares were created by Apple Productivity Experience Group ?",
    "SerialNumber": "1226",
    "Words": "[What, softwares, were, created, by, Apple, Productivity, Experience, Group, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Apple_Productivity_Experience_Group\u003e \u003chttp://dbpedia.org/ontology/product\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Apple Productivity Experience Group",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Apple_Productivity_Experience_Group",
        "seq": "31,66"
      }
    ],
    "CleanPhrase": "[softwares, created, Apple Productivity Experience Group]",
    "id": "68516929d5024193a4b6db18b81526ba",
    "Phrase": "[What;;, softwares;;, were created;;, by;;, Apple Productivity Experience Group;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "Product",
        "uri": "http://dbpedia.org/ontology/product",
        "seq": "37,44",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "?What are the airline hubs of Cascade Airways",
    "SerialNumber": "1235",
    "Words": "[\\, ?, What, are, the, airline, hubs, of, Cascade, Airways]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Cascade_Airways\u003e \u003chttp://dbpedia.org/property/hubs\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Cascade Airways",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Cascade_Airways",
        "seq": "30,45"
      }
    ],
    "CleanPhrase": "[airline hubs, Cascade Airways]",
    "id": "606ecd9c542e4d1d8cd5322a41818757",
    "Phrase": "[What;;, are;;, the airline hubs;;, of;;, Cascade Airways;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "hubs",
        "uri": "http://dbpedia.org/property/hubs",
        "seq": "22,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the style of architecture of Pontiac Building ?",
    "SerialNumber": "1245",
    "Words": "[What, is, the, style, of, architecture, of, Pontiac, Building, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Pontiac_Building\u003e \u003chttp://dbpedia.org/ontology/architecturalStyle\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 9,
        "label": "Pontiac Building",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Pontiac_Building",
        "seq": "37,53"
      }
    ],
    "CleanPhrase": "[style, architecture, Pontiac Building]",
    "id": "0373e167503941919cb83707358aee72",
    "Phrase": "[What;;, is;;, the style;;, of;;, architecture;;, of;;, Pontiac Building;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "style of architecture",
        "uri": "http://dbpedia.org/ontology/architecturalStyle",
        "seq": "12,33",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the constituency of  Jonas Gahr Stre ?",
    "SerialNumber": "1247",
    "Words": "[Name, the, constituency, of, Jonas, Gahr, Stre, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Jonas_Gahr_Støre\u003e \u003chttp://dbpedia.org/property/constituency\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Jonas Gahr Stre",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Jonas_Gahr_Støre",
        "seq": "26,41"
      }
    ],
    "CleanPhrase": "[constituency, Jonas Gahr Stre]",
    "id": "a5012e9aba5b40bbbc06155442c8940c",
    "Phrase": "[the constituency;;, of;;, Jonas Gahr Stre;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "constituency",
        "uri": "http://dbpedia.org/property/constituency",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD) ?",
    "SerialNumber": "1249",
    "Words": "[Name, the, directors, of, Lennon, Legend, The, Very, Best, of, John, Lennon, \\, (, DVD, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Lennon_Legend:_The_Very_Best_of_John_Lennon_(DVD)\u003e \u003chttp://dbpedia.org/ontology/director\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Lennon Legend: The Very Best of John Lennon (DVD)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Lennon_Legend:_The_Very_Best_of_John_Lennon_(DVD)",
        "seq": "22,71"
      }
    ],
    "CleanPhrase": "[directors, Lennon Legend, John Lennon]",
    "id": "6689a88cf3af48998efaa96b5466f7cb",
    "Phrase": "[the directors;;, of;;, Lennon Legend;;, The Very Best;;, of;;, John Lennon;;]",
    "predicate mapping": [
      {
        "score": 24,
        "label": "directors",
        "uri": "http://dbpedia.org/ontology/director",
        "seq": "9,18",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the owner of the South end ?",
    "SerialNumber": "1257",
    "Words": "[Who, is, the, owner, of, the, South, end, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_South_End\u003e \u003chttp://dbpedia.org/property/owners\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "the South end",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/The_South_End",
        "seq": "20,33"
      }
    ],
    "CleanPhrase": "[owner, South end]",
    "id": "3180262923484726bbeebc7b398144d1",
    "Phrase": "[Who;;, is;;, the owner;;, of;;, the South end;;]",
    "predicate mapping": [
      {
        "score": 13,
        "label": "owner",
        "uri": "http://dbpedia.org/property/owners",
        "seq": "11,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List down the commanders of Battle of Fort stephenson ?",
    "SerialNumber": "1258",
    "Words": "[List, down, the, commanders, of, Battle, of, Fort, stephenson, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Battle_of_Fort_Stephenson\u003e \u003chttp://dbpedia.org/ontology/commander\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Battle of Fort stephenson",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Battle_of_Fort_Stephenson",
        "seq": "28,53"
      }
    ],
    "CleanPhrase": "[List, commanders, Battle, Fort stephenson]",
    "id": "6b763993596b4edab96dd9ec9211ba78",
    "Phrase": "[List;;, down;;, the commanders;;, of;;, Battle;;, of;;, Fort stephenson;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "commander",
        "uri": "http://dbpedia.org/ontology/commander",
        "seq": "14,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where does the Kentucky cycle take place?",
    "SerialNumber": "1266",
    "Words": "[Where, does, the, Kentucky, cycle, take, place, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Kentucky_Cycle\u003e \u003chttp://dbpedia.org/property/place\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "the Kentucky cycle",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/The_Kentucky_Cycle",
        "seq": "11,29"
      }
    ],
    "CleanPhrase": "[Kentucky cycle, place]",
    "id": "2c6285f3f7ad4840802f57a3ec025f80",
    "Phrase": "[Where;;, the Kentucky cycle;;, take;;, place;;]",
    "predicate mapping": [
      {
        "score": 341,
        "label": "place",
        "uri": "http://dbpedia.org/property/place",
        "seq": "35,40",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the college of Jon Curran ?",
    "SerialNumber": "1269",
    "Words": "[Name, the, college, of, Jon, Curran, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Jon_Curran\u003e \u003chttp://dbpedia.org/property/college\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 31,
        "label": "Jon Curran",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Jon_Curran",
        "seq": "20,30"
      }
    ],
    "CleanPhrase": "[college, Jon Curran]",
    "id": "b698642c0c4944baad539ca67412e78a",
    "Phrase": "[the college;;, of;;, Jon Curran;;]",
    "predicate mapping": [
      {
        "score": 103,
        "label": "college",
        "uri": "http://dbpedia.org/property/college",
        "seq": "9,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the appointer of William Cushing ?",
    "SerialNumber": "1278",
    "Words": "[Who, is, the, appointer, of, William, Cushing, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/William_Cushing\u003e \u003chttp://dbpedia.org/ontology/appointer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 27,
        "label": "William Cushing",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/William_Cushing",
        "seq": "24,39"
      }
    ],
    "CleanPhrase": "[appointer, William Cushing]",
    "id": "d585bb851bb2430d9893a3976b2310bd",
    "Phrase": "[Who;;, is;;, the appointer;;, of;;, William Cushing;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "appointer",
        "uri": "http://dbpedia.org/ontology/appointer",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is the origin of Filbert\u0027s Old Time Root Beer ?",
    "SerialNumber": "1279",
    "Words": "[Where, is, the, origin, of, Filbert, \u0027s, Old, Time, Root, Beer, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Filbert\u0027s_Old_Time_Root_Beer\u003e \u003chttp://dbpedia.org/ontology/origin\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Filbert\u0027s Old Time Root Beer",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Filbert\u0027s_Old_Time_Root_Beer",
        "seq": "23,51"
      }
    ],
    "CleanPhrase": "[origin, Filbert, \u0027s Time Root Beer]",
    "id": "331c4b8c9a8a40a78ec70c332af7cf77",
    "Phrase": "[Where;;, is;;, the origin;;, of;;, Filbert;;, \u0027s Old Time Root Beer;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "origin",
        "uri": "http://dbpedia.org/ontology/origin",
        "seq": "13,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the musical band of Written in the Stars ?",
    "SerialNumber": "1281",
    "Words": "[Name, the, musical, band, of, Written, in, the, Stars, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Written_in_the_Stars_(Elton_John_and_LeAnn_Rimes_song)\u003e \u003chttp://dbpedia.org/ontology/musicalBand\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 9,
        "label": "Written in the Stars",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Written_in_the_Stars_(Elton_John_and_LeAnn_Rimes_song)",
        "seq": "25,45"
      }
    ],
    "CleanPhrase": "[musical band, Written, Stars]",
    "id": "f82d0e347f514ec1bcb41a22922ce6aa",
    "Phrase": "[the musical band;;, of;;, Written;;, in;;, the Stars;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "musical band",
        "uri": "http://dbpedia.org/ontology/musicalBand",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "On which subjects does the author of the novel Thud! delve?",
    "SerialNumber": "1286",
    "Words": "[On, which, subjects, does, the, author, of, the, novel, Thud, !, delve, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Thud!\u003e \u003chttp://dbpedia.org/ontology/nonFictionSubject\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "Thud!",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Thud!",
        "seq": "47,52"
      }
    ],
    "CleanPhrase": "[subjects, author, Thud, delve]",
    "id": "94de863bd4184aa2a7f508889eabee26",
    "Phrase": "[On;;, which subjects;;, does;;, the author;;, of;;, the novel Thud;;, delve;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "subjects",
        "uri": "http://dbpedia.org/ontology/nonFictionSubject",
        "seq": "9,17",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who is the american football player whose highschool is Ringgold High School (Pennsylvania)?",
    "SerialNumber": "1289",
    "Words": "[Who, is, the, american, football, player, whose, highschool, is, Ringgold, High, School, \\, (, Pennsylvania, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/highschool\u003e \u003chttp://dbpedia.org/resource/Ringgold_High_School_(Pennsylvania)\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 7,
        "label": "Ringgold High School",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Ringgold_High_School_(Pennsylvania)",
        "seq": "56,76"
      }
    ],
    "CleanPhrase": "[american football player, highschool, Ringgold High School, Pennsylvania]",
    "id": "24e52abfafbb43d491744511cbfbfb38",
    "Phrase": "[Who;;, is;;, the american football player;;, whose highschool;;, is;;, Ringgold High School;;, Pennsylvania;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "highschool",
        "uri": "http://dbpedia.org/ontology/highschool",
        "seq": "42,52",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "From which team did Marv McFadden played ?",
    "SerialNumber": "1309",
    "Words": "[From, which, team, did, Marv, McFadden, played, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Marv_McFadden\u003e \u003chttp://dbpedia.org/property/pastteams\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 8,
        "label": "Marv McFadden",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Marv_McFadden",
        "seq": "20,33"
      }
    ],
    "CleanPhrase": "[team, Marv McFadden, played]",
    "id": "e2c86da7511a495c8e6a199690371c48",
    "Phrase": "[From;;, which team;;, did;;, Marv McFadden;;, played;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "team",
        "uri": "http://dbpedia.org/property/pastteams",
        "seq": "11,15",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the draft team of Bob MacMillan ?",
    "SerialNumber": "1314",
    "Words": "[What, is, the, draft, team, of, Bob, MacMillan, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bob_MacMillan\u003e \u003chttp://dbpedia.org/property/draftTeam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 16,
        "label": "Bob MacMillan",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Bob_MacMillan",
        "seq": "26,39"
      }
    ],
    "CleanPhrase": "[draft team, Bob MacMillan]",
    "id": "d527f6cf049c4bd29df7ab1f81a69de8",
    "Phrase": "[What;;, is;;, the draft team;;, of;;, Bob MacMillan;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "draft team",
        "uri": "http://dbpedia.org/property/draftTeam",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the races of Fergie Sutherland?",
    "SerialNumber": "1317",
    "Words": "[List, the, races, of, Fergie, Sutherland, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Fergie_Sutherland\u003e \u003chttp://dbpedia.org/property/race\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Fergie Sutherland",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Fergie_Sutherland",
        "seq": "18,35"
      }
    ],
    "CleanPhrase": "[List, races, Fergie Sutherland]",
    "id": "122b26f0029248c683b600712a408383",
    "Phrase": "[List;;, the races;;, of;;, Fergie Sutherland;;]",
    "predicate mapping": [
      {
        "score": 397,
        "label": "race",
        "uri": "http://dbpedia.org/property/race",
        "seq": "9,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is the  assembly of Caterpillar 797 ?",
    "SerialNumber": "1318",
    "Words": "[Where, is, the, assembly, of, Caterpillar, 797, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Caterpillar_797\u003e \u003chttp://dbpedia.org/ontology/assembly\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Caterpillar 797 ",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Caterpillar_797",
        "seq": "26,42"
      }
    ],
    "CleanPhrase": "[assembly, Caterpillar 797]",
    "id": "619c994eb3cd4bbfb7925d970b1f3ad9",
    "Phrase": "[Where;;, is;;, the assembly;;, of;;, Caterpillar 797;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "assembly",
        "uri": "http://dbpedia.org/ontology/assembly",
        "seq": "14,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which things are Breann McGregor known for ?",
    "SerialNumber": "1320",
    "Words": "[Which, things, are, Breann, McGregor, known, for, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Breann_McGregor\u003e \u003chttp://dbpedia.org/property/knownFor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Breann McGregor",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Breann_McGregor",
        "seq": "17,32"
      }
    ],
    "CleanPhrase": "[things, Breann McGregor]",
    "id": "4423f1c8b04e4c438c50790d4c60c722",
    "Phrase": "[Which;;, things;;, are;;, Breann McGregor;;, known;;, for;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "known for",
        "uri": "http://dbpedia.org/property/knownFor",
        "seq": "33,42",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the Pole driver of 1992 Canadian Grand Prix ?",
    "SerialNumber": "1321",
    "Words": "[Who, is, the, Pole, driver, of, 1992, Canadian, Grand, Prix, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/1992_Canadian_Grand_Prix\u003e \u003chttp://dbpedia.org/property/poleDriver\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "1992 Canadian Grand Prix",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/1992_Canadian_Grand_Prix",
        "seq": "26,50"
      }
    ],
    "CleanPhrase": "[Pole driver, 1992 Canadian Grand Prix]",
    "id": "ec13e17ac45d4c1a8e774331d113e8cd",
    "Phrase": "[Who;;, is;;, the Pole driver;;, of;;, 1992 Canadian Grand Prix;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "Pole driver",
        "uri": "http://dbpedia.org/property/poleDriver",
        "seq": "11,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Sentinel High School  team is known as ?",
    "SerialNumber": "1323",
    "Words": "[Sentinel, High, School, team, is, known, as, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Sentinel_High_School\u003e \u003chttp://dbpedia.org/property/teamName\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Sentinel High School",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Sentinel_High_School",
        "seq": "0,20"
      }
    ],
    "CleanPhrase": "[Sentinel High School team]",
    "id": "962450920a5d4789866bb953d15deaa4",
    "Phrase": "[Sentinel High School team;;, is known;;, as;;, \\;;]",
    "predicate mapping": [
      {
        "score": 33,
        "label": "team",
        "uri": "http://dbpedia.org/property/teamName",
        "seq": "22,26",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Alexander Magleby, a rugby player is alma mater to which university?",
    "SerialNumber": "1332",
    "Words": "[Alexander, Magleby, ,, a, rugby, player, is, alma, mater, to, which, university, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Alexander_Magleby\u003e \u003chttp://dbpedia.org/property/university\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Alexander Magleby",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Alexander_Magleby",
        "seq": "0,17"
      }
    ],
    "CleanPhrase": "[Alexander Magleby, rugby player, alma mater]",
    "id": "d2698d17b3fc4da3b3a659d38d722a13",
    "Phrase": "[Alexander Magleby;;, a rugby player;;, is;;, alma mater;;, to;;, which;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "university",
        "uri": "http://dbpedia.org/property/university",
        "seq": "57,67",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the parent company of Edsel?",
    "SerialNumber": "1340",
    "Words": "[What, is, the, parent, company, of, Edsel, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Edsel\u003e \u003chttp://dbpedia.org/property/parent\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Edsel",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Edsel",
        "seq": "30,35"
      }
    ],
    "CleanPhrase": "[parent company, Edsel]",
    "id": "7e8d0703ae84488c9069607df8d097d6",
    "Phrase": "[What;;, is;;, the parent company;;, of;;, Edsel;;]",
    "predicate mapping": [
      {
        "score": 14,
        "label": "parent",
        "uri": "http://dbpedia.org/property/parent",
        "seq": "12,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which are the races in which Martin Molony participated?",
    "SerialNumber": "1346",
    "Words": "[Which, are, the, races, in, which, Martin, Molony, participated, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Martin_Molony\u003e \u003chttp://dbpedia.org/ontology/race\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Martin Molony",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Martin_Molony",
        "seq": "29,42"
      }
    ],
    "CleanPhrase": "[races, Martin Molony, participated]",
    "id": "f04e2e9f5e1246b7a8494b970c269e6c",
    "Phrase": "[Which;;, are;;, the races;;, in;;, which;;, Martin Molony;;, participated;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "race",
        "uri": "http://dbpedia.org/ontology/race",
        "seq": "14,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the maintainers of Pandaruan Bridge?",
    "SerialNumber": "1353",
    "Words": "[List, the, maintainers, of, Pandaruan, Bridge, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Pandaruan_Bridge\u003e \u003chttp://dbpedia.org/ontology/maintainedBy\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Pandaruan Bridge",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Pandaruan_Bridge",
        "seq": "24,40"
      }
    ],
    "CleanPhrase": "[List, maintainers, Pandaruan Bridge]",
    "id": "ddf2a44585b34de3afaf20021f33a330",
    "Phrase": "[List;;, the maintainers;;, of;;, Pandaruan Bridge;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "maintainer",
        "uri": "http://dbpedia.org/ontology/maintainedBy",
        "seq": "9,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who were the producers of the tenderfoot?",
    "SerialNumber": "1355",
    "Words": "[Who, were, the, producers, of, the, tenderfoot, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Tenderfoot_(miniseries)\u003e \u003chttp://dbpedia.org/ontology/producer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "the tenderfoot",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/The_Tenderfoot_(miniseries)",
        "seq": "26,40"
      }
    ],
    "CleanPhrase": "[producers]",
    "id": "42e685f396ad4d289d05e57d384f0b3c",
    "Phrase": "[Who;;, were;;, the producers;;, of;;]",
    "predicate mapping": [
      {
        "score": 17,
        "label": "producer",
        "uri": "http://dbpedia.org/ontology/producer",
        "seq": "13,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which region does the Miluk language belong?",
    "SerialNumber": "1363",
    "Words": "[To, which, region, does, the, Miluk, language, belong, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Miluk_language\u003e \u003chttp://dbpedia.org/property/region\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Miluk language",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Miluk_language",
        "seq": "25,39"
      }
    ],
    "CleanPhrase": "[region, Miluk language, belong]",
    "id": "87210ff3e55b4299a32d89b85345d93f",
    "Phrase": "[To;;, which;;, region;;, does;;, the Miluk language;;, belong;;]",
    "predicate mapping": [
      {
        "score": 138,
        "label": "region",
        "uri": "http://dbpedia.org/property/region",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the local authority of Liverpool Institute High School for Boys ?",
    "SerialNumber": "1374",
    "Words": "[What, is, the, local, authority, of, Liverpool, Institute, High, School, for, Boys, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Liverpool_Institute_High_School_for_Boys\u003e \u003chttp://dbpedia.org/ontology/localAuthority\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Liverpool Institute High School",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Liverpool_Institute_High_School_for_Boys",
        "seq": "31,62"
      }
    ],
    "CleanPhrase": "[local authority, Liverpool Institute High School, Boys]",
    "id": "91921f98a78148b1b74c79a5bd598e40",
    "Phrase": "[What;;, is;;, the local authority;;, of;;, Liverpool Institute High School;;, for;;, Boys;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "local authority",
        "uri": "http://dbpedia.org/ontology/localAuthority",
        "seq": "12,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List down all notable works of Neil Cross ?",
    "SerialNumber": "1381",
    "Words": "[List, down, all, notable, works, of, Neil, Cross, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Neil_Cross\u003e \u003chttp://dbpedia.org/ontology/notableWork\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 7,
        "label": "Neil Cross",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Neil_Cross",
        "seq": "31,41"
      }
    ],
    "CleanPhrase": "[List, notable works, Neil Cross]",
    "id": "89de2e9950be4d148cceb0f13606223d",
    "Phrase": "[List;;, down;;, all notable works;;, of;;, Neil Cross;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "notable work",
        "uri": "http://dbpedia.org/ontology/notableWork",
        "seq": "14,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the denomination of S. H. Kapadia ?",
    "SerialNumber": "1394",
    "Words": "[What, is, the, denomination, of, S, H, Kapadia, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/S._H._Kapadia\u003e \u003chttp://dbpedia.org/property/religion\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "S. H. Kapadia",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/S._H._Kapadia",
        "seq": "28,41"
      }
    ],
    "CleanPhrase": "[denomination, S H Kapadia]",
    "id": "3c8fdf37975f4f08945c5542bcc97d93",
    "Phrase": "[What;;, is;;, the denomination;;, of;;, S H Kapadia;;]",
    "predicate mapping": [
      {
        "score": 12,
        "label": "denomination",
        "uri": "http://dbpedia.org/property/religion",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Charles Willing Byrd was the governor under which politician?",
    "SerialNumber": "1396",
    "Words": "[Charles, Willing, Byrd, was, the, governor, under, which, politician, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/governor\u003e \u003chttp://dbpedia.org/resource/Charles_Willing_Byrd\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Charles Willing Byrd",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Charles_Willing_Byrd",
        "seq": "0,20"
      }
    ],
    "CleanPhrase": "[Charles Byrd, governor, politician]",
    "id": "b4072b20f7fa40d7b0fe48885dca9d53",
    "Phrase": "[Charles Willing Byrd;;, was;;, the governor;;, under;;, which;;, politician;;]",
    "predicate mapping": [
      {
        "score": 37,
        "label": "governor",
        "uri": "http://dbpedia.org/property/governor",
        "seq": "29,37",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which rivers end in Old Saybrook, Connecticut?",
    "SerialNumber": "1402",
    "Words": "[Which, rivers, end, in, Old, Saybrook, ,, Connecticut, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/mouthMountain\u003e \u003chttp://dbpedia.org/resource/Old_Saybrook,_Connecticut\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Old Saybrook, Connecticut",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Old_Saybrook,_Connecticut",
        "seq": "20,45"
      }
    ],
    "CleanPhrase": "[rivers, end, Saybrook, Connecticut]",
    "id": "8f75a8ba0817469791fe7f783a003b62",
    "Phrase": "[Which rivers;;, end;;, in;;, Old Saybrook;;, Connecticut;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "in",
        "uri": "http://dbpedia.org/ontology/mouthMountain",
        "seq": "17,19",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is the arena of WPC Dynamo Moscow situated?",
    "SerialNumber": "1406",
    "Words": "[Where, is, the, arena, of, WPC, Dynamo, Moscow, situated, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/WPC_Dynamo_Moscow\u003e \u003chttp://dbpedia.org/property/arena\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "WPC Dynamo Moscow",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/WPC_Dynamo_Moscow",
        "seq": "22,39"
      }
    ],
    "CleanPhrase": "[arena, WPC Dynamo Moscow, situated]",
    "id": "374e41e0c9074e29aa08bc200f1d9a04",
    "Phrase": "[Where;;, is;;, the arena;;, of;;, WPC Dynamo Moscow;;, situated;;]",
    "predicate mapping": [
      {
        "score": 26,
        "label": "arena",
        "uri": "http://dbpedia.org/property/arena",
        "seq": "13,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the military branch of  Henry Hyde ?",
    "SerialNumber": "1411",
    "Words": "[List, the, military, branch, of, Henry, Hyde, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Henry_Hyde\u003e \u003chttp://dbpedia.org/ontology/militaryBranch\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 32,
        "label": "Henry Hyde",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Henry_Hyde",
        "seq": "29,39"
      }
    ],
    "CleanPhrase": "[List, military branch, Henry Hyde]",
    "id": "74a833da4a3449f792fe8603400f3a51",
    "Phrase": "[List;;, the military branch;;, of;;, Henry Hyde;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "military branch",
        "uri": "http://dbpedia.org/ontology/militaryBranch",
        "seq": "9,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the developer of Montecito Inn ?",
    "SerialNumber": "1412",
    "Words": "[Who, is, the, developer, of, Montecito, Inn, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Montecito_Inn\u003e \u003chttp://dbpedia.org/property/developer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Montecito Inn",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Montecito_Inn",
        "seq": "24,37"
      }
    ],
    "CleanPhrase": "[developer, Montecito Inn]",
    "id": "a51b846524854b8d8be7950d0143aa08",
    "Phrase": "[Who;;, is;;, the developer;;, of;;, Montecito Inn;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "developer",
        "uri": "http://dbpedia.org/property/developer",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "which planet was discovered by Urbain Le Verrier?",
    "SerialNumber": "1415",
    "Words": "[which, planet, was, discovered, by, Urbain, Le, Verrier, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/discoverer\u003e \u003chttp://dbpedia.org/resource/Urbain_Le_Verrier\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Urbain Le Verrier",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Urbain_Le_Verrier",
        "seq": "31,48"
      }
    ],
    "CleanPhrase": "[planet, discovered, Urbain Le Verrier]",
    "id": "b2179061510340db8454e133c3829727",
    "Phrase": "[which;;, planet;;, was discovered;;, by;;, Urbain Le Verrier;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "discovered by",
        "uri": "http://dbpedia.org/ontology/discoverer",
        "seq": "17,30",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the parent company of Ford Falcon Cobra ?",
    "SerialNumber": "1422",
    "Words": "[Name, the, parent, company, of, Ford, Falcon, Cobra, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ford_Falcon_Cobra\u003e \u003chttp://dbpedia.org/ontology/parentCompany\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Ford Falcon Cobra",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Ford_Falcon_Cobra",
        "seq": "27,44"
      }
    ],
    "CleanPhrase": "[parent company, Ford Falcon Cobra]",
    "id": "d1129ddcb8c04a6d88e360a759cf01d9",
    "Phrase": "[the parent company;;, of;;, Ford Falcon Cobra;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "parent company",
        "uri": "http://dbpedia.org/ontology/parentCompany",
        "seq": "9,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the houses of Parliament Security Services ?",
    "SerialNumber": "1437",
    "Words": "[What, are, the, houses, of, Parliament, Security, Services, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Parliament_Security_Services\u003e \u003chttp://dbpedia.org/property/houses\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Parliament Security Services",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Parliament_Security_Services",
        "seq": "23,51"
      }
    ],
    "CleanPhrase": "[houses, Parliament Security Services]",
    "id": "0baa037b73d543a7a59be401e8a0bc44",
    "Phrase": "[What;;, are;;, the houses;;, of;;, Parliament Security Services;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "houses",
        "uri": "http://dbpedia.org/property/houses",
        "seq": "13,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the governor of Carl McCall ?",
    "SerialNumber": "1438",
    "Words": "[Who, is, the, governor, of, Carl, McCall, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Carl_McCall\u003e \u003chttp://dbpedia.org/ontology/governor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Carl McCall",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Carl_McCall",
        "seq": "23,34"
      }
    ],
    "CleanPhrase": "[governor, Carl McCall]",
    "id": "9f03bf078f8e43e68ca2db1f89a182b7",
    "Phrase": "[Who;;, is;;, the governor;;, of;;, Carl McCall;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "governor",
        "uri": "http://dbpedia.org/ontology/governor",
        "seq": "11,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the official residence of Fergus McMaster ?",
    "SerialNumber": "1448",
    "Words": "[What, is, the, official, residence, of, Fergus, McMaster, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Fergus_McMaster\u003e \u003chttp://dbpedia.org/ontology/residence\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "Fergus McMaster",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Fergus_McMaster",
        "seq": "34,49"
      }
    ],
    "CleanPhrase": "[official residence, Fergus McMaster]",
    "id": "90b8340912aa47be9e2468424ccf95d8",
    "Phrase": "[What;;, is;;, the official residence;;, of;;, Fergus McMaster;;]",
    "predicate mapping": [
      {
        "score": 9,
        "label": "residence",
        "uri": "http://dbpedia.org/ontology/residence",
        "seq": "21,30",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the home town of Rolando Gomez ?",
    "SerialNumber": "1457",
    "Words": "[Name, the, home, town, of, Rolando, Gomez, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Rolando_Gomez\u003e \u003chttp://dbpedia.org/property/homeTown\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Rolando Gomez",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Rolando_Gomez",
        "seq": "22,35"
      }
    ],
    "CleanPhrase": "[home town, Rolando Gomez]",
    "id": "0f2bfb81e96b44b1bc4586e49852fccf",
    "Phrase": "[the home town;;, of;;, Rolando Gomez;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "home town",
        "uri": "http://dbpedia.org/property/homeTown",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the prime minister that Michael Jeffery served?",
    "SerialNumber": "1462",
    "Words": "[Who, is, the, prime, minister, that, Michael, Jeffery, served, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Michael_Jeffery\u003e \u003chttp://dbpedia.org/property/primeminister\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Michael Jeffery",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Michael_Jeffery",
        "seq": "31,46"
      }
    ],
    "CleanPhrase": "[prime minister, Michael Jeffery, served]",
    "id": "3dab698090ef4acda3d9a1bd30a307dc",
    "Phrase": "[Who;;, is;;, the prime minister;;, that;;, Michael Jeffery;;, served;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "minister prime",
        "uri": "http://dbpedia.org/property/primeminister",
        "seq": "-1,13",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the operator of Rainbow Warrior (1955) ?",
    "SerialNumber": "1465",
    "Words": "[Who, is, the, operator, of, Rainbow, Warrior, \\, (, 1955, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Rainbow_Warrior_(1955)\u003e \u003chttp://dbpedia.org/ontology/operator\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Rainbow Warrior",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Rainbow_Warrior_(1955)",
        "seq": "23,38"
      }
    ],
    "CleanPhrase": "[operator, Rainbow Warrior]",
    "id": "ff89e1f2ebea4884b42c7497cbf61372",
    "Phrase": "[Who;;, is;;, the operator;;, of;;, Rainbow Warrior;;]",
    "predicate mapping": [
      {
        "score": 7,
        "label": "operator",
        "uri": "http://dbpedia.org/ontology/operator",
        "seq": "11,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is the county seat of King County, Washington?",
    "SerialNumber": "1491",
    "Words": "[Where, is, the, county, seat, of, King, County, ,, Washington, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/King_County,_Washington\u003e \u003chttp://dbpedia.org/ontology/countySeat\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "King County, Washington",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/King_County,_Washington",
        "seq": "28,51"
      }
    ],
    "CleanPhrase": "[county seat, King County, Washington]",
    "id": "83eea7c4c71d45ec847c1410bfbdd035",
    "Phrase": "[Where;;, is;;, the county seat;;, of;;, King County;;, Washington;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "county seat",
        "uri": "http://dbpedia.org/ontology/countySeat",
        "seq": "13,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Give me the characters who last appeared in Star Wars Episode 3",
    "SerialNumber": "1497",
    "Words": "[Give, me, the, characters, who, last, appeared, in, Star, Wars, Episode, 3]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/last\u003e \u003chttp://dbpedia.org/resource/Star_Wars:_Episode_III_–_Revenge_of_the_Sith\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 10,
        "label": "Star Wars Episode 3",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Star_Wars:_Episode_III_–_Revenge_of_the_Sith",
        "seq": "62,63"
      }
    ],
    "CleanPhrase": "[Give, characters, appeared, Star Wars Episode 3]",
    "id": "5c6a09d1e72a45429f86bae07bb422e6",
    "Phrase": "[Give;;, me;;, the characters;;, who;;, last;;, appeared;;, in;;, Star Wars Episode 3;;]",
    "predicate mapping": [
      {
        "score": 677,
        "label": "last",
        "uri": "http://dbpedia.org/property/last",
        "seq": "27,31",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the type of Vesak ?",
    "SerialNumber": "1511",
    "Words": "[What, is, the, type, of, Vesak, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Vesak\u003e \u003chttp://dbpedia.org/ontology/type\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Vesak",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Vesak",
        "seq": "20,25"
      }
    ],
    "CleanPhrase": "[type, Vesak]",
    "id": "c5f6f930e7c2465d84f9347c2ed9be35",
    "Phrase": "[What;;, is;;, the type;;, of;;, Vesak;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "type",
        "uri": "http://dbpedia.org/ontology/type",
        "seq": "12,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which military personnel belong to the branch of Continental Army?",
    "SerialNumber": "1512",
    "Words": "[Which, military, personnel, belong, to, the, branch, of, Continental, Army, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/militaryBranch\u003e \u003chttp://dbpedia.org/resource/Continental_Army\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 18,
        "label": "Continental Army",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Continental_Army",
        "seq": "49,65"
      }
    ],
    "CleanPhrase": "[military personnel, belong, branch, Continental Army]",
    "id": "a407bb2b3115418b9c87072530021edb",
    "Phrase": "[Which;;, military personnel;;, belong;;, to;;, the branch;;, of;;, Continental Army;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "military branch",
        "uri": "http://dbpedia.org/ontology/militaryBranch",
        "seq": "-1,14",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "By what person of which political party is Balangir district led?",
    "SerialNumber": "1534",
    "Words": "[By, what, person, of, which, political, party, is, Balangir, district, led, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Balangir_district\u003e \u003chttp://dbpedia.org/ontology/leaderName\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 8,
        "label": "Balangir district",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Balangir_district",
        "seq": "43,60"
      }
    ],
    "CleanPhrase": "[person, political party, Balangir district, led]",
    "id": "cb15bf7284f846b29b8e526dbe1593a5",
    "Phrase": "[By;;, what person;;, of;;, which;;, political party;;, is;;, Balangir district;;, led;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "led",
        "uri": "http://dbpedia.org/ontology/leaderName",
        "seq": "61,64",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Under which president was timothy l. woodruff a lieutenant?",
    "SerialNumber": "1564",
    "Words": "[Under, which, president, was, timothy, l, woodruff, a, lieutenant, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/lieutenant\u003e \u003chttp://dbpedia.org/resource/Timothy_L._Woodruff\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "timothy l. woodruff",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Timothy_L._Woodruff",
        "seq": "26,45"
      }
    ],
    "CleanPhrase": "[president, timothy l woodruff]",
    "id": "2a4df258ebd845d6b60aa3371a5e639c",
    "Phrase": "[Under;;, which;;, president;;, was;;, timothy l woodruff;;]",
    "predicate mapping": [
      {
        "score": 16,
        "label": "lieutenant",
        "uri": "http://dbpedia.org/property/lieutenant",
        "seq": "48,58",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the nationality of Aishath Saffa ?",
    "SerialNumber": "1571",
    "Words": "[What, is, the, nationality, of, Aishath, Saffa, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Aishath_Saffa\u003e \u003chttp://dbpedia.org/property/nationality\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Aishath Saffa",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Aishath_Saffa",
        "seq": "27,40"
      }
    ],
    "CleanPhrase": "[nationality, Aishath Saffa]",
    "id": "7750fb1d95a7475ea49813b10023c2ed",
    "Phrase": "[What;;, is;;, the nationality;;, of;;, Aishath Saffa;;]",
    "predicate mapping": [
      {
        "score": 24,
        "label": "nationality",
        "uri": "http://dbpedia.org/property/nationality",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the currency of Kerguelen Islands ?",
    "SerialNumber": "1574",
    "Words": "[What, is, the, currency, of, Kerguelen, Islands, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Kerguelen_Islands\u003e \u003chttp://dbpedia.org/ontology/currency\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Kerguelen Islands",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Kerguelen_Islands",
        "seq": "24,41"
      }
    ],
    "CleanPhrase": "[currency, Kerguelen Islands]",
    "id": "bd98b86d3b6c435aacc10d295ce6d25c",
    "Phrase": "[What;;, is;;, the currency;;, of;;, Kerguelen Islands;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "currency",
        "uri": "http://dbpedia.org/ontology/currency",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which nation is the origin of Dornier Aerodyne ?",
    "SerialNumber": "1593",
    "Words": "[Which, nation, is, the, origin, of, Dornier, Aerodyne, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Dornier_Aerodyne\u003e \u003chttp://dbpedia.org/property/nationalOrigin\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Dornier Aerodyne",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Dornier_Aerodyne",
        "seq": "30,46"
      }
    ],
    "CleanPhrase": "[nation, origin, Dornier Aerodyne]",
    "id": "7852a6da015f4c208bb9f11e5e423d74",
    "Phrase": "[Which;;, nation;;, is;;, the origin;;, of;;, Dornier Aerodyne;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "origin nation",
        "uri": "http://dbpedia.org/property/nationalOrigin",
        "seq": "-1,12",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the mascot of Austin College ?",
    "SerialNumber": "1601",
    "Words": "[Name, the, mascot, of, Austin, College, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Austin_College\u003e \u003chttp://dbpedia.org/property/mascot\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 45,
        "label": "Austin College",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Austin_College",
        "seq": "19,33"
      }
    ],
    "CleanPhrase": "[mascot, Austin College]",
    "id": "db8ba3e09dd14372b45c7565c2b078f7",
    "Phrase": "[the mascot;;, of;;, Austin College;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "mascot",
        "uri": "http://dbpedia.org/property/mascot",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the country of Tokaj wine region ?",
    "SerialNumber": "1609",
    "Words": "[List, the, country, of, Tokaj, wine, region, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Tokaj_wine_region\u003e \u003chttp://dbpedia.org/property/country\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Tokaj wine region",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Tokaj_wine_region",
        "seq": "20,37"
      }
    ],
    "CleanPhrase": "[country, Tokaj wine region]",
    "id": "778cbddc962441b5b7e5928f7fbd4c0f",
    "Phrase": "[the country;;, of;;, Tokaj wine region;;]",
    "predicate mapping": [
      {
        "score": 381,
        "label": "country",
        "uri": "http://dbpedia.org/property/country",
        "seq": "9,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which school did Robbie Diack attend?",
    "SerialNumber": "1615",
    "Words": "[Which, school, did, Robbie, Diack, attend, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Robbie_Diack\u003e \u003chttp://dbpedia.org/property/school\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "Robbie Diack",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Robbie_Diack",
        "seq": "17,29"
      }
    ],
    "CleanPhrase": "[school, Robbie Diack, attend]",
    "id": "d6aaeb41aef44a8b8bffd1a5e90e3d16",
    "Phrase": "[Which;;, school;;, did;;, Robbie Diack;;, attend;;]",
    "predicate mapping": [
      {
        "score": 289,
        "label": "school",
        "uri": "http://dbpedia.org/property/school",
        "seq": "6,12",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the film star of On Air with Ryan Seacrest ?",
    "SerialNumber": "1616",
    "Words": "[Who, is, the, film, star, of, On, Air, with, Ryan, Seacrest, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/On_Air_with_Ryan_Seacrest\u003e \u003chttp://dbpedia.org/ontology/starring\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "On Air with Ryan Seacrest",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/On_Air_with_Ryan_Seacrest",
        "seq": "24,49"
      }
    ],
    "CleanPhrase": "[film star, Air, Ryan Seacrest]",
    "id": "f1036fdd007245499c769a21e5ecb88e",
    "Phrase": "[Who;;, is;;, the film star;;, of;;, On Air;;, with;;, Ryan Seacrest;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "star",
        "uri": "http://dbpedia.org/ontology/starring",
        "seq": "16,20",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the builder of Atamurat-Kerkichi Bridge ?",
    "SerialNumber": "1619",
    "Words": "[Who, is, the, builder, of, Atamurat, Kerkichi, Bridge, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Atamurat-Kerkichi_Bridge\u003e \u003chttp://dbpedia.org/property/builder\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Atamurat-Kerkichi Bridge",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Atamurat-Kerkichi_Bridge",
        "seq": "22,46"
      }
    ],
    "CleanPhrase": "[builder, Atamurat Kerkichi Bridge]",
    "id": "87745e512088474b8c15730c5bb6c4c1",
    "Phrase": "[Who;;, is;;, the builder;;, of;;, Atamurat Kerkichi Bridge;;]",
    "predicate mapping": [
      {
        "score": 18,
        "label": "builder",
        "uri": "http://dbpedia.org/property/builder",
        "seq": "11,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which destinations does Air 2000 fly?",
    "SerialNumber": "1622",
    "Words": "[To, which, destinations, does, Air, 2000, fly, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Air_2000\u003e \u003chttp://dbpedia.org/property/destinations\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 22,
        "label": "Air 2000",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Air_2000",
        "seq": "27,35"
      }
    ],
    "CleanPhrase": "[destinations, Air 2000, fly]",
    "id": "31f62ce6b5864c64a97f7cc543adf78e",
    "Phrase": "[To;;, which;;, destinations;;, does;;, Air 2000;;, fly;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "destinations",
        "uri": "http://dbpedia.org/property/destinations",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was Picasso\u0027s Last Words recorded ?",
    "SerialNumber": "1629",
    "Words": "[Where, was, Picasso, \u0027s, Last, Words, recorded, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Picasso\u0027s_Last_Words_(Drink_to_Me)\u003e \u003chttp://dbpedia.org/property/recorded\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Picasso\u0027s Last Words",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Picasso\u0027s_Last_Words_(Drink_to_Me)",
        "seq": "10,30"
      }
    ],
    "CleanPhrase": "[Picasso, \u0027s Words, recorded]",
    "id": "8427427253454182aca2857c9c998594",
    "Phrase": "[Where;;, was;;, Picasso;;, \u0027s Last Words;;, recorded;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "recorded",
        "uri": "http://dbpedia.org/property/recorded",
        "seq": "31,39",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the largest city of Pulau Ubin ?",
    "SerialNumber": "1632",
    "Words": "[What, is, the, largest, city, of, Pulau, Ubin, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Pulau_Ubin\u003e \u003chttp://dbpedia.org/ontology/largestCity\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Pulau Ubin",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Pulau_Ubin",
        "seq": "28,38"
      }
    ],
    "CleanPhrase": "[largest city, Pulau Ubin]",
    "id": "08a500572859403193faa199f742c448",
    "Phrase": "[What;;, is;;, the largest city;;, of;;, Pulau Ubin;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "largest city",
        "uri": "http://dbpedia.org/ontology/largestCity",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the designer of Saleen S5S Raptor ?",
    "SerialNumber": "1657",
    "Words": "[Who, is, the, designer, of, Saleen, S5S, Raptor, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Saleen_S5S_Raptor\u003e \u003chttp://dbpedia.org/property/designer\u003e ?uri  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Saleen S5S Raptor",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Saleen_S5S_Raptor",
        "seq": "23,40"
      }
    ],
    "CleanPhrase": "[designer, Saleen S5S Raptor]",
    "id": "900865ae340c40d793d500a8d01ca479",
    "Phrase": "[Who;;, is;;, the designer;;, of;;, Saleen S5S Raptor;;]",
    "predicate mapping": [
      {
        "score": 55,
        "label": "designer",
        "uri": "http://dbpedia.org/property/designer",
        "seq": "11,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which basketball team\u0027s coach is Kurt Rambis?",
    "SerialNumber": "1662",
    "Words": "[Which, basketball, team, \u0027s, coach, is, Kurt, Rambis, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/coach\u003e \u003chttp://dbpedia.org/resource/Kurt_Rambis\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Kurt Rambis",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Kurt_Rambis",
        "seq": "33,44"
      }
    ],
    "CleanPhrase": "[basketball team, \u0027s coach, Kurt Rambis]",
    "id": "663ee78f1ef04f2e993a7e2bfc3a33f6",
    "Phrase": "[Which;;, basketball team;;, \u0027s coach;;, is;;, Kurt Rambis;;]",
    "predicate mapping": [
      {
        "score": 10,
        "label": "coach",
        "uri": "http://dbpedia.org/ontology/coach",
        "seq": "24,29",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the alma mater of Ernest de Saisset ?",
    "SerialNumber": "1665",
    "Words": "[Name, the, alma, mater, of, Ernest, de, Saisset, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ernest_de_Saisset\u003e \u003chttp://dbpedia.org/ontology/almaMater\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Ernest de Saisset",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Ernest_de_Saisset",
        "seq": "23,40"
      }
    ],
    "CleanPhrase": "[alma mater, Ernest de Saisset]",
    "id": "ec64691c6956449cb904adfc2f248e5e",
    "Phrase": "[Name;;, the alma mater;;, of;;, Ernest de Saisset;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "alma mater",
        "uri": "http://dbpedia.org/ontology/almaMater",
        "seq": "9,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Whose constituency is Duboce Triangle ?",
    "SerialNumber": "1667",
    "Words": "[Whose, constituency, is, Duboce, Triangle, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/constituency\u003e \u003chttp://dbpedia.org/resource/Duboce_Triangle,_San_Francisco\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Duboce Triangle",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Duboce_Triangle,_San_Francisco",
        "seq": "22,37"
      }
    ],
    "CleanPhrase": "[constituency, Duboce Triangle]",
    "id": "dd2c217006414f468433007e3ee89d47",
    "Phrase": "[Whose constituency;;, is;;, Duboce Triangle;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "constituency",
        "uri": "http://dbpedia.org/property/constituency",
        "seq": "6,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the characters of Lysistrata ?",
    "SerialNumber": "1676",
    "Words": "[List, the, characters, of, Lysistrata, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Lysistrata\u003e \u003chttp://dbpedia.org/property/characters\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 7,
        "label": "Lysistrata",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Lysistrata",
        "seq": "23,33"
      }
    ],
    "CleanPhrase": "[List, characters, Lysistrata]",
    "id": "f84586d24de34750a3807a55539f8bf9",
    "Phrase": "[List;;, the characters;;, of;;, Lysistrata;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "characters",
        "uri": "http://dbpedia.org/property/characters",
        "seq": "9,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is the office of P Elmo Futrell Jr?",
    "SerialNumber": "1677",
    "Words": "[Where, is, the, office, of, P, Elmo, Futrell, Jr, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/P._Elmo_Futrell,_Jr.\u003e \u003chttp://dbpedia.org/property/office\u003e ?uri  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "P Elmo Futrell Jr",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/P._Elmo_Futrell,_Jr.",
        "seq": "25,40"
      }
    ],
    "CleanPhrase": "[office, P Elmo Futrell]",
    "id": "6165d3f09df840a0920e30b60a8a66ed",
    "Phrase": "[Where;;, is;;, the office;;, of;;, P Elmo Futrell;;]",
    "predicate mapping": [
      {
        "score": 191,
        "label": "office",
        "uri": "http://dbpedia.org/property/office",
        "seq": "13,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In which state is Red Willow Creek?",
    "SerialNumber": "1684",
    "Words": "[In, which, state, is, Red, Willow, Creek, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Red_Willow_Creek\u003e \u003chttp://dbpedia.org/ontology/state\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Red Willow Creek",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Red_Willow_Creek",
        "seq": "18,34"
      }
    ],
    "CleanPhrase": "[state, Red Willow Creek]",
    "id": "d173daed7ab8420da0c8c83b7327b298",
    "Phrase": "[In;;, which;;, state;;, is;;, Red Willow Creek;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "state",
        "uri": "http://dbpedia.org/ontology/state",
        "seq": "9,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where does Manu cornet work?",
    "SerialNumber": "1685",
    "Words": "[Where, does, Manu, cornet, work, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Manu_Cornet\u003e \u003chttp://dbpedia.org/property/employer\u003e ?uri  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Manu cornet",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Manu_Cornet",
        "seq": "11,22"
      }
    ],
    "CleanPhrase": "[Manu cornet work]",
    "id": "6b258a86694f43419d3c78e7aec3c3a7",
    "Phrase": "[Where;;, Manu cornet work;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "work",
        "uri": "http://dbpedia.org/property/employer",
        "seq": "23,27",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the resting place of Fazlur Rahman Khan ?",
    "SerialNumber": "1686",
    "Words": "[Name, the, resting, place, of, Fazlur, Rahman, Khan, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Fazlur_Rahman_Khan\u003e \u003chttp://dbpedia.org/ontology/restingPlace\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Fazlur Rahman Khan",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Fazlur_Rahman_Khan",
        "seq": "26,44"
      }
    ],
    "CleanPhrase": "[resting place, Fazlur Rahman Khan]",
    "id": "51c70eaba07848f2a77e752b51b5d1d4",
    "Phrase": "[Name;;, the resting place;;, of;;, Fazlur Rahman Khan;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "resting place",
        "uri": "http://dbpedia.org/ontology/restingPlace",
        "seq": "9,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the district of Methodist Central Hall Westminster ?",
    "SerialNumber": "1694",
    "Words": "[What, is, the, district, of, Methodist, Central, Hall, Westminster, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Methodist_Central_Hall_Westminster\u003e \u003chttp://dbpedia.org/ontology/district\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Methodist Central Hall Westminster",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Methodist_Central_Hall_Westminster",
        "seq": "24,58"
      }
    ],
    "CleanPhrase": "[district, Methodist Central Hall, Westminster]",
    "id": "04f9e85f054f4225bed1717739a1e8f9",
    "Phrase": "[What;;, is;;, the district;;, of;;, Methodist Central Hall;;, Westminster;;]",
    "predicate mapping": [
      {
        "score": 12,
        "label": "district",
        "uri": "http://dbpedia.org/ontology/district",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where does the Jerusalem Institute of Justice render their services?",
    "SerialNumber": "1704",
    "Words": "[Where, does, the, Jerusalem, Institute, of, Justice, render, their, services, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Jerusalem_Institute_of_Justice\u003e \u003chttp://dbpedia.org/ontology/service\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Jerusalem Institute of Justice",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Jerusalem_Institute_of_Justice",
        "seq": "15,45"
      }
    ],
    "CleanPhrase": "[Jerusalem Institute, Justice, render, services]",
    "id": "69c1b8315bfc45bc8d7001b2207bf482",
    "Phrase": "[Where;;, the Jerusalem Institute;;, of;;, Justice;;, render;;, their services;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "service",
        "uri": "http://dbpedia.org/ontology/service",
        "seq": "59,66",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which political party got elected in First Legislative Assembly of Uttar Pradesh ?",
    "SerialNumber": "1706",
    "Words": "[Which, political, party, got, elected, in, First, Legislative, Assembly, of, Uttar, Pradesh, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/First_Legislative_Assembly_of_Uttar_Pradesh\u003e \u003chttp://dbpedia.org/property/party\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "First Legislative Assembly of Uttar Pradesh",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/First_Legislative_Assembly_of_Uttar_Pradesh",
        "seq": "37,80"
      }
    ],
    "CleanPhrase": "[political party, elected, Legislative Assembly, Uttar Pradesh]",
    "id": "adb445039dba499fb87254b5db15cf1d",
    "Phrase": "[Which;;, political party;;, got elected;;, in;;, First Legislative Assembly;;, of;;, Uttar Pradesh;;]",
    "predicate mapping": [
      {
        "score": 285,
        "label": "political party",
        "uri": "http://dbpedia.org/property/party",
        "seq": "6,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which bands are associated to David Paton?",
    "SerialNumber": "1709",
    "Words": "[Which, bands, are, associated, to, David, Paton, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/David_Paton\u003e \u003chttp://dbpedia.org/ontology/associatedBand\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 13,
        "label": "David Paton",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/David_Paton",
        "seq": "30,41"
      }
    ],
    "CleanPhrase": "[bands, David Paton]",
    "id": "bed5afa37566420489106a8f8da38bb0",
    "Phrase": "[Which;;, bands;;, are associated;;, to;;, David Paton;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "associated",
        "uri": "http://dbpedia.org/ontology/associatedBand",
        "seq": "16,26",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who wrote a streetcar named desire?",
    "SerialNumber": "1710",
    "Words": "[Who, wrote, a, streetcar, named, desire, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/A_Streetcar_Named_Desire_(play)\u003e \u003chttp://dbpedia.org/property/writer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "a streetcar named desire",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/A_Streetcar_Named_Desire_(play)",
        "seq": "10,34"
      }
    ],
    "CleanPhrase": "[wrote, streetcar named desire]",
    "id": "39c7d79acd6a4c698df99c2cf360fdee",
    "Phrase": "[Who;;, wrote;;, a streetcar named desire;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "wrote",
        "uri": "http://dbpedia.org/property/writer",
        "seq": "4,9",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the president when Loretta Ucelli used to work for Democratic party?",
    "SerialNumber": "1714",
    "Words": "[Who, is, the, president, when, Loretta, Ucelli, used, to, work, for, Democratic, party, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Loretta_Ucelli\u003e \u003chttp://dbpedia.org/ontology/president\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Loretta Ucelli",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Loretta_Ucelli",
        "seq": "26,40"
      }
    ],
    "CleanPhrase": "[president, Loretta Ucelli, work, Democratic party]",
    "id": "23b82966a26e4e568066583eee6da399",
    "Phrase": "[Who;;, is;;, the president;;, when;;, Loretta Ucelli;;, used;;, to;;, work;;, for;;, Democratic party;;]",
    "predicate mapping": [
      {
        "score": 26,
        "label": "president",
        "uri": "http://dbpedia.org/ontology/president",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "From which country is Lawrence Okoye\u0027s nationality ?",
    "SerialNumber": "1726",
    "Words": "[From, which, country, is, Lawrence, Okoye, \u0027s, nationality, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Lawrence_Okoye\u003e \u003chttp://dbpedia.org/property/nationality\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Lawrence Okoye",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Lawrence_Okoye",
        "seq": "22,36"
      }
    ],
    "CleanPhrase": "[country, Lawrence Okoye, \u0027s nationality]",
    "id": "75956ea1ffb748f7b9bb48794ac65260",
    "Phrase": "[From;;, which;;, country;;, is;;, Lawrence Okoye;;, \u0027s nationality;;]",
    "predicate mapping": [
      {
        "score": 24,
        "label": "nationality",
        "uri": "http://dbpedia.org/property/nationality",
        "seq": "39,50",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the base currency of Benelux ?",
    "SerialNumber": "1729",
    "Words": "[What, is, the, base, currency, of, Benelux, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Benelux\u003e \u003chttp://dbpedia.org/property/currency\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Benelux",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Benelux",
        "seq": "29,36"
      }
    ],
    "CleanPhrase": "[base currency, Benelux]",
    "id": "0d7b3b1e1ef24b64bb14f8a88bb3ba16",
    "Phrase": "[What;;, is;;, the base currency;;, of;;, Benelux;;]",
    "predicate mapping": [
      {
        "score": 368,
        "label": "base currency",
        "uri": "http://dbpedia.org/property/currency",
        "seq": "12,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where did Steve Romeo dies ?",
    "SerialNumber": "1732",
    "Words": "[Where, did, Steve, Romeo, dies, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Steve_Romeo\u003e \u003chttp://dbpedia.org/ontology/deathPlace\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Steve Romeo",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Steve_Romeo",
        "seq": "10,21"
      }
    ],
    "CleanPhrase": "[Steve Romeo, dies]",
    "id": "8e45bd7253a74f70beef10fbff653824",
    "Phrase": "[Where;;, Steve Romeo;;, dies;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "dies",
        "uri": "http://dbpedia.org/ontology/deathPlace",
        "seq": "22,26",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the government type of Ancient Rome ?",
    "SerialNumber": "1734",
    "Words": "[What, is, the, government, type, of, Ancient, Rome, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ancient_Rome\u003e \u003chttp://dbpedia.org/ontology/governmentType\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 91,
        "label": "Ancient Rome",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Ancient_Rome",
        "seq": "31,43"
      }
    ],
    "CleanPhrase": "[government type, Ancient Rome]",
    "id": "81717b01e68a4e36876d59157b0c01d9",
    "Phrase": "[What;;, is;;, the government type;;, of;;, Ancient Rome;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "government type",
        "uri": "http://dbpedia.org/ontology/governmentType",
        "seq": "12,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the animator of The Skeleton Dance?",
    "SerialNumber": "1735",
    "Words": "[Who, are, the, animator, of, The, Skeleton, Dance, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Skeleton_Dance\u003e \u003chttp://dbpedia.org/ontology/animator\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "The Skeleton Dance",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/The_Skeleton_Dance",
        "seq": "24,42"
      }
    ],
    "CleanPhrase": "[animator, Skeleton Dance]",
    "id": "58f1836b2739462a8eee1fb265dfabf3",
    "Phrase": "[Who;;, are;;, the animator;;, of;;, The Skeleton Dance;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "animator",
        "uri": "http://dbpedia.org/ontology/animator",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the doctoral students of Harry Harlow ?",
    "SerialNumber": "1743",
    "Words": "[List, the, doctoral, students, of, Harry, Harlow, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Harry_Harlow\u003e \u003chttp://dbpedia.org/property/doctoralStudents\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Harry Harlow",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Harry_Harlow",
        "seq": "30,42"
      }
    ],
    "CleanPhrase": "[List, doctoral students, Harry Harlow]",
    "id": "53ed8e82e6ec49d0b9e1762d781e71d4",
    "Phrase": "[List;;, the doctoral students;;, of;;, Harry Harlow;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "doctoral students",
        "uri": "http://dbpedia.org/property/doctoralStudents",
        "seq": "9,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Name whose youth club was FC Barcelona ?",
    "SerialNumber": "1748",
    "Words": "[Name, whose, youth, club, was, FC, Barcelona, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/youthclubs\u003e \u003chttp://dbpedia.org/resource/FC_Barcelona\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 87,
        "label": "FC Barcelona",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/FC_Barcelona",
        "seq": "26,38"
      }
    ],
    "CleanPhrase": "[youth club, FC Barcelona]",
    "id": "444c3a8fb88747a4bce43c1d413b2b26",
    "Phrase": "[Name;;, whose youth club;;, was;;, FC Barcelona;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "youth club",
        "uri": "http://dbpedia.org/property/youthclubs",
        "seq": "11,21",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the citizenship of Erastus Wiman ?",
    "SerialNumber": "1750",
    "Words": "[What, is, the, citizenship, of, Erastus, Wiman, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Erastus_Wiman\u003e \u003chttp://dbpedia.org/ontology/citizenship\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Erastus Wiman",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Erastus_Wiman",
        "seq": "27,40"
      }
    ],
    "CleanPhrase": "[citizenship, Erastus Wiman]",
    "id": "92dea938b59a49b88d62bed248dc6a4c",
    "Phrase": "[What;;, is;;, the citizenship;;, of;;, Erastus Wiman;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "citizenship",
        "uri": "http://dbpedia.org/ontology/citizenship",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which is the nearest city to Elliott Bay ?",
    "SerialNumber": "1752",
    "Words": "[Which, is, the, nearest, city, to, Elliott, Bay, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Elliott_Bay\u003e \u003chttp://dbpedia.org/ontology/nearestCity\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Elliott Bay",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Elliott_Bay",
        "seq": "29,40"
      }
    ],
    "CleanPhrase": "[nearest city, Elliott Bay]",
    "id": "24b98ce65ef6434f9ea0fdbc61657261",
    "Phrase": "[Which;;, is;;, the nearest city;;, to;;, Elliott Bay;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "nearest city",
        "uri": "http://dbpedia.org/ontology/nearestCity",
        "seq": "13,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What cities are near to Nihoa which is also known as Bird Island ?",
    "SerialNumber": "1758",
    "Words": "[What, cities, are, near, to, Nihoa, which, is, also, known, as, Bird, Island, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Nihoa\u003e \u003chttp://dbpedia.org/property/nearestCity\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Nihoa",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Nihoa",
        "seq": "24,29"
      }
    ],
    "CleanPhrase": "[cities, Nihoa, Bird Island]",
    "id": "ffc2d9ad79e947ae95f0e8795dad6214",
    "Phrase": "[What cities;;, are;;, near;;, to;;, Nihoa;;, which;;, is also known;;, as;;, Bird Island;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "near are",
        "uri": "http://dbpedia.org/property/nearestCity",
        "seq": "-1,7",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the broadcast areas of Mauritius Broadcasting Corporation?",
    "SerialNumber": "1766",
    "Words": "[What, are, the, broadcast, areas, of, Mauritius, Broadcasting, Corporation, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Mauritius_Broadcasting_Corporation\u003e \u003chttp://dbpedia.org/property/broadcastArea\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Mauritius Broadcasting Corporation",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Mauritius_Broadcasting_Corporation",
        "seq": "32,66"
      }
    ],
    "CleanPhrase": "[broadcast areas, Mauritius Broadcasting Corporation]",
    "id": "ca66ad5b2f544c31a6254b0ba2808274",
    "Phrase": "[What;;, are;;, the broadcast areas;;, of;;, Mauritius Broadcasting Corporation;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "broadcast area",
        "uri": "http://dbpedia.org/property/broadcastArea",
        "seq": "13,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "which president was served by Joseph Stiglitz?",
    "SerialNumber": "1768",
    "Words": "[which, president, was, served, by, Joseph, Stiglitz, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Joseph_Stiglitz\u003e \u003chttp://dbpedia.org/property/president\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Joseph Stiglitz",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Joseph_Stiglitz",
        "seq": "30,45"
      }
    ],
    "CleanPhrase": "[president, served, Joseph Stiglitz]",
    "id": "9c91b4cd6e5341e08778831ad38a79d3",
    "Phrase": "[which;;, president;;, was served;;, by;;, Joseph Stiglitz;;]",
    "predicate mapping": [
      {
        "score": 276,
        "label": "president",
        "uri": "http://dbpedia.org/property/president",
        "seq": "6,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the cover artist of the adventure of Tom sawyer ?",
    "SerialNumber": "1777",
    "Words": "[Name, the, cover, artist, of, the, adventure, of, Tom, sawyer, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer\u003e \u003chttp://dbpedia.org/ontology/coverArtist\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "the adventure of Tom sawyer",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer",
        "seq": "42,45"
      }
    ],
    "CleanPhrase": "[cover artist, adventure, Tom sawyer]",
    "id": "9496ce7155814acaac417eb27fd22cc1",
    "Phrase": "[Name;;, the cover artist;;, of;;, the adventure;;, of;;, Tom sawyer;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "cover artist",
        "uri": "http://dbpedia.org/ontology/coverArtist",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the former partner of Chris Knierim ?",
    "SerialNumber": "1784",
    "Words": "[Who, is, the, former, partner, of, Chris, Knierim, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Chris_Knierim\u003e \u003chttp://dbpedia.org/ontology/formerPartner\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Chris Knierim",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Chris_Knierim",
        "seq": "29,42"
      }
    ],
    "CleanPhrase": "[partner, Chris Knierim]",
    "id": "d742a7e01f4c4ee48d60d542ecc2fb42",
    "Phrase": "[Who;;, is;;, the former partner;;, of;;, Chris Knierim;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "former partner",
        "uri": "http://dbpedia.org/ontology/formerPartner",
        "seq": "11,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the predecessor of BMW M40 ?",
    "SerialNumber": "1785",
    "Words": "[What, is, the, predecessor, of, BMW, M40, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/BMW_M40\u003e \u003chttp://dbpedia.org/property/predecessor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "BMW M40",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/BMW_M40",
        "seq": "27,34"
      }
    ],
    "CleanPhrase": "[predecessor, BMW M40]",
    "id": "443f406a43a149918fa7e12a6326a81e",
    "Phrase": "[What;;, is;;, the predecessor;;, of;;, BMW M40;;]",
    "predicate mapping": [
      {
        "score": 31,
        "label": "predecessor",
        "uri": "http://dbpedia.org/property/predecessor",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who is the partner of Rob Patterson?",
    "SerialNumber": "1793",
    "Words": "[Who, is, the, partner, of, Rob, Patterson, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/partner\u003e \u003chttp://dbpedia.org/resource/Rob_Patterson\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 18,
        "label": "Rob Patterson",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Rob_Patterson",
        "seq": "22,35"
      }
    ],
    "CleanPhrase": "[partner, Rob Patterson]",
    "id": "51484b4dd82e47e9838bd6ae4d77c67a",
    "Phrase": "[Who;;, is;;, the partner;;, of;;, Rob Patterson;;]",
    "predicate mapping": [
      {
        "score": 82,
        "label": "partner",
        "uri": "http://dbpedia.org/property/partner",
        "seq": "11,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the parent company of  Ford Air Transport Service ?",
    "SerialNumber": "1795",
    "Words": "[Name, the, parent, company, of, Ford, Air, Transport, Service, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ford_Air_Transport_Service\u003e \u003chttp://dbpedia.org/ontology/parentCompany\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Ford Air Transport Service",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Ford_Air_Transport_Service",
        "seq": "28,54"
      }
    ],
    "CleanPhrase": "[parent company, Ford Air Transport Service]",
    "id": "d96691130f534245a4d69a4dcbc67391",
    "Phrase": "[the parent company;;, of;;, Ford Air Transport Service;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "parent company",
        "uri": "http://dbpedia.org/ontology/parentCompany",
        "seq": "9,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which companies published Super Mario Adventures?",
    "SerialNumber": "1800",
    "Words": "[Which, companies, published, Super, Mario, Adventures, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Super_Mario_Adventures\u003e \u003chttp://dbpedia.org/property/publisher\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Super Mario Adventures",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Super_Mario_Adventures",
        "seq": "26,48"
      }
    ],
    "CleanPhrase": "[companies, published, Super Mario Adventures]",
    "id": "1ef8cd8959f34ef2b16979eec3a75888",
    "Phrase": "[Which companies;;, published;;, Super Mario Adventures;;]",
    "predicate mapping": [
      {
        "score": 8,
        "label": "published",
        "uri": "http://dbpedia.org/property/publisher",
        "seq": "16,25",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "who developed google videos?",
    "SerialNumber": "1803",
    "Words": "[who, developed, google, videos, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Google_Videos\u003e \u003chttp://dbpedia.org/property/developer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "google videos",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Google_Videos",
        "seq": "14,27"
      }
    ],
    "CleanPhrase": "[developed, google videos]",
    "id": "965e3f4581784cb492f2fe92677b9928",
    "Phrase": "[who;;, developed;;, google videos;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "developed",
        "uri": "http://dbpedia.org/property/developer",
        "seq": "4,13",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the sstadium of 2015 Pro Duta FC season ?",
    "SerialNumber": "1812",
    "Words": "[Name, the, sstadium, of, 2015, Pro, Duta, FC, season, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/2015_Pro_Duta_FC_season\u003e \u003chttp://dbpedia.org/property/stadium\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "2015 Pro Duta FC season",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/2015_Pro_Duta_FC_season",
        "seq": "21,44"
      }
    ],
    "CleanPhrase": "[sstadium, 2015 Pro Duta FC season]",
    "id": "fc8f458df57d49c1a584f223702f336f",
    "Phrase": "[Name;;, the sstadium;;, of;;, 2015 Pro Duta FC season;;]",
    "predicate mapping": [
      {
        "score": 34,
        "label": "stadium",
        "uri": "http://dbpedia.org/property/stadium",
        "seq": "10,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the current club of Abdelhameed Amarri ?",
    "SerialNumber": "1832",
    "Words": "[Name, the, current, club, of, Abdelhameed, Amarri, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Abdelhameed_Amarri\u003e \u003chttp://dbpedia.org/property/currentclub\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Abdelhameed Amarri",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Abdelhameed_Amarri",
        "seq": "25,43"
      }
    ],
    "CleanPhrase": "[current club, Abdelhameed Amarri]",
    "id": "4c68e37c40ea4e44950037ef974d5879",
    "Phrase": "[Name;;, the current club;;, of;;, Abdelhameed Amarri;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "current club",
        "uri": "http://dbpedia.org/property/currentclub",
        "seq": "9,21",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which driver had the pole position in 1994 Spanish Grand Prix ?",
    "SerialNumber": "1839",
    "Words": "[Which, driver, had, the, pole, position, in, 1994, Spanish, Grand, Prix, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/1994_Spanish_Grand_Prix\u003e \u003chttp://dbpedia.org/ontology/poleDriver\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "1994 Spanish Grand Prix",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/1994_Spanish_Grand_Prix",
        "seq": "38,61"
      }
    ],
    "CleanPhrase": "[driver, pole position, 1994 Spanish Grand Prix]",
    "id": "9869859173884cf5b5ce1628b5ff947c",
    "Phrase": "[Which driver;;, had;;, the pole position;;, in;;, 1994 Spanish Grand Prix;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "driver pole",
        "uri": "http://dbpedia.org/ontology/poleDriver",
        "seq": "-1,10",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the automobile platform of Chiva bus ?",
    "SerialNumber": "1844",
    "Words": "[What, is, the, automobile, platform, of, Chiva, bus, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Chiva_bus\u003e \u003chttp://dbpedia.org/ontology/automobilePlatform\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Chiva bus",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Chiva_bus",
        "seq": "35,44"
      }
    ],
    "CleanPhrase": "[automobile platform, Chiva bus]",
    "id": "7548aa9412d4455198e5c71f7383e131",
    "Phrase": "[What;;, is;;, the automobile platform;;, of;;, Chiva bus;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "automobile platform",
        "uri": "http://dbpedia.org/ontology/automobilePlatform",
        "seq": "12,31",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What borders siberia?",
    "SerialNumber": "1845",
    "Words": "[What, borders, siberia, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Siberia\u003e \u003chttp://dbpedia.org/ontology/border\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 59,
        "label": "siberia",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Siberia",
        "seq": "13,20"
      }
    ],
    "CleanPhrase": "[borders, siberia]",
    "id": "67b466a2660f466f99bcd5f3bb96785a",
    "Phrase": "[What;;, borders;;, siberia;;]",
    "predicate mapping": [
      {
        "score": 7,
        "label": "border",
        "uri": "http://dbpedia.org/ontology/border",
        "seq": "5,11",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the champion of National League ?",
    "SerialNumber": "1856",
    "Words": "[Name, the, champion, of, National, League, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/National_League\u003e \u003chttp://dbpedia.org/property/champion\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 41,
        "label": "National League",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/National_League",
        "seq": "21,36"
      }
    ],
    "CleanPhrase": "[champion, National League]",
    "id": "1916515a00a74f8b951851aa671a3b0a",
    "Phrase": "[the champion;;, of;;, National League;;]",
    "predicate mapping": [
      {
        "score": 140,
        "label": "champion",
        "uri": "http://dbpedia.org/property/champion",
        "seq": "9,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the school of Bobby Skinstad?",
    "SerialNumber": "1865",
    "Words": "[List, the, school, of, Bobby, Skinstad, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bobby_Skinstad\u003e \u003chttp://dbpedia.org/property/school\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Bobby Skinstad",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Bobby_Skinstad",
        "seq": "19,33"
      }
    ],
    "CleanPhrase": "[school, Bobby Skinstad]",
    "id": "05e8ba378fa84157a0c3163e2e5a29bb",
    "Phrase": "[the school;;, of;;, Bobby Skinstad;;]",
    "predicate mapping": [
      {
        "score": 289,
        "label": "school",
        "uri": "http://dbpedia.org/property/school",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "who are the managers of england national under 20 football team?",
    "SerialNumber": "1879",
    "Words": "[who, are, the, managers, of, england, national, under, 20, football, team, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/managerclubs\u003e \u003chttp://dbpedia.org/resource/England_national_under-20_football_team\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "england national under 20 football team",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/England_national_under-20_football_team",
        "seq": "47,49"
      }
    ],
    "CleanPhrase": "[managers, england, national, 20 football team]",
    "id": "56eb8602184a4434af0162a88397b937",
    "Phrase": "[who;;, are;;, the managers;;, of;;, england;;, national;;, under;;, 20 football team;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "managers",
        "uri": "http://dbpedia.org/property/managerclubs",
        "seq": "12,20",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the ethnicity of Linda Hogan ?",
    "SerialNumber": "1897",
    "Words": "[What, is, the, ethnicity, of, Linda, Hogan, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Linda_Hogan\u003e \u003chttp://dbpedia.org/property/ethnicity\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Linda Hogan",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Linda_Hogan",
        "seq": "25,36"
      }
    ],
    "CleanPhrase": "[ethnicity, Linda Hogan]",
    "id": "38fa1e3c921240608e748ef6ccca70f0",
    "Phrase": "[What;;, is;;, the ethnicity;;, of;;, Linda Hogan;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "ethnicity",
        "uri": "http://dbpedia.org/property/ethnicity",
        "seq": "12,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "By which university is the literary magazine named Stone Canoe published?",
    "SerialNumber": "1899",
    "Words": "[By, which, university, is, the, literary, magazine, named, Stone, Canoe, published, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Stone_Canoe\u003e \u003chttp://dbpedia.org/ontology/publisher\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Stone Canoe",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Stone_Canoe",
        "seq": "51,62"
      }
    ],
    "CleanPhrase": "[university, literary magazine, named, Stone Canoe, published]",
    "id": "ef3ade53eec84b978013bf8a36b43ddd",
    "Phrase": "[By;;, which;;, university;;, is;;, the literary magazine;;, named;;, Stone Canoe;;, published;;]",
    "predicate mapping": [
      {
        "score": 19,
        "label": "published",
        "uri": "http://dbpedia.org/ontology/publisher",
        "seq": "63,72",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the relative of Jim Farley (businessman) ?",
    "SerialNumber": "1900",
    "Words": "[Who, is, the, relative, of, Jim, Farley, \\, (, businessman, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Jim_Farley_(businessman)\u003e \u003chttp://dbpedia.org/property/relatives\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Jim Farley (businessman)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Jim_Farley_(businessman)",
        "seq": "23,47"
      }
    ],
    "CleanPhrase": "[relative, Jim, Farley]",
    "id": "069c73f4c6c84f3b8bed56b9f7dd229d",
    "Phrase": "[Who;;, is;;, the relative;;, of;;, Jim;;, Farley;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "relative",
        "uri": "http://dbpedia.org/property/relatives",
        "seq": "11,19",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "From where is Quinn Ojinnaka billed?",
    "SerialNumber": "1904",
    "Words": "[From, where, is, Quinn, Ojinnaka, billed, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Quinn_Ojinnaka\u003e \u003chttp://dbpedia.org/property/billed\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Quinn Ojinnaka",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Quinn_Ojinnaka",
        "seq": "14,28"
      }
    ],
    "CleanPhrase": "[Quinn Ojinnaka, billed]",
    "id": "457b03f072e94856ae7b41637c9176a2",
    "Phrase": "[From;;, where;;, is;;, Quinn Ojinnaka;;, billed;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "billed",
        "uri": "http://dbpedia.org/property/billed",
        "seq": "29,35",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the narrator of The Price of Beauty ?",
    "SerialNumber": "1907",
    "Words": "[Who, is, the, narrator, of, The, Price, of, Beauty, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Price_of_Beauty\u003e \u003chttp://dbpedia.org/ontology/narrator\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "The Price of Beauty",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/The_Price_of_Beauty",
        "seq": "23,42"
      }
    ],
    "CleanPhrase": "[narrator, Price, Beauty]",
    "id": "ef9ffe8b32f046acbf228229922d57c8",
    "Phrase": "[Who;;, is;;, the narrator;;, of;;, The Price;;, of;;, Beauty;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "narrator",
        "uri": "http://dbpedia.org/ontology/narrator",
        "seq": "11,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the writers of South Park: The Stick of Truth?",
    "SerialNumber": "1911",
    "Words": "[Who, are, the, writers, of, South, Park, The, Stick, of, Truth, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/South_Park:_The_Stick_of_Truth\u003e \u003chttp://dbpedia.org/property/writer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "South Park: The Stick of Truth",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/South_Park:_The_Stick_of_Truth",
        "seq": "23,53"
      }
    ],
    "CleanPhrase": "[writers, South Park, Stick, Truth]",
    "id": "49882217618b4878acdbf10713ec47c8",
    "Phrase": "[Who;;, are;;, the writers;;, of;;, South Park;;, The Stick;;, of;;, Truth;;]",
    "predicate mapping": [
      {
        "score": 77,
        "label": "writers",
        "uri": "http://dbpedia.org/property/writer",
        "seq": "12,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who did Bruce Bochy play for ? ",
    "SerialNumber": "1914",
    "Words": "[Who, did, Bruce, Bochy, play, for, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bruce_Bochy\u003e \u003chttp://dbpedia.org/ontology/team\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Bruce Bochy",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Bruce_Bochy",
        "seq": "8,19"
      }
    ],
    "CleanPhrase": "[Bruce Bochy, play]",
    "id": "ab2e96b28d8345188ec38444b7b5d986",
    "Phrase": "[Who;;, did;;, Bruce Bochy;;, play;;, for;;, \\;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "play",
        "uri": "http://dbpedia.org/ontology/team",
        "seq": "20,24",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the members of European Go Federation?",
    "SerialNumber": "1925",
    "Words": "[Name, the, members, of, European, Go, Federation, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/European_Go_Federation\u003e \u003chttp://dbpedia.org/property/membership\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "European Go Federation",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/European_Go_Federation",
        "seq": "20,42"
      }
    ],
    "CleanPhrase": "[members, European Federation]",
    "id": "a93043e0abc847e0856bff25d6507a08",
    "Phrase": "[Name;;, the members;;, of;;, European Go Federation;;]",
    "predicate mapping": [
      {
        "score": 239,
        "label": "members",
        "uri": "http://dbpedia.org/property/membership",
        "seq": "9,16",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was WiZeefa founded ?",
    "SerialNumber": "1928",
    "Words": "[Where, was, WiZeefa, founded, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/WiZeefa\u003e \u003chttp://dbpedia.org/property/foundation\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "WiZeefa",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/WiZeefa",
        "seq": "10,17"
      }
    ],
    "CleanPhrase": "[WiZeefa, founded]",
    "id": "20f92144bb5446848093e63a491a213f",
    "Phrase": "[Where;;, was;;, WiZeefa;;, founded;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "founded",
        "uri": "http://dbpedia.org/property/foundation",
        "seq": "18,25",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which families does the Koolakamba belong ?",
    "SerialNumber": "1929",
    "Words": "[To, which, families, does, the, Koolakamba, belong, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Koolakamba\u003e \u003chttp://dbpedia.org/ontology/family\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Koolakamba",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Koolakamba",
        "seq": "27,37"
      }
    ],
    "CleanPhrase": "[families, Koolakamba, belong]",
    "id": "687c79c0439d4ae698063ce7d8192262",
    "Phrase": "[To;;, which;;, families;;, does;;, the Koolakamba;;, belong;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "families",
        "uri": "http://dbpedia.org/ontology/family",
        "seq": "9,17",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In which state is Dorchester Bay (Boston Harbor) ?",
    "SerialNumber": "1939",
    "Words": "[In, which, state, is, Dorchester, Bay, \\, (, Boston, Harbor, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Dorchester_Bay_(Boston_Harbor)\u003e \u003chttp://dbpedia.org/property/state\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 30,
        "label": "Dorchester Bay",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Dorchester_Bay_(Boston_Harbor)",
        "seq": "18,32"
      }
    ],
    "CleanPhrase": "[state, Dorchester Bay, Boston Harbor]",
    "id": "fc6a428c69f44439b0c0594e95f8f2a8",
    "Phrase": "[In;;, which;;, state;;, is;;, Dorchester Bay;;, Boston Harbor;;]",
    "predicate mapping": [
      {
        "score": 283,
        "label": "state",
        "uri": "http://dbpedia.org/property/state",
        "seq": "9,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What is the airline company has its headquarters in Dublin Airport?",
    "SerialNumber": "1943",
    "Words": "[What, is, the, airline, company, has, its, headquarters, in, Dublin, Airport, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/headquarters\u003e \u003chttp://dbpedia.org/resource/Dublin_Airport\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 88,
        "label": "Dublin Airport",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Dublin_Airport",
        "seq": "52,66"
      }
    ],
    "CleanPhrase": "[airline company, headquarters, Dublin Airport]",
    "id": "5c04724cd502432197623d0c85e4cd8d",
    "Phrase": "[What;;, is;;, the airline company;;, has;;, its headquarters;;, in;;, Dublin Airport;;]",
    "predicate mapping": [
      {
        "score": 27,
        "label": "headquarters",
        "uri": "http://dbpedia.org/property/headquarters",
        "seq": "36,48",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the teams for which Wilfred McDonald played for?",
    "SerialNumber": "1944",
    "Words": "[What, are, the, teams, for, which, Wilfred, McDonald, played, for, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Wilfred_McDonald\u003e \u003chttp://dbpedia.org/property/playedFor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Wilfred McDonald",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Wilfred_McDonald",
        "seq": "29,45"
      }
    ],
    "CleanPhrase": "[teams, Wilfred McDonald, played]",
    "id": "7424ae95bf2f42f5a33391da3da194a8",
    "Phrase": "[What;;, are;;, the teams;;, for;;, which;;, Wilfred McDonald;;, played;;, for;;, \\;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "played for",
        "uri": "http://dbpedia.org/property/playedFor",
        "seq": "46,56",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which professional fighter, who is also a politician and was elected to House of Representatives of the Philippines?",
    "SerialNumber": "1956",
    "Words": "[Which, professional, fighter, ,, who, is, also, a, politician, and, was, elected, to, House, of, Representatives, of, the, Philippines, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/occupation\u003e \u003chttp://dbpedia.org/resource/House_of_Representatives_of_the_Philippines\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 19,
        "label": "House of Representatives of the Philippines",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/House_of_Representatives_of_the_Philippines",
        "seq": "72,115"
      }
    ],
    "CleanPhrase": "[professional fighter, politician, elected, House, Representatives, Philippines]",
    "id": "700bcd617886425282255b4748de26f6",
    "Phrase": "[Which professional fighter;;, who;;, is;;, also;;, a politician;;, was elected;;, to;;, House;;, of;;, Representatives;;, of;;, the Philippines;;]",
    "predicate mapping": [
      {
        "score": 79,
        "label": "profession",
        "uri": "http://dbpedia.org/property/occupation",
        "seq": "6,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the last two studio albums of Moondog Matinee ?",
    "SerialNumber": "1961",
    "Words": "[What, are, the, last, two, studio, albums, of, Moondog, Matinee, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Moondog_Matinee\u003e \u003chttp://dbpedia.org/ontology/subsequentWork\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "Moondog Matinee",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Moondog_Matinee",
        "seq": "39,54"
      }
    ],
    "CleanPhrase": "[studio albums, Moondog Matinee]",
    "id": "7b9e8db8a3234def93777d9786fa9db7",
    "Phrase": "[What;;, are;;, the last two studio albums;;, of;;, Moondog Matinee;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "two",
        "uri": "http://dbpedia.org/ontology/subsequentWork",
        "seq": "18,21",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the battles fought by Roh Tae-woo ?",
    "SerialNumber": "1963",
    "Words": "[List, the, battles, fought, by, Roh, Tae, woo, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Roh_Tae-woo\u003e \u003chttp://dbpedia.org/property/battles\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Roh Tae-woo",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Roh_Tae-woo",
        "seq": "27,38"
      }
    ],
    "CleanPhrase": "[List, battles, fought, Roh Tae, woo]",
    "id": "8a0781ae3e9644709d33491564bbab50",
    "Phrase": "[List;;, the battles;;, fought;;, by;;, Roh Tae;;, woo;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "battles",
        "uri": "http://dbpedia.org/property/battles",
        "seq": "9,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the employer of Don R. Berlin?",
    "SerialNumber": "1973",
    "Words": "[Who, are, the, employer, of, Don, R, Berlin, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Don_R._Berlin\u003e \u003chttp://dbpedia.org/ontology/employer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Don R. Berlin",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Don_R._Berlin",
        "seq": "24,37"
      }
    ],
    "CleanPhrase": "[employer, Don R Berlin]",
    "id": "8b40533f058843bdb80b6c7f4e829f19",
    "Phrase": "[Who;;, are;;, the employer;;, of;;, Don R Berlin;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "employer",
        "uri": "http://dbpedia.org/ontology/employer",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "list the founders of Bream Bay ?",
    "SerialNumber": "1983",
    "Words": "[list, the, founders, of, Bream, Bay, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bream_Bay\u003e \u003chttp://dbpedia.org/property/founder\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Bream Bay",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Bream_Bay",
        "seq": "21,30"
      }
    ],
    "CleanPhrase": "[list, founders, Bream Bay]",
    "id": "4af1cb3060f14095a5ac3b96593361a4",
    "Phrase": "[list;;, the founders;;, of;;, Bream Bay;;]",
    "predicate mapping": [
      {
        "score": 155,
        "label": "founders",
        "uri": "http://dbpedia.org/property/founder",
        "seq": "9,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the debut team of ngel Escobar ?",
    "SerialNumber": "1993",
    "Words": "[What, is, the, debut, team, of, ngel, Escobar, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ángel_Escobar\u003e \u003chttp://dbpedia.org/property/debutteam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "ngel Escobar",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Ángel_Escobar",
        "seq": "31,38"
      }
    ],
    "CleanPhrase": "[debut team, ngel Escobar]",
    "id": "5308076f247f416480c268da88eb6df0",
    "Phrase": "[What;;, is;;, the debut team;;, of;;, ngel Escobar;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "debut team",
        "uri": "http://dbpedia.org/property/debutteam",
        "seq": "12,22",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the mascot of Galatasaray Handball Team ?",
    "SerialNumber": "2000",
    "Words": "[What, is, the, mascot, of, Galatasaray, Handball, Team, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Galatasaray_Handball_Team\u003e \u003chttp://dbpedia.org/property/mascot\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Galatasaray Handball Team",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Galatasaray_Handball_Team",
        "seq": "22,47"
      }
    ],
    "CleanPhrase": "[mascot, Galatasaray Handball Team]",
    "id": "a2f40f5069d544e0a258bc31e4b48533",
    "Phrase": "[What;;, is;;, the mascot;;, of;;, Galatasaray Handball Team;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "mascot",
        "uri": "http://dbpedia.org/property/mascot",
        "seq": "12,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the currency of Republic of Montenegro (1992-2006) ?",
    "SerialNumber": "2008",
    "Words": "[What, is, the, currency, of, Republic, of, Montenegro, \\, (, 1992, 2006, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Republic_of_Montenegro_(1992–2006)\u003e \u003chttp://dbpedia.org/property/currency\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 113,
        "label": "Republic of Montenegro",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Republic_of_Montenegro_(1992–2006)",
        "seq": "24,46"
      }
    ],
    "CleanPhrase": "[currency, Republic, Montenegro, 1992 2006]",
    "id": "3cade710572444c297c339d6443854ed",
    "Phrase": "[What;;, is;;, the currency;;, of;;, Republic;;, of;;, Montenegro;;, 1992 2006;;]",
    "predicate mapping": [
      {
        "score": 282,
        "label": "currency",
        "uri": "http://dbpedia.org/property/currency",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the nearest city to Tennie and Laura ?",
    "SerialNumber": "2014",
    "Words": "[Name, the, nearest, city, to, Tennie, and, Laura, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Tennie_and_Laura_(schooner)\u003e \u003chttp://dbpedia.org/property/nearestCity\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Tennie and Laura",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Tennie_and_Laura_(schooner)",
        "seq": "25,41"
      }
    ],
    "CleanPhrase": "[nearest city, Tennie, Laura]",
    "id": "dc586a5d041844feb7a1d08718b05042",
    "Phrase": "[Name;;, the nearest city;;, to;;, Tennie;;, Laura;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "nearest city",
        "uri": "http://dbpedia.org/property/nearestCity",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the home Stadium of Kenya national under-20 football team ?",
    "SerialNumber": "2015",
    "Words": "[Name, the, home, Stadium, of, Kenya, national, under, 20, football, team, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Kenya_national_under-20_football_team\u003e \u003chttp://dbpedia.org/property/homeStadium\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Kenya national under-20 football team",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Kenya_national_under-20_football_team",
        "seq": "25,62"
      }
    ],
    "CleanPhrase": "[home Stadium, Kenya, national, 20 football team]",
    "id": "a5e0d47ce7c24a0ea619a0edcaad11e8",
    "Phrase": "[the home Stadium;;, of;;, Kenya;;, national;;, under;;, 20 football team;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "home Stadium",
        "uri": "http://dbpedia.org/property/homeStadium",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the source country of reg Lake ?",
    "SerialNumber": "2022",
    "Words": "[What, is, the, source, country, of, reg, Lake, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Üüreg_Lake\u003e \u003chttp://dbpedia.org/ontology/sourceCountry\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": -1,
        "label": "reg Lake",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Üüreg_Lake",
        "seq": "34,38"
      }
    ],
    "CleanPhrase": "[source country, reg Lake]",
    "id": "7b47485d6943488fa5e56c5987062679",
    "Phrase": "[What;;, is;;, the source country;;, of;;, reg Lake;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "source country",
        "uri": "http://dbpedia.org/ontology/sourceCountry",
        "seq": "12,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "GetTV is owned by which organisation?",
    "SerialNumber": "2028",
    "Words": "[GetTV, is, owned, by, which, organisation, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/GetTV\u003e \u003chttp://dbpedia.org/ontology/parentOrganisation\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "GetTV",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/GetTV",
        "seq": "0,5"
      }
    ],
    "CleanPhrase": "[GetTV, owned, organisation]",
    "id": "e2b55df745ed48acb96b3572ab3e72e3",
    "Phrase": "[GetTV;;, is owned;;, by;;, which;;, organisation;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "organisation",
        "uri": "http://dbpedia.org/ontology/parentOrganisation",
        "seq": "24,36",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who composed the music for Tonight\u0027s the Night ?",
    "SerialNumber": "2036",
    "Words": "[Who, composed, the, music, for, Tonight, \u0027s, the, Night, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Tonight\u0027s_the_Night_(2003_musical)\u003e \u003chttp://dbpedia.org/property/music\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 26,
        "label": "Tonight\u0027s the Night",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Tonight\u0027s_the_Night_(2003_musical)",
        "seq": "27,46"
      }
    ],
    "CleanPhrase": "[composed, music, Tonight, \u0027s]",
    "id": "6138681c5c4b40edae512667d67db3cb",
    "Phrase": "[Who;;, composed;;, the music;;, for;;, Tonight;;, \u0027s;;]",
    "predicate mapping": [
      {
        "score": 133,
        "label": "music",
        "uri": "http://dbpedia.org/property/music",
        "seq": "17,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the music of Open House (American Horror Story)?",
    "SerialNumber": "2045",
    "Words": "[List, the, music, of, Open, House, \\, (, American, Horror, Story, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Open_House_(American_Horror_Story)\u003e \u003chttp://dbpedia.org/property/music\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Open House (American Horror Story)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Open_House_(American_Horror_Story)",
        "seq": "18,52"
      }
    ],
    "CleanPhrase": "[music, Open House, American Horror Story]",
    "id": "00691ec829834dd08cec97419d51eb4c",
    "Phrase": "[the music;;, of;;, Open House;;, American Horror Story;;]",
    "predicate mapping": [
      {
        "score": 133,
        "label": "music",
        "uri": "http://dbpedia.org/property/music",
        "seq": "9,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the children of Abigail Adams?",
    "SerialNumber": "2059",
    "Words": "[Who, are, the, children, of, Abigail, Adams, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Abigail_Adams\u003e \u003chttp://dbpedia.org/property/children\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Abigail Adams",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Abigail_Adams",
        "seq": "24,37"
      }
    ],
    "CleanPhrase": "[children, Abigail Adams]",
    "id": "4ffdaa76aa994139b18edf277f905fed",
    "Phrase": "[Who;;, are;;, the children;;, of;;, Abigail Adams;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "children",
        "uri": "http://dbpedia.org/property/children",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which are the predecessor of Chevrolet Caprice?",
    "SerialNumber": "2062",
    "Words": "[Which, are, the, predecessor, of, Chevrolet, Caprice, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Chevrolet_Caprice\u003e \u003chttp://dbpedia.org/ontology/predecessor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Chevrolet Caprice",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Chevrolet_Caprice",
        "seq": "29,46"
      }
    ],
    "CleanPhrase": "[predecessor, Chevrolet Caprice]",
    "id": "843e418ed3c44ed7b63ee93d377e146a",
    "Phrase": "[Which;;, are;;, the predecessor;;, of;;, Chevrolet Caprice;;]",
    "predicate mapping": [
      {
        "score": 22,
        "label": "predecessor",
        "uri": "http://dbpedia.org/ontology/predecessor",
        "seq": "14,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the sports played by Fr. Agnel Multipurpose School and Junior College?",
    "SerialNumber": "2068",
    "Words": "[Name, the, sports, played, by, Fr, Agnel, Multipurpose, School, and, Junior, College, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Fr._Agnel_Multipurpose_School_and_Junior_College\u003e \u003chttp://dbpedia.org/ontology/sport\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Fr. Agnel Multipurpose School and Junior College",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Fr._Agnel_Multipurpose_School_and_Junior_College",
        "seq": "26,74"
      }
    ],
    "CleanPhrase": "[sports, played, Fr Agnel Multipurpose School, Junior College]",
    "id": "dd56b34774864c2f898e20007c193984",
    "Phrase": "[the sports;;, played;;, by;;, Fr Agnel Multipurpose School;;, Junior College;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "sport",
        "uri": "http://dbpedia.org/ontology/sport",
        "seq": "9,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the architecture of First National Bank and Trust Building (Lima, Ohio) ?",
    "SerialNumber": "2081",
    "Words": "[What, is, the, architecture, of, First, National, Bank, and, Trust, Building, \\, (, Lima, ,, Ohio, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/First_National_Bank_and_Trust_Building_(Lima,_Ohio)\u003e \u003chttp://dbpedia.org/ontology/architecturalStyle\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "First National Bank and Trust Building (Lima, Ohio)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/First_National_Bank_and_Trust_Building_(Lima,_Ohio)",
        "seq": "28,79"
      }
    ],
    "CleanPhrase": "[architecture, National Bank Trust Building, Lima, Ohio]",
    "id": "d3c142c23fcd445e8acfe1320c5cddfb",
    "Phrase": "[What;;, is;;, the architecture;;, of;;, First National Bank and Trust Building;;, Lima;;, Ohio;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "architecture",
        "uri": "http://dbpedia.org/ontology/architecturalStyle",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who is married to Susan Weber Soros?",
    "SerialNumber": "2091",
    "Words": "[Who, is, married, to, Susan, Weber, Soros, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/spouse\u003e \u003chttp://dbpedia.org/resource/Susan_Weber_Soros\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Susan Weber Soros",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Susan_Weber_Soros",
        "seq": "18,35"
      }
    ],
    "CleanPhrase": "[married, Susan Weber Soros]",
    "id": "6adadd03b3254e5386b3c4bd1680b99d",
    "Phrase": "[Who;;, is married;;, to;;, Susan Weber Soros;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "married to",
        "uri": "http://dbpedia.org/property/spouse",
        "seq": "7,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the state of origin of Abbas Jafri ?",
    "SerialNumber": "2093",
    "Words": "[What, is, the, state, of, origin, of, Abbas, Jafri, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Abbas_Jafri\u003e \u003chttp://dbpedia.org/ontology/stateOfOrigin\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Abbas Jafri",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Abbas_Jafri",
        "seq": "31,42"
      }
    ],
    "CleanPhrase": "[state, origin, Abbas Jafri]",
    "id": "ac851fcc762c4a0abda96bed81bef120",
    "Phrase": "[What;;, is;;, the state;;, of;;, origin;;, of;;, Abbas Jafri;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "state of origin",
        "uri": "http://dbpedia.org/ontology/stateOfOrigin",
        "seq": "12,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the profession of William Luther Hill ?",
    "SerialNumber": "2109",
    "Words": "[What, is, the, profession, of, William, Luther, Hill, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/William_Luther_Hill\u003e \u003chttp://dbpedia.org/ontology/profession\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "William Luther Hill",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/William_Luther_Hill",
        "seq": "26,45"
      }
    ],
    "CleanPhrase": "[profession, William Luther Hill]",
    "id": "07aeedead69840918b458b085e80e817",
    "Phrase": "[What;;, is;;, the profession;;, of;;, William Luther Hill;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "profession",
        "uri": "http://dbpedia.org/ontology/profession",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the serving railway line of Rostov-Glavny ?",
    "SerialNumber": "2113",
    "Words": "[What, is, the, serving, railway, line, of, Rostov, Glavny, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Rostov-Glavny\u003e \u003chttp://dbpedia.org/ontology/servingRailwayLine\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Rostov-Glavny",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Rostov-Glavny",
        "seq": "36,49"
      }
    ],
    "CleanPhrase": "[serving railway line, Rostov Glavny]",
    "id": "176e2c67c12547b9bad7e6dff1452cb4",
    "Phrase": "[What;;, is;;, the serving railway line;;, of;;, Rostov Glavny;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "serving railway line",
        "uri": "http://dbpedia.org/ontology/servingRailwayLine",
        "seq": "12,32",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the official residence of Sarah Kazemy ?",
    "SerialNumber": "2119",
    "Words": "[What, is, the, official, residence, of, Sarah, Kazemy, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Sarah_Kazemy\u003e \u003chttp://dbpedia.org/property/residence\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Sarah Kazemy",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Sarah_Kazemy",
        "seq": "34,46"
      }
    ],
    "CleanPhrase": "[official residence, Sarah Kazemy]",
    "id": "46b80622ce374a06a4553cc91038560a",
    "Phrase": "[What;;, is;;, the official residence;;, of;;, Sarah Kazemy;;]",
    "predicate mapping": [
      {
        "score": 44,
        "label": "residence",
        "uri": "http://dbpedia.org/property/residence",
        "seq": "21,30",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What ingredients are used in preparing the dish of Ragout fin?",
    "SerialNumber": "2125",
    "Words": "[What, ingredients, are, used, in, preparing, the, dish, of, Ragout, fin, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ragout_fin\u003e \u003chttp://dbpedia.org/ontology/ingredient\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Ragout fin",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Ragout_fin",
        "seq": "51,61"
      }
    ],
    "CleanPhrase": "[ingredients, preparing, dish, Ragout fin]",
    "id": "f2fd76539712496f89d28c3d4448d5d8",
    "Phrase": "[What ingredients;;, are used;;, in;;, preparing;;, the dish;;, of;;, Ragout fin;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "ingredient",
        "uri": "http://dbpedia.org/ontology/ingredient",
        "seq": "5,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the order of George Frisbie Hoar?",
    "SerialNumber": "2134",
    "Words": "[What, is, the, order, of, George, Frisbie, Hoar, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/George_Frisbie_Hoar\u003e \u003chttp://dbpedia.org/property/order\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "George Frisbie Hoar",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/George_Frisbie_Hoar",
        "seq": "21,40"
      }
    ],
    "CleanPhrase": "[order, George Frisbie Hoar]",
    "id": "5515c31e477642508f2333e66a7124e6",
    "Phrase": "[What;;, is;;, the order;;, of;;, George Frisbie Hoar;;]",
    "predicate mapping": [
      {
        "score": 84,
        "label": "order",
        "uri": "http://dbpedia.org/property/order",
        "seq": "12,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who edited Easy street ?",
    "SerialNumber": "2144",
    "Words": "[Who, edited, Easy, street, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Easy_Street_(film)\u003e \u003chttp://dbpedia.org/ontology/editing\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 71,
        "label": "Easy street",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Easy_Street_(film)",
        "seq": "11,22"
      }
    ],
    "CleanPhrase": "[edited, Easy street]",
    "id": "781e6cc08f044c428d77cc3790f657eb",
    "Phrase": "[Who;;, edited;;, Easy street;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "edited",
        "uri": "http://dbpedia.org/ontology/editing",
        "seq": "4,10",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was Special 26 recorded ?",
    "SerialNumber": "2159",
    "Words": "[Where, was, Special, 26, recorded, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Special_26\u003e \u003chttp://dbpedia.org/property/recorded\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Special 26",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Special_26",
        "seq": "10,20"
      }
    ],
    "CleanPhrase": "[Special 26, recorded]",
    "id": "9e8d0173dbb749c3a9861e1887894afe",
    "Phrase": "[Where;;, was;;, Special 26;;, recorded;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "recorded",
        "uri": "http://dbpedia.org/property/recorded",
        "seq": "21,29",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name hte builder of Baku Olympic Stadium ?",
    "SerialNumber": "2164",
    "Words": "[Name, hte, builder, of, Baku, Olympic, Stadium, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Baku_Olympic_Stadium_(BOS)\u003e \u003chttp://dbpedia.org/ontology/builder\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Baku Olympic Stadium",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Baku_Olympic_Stadium_(BOS)",
        "seq": "20,40"
      }
    ],
    "CleanPhrase": "[hte builder, Baku Olympic Stadium]",
    "id": "4311e02017fd4760a06569b9821a2411",
    "Phrase": "[Name hte builder;;, of;;, Baku Olympic Stadium;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "builder",
        "uri": "http://dbpedia.org/ontology/builder",
        "seq": "9,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the animator of Tommy Tucker\u0027s Tooth ?",
    "SerialNumber": "2165",
    "Words": "[Who, is, the, animator, of, Tommy, Tucker, \u0027s, Tooth, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Tommy_Tucker\u0027s_Tooth\u003e \u003chttp://dbpedia.org/property/animator\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Tommy Tucker\u0027s Tooth",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Tommy_Tucker\u0027s_Tooth",
        "seq": "23,43"
      }
    ],
    "CleanPhrase": "[animator, Tommy Tucker, \u0027s Tooth]",
    "id": "4294fa2db28d45f1933f8c4347b84964",
    "Phrase": "[Who;;, is;;, the animator;;, of;;, Tommy Tucker;;, \u0027s Tooth;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "animator",
        "uri": "http://dbpedia.org/property/animator",
        "seq": "11,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the national origin of Focke-Wulf Fw 260 ?",
    "SerialNumber": "2167",
    "Words": "[What, is, the, national, origin, of, Focke, Wulf, Fw, 260, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Focke-Wulf_Fw_260\u003e \u003chttp://dbpedia.org/property/nationalOrigin\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Focke-Wulf Fw 260",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Focke-Wulf_Fw_260",
        "seq": "31,48"
      }
    ],
    "CleanPhrase": "[national origin, Focke Wulf Fw 260]",
    "id": "fd1f031446b74ac481667ae2904eb14f",
    "Phrase": "[What;;, is;;, the national origin;;, of;;, Focke Wulf Fw 260;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "national origin",
        "uri": "http://dbpedia.org/property/nationalOrigin",
        "seq": "12,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Stan Van Gundy serves as a head coach and president for which basketball team?",
    "SerialNumber": "2185",
    "Words": "[Stan, Van, Gundy, serves, as, a, head, coach, and, president, for, which, basketball, team, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/president\u003e \u003chttp://dbpedia.org/resource/Stan_Van_Gundy\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Stan Van Gundy",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Stan_Van_Gundy",
        "seq": "0,14"
      }
    ],
    "CleanPhrase": "[Stan Van Gundy, serves, head coach, president, basketball team]",
    "id": "2afab07b2dac4282909806c34e40c6f5",
    "Phrase": "[Stan Van Gundy;;, serves;;, as;;, a head coach;;, president;;, for;;, which;;, basketball team;;]",
    "predicate mapping": [
      {
        "score": 276,
        "label": "president",
        "uri": "http://dbpedia.org/property/president",
        "seq": "42,51",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the owner of  Chelsea F.C. ?",
    "SerialNumber": "2191",
    "Words": "[Who, is, the, owner, of, Chelsea, F, C, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Chelsea_F.C.\u003e \u003chttp://dbpedia.org/property/owner\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Chelsea F.C.",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Chelsea_F.C.",
        "seq": "21,33"
      }
    ],
    "CleanPhrase": "[owner, Chelsea F C]",
    "id": "1f6027121a154845a301780b46413756",
    "Phrase": "[Who;;, is;;, the owner;;, of;;, Chelsea F C;;]",
    "predicate mapping": [
      {
        "score": 62,
        "label": "owner",
        "uri": "http://dbpedia.org/property/owner",
        "seq": "11,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List things developed by Autoconf ?",
    "SerialNumber": "2196",
    "Words": "[List, things, developed, by, Autoconf, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Autoconf\u003e \u003chttp://dbpedia.org/ontology/developer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Autoconf",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Autoconf",
        "seq": "25,33"
      }
    ],
    "CleanPhrase": "[List things, developed, Autoconf]",
    "id": "d7d6a471f045411d88c97b34e458c2c9",
    "Phrase": "[List things;;, developed;;, by;;, Autoconf;;]",
    "predicate mapping": [
      {
        "score": 16,
        "label": "developed by",
        "uri": "http://dbpedia.org/ontology/developer",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was Ne daj se, Nina first aired ?",
    "SerialNumber": "2206",
    "Words": "[Where, was, Ne, daj, se, ,, Nina, first, aired, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ne_daj_se,_Nina\u003e \u003chttp://dbpedia.org/property/firstAired\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Ne daj se, Nina",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Ne_daj_se,_Nina",
        "seq": "10,25"
      }
    ],
    "CleanPhrase": "[Ne daj se, Nina, aired]",
    "id": "eea1a931ec7b42c3bbcb1273d1b870cd",
    "Phrase": "[Where;;, was;;, Ne daj se;;, Nina;;, first;;, aired;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "first aired",
        "uri": "http://dbpedia.org/property/firstAired",
        "seq": "26,37",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In which state is Colemanville Covered Bridge located ?",
    "SerialNumber": "2209",
    "Words": "[In, which, state, is, Colemanville, Covered, Bridge, located, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Colemanville_Covered_Bridge\u003e \u003chttp://dbpedia.org/ontology/state\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Colemanville Covered Bridge",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Colemanville_Covered_Bridge",
        "seq": "18,45"
      }
    ],
    "CleanPhrase": "[state, Colemanville Covered Bridge, located]",
    "id": "85c76306bdca404d9198823c7f039b6e",
    "Phrase": "[In;;, which;;, state;;, is;;, Colemanville Covered Bridge;;, located;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "state",
        "uri": "http://dbpedia.org/ontology/state",
        "seq": "9,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who operates twin Cities 400 ?",
    "SerialNumber": "2220",
    "Words": "[Who, operates, twin, Cities, 400, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Twin_Cities_400\u003e \u003chttp://dbpedia.org/ontology/operatedBy\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "twin Cities 400",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Twin_Cities_400",
        "seq": "13,28"
      }
    ],
    "CleanPhrase": "[operates, twin Cities, 400]",
    "id": "9c2755a6ad1a44e6b2fae15bb6dda2fa",
    "Phrase": "[Who;;, operates;;, twin Cities;;, 400;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "",
        "uri": "http://dbpedia.org/ontology/operatedBy",
        "seq": "0,0",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the broadcast area of  Radio Philippines Network ?",
    "SerialNumber": "2221",
    "Words": "[Name, the, broadcast, area, of, Radio, Philippines, Network, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Radio_Philippines_Network\u003e \u003chttp://dbpedia.org/property/area\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Radio Philippines Network",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Radio_Philippines_Network",
        "seq": "28,53"
      }
    ],
    "CleanPhrase": "[broadcast area, Radio Philippines Network]",
    "id": "67e7b4cfd56449dd8e16839eb9d8325c",
    "Phrase": "[the broadcast area;;, of;;, Radio Philippines Network;;]",
    "predicate mapping": [
      {
        "score": 406,
        "label": "area",
        "uri": "http://dbpedia.org/property/area",
        "seq": "19,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is pitro Gruszka hometown ?",
    "SerialNumber": "2223",
    "Words": "[What, is, pitro, Gruszka, hometown, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Piotr_Gruszka\u003e \u003chttp://dbpedia.org/property/hometown\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 85,
        "label": "pitro Gruszka",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Piotr_Gruszka",
        "seq": "14,21"
      }
    ],
    "CleanPhrase": "[pitro Gruszka hometown]",
    "id": "30599ffcad334bcc8b320111644de813",
    "Phrase": "[What;;, is;;, pitro Gruszka hometown;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "hometown",
        "uri": "http://dbpedia.org/property/hometown",
        "seq": "22,30",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What sport activities are available at Polytechnic University of the Philippines Bataan?",
    "SerialNumber": "2227",
    "Words": "[What, sport, activities, are, available, at, Polytechnic, University, of, the, Philippines, Bataan, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_–_Bataan\u003e \u003chttp://dbpedia.org/ontology/sport\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Polytechnic University of the Philippines Bataan",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_–_Bataan",
        "seq": "39,87"
      }
    ],
    "CleanPhrase": "[sport activities, Polytechnic University, Philippines, Bataan]",
    "id": "7b4b7b0484e344288b493a941b5ccf38",
    "Phrase": "[What sport activities;;, are;;, available;;, at;;, Polytechnic University;;, of;;, the Philippines;;, Bataan;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "sport",
        "uri": "http://dbpedia.org/ontology/sport",
        "seq": "5,10",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the writer of South Park: The Stick of Truth ?",
    "SerialNumber": "2247",
    "Words": "[Name, the, writer, of, South, Park, The, Stick, of, Truth, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/South_Park:_The_Stick_of_Truth\u003e \u003chttp://dbpedia.org/ontology/writer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "South Park: The Stick of Truth",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/South_Park:_The_Stick_of_Truth",
        "seq": "19,49"
      }
    ],
    "CleanPhrase": "[writer, South Park, Stick, Truth]",
    "id": "984b82270182472b9d8f250fe7d3aafc",
    "Phrase": "[the writer;;, of;;, South Park;;, The Stick;;, of;;, Truth;;]",
    "predicate mapping": [
      {
        "score": 13,
        "label": "writer",
        "uri": "http://dbpedia.org/ontology/writer",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the authority of Maine School of Science and Mathematics ?",
    "SerialNumber": "2248",
    "Words": "[Who, is, the, authority, of, Maine, School, of, Science, and, Mathematics, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics\u003e \u003chttp://dbpedia.org/ontology/authority\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Maine School of Science and Mathematics",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics",
        "seq": "24,63"
      }
    ],
    "CleanPhrase": "[authority, Maine School, Science Mathematics]",
    "id": "57ab787a271f4c28b2a0dca69d5e9068",
    "Phrase": "[Who;;, is;;, the authority;;, of;;, Maine School;;, of;;, Science and Mathematics;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "authority",
        "uri": "http://dbpedia.org/ontology/authority",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is the hometown of A Bartlett Giamatti?",
    "SerialNumber": "2290",
    "Words": "[Where, is, the, hometown, of, A, Bartlett, Giamatti, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/A._Bartlett_Giamatti\u003e \u003chttp://dbpedia.org/ontology/hometown\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Bartlett Giamatti",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/A._Bartlett_Giamatti",
        "seq": "27,44"
      }
    ],
    "CleanPhrase": "[hometown, Bartlett Giamatti]",
    "id": "3f8ac10edaaa4c4cbbde422c79de3c6d",
    "Phrase": "[Where;;, is;;, the hometown;;, of;;, A Bartlett Giamatti;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "hometown",
        "uri": "http://dbpedia.org/ontology/hometown",
        "seq": "13,21",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the ethnicity of Riley Reid?",
    "SerialNumber": "2292",
    "Words": "[List, the, ethnicity, of, Riley, Reid, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Riley_Reid\u003e \u003chttp://dbpedia.org/property/ethnicity\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Riley Reid",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Riley_Reid",
        "seq": "22,32"
      }
    ],
    "CleanPhrase": "[ethnicity, Riley Reid]",
    "id": "e63144a282cb442497406a9b189093f7",
    "Phrase": "[the ethnicity;;, of;;, Riley Reid;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "ethnicity",
        "uri": "http://dbpedia.org/property/ethnicity",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who are the predecessors of John Randolph of Roanoke?",
    "SerialNumber": "2299",
    "Words": "[Who, are, the, predecessors, of, John, Randolph, of, Roanoke, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/predecessor\u003e \u003chttp://dbpedia.org/resource/John_Randolph_of_Roanoke\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 197,
        "label": "John Randolph",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/John_Randolph_of_Roanoke",
        "seq": "28,41"
      }
    ],
    "CleanPhrase": "[predecessors, John Randolph, Roanoke]",
    "id": "3f758b0a0ad24d339835902878769609",
    "Phrase": "[Who;;, are;;, the predecessors;;, of;;, John Randolph;;, of;;, Roanoke;;]",
    "predicate mapping": [
      {
        "score": 31,
        "label": "predecessor",
        "uri": "http://dbpedia.org/property/predecessor",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the musician of Before I let you Go ?",
    "SerialNumber": "2316",
    "Words": "[Who, is, the, musician, of, Before, I, let, you, Go, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Before_I_Let_You_Go\u003e \u003chttp://dbpedia.org/ontology/musicalArtist\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Before I let you Go",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Before_I_Let_You_Go",
        "seq": "23,42"
      }
    ],
    "CleanPhrase": "[musician]",
    "id": "146cb6a075864ab787660a7fa34af21a",
    "Phrase": "[Who;;, is;;, the musician;;, of;;, I;;, let;;, you;;, Go;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "musician",
        "uri": "http://dbpedia.org/ontology/musicalArtist",
        "seq": "11,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the Ceremonial County of Port of Tilbury ?",
    "SerialNumber": "2318",
    "Words": "[What, is, the, Ceremonial, County, of, Port, of, Tilbury, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Port_of_Tilbury\u003e \u003chttp://dbpedia.org/ontology/ceremonialCounty\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Port of Tilbury",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Port_of_Tilbury",
        "seq": "33,48"
      }
    ],
    "CleanPhrase": "[Ceremonial County, Port, Tilbury]",
    "id": "2bb0d338072d46e2b06b40c9f3b8f84d",
    "Phrase": "[What;;, is;;, the Ceremonial County;;, of;;, Port;;, of;;, Tilbury;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "Ceremonial County",
        "uri": "http://dbpedia.org/ontology/ceremonialCounty",
        "seq": "12,29",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the current team of John McGuinness (motorcycle racer) ?",
    "SerialNumber": "2319",
    "Words": "[What, is, the, current, team, of, John, McGuinness, \\, (, motorcycle, racer, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/John_McGuinness_(motorcycle_racer)\u003e \u003chttp://dbpedia.org/property/currentTeam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 29,
        "label": "John McGuinness",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/John_McGuinness_(motorcycle_racer)",
        "seq": "28,43"
      }
    ],
    "CleanPhrase": "[current team, John McGuinness, motorcycle racer]",
    "id": "9a71167ed51b4c7da57c4724f82effdf",
    "Phrase": "[What;;, is;;, the current team;;, of;;, John McGuinness;;, motorcycle racer;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "current team",
        "uri": "http://dbpedia.org/property/currentTeam",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who is the famous relative of Kelly Osbourne?",
    "SerialNumber": "2323",
    "Words": "[Who, is, the, famous, relative, of, Kelly, Osbourne, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/relatives\u003e \u003chttp://dbpedia.org/resource/Kelly_Osbourne\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Kelly Osbourne",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Kelly_Osbourne",
        "seq": "30,44"
      }
    ],
    "CleanPhrase": "[famous relative, Kelly Osbourne]",
    "id": "d8afce1fd4aa4a2580832293b1d0d318",
    "Phrase": "[Who;;, is;;, the famous relative;;, of;;, Kelly Osbourne;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "relative",
        "uri": "http://dbpedia.org/property/relatives",
        "seq": "18,26",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the employer of Michael M. Sears ?",
    "SerialNumber": "2330",
    "Words": "[Who, is, the, employer, of, Michael, M, Sears, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Michael_M._Sears\u003e \u003chttp://dbpedia.org/property/employer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Michael M. Sears",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Michael_M._Sears",
        "seq": "23,39"
      }
    ],
    "CleanPhrase": "[employer, Michael M Sears]",
    "id": "5347e3d7e51348bb814413a5707b97f3",
    "Phrase": "[Who;;, is;;, the employer;;, of;;, Michael M Sears;;]",
    "predicate mapping": [
      {
        "score": 44,
        "label": "employer",
        "uri": "http://dbpedia.org/property/employer",
        "seq": "11,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the governing body of Burro Flats Painted Cave ?",
    "SerialNumber": "2340",
    "Words": "[What, is, the, governing, body, of, Burro, Flats, Painted, Cave, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Burro_Flats_Painted_Cave\u003e \u003chttp://dbpedia.org/ontology/governingBody\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Burro Flats Painted Cave",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Burro_Flats_Painted_Cave",
        "seq": "30,54"
      }
    ],
    "CleanPhrase": "[governing body, Burro Flats Painted Cave]",
    "id": "732a9efd20d74796b8805987d0bcf033",
    "Phrase": "[What;;, is;;, the governing body;;, of;;, Burro Flats Painted Cave;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "governing body",
        "uri": "http://dbpedia.org/ontology/governingBody",
        "seq": "12,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the series of Doctor Who: Evacuation Earth ?",
    "SerialNumber": "2352",
    "Words": "[Name, the, series, of, Doctor, Who, Evacuation, Earth, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Doctor_Who:_Evacuation_Earth\u003e \u003chttp://dbpedia.org/ontology/series\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Doctor Who: Evacuation Earth",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Doctor_Who:_Evacuation_Earth",
        "seq": "19,47"
      }
    ],
    "CleanPhrase": "[series, Doctor, Evacuation, Earth]",
    "id": "93c37c563c8b4f0f9b070340f1fa1630",
    "Phrase": "[Name;;, the series;;, of;;, Doctor;;, Who;;, Evacuation;;, Earth;;]",
    "predicate mapping": [
      {
        "score": 7,
        "label": "series",
        "uri": "http://dbpedia.org/ontology/series",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What water bodies have primary inflows sa Kemijoki?",
    "SerialNumber": "2357",
    "Words": "[What, water, bodies, have, primary, inflows, sa, Kemijoki, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/inflow\u003e \u003chttp://dbpedia.org/resource/Kemijoki\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Kemijoki",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Kemijoki",
        "seq": "42,50"
      }
    ],
    "CleanPhrase": "[water bodies, primary inflows]",
    "id": "cc83b16990044389a146f6d649f878d8",
    "Phrase": "[What water bodies;;, have;;, primary inflows;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "inflows",
        "uri": "http://dbpedia.org/ontology/inflow",
        "seq": "31,38",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the broadcast area of ITV (Thailand) ?",
    "SerialNumber": "2380",
    "Words": "[Name, the, broadcast, area, of, ITV, \\, (, Thailand, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/ITV_(Thailand)\u003e \u003chttp://dbpedia.org/property/broadcastArea\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 33,
        "label": "ITV (Thailand)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/ITV_(Thailand)",
        "seq": "27,41"
      }
    ],
    "CleanPhrase": "[broadcast area, ITV, Thailand]",
    "id": "e6e376c1a4f14e9abe7402a8a5f35816",
    "Phrase": "[the broadcast area;;, of;;, ITV;;, Thailand;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "broadcast area",
        "uri": "http://dbpedia.org/property/broadcastArea",
        "seq": "9,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Philadelphia City Council is the governing body of which city?",
    "SerialNumber": "2387",
    "Words": "[Philadelphia, City, Council, is, the, governing, body, of, which, city, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/governingBody\u003e \u003chttp://dbpedia.org/resource/Philadelphia_City_Council\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Philadelphia City Council",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Philadelphia_City_Council",
        "seq": "0,25"
      }
    ],
    "CleanPhrase": "[Philadelphia City Council, governing body, city]",
    "id": "3c55183d437f49039e6d568fb6623c8f",
    "Phrase": "[Philadelphia City Council;;, is;;, the governing body;;, of;;, which;;, city;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "governing body",
        "uri": "http://dbpedia.org/property/governingBody",
        "seq": "33,47",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Moscow-Kazan high speed railway starts from which station?",
    "SerialNumber": "2397",
    "Words": "[Moscow, Kazan, high, speed, railway, starts, from, which, station, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Moscow-Kazan_high-speed_railway\u003e \u003chttp://dbpedia.org/ontology/routeStart\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Moscow-Kazan high speed railway",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Moscow-Kazan_high-speed_railway",
        "seq": "0,12"
      }
    ],
    "CleanPhrase": "[Moscow Kazan high speed railway starts, station]",
    "id": "6fea069c838141f8842dd0965d1d918c",
    "Phrase": "[Moscow Kazan high speed railway starts;;, from;;, which;;, station;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "starts",
        "uri": "http://dbpedia.org/ontology/routeStart",
        "seq": "32,38",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the state of origin of Thomas Pfyl ?",
    "SerialNumber": "2407",
    "Words": "[What, is, the, state, of, origin, of, Thomas, Pfyl, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Thomas_Pfyl\u003e \u003chttp://dbpedia.org/ontology/stateOfOrigin\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Thomas Pfyl",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Thomas_Pfyl",
        "seq": "31,42"
      }
    ],
    "CleanPhrase": "[state, origin, Thomas Pfyl]",
    "id": "524ba88720054e1081b4086303afd9db",
    "Phrase": "[What;;, is;;, the state;;, of;;, origin;;, of;;, Thomas Pfyl;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "state of origin",
        "uri": "http://dbpedia.org/ontology/stateOfOrigin",
        "seq": "12,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "For what is Abhijit Kunte known ?",
    "SerialNumber": "2409",
    "Words": "[For, what, is, Abhijit, Kunte, known, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Abhijit_Kunte\u003e \u003chttp://dbpedia.org/property/knownFor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Abhijit Kunte",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Abhijit_Kunte",
        "seq": "12,25"
      }
    ],
    "CleanPhrase": "[Abhijit Kunte]",
    "id": "841f3a4e3ade44b1b407f7b1382dc92a",
    "Phrase": "[For;;, what;;, is;;, Abhijit Kunte;;, known;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "known for",
        "uri": "http://dbpedia.org/property/knownFor",
        "seq": "-1,8",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the language of Kunsten Museum of moder art Aalborg ?",
    "SerialNumber": "2410",
    "Words": "[List, the, language, of, Kunsten, Museum, of, moder, art, Aalborg, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/KUNSTEN_Museum_of_Modern_Art_Aalborg\u003e \u003chttp://dbpedia.org/ontology/language\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Kunsten Museum of moder art Aalborg",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/KUNSTEN_Museum_of_Modern_Art_Aalborg",
        "seq": "21,56"
      }
    ],
    "CleanPhrase": "[language, Kunsten Museum, moder art Aalborg]",
    "id": "7d067f0ccaed45b9b5bcb80f169566cc",
    "Phrase": "[the language;;, of;;, Kunsten Museum;;, of;;, moder art Aalborg;;]",
    "predicate mapping": [
      {
        "score": 13,
        "label": "language",
        "uri": "http://dbpedia.org/ontology/language",
        "seq": "9,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the things built by Eristoff ?",
    "SerialNumber": "2415",
    "Words": "[What, are, the, things, built, by, Eristoff, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Eristoff\u003e \u003chttp://dbpedia.org/property/manufacturer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Eristoff",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Eristoff",
        "seq": "29,37"
      }
    ],
    "CleanPhrase": "[things, built, Eristoff]",
    "id": "4dc12f67b9bf40f1ad3ea69a7d6ddc7f",
    "Phrase": "[What;;, are;;, the things;;, built;;, by;;, Eristoff;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "built by",
        "uri": "http://dbpedia.org/property/manufacturer",
        "seq": "20,28",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the relative of Tim Nanai-Williams ?",
    "SerialNumber": "2416",
    "Words": "[List, the, relative, of, Tim, Nanai, Williams, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Tim_Nanai-Williams\u003e \u003chttp://dbpedia.org/ontology/relative\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Tim Nanai-Williams",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Tim_Nanai-Williams",
        "seq": "21,39"
      }
    ],
    "CleanPhrase": "[List, relative, Tim Nanai Williams]",
    "id": "06661ab5e6804e1c8206072e2bb02395",
    "Phrase": "[List;;, the relative;;, of;;, Tim Nanai Williams;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "relative",
        "uri": "http://dbpedia.org/ontology/relative",
        "seq": "9,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the successor of Quest Software ?",
    "SerialNumber": "2432",
    "Words": "[Who, is, the, successor, of, Quest, Software, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Quest_Software\u003e \u003chttp://dbpedia.org/property/successor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Quest Software",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Quest_Software",
        "seq": "24,38"
      }
    ],
    "CleanPhrase": "[successor, Quest Software]",
    "id": "5a5f08cd19484d219d04ef85d42c4a4f",
    "Phrase": "[Who;;, is;;, the successor;;, of;;, Quest Software;;]",
    "predicate mapping": [
      {
        "score": 27,
        "label": "successor",
        "uri": "http://dbpedia.org/property/successor",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "what are some neighboring cities of Pregny Chambsy?",
    "SerialNumber": "2438",
    "Words": "[what, are, some, neighboring, cities, of, Pregny, Chambsy, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/neighboringMunicipality\u003e \u003chttp://dbpedia.org/resource/Pregny-Chambésy\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Pregny",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Pregny-Chambésy",
        "seq": "36,42"
      }
    ],
    "CleanPhrase": "[neighboring cities, Pregny Chambsy]",
    "id": "e0d7814a403041dfbdb60c84e19ff1b6",
    "Phrase": "[what;;, are;;, some neighboring cities;;, of;;, Pregny Chambsy;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "neighboring",
        "uri": "http://dbpedia.org/ontology/neighboringMunicipality",
        "seq": "14,25",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the workplace of Christopher S. Stewart ?",
    "SerialNumber": "2443",
    "Words": "[What, is, the, workplace, of, Christopher, S, Stewart, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Christopher_S._Stewart\u003e \u003chttp://dbpedia.org/property/employer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Christopher S. Stewart",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Christopher_S._Stewart",
        "seq": "25,47"
      }
    ],
    "CleanPhrase": "[workplace, Christopher S Stewart]",
    "id": "3b865ce9d2c64aa2bf2eea2036094742",
    "Phrase": "[What;;, is;;, the workplace;;, of;;, Christopher S Stewart;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "workplace",
        "uri": "http://dbpedia.org/property/employer",
        "seq": "12,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was david Scherman trained ?",
    "SerialNumber": "2445",
    "Words": "[Where, was, david, Scherman, trained, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/David_Scherman\u003e \u003chttp://dbpedia.org/property/training\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "david Scherman",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/David_Scherman",
        "seq": "10,24"
      }
    ],
    "CleanPhrase": "[david Scherman, trained]",
    "id": "b52d907f0f3444b1b31e1eaadb9012e3",
    "Phrase": "[Where;;, was;;, david Scherman;;, trained;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "trained",
        "uri": "http://dbpedia.org/property/training",
        "seq": "25,32",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which units are garrisoned at Arlington County, Virginia?",
    "SerialNumber": "2446",
    "Words": "[Which, units, are, garrisoned, at, Arlington, County, ,, Virginia, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/garrison\u003e \u003chttp://dbpedia.org/resource/Arlington_County,_Virginia\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "Arlington County, Virginia",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Arlington_County,_Virginia",
        "seq": "30,56"
      }
    ],
    "CleanPhrase": "[units, garrisoned, Arlington County, Virginia]",
    "id": "b12bebc48be04ef39ad59257df7b1387",
    "Phrase": "[Which units;;, are garrisoned;;, at;;, Arlington County;;, Virginia;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "garrison",
        "uri": "http://dbpedia.org/ontology/garrison",
        "seq": "16,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the city of Duwamish River ?",
    "SerialNumber": "2448",
    "Words": "[Name, the, city, of, Duwamish, River, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Duwamish_River\u003e \u003chttp://dbpedia.org/ontology/city\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 7,
        "label": "Duwamish River",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Duwamish_River",
        "seq": "17,31"
      }
    ],
    "CleanPhrase": "[city, Duwamish River]",
    "id": "2ba39b2193c84d1eaafccd6a537a338e",
    "Phrase": "[the city;;, of;;, Duwamish River;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "city",
        "uri": "http://dbpedia.org/ontology/city",
        "seq": "9,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the administrative headquarters of Pulau Ujong ?",
    "SerialNumber": "2449",
    "Words": "[What, is, the, administrative, headquarters, of, Pulau, Ujong, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Pulau_Ujong\u003e \u003chttp://dbpedia.org/ontology/capital\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Pulau Ujong",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Pulau_Ujong",
        "seq": "43,54"
      }
    ],
    "CleanPhrase": "[administrative headquarters, Pulau Ujong]",
    "id": "a1526eadfd4c4d5d915dee4a3c8c1dd9",
    "Phrase": "[What;;, is;;, the administrative headquarters;;, of;;, Pulau Ujong;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "administrative headquarters",
        "uri": "http://dbpedia.org/ontology/capital",
        "seq": "12,39",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In which country is Sierra del Merendin?",
    "SerialNumber": "2450",
    "Words": "[In, which, country, is, Sierra, del, Merendin, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Sierra_del_Merendón\u003e \u003chttp://dbpedia.org/ontology/country\u003e ?uri  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Sierra del Merendin",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Sierra_del_Merendón",
        "seq": "20,39"
      }
    ],
    "CleanPhrase": "[country, Sierra del]",
    "id": "aaa9856758804b05ae5363e65a3bd2a7",
    "Phrase": "[In;;, which;;, country;;, is;;, Sierra del;;]",
    "predicate mapping": [
      {
        "score": 19,
        "label": "country",
        "uri": "http://dbpedia.org/ontology/country",
        "seq": "9,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the vice president of Jared Bernstein ?",
    "SerialNumber": "2453",
    "Words": "[Who, is, the, vice, president, of, Jared, Bernstein, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Jared_Bernstein\u003e \u003chttp://dbpedia.org/ontology/vicePresident\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Jared Bernstein",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Jared_Bernstein",
        "seq": "29,44"
      }
    ],
    "CleanPhrase": "[vice president, Jared Bernstein]",
    "id": "cc5743cc510f4eeb9cfa516a427b3d7c",
    "Phrase": "[Who;;, is;;, the vice president;;, of;;, Jared Bernstein;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "vice president",
        "uri": "http://dbpedia.org/ontology/vicePresident",
        "seq": "11,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who were the founders of Sea Gayle Music?",
    "SerialNumber": "2468",
    "Words": "[Who, were, the, founders, of, Sea, Gayle, Music, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Sea_Gayle_Music\u003e \u003chttp://dbpedia.org/property/founder\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Sea Gayle Music",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Sea_Gayle_Music",
        "seq": "25,40"
      }
    ],
    "CleanPhrase": "[founders, Sea Gayle Music]",
    "id": "ee5bcfdd212b4f548f1556e3f2d442a8",
    "Phrase": "[Who;;, were;;, the founders;;, of;;, Sea Gayle Music;;]",
    "predicate mapping": [
      {
        "score": 155,
        "label": "founders",
        "uri": "http://dbpedia.org/property/founder",
        "seq": "13,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the members of Skull Gang?",
    "SerialNumber": "2476",
    "Words": "[List, the, members, of, Skull, Gang, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Skull_Gang\u003e \u003chttp://dbpedia.org/ontology/bandMember\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Skull Gang",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Skull_Gang",
        "seq": "20,30"
      }
    ],
    "CleanPhrase": "[List, members, Skull Gang]",
    "id": "3893e0c34af5499f992e3e068e2b4394",
    "Phrase": "[List;;, the members;;, of;;, Skull Gang;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "members",
        "uri": "http://dbpedia.org/ontology/bandMember",
        "seq": "9,16",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the appointer of William Clark ?",
    "SerialNumber": "2480",
    "Words": "[Name, the, appointer, of, William, Clark, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/William_Clark\u003e \u003chttp://dbpedia.org/property/appointer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 100,
        "label": "William Clark",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/William_Clark",
        "seq": "22,35"
      }
    ],
    "CleanPhrase": "[appointer, William Clark]",
    "id": "bae14da898b343a4a0b319d75b992c2c",
    "Phrase": "[Name;;, the appointer;;, of;;, William Clark;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "appointer",
        "uri": "http://dbpedia.org/property/appointer",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Foxy Brown was associated with which band?",
    "SerialNumber": "2485",
    "Words": "[Foxy, Brown, was, associated, with, which, band, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/associatedBand\u003e \u003chttp://dbpedia.org/resource/Foxy_Brown_(rapper)\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 800,
        "label": "Foxy Brown",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Foxy_Brown_(rapper)",
        "seq": "0,10"
      }
    ],
    "CleanPhrase": "[Foxy Brown, band]",
    "id": "c838dc07c8ba4000a51426ddb603d08d",
    "Phrase": "[Foxy Brown;;, was associated;;, with;;, which;;, band;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "associated band",
        "uri": "http://dbpedia.org/ontology/associatedBand",
        "seq": "-1,14",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the team of Michael springer ?",
    "SerialNumber": "2487",
    "Words": "[Name, the, team, of, Michael, springer, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Michael_Springer\u003e \u003chttp://dbpedia.org/property/team\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 30,
        "label": "Michael springer",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Michael_Springer",
        "seq": "17,33"
      }
    ],
    "CleanPhrase": "[team, Michael springer]",
    "id": "7d875a1bbc994ad68254365c69d782e6",
    "Phrase": "[the team;;, of;;, Michael springer;;]",
    "predicate mapping": [
      {
        "score": 950,
        "label": "team",
        "uri": "http://dbpedia.org/property/team",
        "seq": "9,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the language of I Love How You Love Me ?",
    "SerialNumber": "2500",
    "Words": "[Name, the, language, of, I, Love, How, You, Love, Me, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/I_Love_How_You_Love_Me\u003e \u003chttp://dbpedia.org/property/language\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "I Love How You Love Me",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/I_Love_How_You_Love_Me",
        "seq": "21,43"
      }
    ],
    "CleanPhrase": "[language, Love, Love]",
    "id": "5d35202b7de94c2aa0a76efeb59ec38d",
    "Phrase": "[the language;;, of;;, I;;, Love;;, How;;, You;;, Love;;, Me;;, \\;;]",
    "predicate mapping": [
      {
        "score": 114,
        "label": "language",
        "uri": "http://dbpedia.org/property/language",
        "seq": "9,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the main ingredient of Pizza-ghetti ?",
    "SerialNumber": "2506",
    "Words": "[List, the, main, ingredient, of, Pizza, ghetti, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Pizza-ghetti\u003e \u003chttp://dbpedia.org/property/mainIngredient\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Pizza-ghetti",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Pizza-ghetti",
        "seq": "28,40"
      }
    ],
    "CleanPhrase": "[List, main ingredient, Pizza]",
    "id": "e4e94532543f4998a1a6bd210e7ba091",
    "Phrase": "[List;;, the main ingredient;;, of;;, Pizza;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "main ingredient",
        "uri": "http://dbpedia.org/property/mainIngredient",
        "seq": "9,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the governing body of Fort Monroe ?",
    "SerialNumber": "2507",
    "Words": "[What, is, the, governing, body, of, Fort, Monroe, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Fort_Monroe\u003e \u003chttp://dbpedia.org/property/governingBody\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Fort Monroe",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Fort_Monroe",
        "seq": "30,41"
      }
    ],
    "CleanPhrase": "[governing body, Fort Monroe]",
    "id": "e9551dcd2cd543ddb53914df27958278",
    "Phrase": "[What;;, is;;, the governing body;;, of;;, Fort Monroe;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "governing body",
        "uri": "http://dbpedia.org/property/governingBody",
        "seq": "12,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the stylistic origin of Wizard rock ?",
    "SerialNumber": "2510",
    "Words": "[What, is, the, stylistic, origin, of, Wizard, rock, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Wizard_rock\u003e \u003chttp://dbpedia.org/ontology/stylisticOrigin\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 36,
        "label": "Wizard rock",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Wizard_rock",
        "seq": "32,43"
      }
    ],
    "CleanPhrase": "[stylistic origin, Wizard rock]",
    "id": "d4dd2c6ad55449e2974b79ecbbf14f2c",
    "Phrase": "[What;;, is;;, the stylistic origin;;, of;;, Wizard rock;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "stylistic origin",
        "uri": "http://dbpedia.org/ontology/stylisticOrigin",
        "seq": "12,28",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the constituency of Santo Versace?",
    "SerialNumber": "2514",
    "Words": "[What, is, the, constituency, of, Santo, Versace, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Santo_Versace\u003e \u003chttp://dbpedia.org/property/constituency\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Santo Versace",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Santo_Versace",
        "seq": "28,41"
      }
    ],
    "CleanPhrase": "[constituency, Santo Versace]",
    "id": "9ad5c616c0cd4c3b93ceb93ad5150b11",
    "Phrase": "[What;;, is;;, the constituency;;, of;;, Santo Versace;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "constituency",
        "uri": "http://dbpedia.org/property/constituency",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the import people of Maryland Jockey Club ?",
    "SerialNumber": "2519",
    "Words": "[List, the, import, people, of, Maryland, Jockey, Club, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Maryland_Jockey_Club\u003e \u003chttp://dbpedia.org/property/keyPeople\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Maryland Jockey Club",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Maryland_Jockey_Club",
        "seq": "26,46"
      }
    ],
    "CleanPhrase": "[import people, Maryland Jockey Club]",
    "id": "d3075ce3184440eaaa8b1f8728a78053",
    "Phrase": "[the import people;;, of;;, Maryland Jockey Club;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "people",
        "uri": "http://dbpedia.org/property/keyPeople",
        "seq": "16,22",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "From what american football teams did Carlos Emmons play?",
    "SerialNumber": "2520",
    "Words": "[From, what, american, football, teams, did, Carlos, Emmons, play, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Carlos_Emmons_(American_football)\u003e \u003chttp://dbpedia.org/ontology/formerTeam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 17,
        "label": "Carlos Emmons",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Carlos_Emmons_(American_football)",
        "seq": "38,51"
      }
    ],
    "CleanPhrase": "[american football teams, Carlos Emmons, play]",
    "id": "8d0f6e4862cc499e909b0bc805585305",
    "Phrase": "[From;;, what american football teams;;, did;;, Carlos Emmons;;, play;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "teams",
        "uri": "http://dbpedia.org/ontology/formerTeam",
        "seq": "28,33",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the homeport of INS Viraat (R22) ?",
    "SerialNumber": "2527",
    "Words": "[What, is, the, homeport, of, INS, Viraat, \\, (, R22, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/INS_Viraat_(R22)\u003e \u003chttp://dbpedia.org/ontology/homeport\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "INS Viraat (R22)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/INS_Viraat_(R22)",
        "seq": "24,40"
      }
    ],
    "CleanPhrase": "[homeport, INS Viraat]",
    "id": "86be3981c7d04ea6aa8aec6949f00bc4",
    "Phrase": "[What;;, is;;, the homeport;;, of;;, INS Viraat;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "homeport",
        "uri": "http://dbpedia.org/ontology/homeport",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "For which band did Dave Hollister perform in the past?",
    "SerialNumber": "2541",
    "Words": "[For, which, band, did, Dave, Hollister, perform, in, the, past, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/pastMembers\u003e \u003chttp://dbpedia.org/resource/Dave_Hollister\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Dave Hollister",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Dave_Hollister",
        "seq": "19,33"
      }
    ],
    "CleanPhrase": "[band, Dave Hollister, perform, past]",
    "id": "1d30861aa35d4f9b8ece033370c4e15c",
    "Phrase": "[For;;, which band;;, did;;, Dave Hollister;;, perform;;, in;;, the past;;]",
    "predicate mapping": [
      {
        "score": 26,
        "label": "past",
        "uri": "http://dbpedia.org/property/pastMembers",
        "seq": "49,53",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the notable commanders of Army Group Oberrhein ?",
    "SerialNumber": "2551",
    "Words": "[Name, the, notable, commanders, of, Army, Group, Oberrhein, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)\u003e \u003chttp://dbpedia.org/property/notableCommanders\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Army Group Oberrhein",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)",
        "seq": "31,51"
      }
    ],
    "CleanPhrase": "[notable commanders, Army Group]",
    "id": "73d747e2e00649c48cc57a5f5c1594be",
    "Phrase": "[Name;;, the notable commanders;;, of;;, Army Group;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "notable commanders",
        "uri": "http://dbpedia.org/property/notableCommanders",
        "seq": "9,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the citizenship of Saima Chowdhury?",
    "SerialNumber": "2558",
    "Words": "[What, is, the, citizenship, of, Saima, Chowdhury, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Saima_Chowdhury\u003e \u003chttp://dbpedia.org/ontology/citizenship\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Saima Chowdhury",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Saima_Chowdhury",
        "seq": "27,42"
      }
    ],
    "CleanPhrase": "[citizenship, Saima Chowdhury]",
    "id": "c3949eda0f05470ca1d7effadac95392",
    "Phrase": "[What;;, is;;, the citizenship;;, of;;, Saima Chowdhury;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "citizenship",
        "uri": "http://dbpedia.org/ontology/citizenship",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the writer of The Sandman (Vertigo) ?",
    "SerialNumber": "2560",
    "Words": "[Who, is, the, writer, of, The, Sandman, \\, (, Vertigo, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Sandman_(Vertigo)\u003e \u003chttp://dbpedia.org/property/writers\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "The Sandman (Vertigo)",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/The_Sandman_(Vertigo)",
        "seq": "21,42"
      }
    ],
    "CleanPhrase": "[writer, Sandman, Vertigo]",
    "id": "c365bc2a449849d4999e1836c37e7e20",
    "Phrase": "[Who;;, is;;, the writer;;, of;;, The Sandman;;, Vertigo;;]",
    "predicate mapping": [
      {
        "score": 18,
        "label": "writer",
        "uri": "http://dbpedia.org/property/writers",
        "seq": "11,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the county of Saint Lucia national cricket team ?",
    "SerialNumber": "2574",
    "Words": "[What, is, the, county, of, Saint, Lucia, national, cricket, team, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Saint_Lucia_national_cricket_team\u003e \u003chttp://dbpedia.org/ontology/county\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Saint Lucia national cricket team",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Saint_Lucia_national_cricket_team",
        "seq": "22,55"
      }
    ],
    "CleanPhrase": "[county, Saint Lucia national cricket team]",
    "id": "f0b68ec815f04f8fbcfa6fb21869435b",
    "Phrase": "[What;;, is;;, the county;;, of;;, Saint Lucia national cricket team;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "nation",
        "uri": "http://dbpedia.org/ontology/county",
        "seq": "34,40",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the publisher of The Rolling Stone Album Guide ?",
    "SerialNumber": "2579",
    "Words": "[Who, is, the, publisher, of, The, Rolling, Stone, Album, Guide, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Rolling_Stone_Album_Guide\u003e \u003chttp://dbpedia.org/ontology/publisher\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "The Rolling Stone Album Guide",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/The_Rolling_Stone_Album_Guide",
        "seq": "24,53"
      }
    ],
    "CleanPhrase": "[publisher, Rolling Stone Album Guide]",
    "id": "738238521e7e47f79c03ba81880544ce",
    "Phrase": "[Who;;, is;;, the publisher;;, of;;, The Rolling Stone Album Guide;;]",
    "predicate mapping": [
      {
        "score": 15,
        "label": "publisher",
        "uri": "http://dbpedia.org/ontology/publisher",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the affiliations of Wikipedia Zero ?",
    "SerialNumber": "2593",
    "Words": "[List, the, affiliations, of, Wikipedia, Zero, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Wikipedia_Zero\u003e \u003chttp://dbpedia.org/property/affiliations\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Wikipedia Zero",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Wikipedia_Zero",
        "seq": "25,39"
      }
    ],
    "CleanPhrase": "[List, affiliations, Wikipedia]",
    "id": "605df0ddfb63418781e9a290359006e5",
    "Phrase": "[List;;, the affiliations;;, of;;, Wikipedia;;, Zero;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "affiliations",
        "uri": "http://dbpedia.org/property/affiliations",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What fictional character\u0027s species is American Pekin duck",
    "SerialNumber": "2600",
    "Words": "[What, fictional, character, \u0027s, species, is, American, Pekin, duck]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/species\u003e \u003chttp://dbpedia.org/resource/American_Pekin_duck\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "American Pekin duck",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/American_Pekin_duck",
        "seq": "38,57"
      }
    ],
    "CleanPhrase": "[fictional character, \u0027s species, American Pekin duck]",
    "id": "f1deb0821db74c36b4d4e3febc19fb74",
    "Phrase": "[What;;, fictional character;;, \u0027s species;;, is;;, American Pekin duck;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "species",
        "uri": "http://dbpedia.org/ontology/species",
        "seq": "27,34",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where did ed podolak go to high school",
    "SerialNumber": "2630",
    "Words": "[Where, did, ed, podolak, go, to, high, school]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ed_Podolak\u003e \u003chttp://dbpedia.org/ontology/highschool\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "ed podolak",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Ed_Podolak",
        "seq": "10,20"
      }
    ],
    "CleanPhrase": "[ed podolak, high school]",
    "id": "1088fd5c6f2948faa4ca297bf58ca3eb",
    "Phrase": "[Where;;, ed podolak;;, go;;, to;;, high school;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "school high",
        "uri": "http://dbpedia.org/ontology/highschool",
        "seq": "-1,10",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Of which countries  does Viveka Babajee have citizenship?",
    "SerialNumber": "2631",
    "Words": "[Of, which, countries, does, Viveka, Babajee, have, citizenship, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Viveka_Babajee\u003e \u003chttp://dbpedia.org/property/citizenship\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Viveka Babajee",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Viveka_Babajee",
        "seq": "25,39"
      }
    ],
    "CleanPhrase": "[countries, Viveka Babajee, citizenship]",
    "id": "2fe53e1ad1f348669a1f92c6c35fbb53",
    "Phrase": "[Of;;, which;;, countries;;, does;;, Viveka Babajee;;, have citizenship;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "citizenship",
        "uri": "http://dbpedia.org/property/citizenship",
        "seq": "45,56",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who are in the liang chow club?",
    "SerialNumber": "2639",
    "Words": "[Who, are, in, the, liang, chow, club, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/club\u003e \u003chttp://dbpedia.org/resource/Liang_Chow\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 8,
        "label": "liang chow",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Liang_Chow",
        "seq": "15,25"
      }
    ],
    "CleanPhrase": "[liang chow club]",
    "id": "42696b30838d4c98a18e0471fbda3572",
    "Phrase": "[Who;;, are;;, in;;, the liang chow club;;]",
    "predicate mapping": [
      {
        "score": 138,
        "label": "club",
        "uri": "http://dbpedia.org/property/club",
        "seq": "26,30",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the fields of Sylvain Lvi ?",
    "SerialNumber": "2648",
    "Words": "[List, the, fields, of, Sylvain, Lvi, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Sylvain_Lévi\u003e \u003chttp://dbpedia.org/property/fields\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Sylvain Lvi",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Sylvain_Lévi",
        "seq": "19,30"
      }
    ],
    "CleanPhrase": "[List, fields, Sylvain Lvi]",
    "id": "8f28ab18a0db420a9c7403df42c1e14f",
    "Phrase": "[List;;, the fields;;, of;;, Sylvain Lvi;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "fields",
        "uri": "http://dbpedia.org/property/fields",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "By whom is the broadcaster network Bounce TV founded?",
    "SerialNumber": "2683",
    "Words": "[By, whom, is, the, broadcaster, network, Bounce, TV, founded, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bounce_TV\u003e \u003chttp://dbpedia.org/ontology/foundedBy\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 20,
        "label": "Bounce TV",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Bounce_TV",
        "seq": "35,44"
      }
    ],
    "CleanPhrase": "[broadcaster network, Bounce, TV, founded]",
    "id": "1fe29c8d282c43c8ba68b809c317857b",
    "Phrase": "[By;;, whom;;, is;;, the broadcaster network;;, Bounce;;, TV;;, founded;;]",
    "predicate mapping": [
      {
        "score": 88,
        "label": "founded",
        "uri": "http://dbpedia.org/ontology/foundedBy",
        "seq": "45,52",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was William anthony trained ?",
    "SerialNumber": "2684",
    "Words": "[Where, was, William, anthony, trained, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/William_Anthony_(artist)\u003e \u003chttp://dbpedia.org/property/training\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 389,
        "label": "William anthony",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/William_Anthony_(artist)",
        "seq": "10,25"
      }
    ],
    "CleanPhrase": "[William anthony, trained]",
    "id": "12a72e0ad64a48f9bac59bc42cec75b8",
    "Phrase": "[Where;;, was;;, William anthony;;, trained;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "trained",
        "uri": "http://dbpedia.org/property/training",
        "seq": "26,33",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which airlines fly to Gimhae International Airport?",
    "SerialNumber": "2696",
    "Words": "[Which, airlines, fly, to, Gimhae, International, Airport, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/targetAirport\u003e \u003chttp://dbpedia.org/resource/Gimhae_International_Airport\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Gimhae International Airport",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Gimhae_International_Airport",
        "seq": "22,50"
      }
    ],
    "CleanPhrase": "[airlines, fly, Gimhae International Airport]",
    "id": "5b45dc70c91a4476b7bfee1e7fcd372f",
    "Phrase": "[Which;;, airlines;;, fly;;, to;;, Gimhae International Airport;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "airport",
        "uri": "http://dbpedia.org/ontology/targetAirport",
        "seq": "-1,6",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the alma mater of K. Terry Dornbush ?",
    "SerialNumber": "2701",
    "Words": "[What, is, the, alma, mater, of, K, Terry, Dornbush, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/K._Terry_Dornbush\u003e \u003chttp://dbpedia.org/property/almaMater\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "K. Terry Dornbush",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/K._Terry_Dornbush",
        "seq": "26,43"
      }
    ],
    "CleanPhrase": "[alma mater, K Terry Dornbush]",
    "id": "05f59024c9ca4d59bc0dd7c19ebdc90c",
    "Phrase": "[What;;, is;;, the alma mater;;, of;;, K Terry Dornbush;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "alma mater",
        "uri": "http://dbpedia.org/property/almaMater",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where did Meg McGuffin graduated ?",
    "SerialNumber": "2707",
    "Words": "[Where, did, Meg, McGuffin, graduated, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Meg_McGuffin\u003e \u003chttp://dbpedia.org/ontology/education\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Meg McGuffin",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Meg_McGuffin",
        "seq": "10,22"
      }
    ],
    "CleanPhrase": "[Meg McGuffin, graduated]",
    "id": "4c49002c50c740b69b9e310bb96d4c13",
    "Phrase": "[Where;;, Meg McGuffin;;, graduated;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "graduated",
        "uri": "http://dbpedia.org/ontology/education",
        "seq": "23,32",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the notableworks of Russell T Davies?",
    "SerialNumber": "2725",
    "Words": "[What, are, the, notableworks, of, Russell, T, Davies, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Russell_T_Davies\u003e \u003chttp://dbpedia.org/property/notableworks\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Russell T Davies",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Russell_T_Davies",
        "seq": "29,45"
      }
    ],
    "CleanPhrase": "[notableworks, Russell T Davies]",
    "id": "be9459f9eae64f38be49cf3573dc58c6",
    "Phrase": "[What;;, are;;, the notableworks;;, of;;, Russell T Davies;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "notableworks",
        "uri": "http://dbpedia.org/property/notableworks",
        "seq": "13,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the layout of Subaru Legacy (second generation) ?",
    "SerialNumber": "2733",
    "Words": "[What, is, the, layout, of, Subaru, Legacy, \\, (, second, generation, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Subaru_Legacy_(second_generation)\u003e \u003chttp://dbpedia.org/ontology/layout\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Subaru Legacy (second generation)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Subaru_Legacy_(second_generation)",
        "seq": "22,55"
      }
    ],
    "CleanPhrase": "[layout, Subaru Legacy, generation]",
    "id": "0ca28cd660a3450a9c67766dfe3ce288",
    "Phrase": "[What;;, is;;, the layout;;, of;;, Subaru Legacy;;, second generation;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "layout",
        "uri": "http://dbpedia.org/ontology/layout",
        "seq": "12,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the professions of Frederick Frelinghuysen (general) ?",
    "SerialNumber": "2741",
    "Words": "[What, are, the, professions, of, Frederick, Frelinghuysen, \\, (, general, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Frederick_Frelinghuysen_(general)\u003e \u003chttp://dbpedia.org/property/occupation\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Frederick Frelinghuysen (general)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Frederick_Frelinghuysen_(general)",
        "seq": "28,61"
      }
    ],
    "CleanPhrase": "[professions, Frederick Frelinghuysen]",
    "id": "8fcd17645d854494af5b6bbf9d11cc54",
    "Phrase": "[What;;, are;;, the professions;;, of;;, Frederick Frelinghuysen;;]",
    "predicate mapping": [
      {
        "score": 79,
        "label": "profession",
        "uri": "http://dbpedia.org/property/occupation",
        "seq": "13,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the ideology of Palang Dharma Party ?",
    "SerialNumber": "2747",
    "Words": "[What, is, the, ideology, of, Palang, Dharma, Party, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Palang_Dharma_Party\u003e \u003chttp://dbpedia.org/ontology/ideology\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Palang Dharma Party",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Palang_Dharma_Party",
        "seq": "24,43"
      }
    ],
    "CleanPhrase": "[ideology, Palang Dharma Party]",
    "id": "53b5c75907db4603977bf8ecd7de7eb9",
    "Phrase": "[What;;, is;;, the ideology;;, of;;, Palang Dharma Party;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "ideology",
        "uri": "http://dbpedia.org/ontology/ideology",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which company owns Sony bank ?",
    "SerialNumber": "2767",
    "Words": "[Which, company, owns, Sony, bank, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Sony_Bank\u003e \u003chttp://dbpedia.org/ontology/owningCompany\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "Sony bank",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Sony_Bank",
        "seq": "19,28"
      }
    ],
    "CleanPhrase": "[company, owns, Sony bank]",
    "id": "46ae4963123144699d4f6d11784e7bf9",
    "Phrase": "[Which company;;, owns;;, Sony bank;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "company",
        "uri": "http://dbpedia.org/ontology/owningCompany",
        "seq": "6,13",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the president of United World College of Costa Rica ?",
    "SerialNumber": "2769",
    "Words": "[Who, is, the, president, of, United, World, College, of, Costa, Rica, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/United_World_College_of_Costa_Rica\u003e \u003chttp://dbpedia.org/ontology/president\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "United World College of Costa Rica",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/United_World_College_of_Costa_Rica",
        "seq": "24,58"
      }
    ],
    "CleanPhrase": "[president, United World College, Costa Rica]",
    "id": "a883dc6214124d909e2ec7f7cbd9729c",
    "Phrase": "[Who;;, is;;, the president;;, of;;, United World College;;, of;;, Costa Rica;;]",
    "predicate mapping": [
      {
        "score": 26,
        "label": "president",
        "uri": "http://dbpedia.org/ontology/president",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What party was in majority of Fourth Legislative Assembly of Delhi?",
    "SerialNumber": "2770",
    "Words": "[What, party, was, in, majority, of, Fourth, Legislative, Assembly, of, Delhi, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Fourth_Legislative_Assembly_of_Delhi\u003e \u003chttp://dbpedia.org/property/party\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Fourth Legislative Assembly of Delhi",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Fourth_Legislative_Assembly_of_Delhi",
        "seq": "30,66"
      }
    ],
    "CleanPhrase": "[party, majority, Fourth Legislative Assembly, Delhi]",
    "id": "b091da8838fe41e0967e92add727c27d",
    "Phrase": "[What party;;, was;;, in;;, majority;;, of;;, Fourth Legislative Assembly;;, of;;, Delhi;;]",
    "predicate mapping": [
      {
        "score": 268,
        "label": "party",
        "uri": "http://dbpedia.org/property/party",
        "seq": "5,10",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the venue of Indy PopCon ?",
    "SerialNumber": "2771",
    "Words": "[What, is, the, venue, of, Indy, PopCon, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Indy_PopCon\u003e \u003chttp://dbpedia.org/property/venue\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Indy PopCon",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Indy_PopCon",
        "seq": "21,32"
      }
    ],
    "CleanPhrase": "[venue, Indy PopCon]",
    "id": "e0394ddbda3d42f994117e6e1ef5a131",
    "Phrase": "[What;;, is;;, the venue;;, of;;, Indy PopCon;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "venue",
        "uri": "http://dbpedia.org/property/venue",
        "seq": "12,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is the birthplace of Ferrel Harris ?",
    "SerialNumber": "2773",
    "Words": "[Where, is, the, birthplace, of, Ferrel, Harris, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ferrel_Harris\u003e \u003chttp://dbpedia.org/property/birthplace\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Ferrel Harris",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Ferrel_Harris",
        "seq": "27,40"
      }
    ],
    "CleanPhrase": "[birthplace, Ferrel Harris]",
    "id": "39562e37dcd645e8aa5d083018173381",
    "Phrase": "[Where;;, is;;, the birthplace;;, of;;, Ferrel Harris;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "birthplace",
        "uri": "http://dbpedia.org/property/birthplace",
        "seq": "13,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "who was the president under whom winston bryant served as a lieutenant?",
    "SerialNumber": "2774",
    "Words": "[who, was, the, president, under, whom, winston, bryant, served, as, a, lieutenant, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/lieutenant\u003e \u003chttp://dbpedia.org/resource/Winston_Bryant\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "winston bryant",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Winston_Bryant",
        "seq": "33,47"
      }
    ],
    "CleanPhrase": "[president, winston bryant, served, lieutenant]",
    "id": "0898b1c260b643f8be620cea3ccb7bbd",
    "Phrase": "[who;;, was;;, the president;;, under;;, whom;;, winston bryant;;, served;;, as;;, a lieutenant;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "lieutenant",
        "uri": "http://dbpedia.org/ontology/lieutenant",
        "seq": "60,70",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the nicknames given to the characters of The Wolves of the Mercy Falls?",
    "SerialNumber": "2784",
    "Words": "[What, are, the, nicknames, given, to, the, characters, of, The, Wolves, of, the, Mercy, Falls, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/List_of_The_Wolves_of_Mercy_Falls_characters\u003e \u003chttp://dbpedia.org/property/nickname\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "The Wolves of the Mercy Falls",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/List_of_The_Wolves_of_Mercy_Falls_characters",
        "seq": "74,79"
      }
    ],
    "CleanPhrase": "[nicknames, characters, Wolves, Mercy, Falls]",
    "id": "f3a26b9c5fb84504821433f49a62d31c",
    "Phrase": "[What;;, are;;, the nicknames;;, given;;, to;;, the characters;;, of;;, The Wolves;;, of;;, the Mercy;;, Falls;;]",
    "predicate mapping": [
      {
        "score": 52,
        "label": "nickname",
        "uri": "http://dbpedia.org/property/nickname",
        "seq": "13,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the colour of Red Marauder ?",
    "SerialNumber": "2786",
    "Words": "[What, is, the, colour, of, Red, Marauder, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Red_Marauder\u003e \u003chttp://dbpedia.org/ontology/colour\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 17,
        "label": "Red Marauder",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Red_Marauder",
        "seq": "22,34"
      }
    ],
    "CleanPhrase": "[colour, Red Marauder]",
    "id": "0ca53bf56bcb4b5f8a270a98c9c1c205",
    "Phrase": "[What;;, is;;, the colour;;, of;;, Red Marauder;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "colour",
        "uri": "http://dbpedia.org/ontology/colour",
        "seq": "12,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the territory of Tonkin Campaign ?",
    "SerialNumber": "2787",
    "Words": "[List, the, territory, of, Tonkin, Campaign, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Tonkin_Campaign\u003e \u003chttp://dbpedia.org/ontology/territory\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "Tonkin Campaign",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Tonkin_Campaign",
        "seq": "22,37"
      }
    ],
    "CleanPhrase": "[List, territory, Tonkin Campaign]",
    "id": "853f4ee49ca64a6394f25dbcb0998674",
    "Phrase": "[List;;, the territory;;, of;;, Tonkin Campaign;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "territory",
        "uri": "http://dbpedia.org/ontology/territory",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the route start of Capitol 400 ?",
    "SerialNumber": "2789",
    "Words": "[What, is, the, route, start, of, Capitol, 400, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Capitol_400\u003e \u003chttp://dbpedia.org/ontology/routeStart\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "Capitol 400",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Capitol_400",
        "seq": "27,38"
      }
    ],
    "CleanPhrase": "[route start, Capitol 400]",
    "id": "2578f19d55494d34b4c2cb71b5c72674",
    "Phrase": "[What;;, is;;, the route start;;, of;;, Capitol 400;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "route start",
        "uri": "http://dbpedia.org/ontology/routeStart",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In which races does Coneygree compete?",
    "SerialNumber": "2795",
    "Words": "[In, which, races, does, Coneygree, compete, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Coneygree\u003e \u003chttp://dbpedia.org/property/race\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Coneygree",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Coneygree",
        "seq": "20,29"
      }
    ],
    "CleanPhrase": "[races, Coneygree, compete]",
    "id": "ef89ea65fb1e475d87bfd0d41dc3df4b",
    "Phrase": "[In;;, which;;, races;;, does;;, Coneygree;;, compete;;]",
    "predicate mapping": [
      {
        "score": 397,
        "label": "race",
        "uri": "http://dbpedia.org/property/race",
        "seq": "9,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who was the designer of john madden Football \u002792 ?",
    "SerialNumber": "2796",
    "Words": "[Who, was, the, designer, of, john, madden, Football, \u002792, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/John_Madden_Football_\u002792\u003e \u003chttp://dbpedia.org/property/designer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "john madden Football \u002792",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/John_Madden_Football_\u002792",
        "seq": "24,48"
      }
    ],
    "CleanPhrase": "[designer, john madden Football]",
    "id": "0e401e47838c4dba988eda6a6838e8fe",
    "Phrase": "[Who;;, was;;, the designer;;, of;;, john madden Football;;]",
    "predicate mapping": [
      {
        "score": 55,
        "label": "designer",
        "uri": "http://dbpedia.org/property/designer",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who is on the board of Kate Spade and company?",
    "SerialNumber": "2806",
    "Words": "[Who, is, on, the, board, of, Kate, Spade, and, company, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/board\u003e \u003chttp://dbpedia.org/resource/Kate_Spade_\u0026_Company\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Kate Spade and company",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Kate_Spade_\u0026_Company",
        "seq": "23,33"
      }
    ],
    "CleanPhrase": "[board, Kate Spade company]",
    "id": "009195815bfe4b2da02ac6c1f612ce32",
    "Phrase": "[Who;;, is;;, on;;, the board;;, of;;, Kate Spade and company;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "board",
        "uri": "http://dbpedia.org/ontology/board",
        "seq": "14,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the club of Julie Hastings ?",
    "SerialNumber": "2809",
    "Words": "[Name, the, club, of, Julie, Hastings, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Julie_Hastings\u003e \u003chttp://dbpedia.org/ontology/club\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Julie Hastings",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Julie_Hastings",
        "seq": "17,31"
      }
    ],
    "CleanPhrase": "[club, Julie Hastings]",
    "id": "8d63fe63027947458a867a5902c1c0e0",
    "Phrase": "[the club;;, of;;, Julie Hastings;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "club",
        "uri": "http://dbpedia.org/ontology/club",
        "seq": "9,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who are the people who played for San Francisco 49ers?",
    "SerialNumber": "2813",
    "Words": "[Who, are, the, people, who, played, for, San, Francisco, 49ers, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/team\u003e \u003chttp://dbpedia.org/resource/San_Francisco_49ers\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "San Francisco 49ers",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/San_Francisco_49ers",
        "seq": "34,53"
      }
    ],
    "CleanPhrase": "[people, played, San Francisco 49ers]",
    "id": "3aab103841c348e199c10879fa2b70d5",
    "Phrase": "[Who;;, are;;, the people;;, who;;, played;;, for;;, San Francisco 49ers;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "played for",
        "uri": "http://dbpedia.org/ontology/team",
        "seq": "23,33",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the mouth mountain of Current River (Missouri) ?",
    "SerialNumber": "2826",
    "Words": "[What, is, the, mouth, mountain, of, Current, River, \\, (, Missouri, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Current_River_(Missouri)\u003e \u003chttp://dbpedia.org/ontology/mouthMountain\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 51,
        "label": "Current River",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Current_River_(Missouri)",
        "seq": "30,43"
      }
    ],
    "CleanPhrase": "[mouth mountain, Current River]",
    "id": "0e126d0d57d94ac59b74706ee95d40ef",
    "Phrase": "[What;;, is;;, the mouth mountain;;, of;;, Current River \\;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "mouth mountain",
        "uri": "http://dbpedia.org/ontology/mouthMountain",
        "seq": "12,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who all did their high school in Denbigh high School?",
    "SerialNumber": "2827",
    "Words": "[Who, all, did, their, high, school, in, Denbigh, high, School, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/highSchool\u003e \u003chttp://dbpedia.org/resource/Denbigh_High_School_(Newport_News,_Virginia)\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 32,
        "label": "Denbigh high School",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Denbigh_High_School_(Newport_News,_Virginia)",
        "seq": "33,52"
      }
    ],
    "CleanPhrase": "[high school, Denbigh high School]",
    "id": "dc0fc69c4c2449c4a1a5b337f699d91c",
    "Phrase": "[Who;;, all;;, did;;, their high school;;, in;;, Denbigh high School;;]",
    "predicate mapping": [
      {
        "score": 8,
        "label": "high school",
        "uri": "http://dbpedia.org/property/highSchool",
        "seq": "18,29",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the religious affiliation of Hong Kong Taoist Association Tang Hin Memorial Secondary School ?",
    "SerialNumber": "2834",
    "Words": "[What, is, the, religious, affiliation, of, Hong, Kong, Taoist, Association, Tang, Hin, Memorial, Secondary, School, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Hong_Kong_Taoist_Association_Tang_Hin_Memorial_Secondary_School\u003e \u003chttp://dbpedia.org/property/religiousAffiliation\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Hong Kong Taoist Association Tang Hin Memorial Secondary School",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Hong_Kong_Taoist_Association_Tang_Hin_Memorial_Secondary_School",
        "seq": "37,100"
      }
    ],
    "CleanPhrase": "[religious affiliation, Hong Kong Taoist Association Tang Hin Memorial Secondary School]",
    "id": "b846e29b2bb74db29610cdbbbc7b1740",
    "Phrase": "[What;;, is;;, the religious affiliation;;, of;;, Hong Kong Taoist Association Tang Hin Memorial Secondary School;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "religious affiliation",
        "uri": "http://dbpedia.org/property/religiousAffiliation",
        "seq": "12,33",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the debut team of Butch Metzger ?",
    "SerialNumber": "2844",
    "Words": "[Name, the, debut, team, of, Butch, Metzger, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Butch_Metzger\u003e \u003chttp://dbpedia.org/ontology/debutTeam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Butch Metzger",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Butch_Metzger",
        "seq": "23,36"
      }
    ],
    "CleanPhrase": "[debut team, Butch Metzger]",
    "id": "02172a58699f46568edf1ba7690b144d",
    "Phrase": "[the debut team;;, of;;, Butch Metzger;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "debut team",
        "uri": "http://dbpedia.org/ontology/debutTeam",
        "seq": "9,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the ground of Al-Rayan SC ?",
    "SerialNumber": "2853",
    "Words": "[Name, the, ground, of, Al, Rayan, SC, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Al-Rayan_SC\u003e \u003chttp://dbpedia.org/ontology/ground\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Al-Rayan SC",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Al-Rayan_SC",
        "seq": "19,30"
      }
    ],
    "CleanPhrase": "[ground, Al Rayan SC]",
    "id": "6119ae45be054c5b8898d10978eae65d",
    "Phrase": "[Name;;, the ground;;, of;;, Al Rayan SC;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "ground",
        "uri": "http://dbpedia.org/ontology/ground",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the serving railway line of Warwick railway station, Perth ?",
    "SerialNumber": "2871",
    "Words": "[What, is, the, serving, railway, line, of, Warwick, railway, station, ,, Perth, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Warwick_railway_station,_Perth\u003e \u003chttp://dbpedia.org/ontology/servingRailwayLine\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 26,
        "label": "Warwick railway station",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Warwick_railway_station,_Perth",
        "seq": "36,59"
      }
    ],
    "CleanPhrase": "[serving railway line, Warwick railway station, Perth]",
    "id": "2da5041948fd42298c8b577eb241332c",
    "Phrase": "[What;;, is;;, the serving railway line;;, of;;, Warwick railway station;;, Perth;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "serving railway line",
        "uri": "http://dbpedia.org/ontology/servingRailwayLine",
        "seq": "12,32",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the architect of Red House, London ?",
    "SerialNumber": "2875",
    "Words": "[Who, is, the, architect, of, Red, House, ,, London, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Red_House,_London\u003e \u003chttp://dbpedia.org/property/architect\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Red House, London",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Red_House,_London",
        "seq": "24,41"
      }
    ],
    "CleanPhrase": "[architect, Red House, London]",
    "id": "9464454dd9bc489387bee11d1e7cd022",
    "Phrase": "[Who;;, is;;, the architect;;, of;;, Red House;;, London;;]",
    "predicate mapping": [
      {
        "score": 45,
        "label": "architect",
        "uri": "http://dbpedia.org/property/architect",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which company manufactured Delta III?",
    "SerialNumber": "2878",
    "Words": "[Which, company, manufactured, Delta, III, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Delta_III\u003e \u003chttp://dbpedia.org/ontology/manufacturer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 10,
        "label": "Delta III",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Delta_III",
        "seq": "27,36"
      }
    ],
    "CleanPhrase": "[company, manufactured, Delta III]",
    "id": "73d555e5b42f4fc1bb26a2e517a69e83",
    "Phrase": "[Which company;;, manufactured;;, Delta III;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "manufactured",
        "uri": "http://dbpedia.org/ontology/manufacturer",
        "seq": "14,26",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the owner of Bloomberg L.P. ?",
    "SerialNumber": "2881",
    "Words": "[Who, is, the, owner, of, Bloomberg, L, P, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bloomberg_L.P.\u003e \u003chttp://dbpedia.org/property/owner\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Bloomberg L.P.",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Bloomberg_L.P.",
        "seq": "20,34"
      }
    ],
    "CleanPhrase": "[owner, Bloomberg L P]",
    "id": "dac617c2755144f597bf2de202f99777",
    "Phrase": "[Who;;, is;;, the owner;;, of;;, Bloomberg L P;;]",
    "predicate mapping": [
      {
        "score": 62,
        "label": "owner",
        "uri": "http://dbpedia.org/property/owner",
        "seq": "11,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the houses of Parliament of India ?",
    "SerialNumber": "2882",
    "Words": "[List, the, houses, of, Parliament, of, India, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Parliament_of_India\u003e \u003chttp://dbpedia.org/property/houses\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Parliament of India",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Parliament_of_India",
        "seq": "19,38"
      }
    ],
    "CleanPhrase": "[List, houses, Parliament, India]",
    "id": "02d3e516190a49e19e0908eb2fa74bfe",
    "Phrase": "[List;;, the houses;;, of;;, Parliament;;, of;;, India;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "houses",
        "uri": "http://dbpedia.org/property/houses",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the government type of Kumta ?",
    "SerialNumber": "2885",
    "Words": "[What, is, the, government, type, of, Kumta, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Kumta\u003e \u003chttp://dbpedia.org/property/governmentType\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Kumta",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Kumta",
        "seq": "31,36"
      }
    ],
    "CleanPhrase": "[government type, Kumta]",
    "id": "3379d870f89c4e929e3ac6e1ab1a1301",
    "Phrase": "[What;;, is;;, the government type;;, of;;, Kumta;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "government type",
        "uri": "http://dbpedia.org/property/governmentType",
        "seq": "12,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Name a famous relative of barry voight",
    "SerialNumber": "2903",
    "Words": "[Name, a, famous, relative, of, barry, voight]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/relative\u003e \u003chttp://dbpedia.org/resource/Barry_Voight\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "barry voight",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Barry_Voight",
        "seq": "26,38"
      }
    ],
    "CleanPhrase": "[famous relative, barry voight]",
    "id": "418aec71a0ad4d5594d5667a98921501",
    "Phrase": "[Name;;, a famous relative;;, of;;, barry voight;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "relative",
        "uri": "http://dbpedia.org/ontology/relative",
        "seq": "14,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the local authority of Buckhurst Hill County High School ?",
    "SerialNumber": "2910",
    "Words": "[Who, are, the, local, authority, of, Buckhurst, Hill, County, High, School, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Buckhurst_Hill_County_High_School\u003e \u003chttp://dbpedia.org/ontology/localAuthority\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Buckhurst Hill County High School",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Buckhurst_Hill_County_High_School",
        "seq": "31,64"
      }
    ],
    "CleanPhrase": "[local authority, Buckhurst Hill County High School]",
    "id": "5b08973e5ea1470fb3ce5ac04de8c3d6",
    "Phrase": "[Who;;, are;;, the local authority;;, of;;, Buckhurst Hill County High School;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "local authority",
        "uri": "http://dbpedia.org/ontology/localAuthority",
        "seq": "12,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which peak was first scaled by Krzysztof Wielicki?",
    "SerialNumber": "2911",
    "Words": "[Which, peak, was, first, scaled, by, Krzysztof, Wielicki, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/firstAscentPerson\u003e \u003chttp://dbpedia.org/resource/Krzysztof_Wielicki\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Krzysztof Wielicki",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Krzysztof_Wielicki",
        "seq": "31,49"
      }
    ],
    "CleanPhrase": "[peak, scaled, Krzysztof Wielicki]",
    "id": "ef0ebaaa120f45e8a4db2e06afd28d56",
    "Phrase": "[Which peak;;, was first scaled;;, by;;, Krzysztof Wielicki;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "first",
        "uri": "http://dbpedia.org/ontology/firstAscentPerson",
        "seq": "15,20",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the location country of Teperberg 1870 ?",
    "SerialNumber": "2915",
    "Words": "[What, is, the, location, country, of, Teperberg, 1870, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Teperberg_1870\u003e \u003chttp://dbpedia.org/property/locationCountry\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Teperberg 1870",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Teperberg_1870",
        "seq": "32,46"
      }
    ],
    "CleanPhrase": "[location country, Teperberg 1870]",
    "id": "16a0b3c7cec84354940128b8d6b555b0",
    "Phrase": "[What;;, is;;, the location country;;, of;;, Teperberg 1870;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "location country",
        "uri": "http://dbpedia.org/property/locationCountry",
        "seq": "12,28",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the rivers in the hudson highlands state parts?",
    "SerialNumber": "2916",
    "Words": "[Name, the, rivers, in, the, hudson, highlands, state, parts, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Hudson_Highlands_State_Park\u003e \u003chttp://dbpedia.org/property/river\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "hudson highlands state part",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Hudson_Highlands_State_Park",
        "seq": "23,50"
      }
    ],
    "CleanPhrase": "[rivers, hudson, highlands, state parts]",
    "id": "d241c139de3a4bc08b233c5dcd18e3b7",
    "Phrase": "[Name;;, the rivers;;, in;;, the hudson;;, highlands;;, state parts;;]",
    "predicate mapping": [
      {
        "score": 244,
        "label": "river",
        "uri": "http://dbpedia.org/property/river",
        "seq": "9,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the film director of Alice\u0027s Wonderland ?",
    "SerialNumber": "2940",
    "Words": "[Who, is, the, film, director, of, Alice, \u0027s, Wonderland, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Alice\u0027s_Wonderland\u003e \u003chttp://dbpedia.org/ontology/director\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 21,
        "label": "Alice\u0027s Wonderland",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Alice\u0027s_Wonderland",
        "seq": "28,46"
      }
    ],
    "CleanPhrase": "[film director, Alice, \u0027s Wonderland]",
    "id": "330a20b1b264498c86abcbd8608ab422",
    "Phrase": "[Who;;, is;;, the film director;;, of;;, Alice;;, \u0027s Wonderland;;]",
    "predicate mapping": [
      {
        "score": 82,
        "label": "film director",
        "uri": "http://dbpedia.org/ontology/director",
        "seq": "11,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the builder of Estadio Nacional de Costa Rica (2011) ?",
    "SerialNumber": "2941",
    "Words": "[Who, is, the, builder, of, Estadio, Nacional, de, Costa, Rica, \\, (, 2011, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Estadio_Nacional_de_Costa_Rica_(2011)\u003e \u003chttp://dbpedia.org/ontology/builder\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "Estadio Nacional de Costa Rica",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Estadio_Nacional_de_Costa_Rica_(2011)",
        "seq": "22,52"
      }
    ],
    "CleanPhrase": "[builder, Estadio Nacional de Costa Rica]",
    "id": "dbaca158d01d472baadbee2830f573d4",
    "Phrase": "[Who;;, is;;, the builder;;, of;;, Estadio Nacional de Costa Rica;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "builder",
        "uri": "http://dbpedia.org/ontology/builder",
        "seq": "11,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which river has its roots in Baikal Mountains?",
    "SerialNumber": "2946",
    "Words": "[Which, river, has, its, roots, in, Baikal, Mountains, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/sourceMountain\u003e \u003chttp://dbpedia.org/resource/Baikal_Mountains\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Baikal Mountains",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Baikal_Mountains",
        "seq": "29,45"
      }
    ],
    "CleanPhrase": "[river, roots, Baikal Mountains]",
    "id": "bfffa1add5f64e0285af31cba61b8114",
    "Phrase": "[Which river;;, has;;, its roots;;, in;;, Baikal Mountains;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "mountains",
        "uri": "http://dbpedia.org/ontology/sourceMountain",
        "seq": "-1,8",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the composer of Girl from the North Country ?",
    "SerialNumber": "2958",
    "Words": "[Who, is, the, composer, of, Girl, from, the, North, Country, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Girl_from_the_North_Country\u003e \u003chttp://dbpedia.org/ontology/composer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Girl from the North Country",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Girl_from_the_North_Country",
        "seq": "23,50"
      }
    ],
    "CleanPhrase": "[composer, Girl, North Country]",
    "id": "b82af01a7505419ea2a82b7f08f96650",
    "Phrase": "[Who;;, is;;, the composer;;, of;;, Girl;;, from;;, the North Country;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "composer",
        "uri": "http://dbpedia.org/ontology/composer",
        "seq": "11,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "who owns the ship Victoria?",
    "SerialNumber": "2959",
    "Words": "[who, owns, the, ship, Victoria, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Victoria_(ship)\u003e \u003chttp://dbpedia.org/ontology/owner\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Victoria",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Victoria_(ship)",
        "seq": "18,26"
      }
    ],
    "CleanPhrase": "[owns, ship Victoria]",
    "id": "ba2effd8c834439e8eaf7dbfdf385fa5",
    "Phrase": "[who;;, owns;;, the ship Victoria;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "owns",
        "uri": "http://dbpedia.org/ontology/owner",
        "seq": "4,8",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "For which teams did Ryan Powell play for?",
    "SerialNumber": "2968",
    "Words": "[For, which, teams, did, Ryan, Powell, play, for, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ryan_Powell_(lacrosse)\u003e \u003chttp://dbpedia.org/ontology/team\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 24,
        "label": "Ryan Powell",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Ryan_Powell_(lacrosse)",
        "seq": "20,31"
      }
    ],
    "CleanPhrase": "[teams, Ryan Powell play]",
    "id": "a08a81d7bc32418fa69f9ee7611d119c",
    "Phrase": "[For;;, which;;, teams;;, did;;, Ryan Powell play;;, for;;, \\;;]",
    "predicate mapping": [
      {
        "score": 15,
        "label": "team",
        "uri": "http://dbpedia.org/ontology/team",
        "seq": "10,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the mascot of Celal Bayar University ?",
    "SerialNumber": "2972",
    "Words": "[What, is, the, mascot, of, Celal, Bayar, University, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Celal_Bayar_University\u003e \u003chttp://dbpedia.org/property/mascot\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Celal Bayar University",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Celal_Bayar_University",
        "seq": "22,44"
      }
    ],
    "CleanPhrase": "[mascot, Celal Bayar University]",
    "id": "05514a08a6864dee82dff5c0b774d1cb",
    "Phrase": "[What;;, is;;, the mascot;;, of;;, Celal Bayar University;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "mascot",
        "uri": "http://dbpedia.org/property/mascot",
        "seq": "12,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the founders of Iskra ?",
    "SerialNumber": "2978",
    "Words": "[Who, are, the, founders, of, Iskra, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Iskra\u003e \u003chttp://dbpedia.org/ontology/foundedBy\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 7,
        "label": "Iskra",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Iskra",
        "seq": "24,29"
      }
    ],
    "CleanPhrase": "[founders, Iskra]",
    "id": "e670b9053f4948428c08a9c6aa03f7e8",
    "Phrase": "[Who;;, are;;, the founders;;, of;;, Iskra;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "founders",
        "uri": "http://dbpedia.org/ontology/foundedBy",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What sports are played at Vishwajyot High School?",
    "SerialNumber": "2981",
    "Words": "[What, sports, are, played, at, Vishwajyot, High, School, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Vishwajyot_High_School\u003e \u003chttp://dbpedia.org/ontology/sport\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Vishwajyot High School",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Vishwajyot_High_School",
        "seq": "26,48"
      }
    ],
    "CleanPhrase": "[sports, played, Vishwajyot High School]",
    "id": "be173cd13f024163b5777d971acdbe58",
    "Phrase": "[What sports;;, are played;;, at;;, Vishwajyot High School;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "sport",
        "uri": "http://dbpedia.org/ontology/sport",
        "seq": "5,10",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are in the board of Jimmy Wales ?",
    "SerialNumber": "2985",
    "Words": "[Who, are, in, the, board, of, Jimmy, Wales, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Jimmy_Wales\u003e \u003chttp://dbpedia.org/ontology/board\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Jimmy Wales",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Jimmy_Wales",
        "seq": "24,35"
      }
    ],
    "CleanPhrase": "[board, Jimmy Wales]",
    "id": "7804405f8cd849a4acb60cf3df9a287c",
    "Phrase": "[Who;;, are;;, in;;, the board;;, of;;, Jimmy Wales;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "board",
        "uri": "http://dbpedia.org/ontology/board",
        "seq": "15,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the tenants of Mercedes-Benz Superdome?",
    "SerialNumber": "2989",
    "Words": "[What, are, the, tenants, of, Mercedes, Benz, Superdome, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Mercedes-Benz_Superdome\u003e \u003chttp://dbpedia.org/ontology/tenant\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Mercedes-Benz Superdome",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Mercedes-Benz_Superdome",
        "seq": "24,47"
      }
    ],
    "CleanPhrase": "[tenants, Mercedes Benz Superdome]",
    "id": "a789b3608b9a427f9908d49aed80ea50",
    "Phrase": "[What;;, are;;, the tenants;;, of;;, Mercedes Benz Superdome;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "tenant",
        "uri": "http://dbpedia.org/ontology/tenant",
        "seq": "13,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which state does Jerome B. Chaffee belong ?",
    "SerialNumber": "2994",
    "Words": "[Which, state, does, Jerome, B, Chaffee, belong, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Jerome_B._Chaffee\u003e \u003chttp://dbpedia.org/property/state\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Jerome B. Chaffee",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Jerome_B._Chaffee",
        "seq": "17,34"
      }
    ],
    "CleanPhrase": "[state, Jerome B Chaffee, belong]",
    "id": "f848f4e81e654fe4b04988ba7a828da0",
    "Phrase": "[Which;;, state;;, does;;, Jerome B Chaffee;;, belong;;]",
    "predicate mapping": [
      {
        "score": 283,
        "label": "state",
        "uri": "http://dbpedia.org/property/state",
        "seq": "6,11",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the writer of Neverwhere (radio play) ?",
    "SerialNumber": "2997",
    "Words": "[Who, is, the, writer, of, Neverwhere, \\, (, radio, play, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Neverwhere_(radio_play)\u003e \u003chttp://dbpedia.org/ontology/writer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Neverwhere (radio play)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Neverwhere_(radio_play)",
        "seq": "21,44"
      }
    ],
    "CleanPhrase": "[writer, Neverwhere, radio, play]",
    "id": "ec1040a967d34f71a0082b96d8a3a4a1",
    "Phrase": "[Who;;, is;;, the writer;;, of;;, Neverwhere;;, radio;;, play;;]",
    "predicate mapping": [
      {
        "score": 13,
        "label": "writer",
        "uri": "http://dbpedia.org/ontology/writer",
        "seq": "11,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the key people of FWD.us?",
    "SerialNumber": "3004",
    "Words": "[Who, are, the, key, people, of, FWD, us, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/FWD.us\u003e \u003chttp://dbpedia.org/property/keyPeople\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "FWD.us",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/FWD.us",
        "seq": "26,32"
      }
    ],
    "CleanPhrase": "[key people, FWD]",
    "id": "50201a37de8648bb9cce96d0b4df557a",
    "Phrase": "[Who;;, are;;, the key people;;, of;;, FWD;;, us;;, \\;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "key people",
        "uri": "http://dbpedia.org/property/keyPeople",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who is married to Gerard Piqu?",
    "SerialNumber": "3020",
    "Words": "[Who, is, married, to, Gerard, Piqu, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/partner\u003e \u003chttp://dbpedia.org/resource/Gerard_Piqué\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Gerard Piqu?",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Gerard_Piqué",
        "seq": "18,30"
      }
    ],
    "CleanPhrase": "[married, Gerard Piqu]",
    "id": "543d46f942c04924bcee5a4c54543c6b",
    "Phrase": "[Who;;, is married;;, to;;, Gerard Piqu;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "married to",
        "uri": "http://dbpedia.org/property/partner",
        "seq": "7,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List down the cinematographers of Mickey\u0027s Mellerdrammer?",
    "SerialNumber": "3033",
    "Words": "[List, down, the, cinematographers, of, Mickey, \u0027s, Mellerdrammer, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Mickey\u0027s_Mellerdrammer\u003e \u003chttp://dbpedia.org/property/cinematography\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Mickey\u0027s Mellerdrammer",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Mickey\u0027s_Mellerdrammer",
        "seq": "34,56"
      }
    ],
    "CleanPhrase": "[List, cinematographers, Mickey, \u0027s]",
    "id": "60f077d104bb416caff97689ba8b4506",
    "Phrase": "[List;;, down;;, the cinematographers;;, of;;, Mickey;;, \u0027s;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "cinematographer",
        "uri": "http://dbpedia.org/property/cinematography",
        "seq": "14,29",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What awards did Jos Rivera (playwright) win?",
    "SerialNumber": "3040",
    "Words": "[What, awards, did, Jos, Rivera, \\, (, playwright, \\, ), win, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/José_Rivera_(playwright)\u003e \u003chttp://dbpedia.org/property/awards\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Jos Rivera (playwright)",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/José_Rivera_(playwright)",
        "seq": "16,26"
      }
    ],
    "CleanPhrase": "[awards, Jos Rivera, playwright, win]",
    "id": "b063dd30941243b2836623934589c121",
    "Phrase": "[What awards;;, did;;, Jos Rivera;;, playwright;;, win;;]",
    "predicate mapping": [
      {
        "score": 7,
        "label": "awards",
        "uri": "http://dbpedia.org/property/awards",
        "seq": "5,11",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who discovered Callisto ?",
    "SerialNumber": "3041",
    "Words": "[Who, discovered, Callisto, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Callisto_(moon)\u003e \u003chttp://dbpedia.org/ontology/discoverer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 15,
        "label": "Callisto",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Callisto_(moon)",
        "seq": "15,23"
      }
    ],
    "CleanPhrase": "[discovered, Callisto]",
    "id": "1ec578b785684d0cbde64684ee3c7fbf",
    "Phrase": "[Who;;, discovered;;, Callisto;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "discovered",
        "uri": "http://dbpedia.org/ontology/discoverer",
        "seq": "4,14",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the producer of  Frampton\u0027s Camel ?",
    "SerialNumber": "3055",
    "Words": "[Who, is, the, producer, of, Frampton, \u0027s, Camel, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Frampton\u0027s_Camel\u003e \u003chttp://dbpedia.org/property/producer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Frampton\u0027s Camel",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Frampton\u0027s_Camel",
        "seq": "24,40"
      }
    ],
    "CleanPhrase": "[producer, Frampton, \u0027s Camel]",
    "id": "66e01d57a2df4c9f85521c5217cd6e8b",
    "Phrase": "[Who;;, is;;, the producer;;, of;;, Frampton;;, \u0027s Camel;;]",
    "predicate mapping": [
      {
        "score": 135,
        "label": "producer",
        "uri": "http://dbpedia.org/property/producer",
        "seq": "11,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Give me someone on the board of trinity house?",
    "SerialNumber": "3061",
    "Words": "[Give, me, someone, on, the, board, of, trinity, house, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/board\u003e \u003chttp://dbpedia.org/resource/Trinity_House\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 34,
        "label": "trinity house",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Trinity_House",
        "seq": "32,45"
      }
    ],
    "CleanPhrase": "[Give, board, trinity house]",
    "id": "dcf0ebac4929414587aae36086a4e6e1",
    "Phrase": "[Give;;, me;;, someone;;, on;;, the board;;, of;;, trinity house;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "board",
        "uri": "http://dbpedia.org/ontology/board",
        "seq": "23,28",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the hometown of John Speraw ?",
    "SerialNumber": "3084",
    "Words": "[What, is, the, hometown, of, John, Speraw, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/John_Speraw\u003e \u003chttp://dbpedia.org/property/hometown\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "John Speraw",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/John_Speraw",
        "seq": "24,35"
      }
    ],
    "CleanPhrase": "[hometown, John Speraw]",
    "id": "86f65bd1385144dfb07dd940f6dc77de",
    "Phrase": "[What;;, is;;, the hometown;;, of;;, John Speraw;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "hometown",
        "uri": "http://dbpedia.org/property/hometown",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the affiliation of Vanderbilt University Medical Center ?",
    "SerialNumber": "3085",
    "Words": "[What, is, the, affiliation, of, Vanderbilt, University, Medical, Center, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Vanderbilt_University_Medical_Center\u003e \u003chttp://dbpedia.org/property/affiliation\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Vanderbilt University Medical Center",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Vanderbilt_University_Medical_Center",
        "seq": "27,63"
      }
    ],
    "CleanPhrase": "[affiliation, Vanderbilt University Medical Center]",
    "id": "53ffec1f77474312b866a1ef550836ec",
    "Phrase": "[What;;, is;;, the affiliation;;, of;;, Vanderbilt University Medical Center;;]",
    "predicate mapping": [
      {
        "score": 88,
        "label": "affiliation",
        "uri": "http://dbpedia.org/property/affiliation",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the main interests of Timothy Morton?",
    "SerialNumber": "3090",
    "Words": "[What, are, the, main, interests, of, Timothy, Morton, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Timothy_Morton\u003e \u003chttp://dbpedia.org/property/mainInterests\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Timothy Morton",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Timothy_Morton",
        "seq": "31,45"
      }
    ],
    "CleanPhrase": "[main interests, Timothy Morton]",
    "id": "3e2e7e2477ca4d47a63eae5961eb232f",
    "Phrase": "[What;;, are;;, the main interests;;, of;;, Timothy Morton;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "main interests",
        "uri": "http://dbpedia.org/property/mainInterests",
        "seq": "13,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was Al-Muzaffar Umar buried ?",
    "SerialNumber": "3109",
    "Words": "[Where, was, Al, Muzaffar, Umar, buried, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Al-Muzaffar_Umar\u003e \u003chttp://dbpedia.org/property/placeOfBurial\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Al-Muzaffar Umar",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Al-Muzaffar_Umar",
        "seq": "10,26"
      }
    ],
    "CleanPhrase": "[Al Muzaffar Umar, buried]",
    "id": "e83b9ec4abef418585e8a76f2dae15f4",
    "Phrase": "[Where;;, was;;, Al Muzaffar Umar;;, buried;;]",
    "predicate mapping": [
      {
        "score": 17,
        "label": "buried",
        "uri": "http://dbpedia.org/property/placeOfBurial",
        "seq": "27,33",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "where did soccer bowl take place in 76?",
    "SerialNumber": "3114",
    "Words": "[where, did, soccer, bowl, take, place, in, 76, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Soccer_Bowl_\u002776\u003e \u003chttp://dbpedia.org/ontology/city\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 88,
        "label": "soccer bowl",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Soccer_Bowl_\u002776",
        "seq": "36,38"
      }
    ],
    "CleanPhrase": "[soccer bowl, place, 76]",
    "id": "5bc7320186b842359a554f9fe14298dd",
    "Phrase": "[where;;, soccer bowl;;, take;;, place;;, in;;, 76;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "in",
        "uri": "http://dbpedia.org/ontology/city",
        "seq": "33,35",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List all the notable works of  Russell T Davies?",
    "SerialNumber": "3125",
    "Words": "[List, all, the, notable, works, of, Russell, T, Davies, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Russell_T_Davies\u003e \u003chttp://dbpedia.org/ontology/notableWork\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Russell T Davies",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Russell_T_Davies",
        "seq": "31,47"
      }
    ],
    "CleanPhrase": "[List, notable works, Russell T Davies]",
    "id": "2380fcd83c494a80927f6825ba436c94",
    "Phrase": "[List;;, all the notable works;;, of;;, Russell T Davies;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "notable work",
        "uri": "http://dbpedia.org/ontology/notableWork",
        "seq": "13,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Spanish harlem incident was composed by whom ?",
    "SerialNumber": "3130",
    "Words": "[Spanish, harlem, incident, was, composed, by, whom, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Spanish_Harlem_Incident\u003e \u003chttp://dbpedia.org/ontology/composer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Spanish harlem incident",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Spanish_Harlem_Incident",
        "seq": "0,23"
      }
    ],
    "CleanPhrase": "[Spanish harlem incident, composed]",
    "id": "daa582dfaf1a4472bddfa0b0a4deb1e5",
    "Phrase": "[Spanish harlem incident;;, was composed;;, by;;]",
    "predicate mapping": [
      {
        "score": 10,
        "label": "composed by",
        "uri": "http://dbpedia.org/ontology/composer",
        "seq": "28,39",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which country does Peter Blay owe his allegiance?",
    "SerialNumber": "3137",
    "Words": "[To, which, country, does, Peter, Blay, owe, his, allegiance, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Peter_Blay\u003e \u003chttp://dbpedia.org/property/allegiance\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Peter Blay",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Peter_Blay",
        "seq": "22,32"
      }
    ],
    "CleanPhrase": "[country, Peter Blay, owe, allegiance]",
    "id": "c43db2cba5e24a05bdfa5d77aa3667ed",
    "Phrase": "[To;;, which;;, country;;, does;;, Peter Blay;;, owe;;, his allegiance;;]",
    "predicate mapping": [
      {
        "score": 18,
        "label": "allegiance",
        "uri": "http://dbpedia.org/property/allegiance",
        "seq": "41,51",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which citys mayor is anne hidalgo?",
    "SerialNumber": "3138",
    "Words": "[Which, citys, mayor, is, anne, hidalgo, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/mayor\u003e \u003chttp://dbpedia.org/resource/Anne_Hidalgo\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 39,
        "label": "anne hidalgo",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Anne_Hidalgo",
        "seq": "21,33"
      }
    ],
    "CleanPhrase": "[citys, mayor, anne hidalgo]",
    "id": "ce5857e30c24478bacad831b90eb559c",
    "Phrase": "[Which;;, citys;;, mayor;;, is;;, anne hidalgo;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "mayor",
        "uri": "http://dbpedia.org/ontology/mayor",
        "seq": "12,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the division of Serbia national American football team ?",
    "SerialNumber": "3140",
    "Words": "[What, is, the, division, of, Serbia, national, American, football, team, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Serbia_national_American_football_team\u003e \u003chttp://dbpedia.org/ontology/division\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Serbia national American football team",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Serbia_national_American_football_team",
        "seq": "24,62"
      }
    ],
    "CleanPhrase": "[division, Serbia national American football team]",
    "id": "90065788c32f4906aa5614759fb3917e",
    "Phrase": "[What;;, is;;, the division;;, of;;, Serbia national American football team;;]",
    "predicate mapping": [
      {
        "score": 8,
        "label": "division",
        "uri": "http://dbpedia.org/ontology/division",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the biological parents of Dannielynn Birkhead?",
    "SerialNumber": "3146",
    "Words": "[Who, are, the, biological, parents, of, Dannielynn, Birkhead, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Dannielynn_Birkhead\u003e \u003chttp://dbpedia.org/ontology/parent\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Dannielynn",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Dannielynn_Birkhead",
        "seq": "34,44"
      }
    ],
    "CleanPhrase": "[biological parents, Dannielynn, Birkhead]",
    "id": "320124cd584843c6908f36b25c0bb181",
    "Phrase": "[Who;;, are;;, the biological parents;;, of;;, Dannielynn;;, Birkhead;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "parent",
        "uri": "http://dbpedia.org/ontology/parent",
        "seq": "23,29",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the producers of Marie Sisters?",
    "SerialNumber": "3148",
    "Words": "[Who, are, the, producers, of, Marie, Sisters, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Marie_Sisters\u003e \u003chttp://dbpedia.org/property/producer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 16,
        "label": "Marie Sisters",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Marie_Sisters",
        "seq": "25,38"
      }
    ],
    "CleanPhrase": "[producers, Marie Sisters]",
    "id": "f928abbb8f11455eb05de0b4ec4c82d0",
    "Phrase": "[Who;;, are;;, the producers;;, of;;, Marie Sisters;;]",
    "predicate mapping": [
      {
        "score": 135,
        "label": "producer",
        "uri": "http://dbpedia.org/property/producer",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the sovereign state of Wallington railway station ?",
    "SerialNumber": "3154",
    "Words": "[Name, the, sovereign, state, of, Wallington, railway, station, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Wallington_railway_station\u003e \u003chttp://dbpedia.org/ontology/country\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Wallington railway station",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Wallington_railway_station",
        "seq": "28,54"
      }
    ],
    "CleanPhrase": "[sovereign state, Wallington railway station]",
    "id": "09b5ed743c6440648ec7e00b30bbeb60",
    "Phrase": "[Name;;, the sovereign state;;, of;;, Wallington railway station;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "sovereign state",
        "uri": "http://dbpedia.org/ontology/country",
        "seq": "9,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who all have been canonized by Pope Paul VI",
    "SerialNumber": "3160",
    "Words": "[Who, all, have, been, canonized, by, Pope, Paul, VI]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/canonizedBy\u003e \u003chttp://dbpedia.org/resource/Pope_Paul_VI\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Paul VI",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Pope_Paul_VI",
        "seq": "36,43"
      }
    ],
    "CleanPhrase": "[canonized, Pope Paul VI]",
    "id": "86de244495ad4682bba72845f387f090",
    "Phrase": "[Who;;, all;;, have been canonized;;, by;;, Pope Paul VI;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "canonized by",
        "uri": "http://dbpedia.org/property/canonizedBy",
        "seq": "18,30",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which family does korean fox belongs to ?",
    "SerialNumber": "3177",
    "Words": "[To, which, family, does, korean, fox, belongs, to, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Korean_fox\u003e \u003chttp://dbpedia.org/ontology/family\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 10,
        "label": "korean fox",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Korean_fox",
        "seq": "21,31"
      }
    ],
    "CleanPhrase": "[family, korean fox, belongs]",
    "id": "26da9117036746eaa136ee24f55908f5",
    "Phrase": "[To;;, which family;;, does;;, korean fox;;, belongs to \\;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "family",
        "uri": "http://dbpedia.org/ontology/family",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the route end of NorthSouth Transport Corridor ?",
    "SerialNumber": "3180",
    "Words": "[What, is, the, route, end, of, NorthSouth, Transport, Corridor, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/North–South_Transport_Corridor\u003e \u003chttp://dbpedia.org/ontology/routeEnd\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 52,
        "label": "NorthSouth Transport Corridor",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/North–South_Transport_Corridor",
        "seq": "25,54"
      }
    ],
    "CleanPhrase": "[route end, NorthSouth Transport Corridor]",
    "id": "aaa9ab64e1524e34b7451782aca41736",
    "Phrase": "[What;;, is;;, the route end;;, of;;, NorthSouth Transport Corridor;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "route end",
        "uri": "http://dbpedia.org/ontology/routeEnd",
        "seq": "12,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What are the musical performances whose label is Celluloid Records?",
    "SerialNumber": "3184",
    "Words": "[What, are, the, musical, performances, whose, label, is, Celluloid, Records, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/label\u003e \u003chttp://dbpedia.org/resource/Celluloid_Records\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Celluloid Records",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Celluloid_Records",
        "seq": "49,66"
      }
    ],
    "CleanPhrase": "[musical performances, label, Celluloid Records]",
    "id": "3816603ac6fd4377a4f32806c3821255",
    "Phrase": "[What;;, are;;, the musical performances;;, whose label;;, is;;, Celluloid Records;;]",
    "predicate mapping": [
      {
        "score": 346,
        "label": "label",
        "uri": "http://dbpedia.org/property/label",
        "seq": "40,45",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the academic discipline of Journal of Cerebral Blood Flow \u0026 Metabolism ?",
    "SerialNumber": "3199",
    "Words": "[What, is, the, academic, discipline, of, Journal, of, Cerebral, Blood, Flow, Metabolism, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Journal_of_Cerebral_Blood_Flow_\u0026_Metabolism\u003e \u003chttp://dbpedia.org/ontology/academicDiscipline\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Journal of Cerebral Blood Flow \u0026 Metabolism",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Journal_of_Cerebral_Blood_Flow_\u0026_Metabolism",
        "seq": "35,78"
      }
    ],
    "CleanPhrase": "[academic discipline, Journal, Cerebral Blood Flow Metabolism]",
    "id": "ced7ff32a8304b9f8c8ae77c3386bdc0",
    "Phrase": "[What;;, is;;, the academic discipline;;, of;;, Journal;;, of;;, Cerebral Blood Flow Metabolism;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "academic discipline",
        "uri": "http://dbpedia.org/ontology/academicDiscipline",
        "seq": "12,31",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What are some neighboring cities of cologny?",
    "SerialNumber": "3217",
    "Words": "[What, are, some, neighboring, cities, of, cologny, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/neighboringMunicipalities\u003e \u003chttp://dbpedia.org/resource/Cologny\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 28,
        "label": "cologny",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Cologny",
        "seq": "36,43"
      }
    ],
    "CleanPhrase": "[neighboring cities, cologny]",
    "id": "cab0c79d0f10458ca8a01d1facfdbced",
    "Phrase": "[What;;, are;;, some neighboring cities;;, of;;, cologny;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "neighboring",
        "uri": "http://dbpedia.org/property/neighboringMunicipalities",
        "seq": "14,25",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the chancellor of Falmouth University ?",
    "SerialNumber": "3235",
    "Words": "[Who, is, the, chancellor, of, Falmouth, University, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Falmouth_University\u003e \u003chttp://dbpedia.org/property/chancellor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Falmouth University",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Falmouth_University",
        "seq": "25,44"
      }
    ],
    "CleanPhrase": "[chancellor, Falmouth]",
    "id": "4c46eefb71c64a1ba553158813943097",
    "Phrase": "[Who;;, is;;, the chancellor;;, of;;, Falmouth;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "chancellor",
        "uri": "http://dbpedia.org/property/chancellor",
        "seq": "11,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the binomial authority of Menetries\u0027s warbler?",
    "SerialNumber": "3237",
    "Words": "[What, are, the, binomial, authority, of, Menetries, \u0027s, warbler, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Menetries\u0027s_warbler\u003e \u003chttp://dbpedia.org/ontology/binomialAuthority\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Menetries\u0027s warbler",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Menetries\u0027s_warbler",
        "seq": "35,54"
      }
    ],
    "CleanPhrase": "[binomial authority, Menetries, \u0027s]",
    "id": "4f3bdd919e6d4880be68979047b407dc",
    "Phrase": "[What;;, are;;, the binomial authority;;, of;;, Menetries;;, \u0027s;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "binomial authority",
        "uri": "http://dbpedia.org/ontology/binomialAuthority",
        "seq": "13,31",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List all the houses of United States Congress ?",
    "SerialNumber": "3244",
    "Words": "[List, all, the, houses, of, United, States, Congress, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/United_States_Congress\u003e \u003chttp://dbpedia.org/property/houses\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "United States Congress",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/United_States_Congress",
        "seq": "23,45"
      }
    ],
    "CleanPhrase": "[List, houses, United States, Congress]",
    "id": "b03177d39e1c4d88be790e3782f841b9",
    "Phrase": "[List;;, all the houses;;, of;;, United States;;, Congress;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "houses",
        "uri": "http://dbpedia.org/property/houses",
        "seq": "13,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which university provides license for WRVU ?",
    "SerialNumber": "3248",
    "Words": "[Which, university, provides, license, for, WRVU, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/WRVU\u003e \u003chttp://dbpedia.org/property/licensee\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "WRVU",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/WRVU",
        "seq": "38,42"
      }
    ],
    "CleanPhrase": "[license, WRVU]",
    "id": "6912db9bbb7f4886ab6ecf4dc2bc15ed",
    "Phrase": "[Which;;, provides;;, license;;, for;;, WRVU;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "license",
        "uri": "http://dbpedia.org/property/licensee",
        "seq": "26,33",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the area of Tar Heel Sports Network ?",
    "SerialNumber": "3251",
    "Words": "[What, is, the, area, of, Tar, Heel, Sports, Network, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Tar_Heel_Sports_Network\u003e \u003chttp://dbpedia.org/property/area\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Tar Heel Sports Network",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Tar_Heel_Sports_Network",
        "seq": "20,43"
      }
    ],
    "CleanPhrase": "[area, Tar Heel Sports Network]",
    "id": "099f8973922c4781bdf4854d70c385f9",
    "Phrase": "[What;;, is;;, the area;;, of;;, Tar Heel Sports Network;;]",
    "predicate mapping": [
      {
        "score": 406,
        "label": "area",
        "uri": "http://dbpedia.org/property/area",
        "seq": "12,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Whose deputy was Franz von Papen?",
    "SerialNumber": "3255",
    "Words": "[Whose, deputy, was, Franz, von, Papen, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/deputy\u003e \u003chttp://dbpedia.org/resource/Franz_von_Papen\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Franz von Papen",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Franz_von_Papen",
        "seq": "17,32"
      }
    ],
    "CleanPhrase": "[deputy, Franz von Papen]",
    "id": "8e0ff8947d7541bcbd888c8a301c6565",
    "Phrase": "[Whose deputy;;, was;;, Franz von Papen;;]",
    "predicate mapping": [
      {
        "score": 173,
        "label": "deputy",
        "uri": "http://dbpedia.org/property/deputy",
        "seq": "6,12",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the music composer of Kenny Dies ?",
    "SerialNumber": "3262",
    "Words": "[Who, is, the, music, composer, of, Kenny, Dies, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Kenny_Dies\u003e \u003chttp://dbpedia.org/ontology/musicComposer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Kenny Dies",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Kenny_Dies",
        "seq": "29,39"
      }
    ],
    "CleanPhrase": "[music composer, Kenny, Dies]",
    "id": "23da6d5becd34480952011dd96fec09f",
    "Phrase": "[Who;;, is;;, the music composer;;, of;;, Kenny;;, Dies;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "music composer",
        "uri": "http://dbpedia.org/ontology/musicComposer",
        "seq": "11,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "By what style was Providence Chapel, Charlwood made?",
    "SerialNumber": "3268",
    "Words": "[By, what, style, was, Providence, Chapel, ,, Charlwood, made, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Providence_Chapel,_Charlwood\u003e \u003chttp://dbpedia.org/property/style\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Providence Chapel, Charlwood",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Providence_Chapel,_Charlwood",
        "seq": "18,46"
      }
    ],
    "CleanPhrase": "[style, Providence Chapel, Charlwood, made]",
    "id": "0f3429d03fd64266b8c2d76addb5c46c",
    "Phrase": "[By;;, what style;;, was;;, Providence Chapel;;, Charlwood;;, made;;]",
    "predicate mapping": [
      {
        "score": 106,
        "label": "style",
        "uri": "http://dbpedia.org/property/style",
        "seq": "8,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the stockholder of Paphos International Airport ?",
    "SerialNumber": "3270",
    "Words": "[Who, is, the, stockholder, of, Paphos, International, Airport, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Paphos_International_Airport\u003e \u003chttp://dbpedia.org/property/owner\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Paphos International Airport",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Paphos_International_Airport",
        "seq": "26,54"
      }
    ],
    "CleanPhrase": "[stockholder, Paphos International Airport]",
    "id": "05c509f7775f4415b2a95b4fcc959d1a",
    "Phrase": "[Who;;, is;;, the stockholder;;, of;;, Paphos International Airport;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "stockholder",
        "uri": "http://dbpedia.org/property/owner",
        "seq": "11,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the region of Lumberjack  ?",
    "SerialNumber": "3275",
    "Words": "[What, is, the, region, of, Lumberjack, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Lumberjack_100\u003e \u003chttp://dbpedia.org/property/region\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 26,
        "label": "Lumberjack",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Lumberjack_100",
        "seq": "22,32"
      }
    ],
    "CleanPhrase": "[region, Lumberjack]",
    "id": "5e70185ec22f408795bf28e121e68522",
    "Phrase": "[What;;, is;;, the region;;, of;;, Lumberjack \\;;]",
    "predicate mapping": [
      {
        "score": 138,
        "label": "region",
        "uri": "http://dbpedia.org/property/region",
        "seq": "12,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What were the occupations of Marcus Floyd?",
    "SerialNumber": "3278",
    "Words": "[What, were, the, occupations, of, Marcus, Floyd, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Marcus_Floyd\u003e \u003chttp://dbpedia.org/ontology/occupation\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Marcus Floyd",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Marcus_Floyd",
        "seq": "29,41"
      }
    ],
    "CleanPhrase": "[occupations, Marcus Floyd]",
    "id": "a882c7c530ad4e7793896fce0ad1adef",
    "Phrase": "[What;;, were;;, the occupations;;, of;;, Marcus Floyd;;]",
    "predicate mapping": [
      {
        "score": 18,
        "label": "occupation",
        "uri": "http://dbpedia.org/ontology/occupation",
        "seq": "14,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the Pole driver of 1997 Canadian Grand Prix ?",
    "SerialNumber": "3281",
    "Words": "[Who, is, the, Pole, driver, of, 1997, Canadian, Grand, Prix, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/1997_Canadian_Grand_Prix\u003e \u003chttp://dbpedia.org/property/poleDriver\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "1997 Canadian Grand Prix",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/1997_Canadian_Grand_Prix",
        "seq": "26,50"
      }
    ],
    "CleanPhrase": "[Pole driver, 1997 Canadian Grand Prix]",
    "id": "b65176114e5942798719100f7770c922",
    "Phrase": "[Who;;, is;;, the Pole driver;;, of;;, 1997 Canadian Grand Prix;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "Pole driver",
        "uri": "http://dbpedia.org/property/poleDriver",
        "seq": "11,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who composed the lyrics of Holler If Ya Hear Me ?",
    "SerialNumber": "3286",
    "Words": "[Who, composed, the, lyrics, of, Holler, If, Ya, Hear, Me, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Holler_If_Ya_Hear_Me_(musical)\u003e \u003chttp://dbpedia.org/property/lyrics\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Holler If Ya Hear Me",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Holler_If_Ya_Hear_Me_(musical)",
        "seq": "27,47"
      }
    ],
    "CleanPhrase": "[composed, lyrics, Holler, Ya, Hear]",
    "id": "91074221bb864151921f52c9ff1a71cf",
    "Phrase": "[Who;;, composed;;, the lyrics;;, of;;, Holler;;, If;;, Ya;;, Hear;;, Me;;, \\;;]",
    "predicate mapping": [
      {
        "score": 12,
        "label": "lyrics",
        "uri": "http://dbpedia.org/property/lyrics",
        "seq": "17,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where did Marvo originate?",
    "SerialNumber": "3293",
    "Words": "[Where, did, Marvo, originate, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Mavro\u003e \u003chttp://dbpedia.org/ontology/origin\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 42,
        "label": "Marvo",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Mavro",
        "seq": "10,15"
      }
    ],
    "CleanPhrase": "[Marvo, originate]",
    "id": "5c2f6e3d47024e54af60dad2cf684419",
    "Phrase": "[Where;;, Marvo;;, originate;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "origin",
        "uri": "http://dbpedia.org/ontology/origin",
        "seq": "16,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the hub of Wan Air ?",
    "SerialNumber": "3300",
    "Words": "[What, is, the, hub, of, Wan, Air, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Wan_Air\u003e \u003chttp://dbpedia.org/property/hubs\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Wan Air",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Wan_Air",
        "seq": "19,26"
      }
    ],
    "CleanPhrase": "[hub, Wan Air]",
    "id": "eac2d5332100483581f13b166ac29e94",
    "Phrase": "[What;;, is;;, the hub;;, of;;, Wan Air;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "hub",
        "uri": "http://dbpedia.org/property/hubs",
        "seq": "12,15",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the debut team of Tom O\u0027Malley ?",
    "SerialNumber": "3301",
    "Words": "[What, is, the, debut, team, of, Tom, O\u0027Malley, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Tom_O\u0027Malley\u003e \u003chttp://dbpedia.org/property/debutteam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "Tom O\u0027Malley",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Tom_O\u0027Malley",
        "seq": "26,38"
      }
    ],
    "CleanPhrase": "[debut team, Tom O\u0027Malley]",
    "id": "573d48cf77f14483b1eb9fc6e0f73e90",
    "Phrase": "[What;;, is;;, the debut team;;, of;;, Tom O\u0027Malley;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "debut team",
        "uri": "http://dbpedia.org/property/debutteam",
        "seq": "12,22",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name  the Pole driver of 1994 Spanish Grand Prix ?",
    "SerialNumber": "3302",
    "Words": "[Name, the, Pole, driver, of, 1994, Spanish, Grand, Prix, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/1994_Spanish_Grand_Prix\u003e \u003chttp://dbpedia.org/property/poleDriver\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "1994 Spanish Grand Prix",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/1994_Spanish_Grand_Prix",
        "seq": "25,48"
      }
    ],
    "CleanPhrase": "[Pole driver, 1994 Spanish Grand Prix]",
    "id": "c9b163789f6749b0b14437f707eff6da",
    "Phrase": "[the Pole driver;;, of;;, 1994 Spanish Grand Prix;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "Pole driver",
        "uri": "http://dbpedia.org/property/poleDriver",
        "seq": "10,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who was the First Driver of 1999 San Marino Grand Prix ?",
    "SerialNumber": "3303",
    "Words": "[Who, was, the, First, Driver, of, 1999, San, Marino, Grand, Prix, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/1999_San_Marino_Grand_Prix\u003e \u003chttp://dbpedia.org/property/firstDriver\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "1999 San Marino Grand Prix",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/1999_San_Marino_Grand_Prix",
        "seq": "28,54"
      }
    ],
    "CleanPhrase": "[Driver, 1999 San Marino Grand Prix]",
    "id": "0f0cefdb4c2e422bbbd46144cb44942e",
    "Phrase": "[Who;;, was;;, the First Driver;;, of;;, 1999 San Marino Grand Prix;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "First Driver",
        "uri": "http://dbpedia.org/property/firstDriver",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which is the largest city of Union State ?",
    "SerialNumber": "3306",
    "Words": "[Which, is, the, largest, city, of, Union, State, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Union_State\u003e \u003chttp://dbpedia.org/property/largestCity\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 11,
        "label": "Union State",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Union_State",
        "seq": "29,40"
      }
    ],
    "CleanPhrase": "[largest city, Union State]",
    "id": "d374ddbebf124204be7f3f2b11d9e633",
    "Phrase": "[Which;;, is;;, the largest city;;, of;;, Union State;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "largest city",
        "uri": "http://dbpedia.org/property/largestCity",
        "seq": "13,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the capital of Barony of Caux ?",
    "SerialNumber": "3309",
    "Words": "[Name, the, capital, of, Barony, of, Caux, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Barony_of_Caux\u003e \u003chttp://dbpedia.org/ontology/capital\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Barony of Caux",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Barony_of_Caux",
        "seq": "20,34"
      }
    ],
    "CleanPhrase": "[capital, Barony, Caux]",
    "id": "6a33225c11054b9d90e85013e5e3fc02",
    "Phrase": "[Name;;, the capital;;, of;;, Barony;;, of;;, Caux;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "capital",
        "uri": "http://dbpedia.org/ontology/capital",
        "seq": "9,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the writers of Tales of Suspense ?",
    "SerialNumber": "3316",
    "Words": "[List, the, writers, of, Tales, of, Suspense, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Tales_of_Suspense\u003e \u003chttp://dbpedia.org/property/writers\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Tales of Suspense",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Tales_of_Suspense",
        "seq": "20,37"
      }
    ],
    "CleanPhrase": "[List, writers, Tales, Suspense]",
    "id": "af23ab128db046daa4567549a7470c27",
    "Phrase": "[List;;, the writers;;, of;;, Tales;;, of;;, Suspense;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "writers",
        "uri": "http://dbpedia.org/property/writers",
        "seq": "9,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the home ground of  2015 Fort Lauderdale Strikers season ?",
    "SerialNumber": "3319",
    "Words": "[Name, the, home, ground, of, 2015, Fort, Lauderdale, Strikers, season, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/2015_Fort_Lauderdale_Strikers_season\u003e \u003chttp://dbpedia.org/ontology/ground\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "2015 Fort Lauderdale Strikers season",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/2015_Fort_Lauderdale_Strikers_season",
        "seq": "25,61"
      }
    ],
    "CleanPhrase": "[home ground, 2015 Fort Lauderdale Strikers season]",
    "id": "deecfa268f4c4b99b10f15c85fea67b7",
    "Phrase": "[the home ground;;, of;;, 2015 Fort Lauderdale Strikers season;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "ground",
        "uri": "http://dbpedia.org/ontology/ground",
        "seq": "14,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "who was the president under which Joe Purcell is a lieutenant?",
    "SerialNumber": "3323",
    "Words": "[who, was, the, president, under, which, Joe, Purcell, is, a, lieutenant, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/lieutenant\u003e \u003chttp://dbpedia.org/resource/Joe_Purcell\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 7,
        "label": "Joe Purcell",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Joe_Purcell",
        "seq": "34,45"
      }
    ],
    "CleanPhrase": "[president, Joe Purcell, lieutenant]",
    "id": "357dc6f5b3b84bf398fe8ef62344373d",
    "Phrase": "[who;;, was;;, the president;;, under;;, which;;, Joe Purcell;;, is;;, a lieutenant;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "lieutenant",
        "uri": "http://dbpedia.org/ontology/lieutenant",
        "seq": "51,61",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "what is the headquarters of Juan Dalmau Ramerez?",
    "SerialNumber": "3331",
    "Words": "[what, is, the, headquarters, of, Juan, Dalmau, Ramerez, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Juan_Dalmau_Ramírez\u003e \u003chttp://dbpedia.org/property/headquarters\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Juan Dalmau",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Juan_Dalmau_Ramírez",
        "seq": "28,39"
      }
    ],
    "CleanPhrase": "[headquarters, Juan Dalmau Ramerez]",
    "id": "e5f9dd5ab9324d1ebbdf61c7e4403c15",
    "Phrase": "[what;;, is;;, the headquarters;;, of;;, Juan Dalmau Ramerez;;]",
    "predicate mapping": [
      {
        "score": 27,
        "label": "headquarters",
        "uri": "http://dbpedia.org/property/headquarters",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the wine regions of Bogdanua ?",
    "SerialNumber": "3332",
    "Words": "[Name, the, wine, regions, of, Bogdanua, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bogdanuša\u003e \u003chttp://dbpedia.org/ontology/wineRegion\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 12,
        "label": "Bogdanua",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Bogdanuša",
        "seq": "25,33"
      }
    ],
    "CleanPhrase": "[wine regions, Bogdanua]",
    "id": "fcf5f996614b4543a14a5ec5eaa362a1",
    "Phrase": "[the wine regions;;, of;;, Bogdanua;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "wine region",
        "uri": "http://dbpedia.org/ontology/wineRegion",
        "seq": "9,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the leader of Allgemeine SS ?",
    "SerialNumber": "3343",
    "Words": "[Who, is, the, leader, of, Allgemeine, SS, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Allgemeine_SS\u003e \u003chttp://dbpedia.org/ontology/leader\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Allgemeine SS",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Allgemeine_SS",
        "seq": "21,34"
      }
    ],
    "CleanPhrase": "[leader, Allgemeine SS]",
    "id": "19bac1217f0341eaa5cdfa082347f6b0",
    "Phrase": "[Who;;, is;;, the leader;;, of;;, Allgemeine SS;;]",
    "predicate mapping": [
      {
        "score": 9,
        "label": "leader",
        "uri": "http://dbpedia.org/ontology/leader",
        "seq": "11,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the birth name  of Putri Raemawasti ?",
    "SerialNumber": "3346",
    "Words": "[What, is, the, birth, name, of, Putri, Raemawasti, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Putri_Raemawasti\u003e \u003chttp://dbpedia.org/property/birthName\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Putri Raemawasti",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Putri_Raemawasti",
        "seq": "27,43"
      }
    ],
    "CleanPhrase": "[birth, Putri, Raemawasti]",
    "id": "3accaa813d154ec19e1d62b48eb60314",
    "Phrase": "[What;;, is;;, the birth name;;, of;;, Putri;;, Raemawasti;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "birth name",
        "uri": "http://dbpedia.org/property/birthName",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "From where does the river Upper Neretva start flowing?",
    "SerialNumber": "3349",
    "Words": "[From, where, does, the, river, Upper, Neretva, start, flowing, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Upper_Neretva\u003e \u003chttp://dbpedia.org/ontology/riverMouth\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Upper Neretva",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Upper_Neretva",
        "seq": "26,39"
      }
    ],
    "CleanPhrase": "[river, Upper Neretva, start flowing]",
    "id": "91305aeb7cf3416f855db6b604974650",
    "Phrase": "[From;;, where;;, the river;;, Upper Neretva;;, start flowing;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "river",
        "uri": "http://dbpedia.org/ontology/riverMouth",
        "seq": "20,25",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the founder of Pittsburgh ?",
    "SerialNumber": "3360",
    "Words": "[Who, is, the, founder, of, Pittsburgh, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Pittsburgh\u003e \u003chttp://dbpedia.org/ontology/founder\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 173,
        "label": "Pittsburgh",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Pittsburgh",
        "seq": "22,32"
      }
    ],
    "CleanPhrase": "[founder, Pittsburgh]",
    "id": "df77a0a57a254a339759da5845ded0cf",
    "Phrase": "[Who;;, is;;, the founder;;, of;;, Pittsburgh;;]",
    "predicate mapping": [
      {
        "score": 23,
        "label": "founder of",
        "uri": "http://dbpedia.org/ontology/founder",
        "seq": "11,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the citizenship of Ren Romano ?",
    "SerialNumber": "3366",
    "Words": "[What, is, the, citizenship, of, Ren, Romano, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/René_Romano\u003e \u003chttp://dbpedia.org/property/citizenship\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 217,
        "label": "Ren Romano",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/René_Romano",
        "seq": "27,37"
      }
    ],
    "CleanPhrase": "[citizenship, Ren Romano]",
    "id": "fb19f3dd1d7640a0b47e3dea68b42bb9",
    "Phrase": "[What;;, is;;, the citizenship;;, of;;, Ren Romano;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "citizenship",
        "uri": "http://dbpedia.org/property/citizenship",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the official name of Colorado wine ?",
    "SerialNumber": "3370",
    "Words": "[What, is, the, official, name, of, Colorado, wine, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Colorado_wine\u003e \u003chttp://dbpedia.org/property/officialName\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 620,
        "label": "Colorado wine",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Colorado_wine",
        "seq": "29,42"
      }
    ],
    "CleanPhrase": "[official, Colorado wine]",
    "id": "a9c0a13767d7483590305e3413152c50",
    "Phrase": "[What;;, is;;, the official name;;, of;;, Colorado wine;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "official name",
        "uri": "http://dbpedia.org/property/officialName",
        "seq": "12,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who wrote the US steel hour?",
    "SerialNumber": "3371",
    "Words": "[Who, wrote, the, US, steel, hour, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_United_States_Steel_Hour\u003e \u003chttp://dbpedia.org/ontology/writer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 43,
        "label": "US steel hour",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/The_United_States_Steel_Hour",
        "seq": "14,27"
      }
    ],
    "CleanPhrase": "[wrote, steel hour]",
    "id": "244b1c2f6e3e4c57b2532ec5e4d15329",
    "Phrase": "[Who;;, wrote;;, the US steel hour;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "wrote",
        "uri": "http://dbpedia.org/ontology/writer",
        "seq": "4,9",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the route end of Birmingham and Oxford Junction Railway ?",
    "SerialNumber": "3390",
    "Words": "[What, is, the, route, end, of, Birmingham, and, Oxford, Junction, Railway, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway\u003e \u003chttp://dbpedia.org/ontology/routeEnd\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Birmingham and Oxford Junction Railway",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway",
        "seq": "25,63"
      }
    ],
    "CleanPhrase": "[route end, Birmingham Oxford Junction Railway]",
    "id": "659e0f9700964082b127b839ca27f172",
    "Phrase": "[What;;, is;;, the route end;;, of;;, Birmingham and Oxford Junction Railway;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "route end",
        "uri": "http://dbpedia.org/ontology/routeEnd",
        "seq": "12,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the municipality of Homestead Grays Bridge ?",
    "SerialNumber": "3392",
    "Words": "[What, is, the, municipality, of, Homestead, Grays, Bridge, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Homestead_Grays_Bridge\u003e \u003chttp://dbpedia.org/ontology/municipality\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Homestead Grays Bridge",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Homestead_Grays_Bridge",
        "seq": "28,50"
      }
    ],
    "CleanPhrase": "[municipality, Homestead Grays Bridge]",
    "id": "a1a358a3439f4fcbbc39fa25718b2ad6",
    "Phrase": "[What;;, is;;, the municipality;;, of;;, Homestead Grays Bridge;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "municipality",
        "uri": "http://dbpedia.org/ontology/municipality",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the opponent of United States House of Representatives elections in Ohio, 2010 ?",
    "SerialNumber": "3399",
    "Words": "[Who, is, the, opponent, of, United, States, House, of, Representatives, elections, in, Ohio, ,, 2010, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010\u003e \u003chttp://dbpedia.org/property/opponent\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "United States House of Representatives elections in Ohio, 2010",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010",
        "seq": "23,85"
      }
    ],
    "CleanPhrase": "[opponent, United States House, Representatives, elections, Ohio, 2010]",
    "id": "8d4da6021bd04b108db6150288326476",
    "Phrase": "[Who;;, is;;, the opponent;;, of;;, United States House;;, of;;, Representatives;;, elections;;, in;;, Ohio;;, 2010;;]",
    "predicate mapping": [
      {
        "score": 41,
        "label": "opponent",
        "uri": "http://dbpedia.org/property/opponent",
        "seq": "11,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the commander of Battle of the Thames ?",
    "SerialNumber": "3401",
    "Words": "[Name, the, commander, of, Battle, of, the, Thames, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Battle_of_the_Thames\u003e \u003chttp://dbpedia.org/ontology/commander\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 7,
        "label": "Battle of the Thames",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Battle_of_the_Thames",
        "seq": "22,42"
      }
    ],
    "CleanPhrase": "[commander, Battle, Thames]",
    "id": "c1fbd40e9d774b85994b633e277b297b",
    "Phrase": "[Name;;, the commander;;, of;;, Battle;;, of;;, the Thames \\;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "commander",
        "uri": "http://dbpedia.org/ontology/commander",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is the garrison of Western Naval Command ?",
    "SerialNumber": "3411",
    "Words": "[Where, is, the, garrison, of, Western, Naval, Command, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Western_Naval_Command\u003e \u003chttp://dbpedia.org/property/garrison\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Western Naval Command",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Western_Naval_Command",
        "seq": "25,46"
      }
    ],
    "CleanPhrase": "[garrison, Western Naval Command]",
    "id": "53b2519492344f22a93ce9bef25dd3a5",
    "Phrase": "[Where;;, is;;, the garrison;;, of;;, Western Naval Command;;]",
    "predicate mapping": [
      {
        "score": 8,
        "label": "garrison",
        "uri": "http://dbpedia.org/property/garrison",
        "seq": "13,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "List the relatives of clay Aiken ?",
    "SerialNumber": "3424",
    "Words": "[List, the, relatives, of, clay, Aiken, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/relatives\u003e \u003chttp://dbpedia.org/resource/Clay_Aiken\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "clay Aiken",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Clay_Aiken",
        "seq": "22,32"
      }
    ],
    "CleanPhrase": "[List, relatives, clay Aiken]",
    "id": "f9b31b5201064d76b7f841959920c37f",
    "Phrase": "[List;;, the relatives;;, of;;, clay Aiken;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "relatives",
        "uri": "http://dbpedia.org/property/relatives",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the alma mater of Fikret Orman?",
    "SerialNumber": "3436",
    "Words": "[What, is, the, alma, mater, of, Fikret, Orman, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Fikret_Orman\u003e \u003chttp://dbpedia.org/property/almaMater\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Fikret Orman",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Fikret_Orman",
        "seq": "26,38"
      }
    ],
    "CleanPhrase": "[alma mater, Fikret, Orman]",
    "id": "7383239e8ece464a80a8d5422d4ed3bc",
    "Phrase": "[What;;, is;;, the alma mater;;, of;;, Fikret;;, Orman;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "alma mater",
        "uri": "http://dbpedia.org/property/almaMater",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "what are some players of England national football team?",
    "SerialNumber": "3439",
    "Words": "[what, are, some, players, of, England, national, football, team, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/nationalteam\u003e \u003chttp://dbpedia.org/resource/England_national_football_team\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 34,
        "label": "England national football team",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/England_national_football_team",
        "seq": "25,55"
      }
    ],
    "CleanPhrase": "[players, England, national football team]",
    "id": "627b135b1339420abd87fd83a60ba519",
    "Phrase": "[what;;, are;;, some players;;, of;;, England;;, national football team;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "national team",
        "uri": "http://dbpedia.org/property/nationalteam",
        "seq": "-1,12",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the subject of The Prodigal son ?",
    "SerialNumber": "3442",
    "Words": "[What, is, the, subject, of, The, Prodigal, son, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Prodigal_Son_(play)\u003e \u003chttp://dbpedia.org/property/subject\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 18,
        "label": "The Prodigal son",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/The_Prodigal_Son_(play)",
        "seq": "23,39"
      }
    ],
    "CleanPhrase": "[subject, Prodigal son]",
    "id": "92cabb6122e7449fb885581d7b8e5127",
    "Phrase": "[What;;, is;;, the subject;;, of;;, The Prodigal son;;]",
    "predicate mapping": [
      {
        "score": 24,
        "label": "subject",
        "uri": "http://dbpedia.org/property/subject",
        "seq": "12,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the meaning of Isa  ?",
    "SerialNumber": "3445",
    "Words": "[Who, is, the, meaning, of, Isa, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Isa_(name)\u003e \u003chttp://dbpedia.org/property/meaning\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 130,
        "label": "Isa",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Isa_(name)",
        "seq": "22,25"
      }
    ],
    "CleanPhrase": "[meaning, Isa]",
    "id": "ee7db84a309448d5abf22c529f3c8d35",
    "Phrase": "[Who;;, is;;, the meaning;;, of;;, Isa;;]",
    "predicate mapping": [
      {
        "score": 104,
        "label": "meaning",
        "uri": "http://dbpedia.org/property/meaning",
        "seq": "11,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the trainers of Shinya Aoki ?",
    "SerialNumber": "3456",
    "Words": "[List, the, trainers, of, Shinya, Aoki, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Shinya_Aoki\u003e \u003chttp://dbpedia.org/ontology/trainer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Shinya Aoki",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Shinya_Aoki",
        "seq": "21,32"
      }
    ],
    "CleanPhrase": "[List, trainers, Shinya Aoki]",
    "id": "ef57d1c17ccf4f40847f6c51c1183441",
    "Phrase": "[List;;, the trainers;;, of;;, Shinya Aoki;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "trainer",
        "uri": "http://dbpedia.org/ontology/trainer",
        "seq": "9,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where did Paul Jones do his highschool?",
    "SerialNumber": "3467",
    "Words": "[Where, did, Paul, Jones, do, his, highschool, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Paul_Jones_(American_football)\u003e \u003chttp://dbpedia.org/property/highschool\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 188,
        "label": "Paul Jones",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Paul_Jones_(American_football)",
        "seq": "10,20"
      }
    ],
    "CleanPhrase": "[Paul Jones, highschool]",
    "id": "2704d889b6c741ef8e45357f8e71bbdb",
    "Phrase": "[Where;;, Paul Jones;;, do;;, his highschool;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "highschool",
        "uri": "http://dbpedia.org/property/highschool",
        "seq": "28,38",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the county seat of Moscow Governorate ?",
    "SerialNumber": "3480",
    "Words": "[What, is, the, county, seat, of, Moscow, Governorate, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Moscow_Governorate\u003e \u003chttp://dbpedia.org/ontology/capital\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Moscow Governorate",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Moscow_Governorate",
        "seq": "27,45"
      }
    ],
    "CleanPhrase": "[county seat, Moscow Governorate]",
    "id": "5cbf98e72bf24912a1efb6418b082b96",
    "Phrase": "[What;;, is;;, the county seat;;, of;;, Moscow Governorate;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "county seat",
        "uri": "http://dbpedia.org/ontology/capital",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What all has been created by Jerry Siegel?",
    "SerialNumber": "3482",
    "Words": "[What, all, has, been, created, by, Jerry, Siegel, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/creators\u003e \u003chttp://dbpedia.org/resource/Jerry_Siegel\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 77,
        "label": "Jerry Siegel",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Jerry_Siegel",
        "seq": "29,41"
      }
    ],
    "CleanPhrase": "[created, Jerry Siegel]",
    "id": "11efb4f1e7bb4a4991a7d52f98ce78ac",
    "Phrase": "[What;;, has been created;;, by;;, Jerry Siegel;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "created by",
        "uri": "http://dbpedia.org/property/creators",
        "seq": "18,28",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What are the central characters in spy kids series?",
    "SerialNumber": "3491",
    "Words": "[What, are, the, central, characters, in, spy, kids, series, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/series\u003e \u003chttp://dbpedia.org/resource/Spy_Kids_(franchise)\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 42,
        "label": "spy kids series",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Spy_Kids_(franchise)",
        "seq": "35,50"
      }
    ],
    "CleanPhrase": "[central characters, spy kids series]",
    "id": "94e0f81983644e299c03baa26e68409f",
    "Phrase": "[What;;, are;;, the central characters;;, in;;, spy kids series;;]",
    "predicate mapping": [
      {
        "score": 7,
        "label": "series",
        "uri": "http://dbpedia.org/ontology/series",
        "seq": "44,50",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are the hubs of PLUS Helicopter Services, a highway helicopter unit of PLUS Expressways?",
    "SerialNumber": "3503",
    "Words": "[What, are, the, hubs, of, PLUS, Helicopter, Services, ,, a, highway, helicopter, unit, of, PLUS, Expressways, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/PLUS_Expressways\u003e \u003chttp://dbpedia.org/property/hubs\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "PLUS Expressways",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/PLUS_Expressways",
        "seq": "76,92"
      }
    ],
    "CleanPhrase": "[hubs, Helicopter Services, highway helicopter unit, Expressways]",
    "id": "d5068e915d334851ae6309f58ccc82cf",
    "Phrase": "[What;;, are;;, the hubs;;, of;;, PLUS Helicopter Services;;, a highway helicopter unit;;, of;;, PLUS;;, Expressways;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "hubs",
        "uri": "http://dbpedia.org/property/hubs",
        "seq": "13,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the colour of Xocolatlite ?",
    "SerialNumber": "3513",
    "Words": "[What, is, the, colour, of, Xocolatlite, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Xocolatlite\u003e \u003chttp://dbpedia.org/ontology/colour\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Xocolatlite",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Xocolatlite",
        "seq": "22,33"
      }
    ],
    "CleanPhrase": "[colour, Xocolatlite]",
    "id": "4a602d8ca5624552a796ccfefbaf8a1d",
    "Phrase": "[What;;, is;;, the colour;;, of;;, Xocolatlite;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "colour",
        "uri": "http://dbpedia.org/ontology/colour",
        "seq": "12,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "what mountains are in sierra nevada?",
    "SerialNumber": "3517",
    "Words": "[what, mountains, are, in, sierra, nevada, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/mountainRange\u003e \u003chttp://dbpedia.org/resource/Sierra_Nevada_(U.S.)\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 336,
        "label": "sierra nevada",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Sierra_Nevada_(U.S.)",
        "seq": "22,35"
      }
    ],
    "CleanPhrase": "[mountains, sierra nevada]",
    "id": "32aa2b3044e940e094b154d53dedd106",
    "Phrase": "[what mountains;;, are;;, in;;, sierra nevada;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "mountains",
        "uri": "http://dbpedia.org/ontology/mountainRange",
        "seq": "5,14",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the nominee of Jack Ryan ?",
    "SerialNumber": "3519",
    "Words": "[Who, is, the, nominee, of, Jack, Ryan, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Jack_Ryan_(politician)\u003e \u003chttp://dbpedia.org/ontology/nominee\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 107,
        "label": "Jack Ryan",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Jack_Ryan_(politician)",
        "seq": "22,31"
      }
    ],
    "CleanPhrase": "[nominee, Jack Ryan]",
    "id": "f3713cd348ac4ddf884634f3a7672b0a",
    "Phrase": "[Who;;, is;;, the nominee;;, of;;, Jack Ryan;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "nominee",
        "uri": "http://dbpedia.org/ontology/nominee",
        "seq": "11,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the wine regions of Baco noir?",
    "SerialNumber": "3520",
    "Words": "[Name, the, wine, regions, of, Baco, noir, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Baco_noir\u003e \u003chttp://dbpedia.org/ontology/wineRegion\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Baco noir",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Baco_noir",
        "seq": "25,34"
      }
    ],
    "CleanPhrase": "[wine regions, Baco]",
    "id": "a0ea55269f83451faef0afb3122b0bf3",
    "Phrase": "[the wine regions;;, of;;, Baco;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "wine region",
        "uri": "http://dbpedia.org/ontology/wineRegion",
        "seq": "9,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the president of Wyche Fowler ?",
    "SerialNumber": "3523",
    "Words": "[Name, the, president, of, Wyche, Fowler, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Wyche_Fowler\u003e \u003chttp://dbpedia.org/ontology/president\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Wyche Fowler",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Wyche_Fowler",
        "seq": "22,34"
      }
    ],
    "CleanPhrase": "[president, Wyche Fowler]",
    "id": "9bea6db7df12415083f728032f9327a1",
    "Phrase": "[the president;;, of;;, Wyche Fowler;;]",
    "predicate mapping": [
      {
        "score": 26,
        "label": "president",
        "uri": "http://dbpedia.org/ontology/president",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the associate of Thomas Bryan Martin ?",
    "SerialNumber": "3536",
    "Words": "[Who, is, the, associate, of, Thomas, Bryan, Martin, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Thomas_Bryan_Martin\u003e \u003chttp://dbpedia.org/ontology/associate\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Thomas Bryan Martin",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Thomas_Bryan_Martin",
        "seq": "24,43"
      }
    ],
    "CleanPhrase": "[associate, Thomas Bryan Martin]",
    "id": "8a3172ebec544494a91ab3f49a5376e6",
    "Phrase": "[Who;;, is;;, the associate;;, of;;, Thomas Bryan Martin;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "associate",
        "uri": "http://dbpedia.org/ontology/associate",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the Chris Marve\u0027s school ?",
    "SerialNumber": "3553",
    "Words": "[Name, the, Chris, Marve, \u0027s, school, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Chris_Marve\u003e \u003chttp://dbpedia.org/ontology/school\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Chris Marve",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Chris_Marve",
        "seq": "9,20"
      }
    ],
    "CleanPhrase": "[Chris Marve, \u0027s]",
    "id": "7acd068884a6483199c2fd7bdd37c988",
    "Phrase": "[the Chris Marve;;, \u0027s;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "school",
        "uri": "http://dbpedia.org/ontology/school",
        "seq": "23,29",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Whihc uni did Joshua A. Siegel attend ?",
    "SerialNumber": "3573",
    "Words": "[Whihc, uni, did, Joshua, A, Siegel, attend, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Joshua_A._Siegel\u003e \u003chttp://dbpedia.org/property/education\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Joshua A. Siegel",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Joshua_A._Siegel",
        "seq": "14,30"
      }
    ],
    "CleanPhrase": "[Whihc uni, Joshua, Siegel, attend]",
    "id": "2d2934c87b0e4eefa554db84e9abe251",
    "Phrase": "[Whihc uni;;, Joshua;;, A Siegel;;, attend;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "attend",
        "uri": "http://dbpedia.org/property/education",
        "seq": "31,37",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What is the successor of PlayStation 4",
    "SerialNumber": "3578",
    "Words": "[What, is, the, successor, of, PlayStation, 4]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/successor\u003e \u003chttp://dbpedia.org/resource/PlayStation_4\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "PlayStation 4",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/PlayStation_4",
        "seq": "25,38"
      }
    ],
    "CleanPhrase": "[successor, PlayStation 4]",
    "id": "f71102a3f26440088bc3bb2f7cb2a423",
    "Phrase": "[What;;, is;;, the successor;;, of;;, PlayStation 4;;]",
    "predicate mapping": [
      {
        "score": 27,
        "label": "successor",
        "uri": "http://dbpedia.org/property/successor",
        "seq": "12,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In which country is the Duong river?",
    "SerialNumber": "3581",
    "Words": "[In, which, country, is, the, Duong, river, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Đuống_River\u003e \u003chttp://dbpedia.org/ontology/sourceCountry\u003e ?uri  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": -1,
        "label": "Duong river",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Đuống_River",
        "seq": "24,35"
      }
    ],
    "CleanPhrase": "[country, Duong river]",
    "id": "a39215c00d904d629a2ea30d237281e9",
    "Phrase": "[In;;, which;;, country;;, is;;, the Duong river;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "country",
        "uri": "http://dbpedia.org/ontology/sourceCountry",
        "seq": "9,16",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the religious affiliation of Neungin High School?",
    "SerialNumber": "3585",
    "Words": "[What, is, the, religious, affiliation, of, Neungin, High, School, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Neungin_High_School\u003e \u003chttp://dbpedia.org/property/religiousAffiliation\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Neungin High School",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Neungin_High_School",
        "seq": "37,56"
      }
    ],
    "CleanPhrase": "[religious affiliation, Neungin High School]",
    "id": "e8726e19e919406eba5bbec57e2e6471",
    "Phrase": "[What;;, is;;, the religious affiliation;;, of;;, Neungin High School;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "religious affiliation",
        "uri": "http://dbpedia.org/property/religiousAffiliation",
        "seq": "12,33",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Whose album is Haiti, I am sorry?",
    "SerialNumber": "3592",
    "Words": "[Whose, album, is, Haiti, ,, I, am, sorry, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Haiti_I_Am_Sorry\u003e \u003chttp://dbpedia.org/ontology/album\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Haiti, I am sorry",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Haiti_I_Am_Sorry",
        "seq": "15,20"
      }
    ],
    "CleanPhrase": "[album, Haiti]",
    "id": "34b9dabc67ac415fab309f50d5b45687",
    "Phrase": "[Whose album;;, is;;, Haiti;;, I;;, am;;, sorry;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "album",
        "uri": "http://dbpedia.org/ontology/album",
        "seq": "6,11",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who directed The Haunted House ?",
    "SerialNumber": "3597",
    "Words": "[Who, directed, The, Haunted, House, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Haunted_House_(1929_film)\u003e \u003chttp://dbpedia.org/ontology/director\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 9,
        "label": "The Haunted House",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/The_Haunted_House_(1929_film)",
        "seq": "13,30"
      }
    ],
    "CleanPhrase": "[directed, Haunted House]",
    "id": "246a4b432f5c4660a33367cb504c70d8",
    "Phrase": "[Who;;, directed;;, The Haunted House;;]",
    "predicate mapping": [
      {
        "score": 26,
        "label": "directed",
        "uri": "http://dbpedia.org/ontology/director",
        "seq": "4,12",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "what awards have been given to A. Peter Dewey?",
    "SerialNumber": "3601",
    "Words": "[what, awards, have, been, given, to, A, Peter, Dewey, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/A._Peter_Dewey\u003e \u003chttp://dbpedia.org/ontology/award\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "A. Peter Dewey",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/A._Peter_Dewey",
        "seq": "31,45"
      }
    ],
    "CleanPhrase": "[awards, Peter Dewey]",
    "id": "d0da6ce614904c6f90c0c441e04f16b5",
    "Phrase": "[what awards;;, have been given;;, to;;, A Peter Dewey;;]",
    "predicate mapping": [
      {
        "score": 58,
        "label": "awards",
        "uri": "http://dbpedia.org/ontology/award",
        "seq": "5,11",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which awards have Ingmar Bergman won?",
    "SerialNumber": "3610",
    "Words": "[Which, awards, have, Ingmar, Bergman, won, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ingmar_Bergman\u003e \u003chttp://dbpedia.org/property/awards\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Ingmar Bergman",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Ingmar_Bergman",
        "seq": "18,32"
      }
    ],
    "CleanPhrase": "[awards, Ingmar Bergman, won]",
    "id": "f107cdaf5a3b4793ad0a9ba36ca5c01c",
    "Phrase": "[Which awards;;, have;;, Ingmar Bergman;;, won;;]",
    "predicate mapping": [
      {
        "score": 7,
        "label": "awards",
        "uri": "http://dbpedia.org/property/awards",
        "seq": "6,12",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In which timezone does Khok Kwang lie?",
    "SerialNumber": "3611",
    "Words": "[In, which, timezone, does, Khok, Kwang, lie, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Khok_Kwang\u003e \u003chttp://dbpedia.org/ontology/timeZone\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Khok Kwang",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Khok_Kwang",
        "seq": "23,33"
      }
    ],
    "CleanPhrase": "[timezone, Khok Kwang, lie]",
    "id": "db74d95d147e42748b823e8d8359a97a",
    "Phrase": "[In;;, which;;, timezone;;, Khok Kwang;;, lie;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "timezone",
        "uri": "http://dbpedia.org/ontology/timeZone",
        "seq": "9,17",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where did Louis chevrolet die ?",
    "SerialNumber": "3618",
    "Words": "[Where, did, Louis, chevrolet, die, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Louis_Chevrolet\u003e \u003chttp://dbpedia.org/property/deathPlace\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Louis chevrolet",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Louis_Chevrolet",
        "seq": "10,25"
      }
    ],
    "CleanPhrase": "[Louis chevrolet, die]",
    "id": "32d100aad346478bbb68b3ce1b5a8520",
    "Phrase": "[Where;;, Louis chevrolet;;, die;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "die",
        "uri": "http://dbpedia.org/property/deathPlace",
        "seq": "26,29",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "who married crystal harris?",
    "SerialNumber": "3619",
    "Words": "[who, married, crystal, harris, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/spouse\u003e \u003chttp://dbpedia.org/resource/Crystal_Harris\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "crystal harris",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Crystal_Harris",
        "seq": "12,26"
      }
    ],
    "CleanPhrase": "[married, crystal harris]",
    "id": "13fab3852bd645ef8d7c43e3d10a9d2b",
    "Phrase": "[who;;, married;;, crystal harris;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "married",
        "uri": "http://dbpedia.org/property/spouse",
        "seq": "4,11",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the draft team of Dale Mitchell (ice hockey) ?",
    "SerialNumber": "3633",
    "Words": "[What, is, the, draft, team, of, Dale, Mitchell, \\, (, ice, hockey, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Dale_Mitchell_(ice_hockey)\u003e \u003chttp://dbpedia.org/ontology/draftTeam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Dale Mitchell (ice hockey)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Dale_Mitchell_(ice_hockey)",
        "seq": "26,52"
      }
    ],
    "CleanPhrase": "[draft team, Dale Mitchell, ice hockey]",
    "id": "8f151cb3f067464695a3b7bb410d7636",
    "Phrase": "[What;;, is;;, the draft team;;, of;;, Dale Mitchell;;, ice hockey;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "draft team",
        "uri": "http://dbpedia.org/ontology/draftTeam",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which educational institutions did Lesli Sanchez go for her studies?",
    "SerialNumber": "3635",
    "Words": "[To, which, educational, institutions, did, Lesli, Sanchez, go, for, her, studies, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Leslie_Sanchez\u003e \u003chttp://dbpedia.org/ontology/education\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 17,
        "label": "Lesli Sanchez",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Leslie_Sanchez",
        "seq": "38,51"
      }
    ],
    "CleanPhrase": "[educational institutions, Lesli Sanchez, studies]",
    "id": "8533f08f0f2e439792341591e3b8d82e",
    "Phrase": "[To;;, which;;, educational institutions;;, did;;, Lesli Sanchez;;, go;;, for;;, her studies;;]",
    "predicate mapping": [
      {
        "score": 9,
        "label": "education",
        "uri": "http://dbpedia.org/ontology/education",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who was the coach of 1972 Oakland Raiders season ?",
    "SerialNumber": "3636",
    "Words": "[Who, was, the, coach, of, 1972, Oakland, Raiders, season, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/1972_Oakland_Raiders_season\u003e \u003chttp://dbpedia.org/ontology/coach\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "1972 Oakland Raiders season",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/1972_Oakland_Raiders_season",
        "seq": "21,48"
      }
    ],
    "CleanPhrase": "[coach, 1972 Oakland Raiders season]",
    "id": "fe62a0c11f31451991b7023a4fd71fae",
    "Phrase": "[Who;;, was;;, the coach;;, of;;, 1972 Oakland Raiders season;;]",
    "predicate mapping": [
      {
        "score": 10,
        "label": "coach",
        "uri": "http://dbpedia.org/ontology/coach",
        "seq": "12,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the destination of Novair International Airways ?",
    "SerialNumber": "3647",
    "Words": "[List, the, destination, of, Novair, International, Airways, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Novair_International_Airways\u003e \u003chttp://dbpedia.org/ontology/destination\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Novair International Airways",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Novair_International_Airways",
        "seq": "24,52"
      }
    ],
    "CleanPhrase": "[List, destination, Novair International Airways]",
    "id": "f8a314a604de4c88b0f8ed83a5bfb2b4",
    "Phrase": "[List;;, the destination;;, of;;, Novair International Airways;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "destination",
        "uri": "http://dbpedia.org/ontology/destination",
        "seq": "9,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What all are written in the C programming language?",
    "SerialNumber": "3670",
    "Words": "[What, all, are, written, in, the, C, programming, language, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/programmingLanguage\u003e \u003chttp://dbpedia.org/resource/C_(programming_language)\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "C programming language",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/C_(programming_language)",
        "seq": "28,50"
      }
    ],
    "CleanPhrase": "[written, C programming language]",
    "id": "c08136b5c371483aa23d66de3825c01e",
    "Phrase": "[What;;, all;;, are written;;, in;;, the C programming language;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "programming language",
        "uri": "http://dbpedia.org/property/programmingLanguage",
        "seq": "30,50",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the mascot of Blytheville High School ?",
    "SerialNumber": "3674",
    "Words": "[What, is, the, mascot, of, Blytheville, High, School, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Blytheville_High_School\u003e \u003chttp://dbpedia.org/property/mascot\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Blytheville High School",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Blytheville_High_School",
        "seq": "22,45"
      }
    ],
    "CleanPhrase": "[mascot, Blytheville High School]",
    "id": "9aa8b71692cb45da98f3100dd56685da",
    "Phrase": "[What;;, is;;, the mascot;;, of;;, Blytheville High School;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "mascot",
        "uri": "http://dbpedia.org/property/mascot",
        "seq": "12,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the content licence of MSX BASIC ?",
    "SerialNumber": "3678",
    "Words": "[What, is, the, content, licence, of, MSX, BASIC, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/MSX_BASIC\u003e \u003chttp://dbpedia.org/property/license\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "MSX BASIC",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/MSX_BASIC",
        "seq": "31,40"
      }
    ],
    "CleanPhrase": "[content licence, MSX BASIC]",
    "id": "7c77b492d45c40f48e4c4c0ffeaac619",
    "Phrase": "[What;;, is;;, the content licence;;, of;;, MSX BASIC;;]",
    "predicate mapping": [
      {
        "score": 136,
        "label": "content licence",
        "uri": "http://dbpedia.org/property/license",
        "seq": "12,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Into which water bodies does Lake Uniamsi outflow?",
    "SerialNumber": "3681",
    "Words": "[Into, which, water, bodies, does, Lake, Uniamsi, outflow, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Lake_Uniamési\u003e \u003chttp://dbpedia.org/property/outflow\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Lake Uniamsi",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Lake_Uniamési",
        "seq": "29,41"
      }
    ],
    "CleanPhrase": "[water bodies, Lake Uniamsi outflow]",
    "id": "694ed5abdd6e48908b2a1eadf548813c",
    "Phrase": "[Into;;, which water bodies;;, does;;, Lake Uniamsi outflow;;]",
    "predicate mapping": [
      {
        "score": 11,
        "label": "outflow",
        "uri": "http://dbpedia.org/property/outflow",
        "seq": "42,49",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the trainersof Candice Michelle?",
    "SerialNumber": "3696",
    "Words": "[Who, are, the, trainersof, Candice, Michelle, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Candice_Michelle\u003e \u003chttp://dbpedia.org/ontology/trainer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Candice Michelle",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Candice_Michelle",
        "seq": "23,39"
      }
    ],
    "CleanPhrase": "[trainersof Candice Michelle]",
    "id": "1f783e93f3d8452c965e50e42f038ada",
    "Phrase": "[Who;;, are;;, the trainersof Candice Michelle;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "trainer",
        "uri": "http://dbpedia.org/ontology/trainer",
        "seq": "12,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "which band was Roger waters in?",
    "SerialNumber": "3701",
    "Words": "[which, band, was, Roger, waters, in, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/formerBandMember\u003e \u003chttp://dbpedia.org/resource/Roger_Waters\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Roger waters",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Roger_Waters",
        "seq": "15,27"
      }
    ],
    "CleanPhrase": "[band, Roger waters]",
    "id": "b3398e30fff34e49a28ba477ae3090e9",
    "Phrase": "[which band;;, was;;, Roger waters;;, in;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "band",
        "uri": "http://dbpedia.org/ontology/formerBandMember",
        "seq": "6,10",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the region of Kim Sawchuk ?",
    "SerialNumber": "3703",
    "Words": "[What, is, the, region, of, Kim, Sawchuk, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Kim_Sawchuk\u003e \u003chttp://dbpedia.org/property/region\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Kim Sawchuk",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Kim_Sawchuk",
        "seq": "22,33"
      }
    ],
    "CleanPhrase": "[region, Kim Sawchuk]",
    "id": "ad99cf1513714c3ebe054b74c3f26900",
    "Phrase": "[What;;, is;;, the region;;, of;;, Kim Sawchuk;;]",
    "predicate mapping": [
      {
        "score": 138,
        "label": "region",
        "uri": "http://dbpedia.org/property/region",
        "seq": "12,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What is the Band whose band member is Mark Middleton?",
    "SerialNumber": "3707",
    "Words": "[What, is, the, Band, whose, band, member, is, Mark, Middleton, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/bandMember\u003e \u003chttp://dbpedia.org/resource/Mark_Middleton\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 18,
        "label": "Mark Middleton",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Mark_Middleton",
        "seq": "38,52"
      }
    ],
    "CleanPhrase": "[Band, band member, Mark Middleton]",
    "id": "5c476257c7ae4f8c8fb4b061667cb773",
    "Phrase": "[What;;, is;;, the Band;;, whose band member;;, is;;, Mark Middleton;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "band member",
        "uri": "http://dbpedia.org/ontology/bandMember",
        "seq": "23,34",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the purpose of New Zealand Chess Federation ?",
    "SerialNumber": "3714",
    "Words": "[What, is, the, purpose, of, New, Zealand, Chess, Federation, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/New_Zealand_Chess_Federation\u003e \u003chttp://dbpedia.org/property/purpose\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "New Zealand Chess Federation",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/New_Zealand_Chess_Federation",
        "seq": "23,51"
      }
    ],
    "CleanPhrase": "[purpose, Zealand Chess Federation]",
    "id": "090ae66d24e0419186f917e055d026fd",
    "Phrase": "[What;;, is;;, the purpose;;, of;;, New Zealand Chess Federation;;]",
    "predicate mapping": [
      {
        "score": 21,
        "label": "purpose",
        "uri": "http://dbpedia.org/property/purpose",
        "seq": "12,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is the headquarters of Sigma TV",
    "SerialNumber": "3749",
    "Words": "[Where, is, the, headquarters, of, Sigma, TV]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Sigma_TV\u003e \u003chttp://dbpedia.org/property/headquarters\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 12,
        "label": "Sigma TV",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Sigma_TV",
        "seq": "29,37"
      }
    ],
    "CleanPhrase": "[headquarters, Sigma TV]",
    "id": "5fa7af236eac494f8047e5fd87a4c812",
    "Phrase": "[Where;;, is;;, the headquarters;;, of;;, Sigma TV;;]",
    "predicate mapping": [
      {
        "score": 27,
        "label": "headquarters",
        "uri": "http://dbpedia.org/property/headquarters",
        "seq": "13,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the affiliation of Lumbini Bauddha University ?",
    "SerialNumber": "3750",
    "Words": "[What, is, the, affiliation, of, Lumbini, Bauddha, University, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Lumbini_Bauddha_University\u003e \u003chttp://dbpedia.org/property/affiliation\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Lumbini Bauddha University",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Lumbini_Bauddha_University",
        "seq": "27,53"
      }
    ],
    "CleanPhrase": "[affiliation, Lumbini Bauddha University]",
    "id": "0bac079708b34f219b751ade453305f4",
    "Phrase": "[What;;, is;;, the affiliation;;, of;;, Lumbini Bauddha University;;]",
    "predicate mapping": [
      {
        "score": 88,
        "label": "affiliation",
        "uri": "http://dbpedia.org/property/affiliation",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What are the beverages whose origin is England?",
    "SerialNumber": "3753",
    "Words": "[What, are, the, beverages, whose, origin, is, England, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/origin\u003e \u003chttp://dbpedia.org/resource/England\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1562,
        "label": "England",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/England",
        "seq": "39,46"
      }
    ],
    "CleanPhrase": "[beverages, origin, England]",
    "id": "9f6c919d926a4f7d953fbb687036e0df",
    "Phrase": "[What;;, are;;, the beverages;;, whose origin;;, is;;, England;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "origin",
        "uri": "http://dbpedia.org/ontology/origin",
        "seq": "29,35",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List down the opponents of Frank Stilwell?",
    "SerialNumber": "3754",
    "Words": "[List, down, the, opponents, of, Frank, Stilwell, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Frank_Stilwell\u003e \u003chttp://dbpedia.org/ontology/opponent\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Frank Stilwell",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Frank_Stilwell",
        "seq": "27,41"
      }
    ],
    "CleanPhrase": "[List, opponents, Frank Stilwell]",
    "id": "581ca8f786c64d5a986ef8d22049dc1f",
    "Phrase": "[List;;, down;;, the opponents;;, of;;, Frank Stilwell;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "opponent",
        "uri": "http://dbpedia.org/ontology/opponent",
        "seq": "14,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the label of I Pray on Christmas ?",
    "SerialNumber": "3755",
    "Words": "[What, is, the, label, of, I, Pray, on, Christmas, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/I_Pray_on_Christmas\u003e \u003chttp://dbpedia.org/property/label\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "I Pray on Christmas",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/I_Pray_on_Christmas",
        "seq": "21,40"
      }
    ],
    "CleanPhrase": "[label, Pray, Christmas]",
    "id": "97e6ac7f9f4e4ae4851eb5a188d00241",
    "Phrase": "[What;;, is;;, the label;;, of;;, I;;, Pray;;, on;;, Christmas;;]",
    "predicate mapping": [
      {
        "score": 346,
        "label": "label",
        "uri": "http://dbpedia.org/property/label",
        "seq": "12,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the cause of death of Martino Martini ?",
    "SerialNumber": "3766",
    "Words": "[Name, the, cause, of, death, of, Martino, Martini, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Martino_Martini\u003e \u003chttp://dbpedia.org/ontology/deathCause\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Martino Martini",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Martino_Martini",
        "seq": "27,42"
      }
    ],
    "CleanPhrase": "[death, Martino Martini]",
    "id": "278a4dae43ef4c9b888aaf3f0516d0a0",
    "Phrase": "[the cause;;, of;;, death;;, of;;, Martino Martini;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "death cause",
        "uri": "http://dbpedia.org/ontology/deathCause",
        "seq": "-1,10",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the label of Next Thing ?",
    "SerialNumber": "3768",
    "Words": "[What, is, the, label, of, Next, Thing, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Next_Thing\u003e \u003chttp://dbpedia.org/ontology/recordLabel\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "Next Thing",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Next_Thing",
        "seq": "21,31"
      }
    ],
    "CleanPhrase": "[label, Thing]",
    "id": "c577d7b031fc49db89aed6ce9019e62b",
    "Phrase": "[What;;, is;;, the label;;, of;;, Next Thing;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "label",
        "uri": "http://dbpedia.org/ontology/recordLabel",
        "seq": "12,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who designed Oddamavadi Bridge?",
    "SerialNumber": "3784",
    "Words": "[Who, designed, Oddamavadi, Bridge, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Oddamavadi_Bridge\u003e \u003chttp://dbpedia.org/property/designer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Oddamavadi Bridge",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Oddamavadi_Bridge",
        "seq": "13,30"
      }
    ],
    "CleanPhrase": "[designed, Oddamavadi Bridge]",
    "id": "cc67a19255ce4bf6938888a64e0c3b19",
    "Phrase": "[Who;;, designed;;, Oddamavadi Bridge;;]",
    "predicate mapping": [
      {
        "score": 66,
        "label": "designed",
        "uri": "http://dbpedia.org/property/designer",
        "seq": "4,12",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List all that flows into the north sea?",
    "SerialNumber": "3809",
    "Words": "[List, all, that, flows, into, the, north, sea, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/North_Sea\u003e \u003chttp://dbpedia.org/property/inflow\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 10,
        "label": "north sea",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/North_Sea",
        "seq": "29,38"
      }
    ],
    "CleanPhrase": "[List, flows, north sea]",
    "id": "f6e3042fcf724895aafc057cd69770c5",
    "Phrase": "[List all;;, that;;, flows;;, into;;, the north sea;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "flows",
        "uri": "http://dbpedia.org/property/inflow",
        "seq": "14,19",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the relatives of Lyubov Dostoyevskaya ?",
    "SerialNumber": "3810",
    "Words": "[List, the, relatives, of, Lyubov, Dostoyevskaya, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Lyubov_Dostoyevskaya\u003e \u003chttp://dbpedia.org/property/relatives\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Lyubov Dostoyevskaya",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Lyubov_Dostoyevskaya",
        "seq": "22,42"
      }
    ],
    "CleanPhrase": "[List, relatives, Lyubov, Dostoyevskaya]",
    "id": "359b620b592a44929007db93e8aecd72",
    "Phrase": "[List;;, the relatives;;, of;;, Lyubov;;, Dostoyevskaya;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "relatives",
        "uri": "http://dbpedia.org/property/relatives",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the artist of Brad Paisley discography ?",
    "SerialNumber": "3814",
    "Words": "[Name, the, artist, of, Brad, Paisley, discography, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Brad_Paisley_discography\u003e \u003chttp://dbpedia.org/property/artist\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Brad Paisley discography",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Brad_Paisley_discography",
        "seq": "19,43"
      }
    ],
    "CleanPhrase": "[artist, Brad Paisley discography]",
    "id": "814cd09a47ce48cea2ad776e1e753a16",
    "Phrase": "[the artist;;, of;;, Brad Paisley discography;;]",
    "predicate mapping": [
      {
        "score": 69,
        "label": "artist",
        "uri": "http://dbpedia.org/property/artist",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the purpose of Maharashtra Chess Association ?",
    "SerialNumber": "3842",
    "Words": "[What, is, the, purpose, of, Maharashtra, Chess, Association, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Maharashtra_Chess_Association\u003e \u003chttp://dbpedia.org/property/purpose\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Maharashtra Chess Association",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Maharashtra_Chess_Association",
        "seq": "23,52"
      }
    ],
    "CleanPhrase": "[purpose, Maharashtra Chess Association]",
    "id": "1b61bd94b11c4641a1bb7d0601c0fdb5",
    "Phrase": "[What;;, is;;, the purpose;;, of;;, Maharashtra Chess Association;;]",
    "predicate mapping": [
      {
        "score": 21,
        "label": "purpose",
        "uri": "http://dbpedia.org/property/purpose",
        "seq": "12,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the address of Federal Reserve Bank Building?",
    "SerialNumber": "3843",
    "Words": "[What, is, the, address, of, Federal, Reserve, Bank, Building, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Federal_Reserve_Bank_Building_(Seattle)\u003e \u003chttp://dbpedia.org/property/address\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "Federal Reserve Bank Building",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Federal_Reserve_Bank_Building_(Seattle)",
        "seq": "23,52"
      }
    ],
    "CleanPhrase": "[address, Federal Reserve Bank Building]",
    "id": "b9b3fd57293c4776b2e52370d4d5c3be",
    "Phrase": "[What;;, is;;, the address;;, of;;, Federal Reserve Bank Building;;]",
    "predicate mapping": [
      {
        "score": 78,
        "label": "address",
        "uri": "http://dbpedia.org/property/address",
        "seq": "12,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the launch site of Aquarius (rocket) ?",
    "SerialNumber": "3855",
    "Words": "[What, is, the, launch, site, of, Aquarius, \\, (, rocket, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Aquarius_(rocket)\u003e \u003chttp://dbpedia.org/ontology/launchSite\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Aquarius (rocket)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Aquarius_(rocket)",
        "seq": "27,44"
      }
    ],
    "CleanPhrase": "[launch site, Aquarius]",
    "id": "78fb0be825cc4440b068e0a54c769e23",
    "Phrase": "[What;;, is;;, the launch site;;, of;;, Aquarius;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "launch site",
        "uri": "http://dbpedia.org/ontology/launchSite",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the source location of Thornton Creek ?",
    "SerialNumber": "3858",
    "Words": "[What, is, the, source, location, of, Thornton, Creek, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Thornton_Creek\u003e \u003chttp://dbpedia.org/property/sourceLocation\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 15,
        "label": "Thornton Creek",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Thornton_Creek",
        "seq": "31,45"
      }
    ],
    "CleanPhrase": "[source location, Thornton Creek]",
    "id": "6714d1031ae14213adee9f44469e2854",
    "Phrase": "[What;;, is;;, the source location;;, of;;, Thornton Creek;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "source location",
        "uri": "http://dbpedia.org/property/sourceLocation",
        "seq": "12,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the faith of Kwai Chang Caine ?",
    "SerialNumber": "3878",
    "Words": "[What, is, the, faith, of, Kwai, Chang, Caine, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Kwai_Chang_Caine\u003e \u003chttp://dbpedia.org/ontology/religion\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Kwai Chang Caine",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Kwai_Chang_Caine",
        "seq": "21,37"
      }
    ],
    "CleanPhrase": "[faith, Kwai Chang Caine]",
    "id": "c66a34d84ddc42f89d6642978c5f9b1c",
    "Phrase": "[What;;, is;;, the faith;;, of;;, Kwai Chang Caine;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "faith",
        "uri": "http://dbpedia.org/ontology/religion",
        "seq": "12,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the branch of Carroll E. Lanier ?",
    "SerialNumber": "3884",
    "Words": "[Name, the, branch, of, Carroll, E, Lanier, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Carroll_E._Lanier\u003e \u003chttp://dbpedia.org/property/branch\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Carroll E. Lanier",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Carroll_E._Lanier",
        "seq": "19,36"
      }
    ],
    "CleanPhrase": "[branch, Carroll E Lanier]",
    "id": "785b260edcfd41099d8633106521b324",
    "Phrase": "[Name;;, the branch;;, of;;, Carroll E Lanier;;]",
    "predicate mapping": [
      {
        "score": 106,
        "label": "branch",
        "uri": "http://dbpedia.org/property/branch",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the area of ITV (Thailand) ?",
    "SerialNumber": "3888",
    "Words": "[What, is, the, area, of, ITV, \\, (, Thailand, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/ITV_(Thailand)\u003e \u003chttp://dbpedia.org/property/area\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 33,
        "label": "ITV (Thailand)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/ITV_(Thailand)",
        "seq": "20,34"
      }
    ],
    "CleanPhrase": "[area, ITV, Thailand]",
    "id": "fa99333a084949f3b66f826593bd2652",
    "Phrase": "[What;;, is;;, the area;;, of;;, ITV;;, Thailand;;]",
    "predicate mapping": [
      {
        "score": 406,
        "label": "area",
        "uri": "http://dbpedia.org/property/area",
        "seq": "12,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the presenter of Shirley Temple\u0027s Storybook ?",
    "SerialNumber": "3889",
    "Words": "[Name, the, presenter, of, Shirley, Temple, \u0027s, Storybook, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Shirley_Temple\u0027s_Storybook\u003e \u003chttp://dbpedia.org/property/presenter\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Shirley Temple\u0027s Storybook",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Shirley_Temple\u0027s_Storybook",
        "seq": "22,48"
      }
    ],
    "CleanPhrase": "[presenter, Shirley Temple, \u0027s]",
    "id": "1c12f743208140c4899ab63ce958d5c4",
    "Phrase": "[the presenter;;, of;;, Shirley Temple;;, \u0027s;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "presenter",
        "uri": "http://dbpedia.org/property/presenter",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the river on Batoka Gorge Hydroelectric Power Station ?",
    "SerialNumber": "3894",
    "Words": "[Name, the, river, on, Batoka, Gorge, Hydroelectric, Power, Station, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Batoka_Gorge_Hydroelectric_Power_Station\u003e \u003chttp://dbpedia.org/ontology/river\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Batoka Gorge Hydroelectric Power Station",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Batoka_Gorge_Hydroelectric_Power_Station",
        "seq": "18,58"
      }
    ],
    "CleanPhrase": "[river, Batoka Gorge Hydroelectric Power Station]",
    "id": "1f82c3f52b32474d9b2a5871e9d6bab7",
    "Phrase": "[Name;;, the river;;, on;;, Batoka Gorge Hydroelectric Power Station;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "river",
        "uri": "http://dbpedia.org/ontology/river",
        "seq": "9,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which driver came first in the 1993 European Grand Prix ?",
    "SerialNumber": "3900",
    "Words": "[Which, driver, came, first, in, the, 1993, European, Grand, Prix, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/1993_European_Grand_Prix\u003e \u003chttp://dbpedia.org/property/firstDriver\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "1993 European Grand Prix",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/1993_European_Grand_Prix",
        "seq": "31,55"
      }
    ],
    "CleanPhrase": "[driver, 1993 European Grand Prix]",
    "id": "34fd78d2a8624f3fb9db8f301269df58",
    "Phrase": "[Which driver;;, came;;, first;;, in;;, the 1993 European Grand Prix;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "driver first",
        "uri": "http://dbpedia.org/property/firstDriver",
        "seq": "-1,11",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the writer of mark twain Tonight ?",
    "SerialNumber": "3901",
    "Words": "[Who, is, the, writer, of, mark, twain, Tonight, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Mark_Twain_Tonight\u003e \u003chttp://dbpedia.org/property/writer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "mark twain Tonight",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Mark_Twain_Tonight",
        "seq": "21,39"
      }
    ],
    "CleanPhrase": "[writer, mark twain Tonight]",
    "id": "0b508a68bf6f41969a26b3a4de2c0af7",
    "Phrase": "[Who;;, is;;, the writer;;, of;;, mark twain Tonight;;]",
    "predicate mapping": [
      {
        "score": 64,
        "label": "writer",
        "uri": "http://dbpedia.org/property/writer",
        "seq": "11,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was James McClure born ?",
    "SerialNumber": "3905",
    "Words": "[Where, was, James, McClure, born, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/James_McClure_(table_tennis)\u003e \u003chttp://dbpedia.org/property/birthPlace\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 68,
        "label": "James McClure",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/James_McClure_(table_tennis)",
        "seq": "10,23"
      }
    ],
    "CleanPhrase": "[James McClure]",
    "id": "ec741fb853924061b547cb81d63e2b94",
    "Phrase": "[Where;;, was;;, James McClure;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "born",
        "uri": "http://dbpedia.org/property/birthPlace",
        "seq": "24,28",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "The official residence of Sukhumbhand paribatra ?",
    "SerialNumber": "3908",
    "Words": "[The, official, residence, of, Sukhumbhand, paribatra, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Sukhumbhand_Paribatra\u003e \u003chttp://dbpedia.org/property/residence\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Sukhumbhand paribatra",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Sukhumbhand_Paribatra",
        "seq": "26,47"
      }
    ],
    "CleanPhrase": "[official residence, Sukhumbhand, paribatra]",
    "id": "a767b3fba00d497caf4ce4a2d62a9152",
    "Phrase": "[The official residence;;, of;;, Sukhumbhand;;, paribatra;;]",
    "predicate mapping": [
      {
        "score": 44,
        "label": "residence",
        "uri": "http://dbpedia.org/property/residence",
        "seq": "13,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which companies have Kumho Asiana Group as their parent company?",
    "SerialNumber": "3910",
    "Words": "[Which, companies, have, Kumho, Asiana, Group, as, their, parent, company, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/parentCompany\u003e \u003chttp://dbpedia.org/resource/Kumho_Asiana_Group\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Kumho Asiana Group",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Kumho_Asiana_Group",
        "seq": "21,39"
      }
    ],
    "CleanPhrase": "[companies, Kumho Asiana Group, parent company]",
    "id": "4141231625cc43c8bc490ad565328359",
    "Phrase": "[Which companies;;, have;;, Kumho Asiana Group;;, as;;, their parent company;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "parent company",
        "uri": "http://dbpedia.org/ontology/parentCompany",
        "seq": "49,63",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the death location of Judson Huss ?",
    "SerialNumber": "3916",
    "Words": "[Name, the, death, location, of, Judson, Huss, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Judson_Huss\u003e \u003chttp://dbpedia.org/property/deathPlace\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Judson Huss",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Judson_Huss",
        "seq": "27,38"
      }
    ],
    "CleanPhrase": "[death location, Judson Huss]",
    "id": "9f44883aeb3c401c89e1465ab2006426",
    "Phrase": "[the death location;;, of;;, Judson Huss;;]",
    "predicate mapping": [
      {
        "score": 67,
        "label": "death location",
        "uri": "http://dbpedia.org/property/deathPlace",
        "seq": "9,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What is the country whose leader was once Valentina Matviyenko?",
    "SerialNumber": "3917",
    "Words": "[What, is, the, country, whose, leader, was, once, Valentina, Matviyenko, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/leader\u003e \u003chttp://dbpedia.org/resource/Valentina_Matviyenko\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Valentina Matviyenko",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Valentina_Matviyenko",
        "seq": "42,62"
      }
    ],
    "CleanPhrase": "[country, leader, Valentina Matviyenko]",
    "id": "6be45071f4db47d7850293932bbedfef",
    "Phrase": "[What;;, is;;, the country;;, whose leader;;, was;;, once Valentina Matviyenko;;]",
    "predicate mapping": [
      {
        "score": 9,
        "label": "leader",
        "uri": "http://dbpedia.org/ontology/leader",
        "seq": "26,32",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the venue of San Diego Comic-Con International ?",
    "SerialNumber": "3944",
    "Words": "[What, is, the, venue, of, San, Diego, Comic, Con, International, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/San_Diego_Comic-Con_International\u003e \u003chttp://dbpedia.org/property/venue\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "San Diego Comic-Con International",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/San_Diego_Comic-Con_International",
        "seq": "21,54"
      }
    ],
    "CleanPhrase": "[venue, San Diego Comic Con International]",
    "id": "3fca4e987668497a98a4313a90ef9cbc",
    "Phrase": "[What;;, is;;, the venue;;, of;;, San Diego Comic Con International \\;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "venue",
        "uri": "http://dbpedia.org/property/venue",
        "seq": "12,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the street address of Rhodes-Haverty Building ?",
    "SerialNumber": "3949",
    "Words": "[Name, the, street, address, of, Rhodes, Haverty, Building, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Rhodes-Haverty_Building\u003e \u003chttp://dbpedia.org/property/address\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Rhodes-Haverty Building",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Rhodes-Haverty_Building",
        "seq": "27,50"
      }
    ],
    "CleanPhrase": "[street address, Rhodes Haverty Building]",
    "id": "c62aacfc9d4d436780b225eacce046cc",
    "Phrase": "[the street address;;, of;;, Rhodes Haverty Building;;]",
    "predicate mapping": [
      {
        "score": 78,
        "label": "address",
        "uri": "http://dbpedia.org/property/address",
        "seq": "16,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the parts of Greater San Antonio?",
    "SerialNumber": "3952",
    "Words": "[List, the, parts, of, Greater, San, Antonio, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Greater_San_Antonio\u003e \u003chttp://dbpedia.org/ontology/part\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Greater San Antonio",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Greater_San_Antonio",
        "seq": "18,37"
      }
    ],
    "CleanPhrase": "[List, parts, Greater San Antonio]",
    "id": "01e5f18baef64f089b9aeff2a5672188",
    "Phrase": "[List;;, the parts;;, of;;, Greater San Antonio \\;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "part",
        "uri": "http://dbpedia.org/ontology/part",
        "seq": "9,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "who operates the south side elevated railroad?",
    "SerialNumber": "3957",
    "Words": "[who, operates, the, south, side, elevated, railroad, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/South_Side_Elevated_Railroad\u003e \u003chttp://dbpedia.org/ontology/operatedBy\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "south side elevated railroad",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/South_Side_Elevated_Railroad",
        "seq": "17,45"
      }
    ],
    "CleanPhrase": "[operates, south side elevated railroad]",
    "id": "9b51ba0b970d479dbc0c54c8830fcddb",
    "Phrase": "[who;;, operates;;, the south side elevated railroad;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "",
        "uri": "http://dbpedia.org/ontology/operatedBy",
        "seq": "0,0",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which nation hosts the WTA Tour Championships?",
    "SerialNumber": "3969",
    "Words": "[Which, nation, hosts, the, WTA, Tour, Championships, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/WTA_Tour_Championships\u003e \u003chttp://dbpedia.org/property/country\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "WTA Tour Championships",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/WTA_Tour_Championships",
        "seq": "23,45"
      }
    ],
    "CleanPhrase": "[nation, hosts, WTA Tour Championships]",
    "id": "2e7611c3b8994e6dbc15b40e020f1b9c",
    "Phrase": "[Which nation;;, hosts;;, the WTA Tour Championships;;]",
    "predicate mapping": [
      {
        "score": 632,
        "label": "nation",
        "uri": "http://dbpedia.org/property/country",
        "seq": "6,12",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was Liliya Lobanova born?",
    "SerialNumber": "3973",
    "Words": "[Where, was, Liliya, Lobanova, born, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Liliya_Lobanova\u003e \u003chttp://dbpedia.org/property/birthplace\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Liliya Lobanova",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Liliya_Lobanova",
        "seq": "10,25"
      }
    ],
    "CleanPhrase": "[Liliya Lobanova, born]",
    "id": "5ed77f5b5ec94a8ebe4f29dad560565e",
    "Phrase": "[Where;;, was;;, Liliya Lobanova;;, born;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "born",
        "uri": "http://dbpedia.org/property/birthplace",
        "seq": "26,30",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Laozi authored which book?",
    "SerialNumber": "3976",
    "Words": "[Laozi, authored, which, book, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/author\u003e \u003chttp://dbpedia.org/resource/Laozi\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 12,
        "label": "Laozi",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Laozi",
        "seq": "0,5"
      }
    ],
    "CleanPhrase": "[Laozi, authored, book]",
    "id": "4991e293a5df4dacb638b36ffa363faa",
    "Phrase": "[Laozi;;, authored;;, which;;, book;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "author",
        "uri": "http://dbpedia.org/ontology/author",
        "seq": "6,12",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the draft team of Antoine Bibeau ?",
    "SerialNumber": "3997",
    "Words": "[What, is, the, draft, team, of, Antoine, Bibeau, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Antoine_Bibeau\u003e \u003chttp://dbpedia.org/property/draftTeam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Antoine Bibeau",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Antoine_Bibeau",
        "seq": "26,40"
      }
    ],
    "CleanPhrase": "[draft team, Antoine Bibeau]",
    "id": "3cd70345b5cd4e35992ea594bd44a98d",
    "Phrase": "[What;;, is;;, the draft team;;, of;;, Antoine Bibeau;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "draft team",
        "uri": "http://dbpedia.org/property/draftTeam",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the location city of Burnside Distribution Corporation ?",
    "SerialNumber": "3998",
    "Words": "[What, is, the, location, city, of, Burnside, Distribution, Corporation, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Burnside_Distribution_Corporation\u003e \u003chttp://dbpedia.org/ontology/locationCity\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Burnside Distribution Corporation",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Burnside_Distribution_Corporation",
        "seq": "29,62"
      }
    ],
    "CleanPhrase": "[location city, Burnside Distribution Corporation]",
    "id": "27755507bd1f447995393a4420bd86b2",
    "Phrase": "[What;;, is;;, the location city;;, of;;, Burnside Distribution Corporation;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "location city",
        "uri": "http://dbpedia.org/ontology/locationCity",
        "seq": "12,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the place of Qaqun ?",
    "SerialNumber": "4000",
    "Words": "[Name, the, place, of, Qaqun, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Qaqun\u003e \u003chttp://dbpedia.org/property/place\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Qaqun",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Qaqun",
        "seq": "18,23"
      }
    ],
    "CleanPhrase": "[place, Qaqun]",
    "id": "1f68b53e47e149d09907454d2b07ef22",
    "Phrase": "[Name;;, the place;;, of;;, Qaqun;;]",
    "predicate mapping": [
      {
        "score": 341,
        "label": "place",
        "uri": "http://dbpedia.org/property/place",
        "seq": "9,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the publisher of Lucifer\u0027s Hammer ?",
    "SerialNumber": "4002",
    "Words": "[What, is, the, publisher, of, Lucifer, \u0027s, Hammer, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Lucifer\u0027s_Hammer\u003e \u003chttp://dbpedia.org/ontology/publisher\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Lucifer\u0027s Hammer",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Lucifer\u0027s_Hammer",
        "seq": "25,41"
      }
    ],
    "CleanPhrase": "[publisher, Lucifer, \u0027s Hammer]",
    "id": "1cb857cf079c4860a7e33220a4e6ff29",
    "Phrase": "[What;;, is;;, the publisher;;, of;;, Lucifer;;, \u0027s Hammer;;]",
    "predicate mapping": [
      {
        "score": 15,
        "label": "publisher",
        "uri": "http://dbpedia.org/ontology/publisher",
        "seq": "12,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which branch Edwin F. Hunter  belong ?",
    "SerialNumber": "4004",
    "Words": "[To, which, branch, Edwin, F, Hunter, belong, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Edwin_F._Hunter\u003e \u003chttp://dbpedia.org/property/branch\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Edwin F. Hunter",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Edwin_F._Hunter",
        "seq": "16,31"
      }
    ],
    "CleanPhrase": "[branch Edwin F Hunter, belong]",
    "id": "a5f4396627fd49da96fd3f5a294e9ec2",
    "Phrase": "[To;;, which;;, branch Edwin F Hunter;;, belong;;]",
    "predicate mapping": [
      {
        "score": 106,
        "label": "branch",
        "uri": "http://dbpedia.org/property/branch",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which river flows through Central Washington?",
    "SerialNumber": "4020",
    "Words": "[Which, river, flows, through, Central, Washington, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Central_Washington\u003e \u003chttp://dbpedia.org/ontology/river\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 183,
        "label": "Central Washington",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Central_Washington",
        "seq": "26,44"
      }
    ],
    "CleanPhrase": "[river, flows, Central Washington]",
    "id": "10234f4efd8b4dd087898060000c073b",
    "Phrase": "[Which river;;, flows;;, through;;, Central Washington;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "river",
        "uri": "http://dbpedia.org/ontology/river",
        "seq": "6,11",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Tandem Computers is the subsidiary of which company?",
    "SerialNumber": "4023",
    "Words": "[Tandem, Computers, is, the, subsidiary, of, which, company, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/subsidiary\u003e \u003chttp://dbpedia.org/resource/Tandem_Computers\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Tandem Computers",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Tandem_Computers",
        "seq": "0,16"
      }
    ],
    "CleanPhrase": "[Tandem Computers, subsidiary, company]",
    "id": "8b5c756e4b4d417bb041434770f85a38",
    "Phrase": "[Tandem Computers;;, is;;, the subsidiary;;, of;;, which;;, company;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "subsidiary",
        "uri": "http://dbpedia.org/ontology/subsidiary",
        "seq": "24,34",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "List the people residing in Wilton, Connecticut?",
    "SerialNumber": "4030",
    "Words": "[List, the, people, residing, in, Wilton, ,, Connecticut, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/residence\u003e \u003chttp://dbpedia.org/resource/Wilton,_Connecticut\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Wilton, Connecticut",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Wilton,_Connecticut",
        "seq": "28,47"
      }
    ],
    "CleanPhrase": "[List, people, residing, Wilton, Connecticut]",
    "id": "c2a0f7c7f5f54180bbca4cd712cbfc97",
    "Phrase": "[List;;, the people;;, residing;;, in;;, Wilton;;, Connecticut;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "residing",
        "uri": "http://dbpedia.org/property/residence",
        "seq": "16,24",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the other party of Chandra Shekhar ?",
    "SerialNumber": "4032",
    "Words": "[Name, the, other, party, of, Chandra, Shekhar, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Chandra_Shekhar\u003e \u003chttp://dbpedia.org/ontology/otherParty\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Chandra Shekhar",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Chandra_Shekhar",
        "seq": "24,39"
      }
    ],
    "CleanPhrase": "[party, Chandra Shekhar]",
    "id": "610c262711204bef968971cfcdf19b3f",
    "Phrase": "[Name;;, the other party;;, of;;, Chandra Shekhar;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "other party",
        "uri": "http://dbpedia.org/ontology/otherParty",
        "seq": "9,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who does Cam PLante plays for ?",
    "SerialNumber": "4038",
    "Words": "[Who, does, Cam, PLante, plays, for, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Cam_Plante\u003e \u003chttp://dbpedia.org/property/playedFor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "Cam PLante",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Cam_Plante",
        "seq": "9,19"
      }
    ],
    "CleanPhrase": "[Cam PLante, plays]",
    "id": "57c6b07e37134052a728a3def6121f55",
    "Phrase": "[Who;;, does;;, Cam PLante;;, plays;;, for;;, \\;;]",
    "predicate mapping": [
      {
        "score": 87,
        "label": "plays for",
        "uri": "http://dbpedia.org/property/playedFor",
        "seq": "20,29",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Pointe d\u0027Aveneyre belongs to which mountain range?",
    "SerialNumber": "4050",
    "Words": "[Pointe, d, \u0027A, veneyre, belongs, to, which, mountain, range, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Pointe_d\u0027Aveneyre\u003e \u003chttp://dbpedia.org/ontology/mountainRange\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Pointe d\u0027Aveneyre",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Pointe_d\u0027Aveneyre",
        "seq": "0,17"
      }
    ],
    "CleanPhrase": "[Pointe d, \u0027A veneyre, belongs, mountain range]",
    "id": "1d1199ba017a424983574e26ac9cc2bb",
    "Phrase": "[Pointe d;;, \u0027A veneyre;;, belongs;;, to;;, which;;, mountain range;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "mountain range",
        "uri": "http://dbpedia.org/ontology/mountainRange",
        "seq": "35,49",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who are the associated musical artist of Carolyn Dennis?",
    "SerialNumber": "4055",
    "Words": "[Who, are, the, associated, musical, artist, of, Carolyn, Dennis, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Carolyn_Dennis\u003e \u003chttp://dbpedia.org/ontology/associatedMusicalArtist\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Carolyn Dennis",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Carolyn_Dennis",
        "seq": "41,55"
      }
    ],
    "CleanPhrase": "[musical artist, Carolyn Dennis]",
    "id": "bfea3fef8cd04b65b6f6dcf3078461ec",
    "Phrase": "[Who;;, are;;, the associated musical artist;;, of;;, Carolyn Dennis;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "associated musical artist",
        "uri": "http://dbpedia.org/ontology/associatedMusicalArtist",
        "seq": "12,37",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the operator of AT\u0026T Park ?",
    "SerialNumber": "4070",
    "Words": "[Who, is, the, operator, of, AT, T, Park, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/AT\u0026T_Park\u003e \u003chttp://dbpedia.org/property/operator\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "AT\u0026T Park",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/AT\u0026T_Park",
        "seq": "23,32"
      }
    ],
    "CleanPhrase": "[operator, T Park]",
    "id": "df298794f4bc4b8bad182adc7794db3a",
    "Phrase": "[Who;;, is;;, the operator;;, of;;, AT;;, T Park;;]",
    "predicate mapping": [
      {
        "score": 75,
        "label": "operator",
        "uri": "http://dbpedia.org/property/operator",
        "seq": "11,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the origin of Xynisteri?",
    "SerialNumber": "4071",
    "Words": "[What, is, the, origin, of, Xynisteri, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Xynisteri\u003e \u003chttp://dbpedia.org/ontology/origin\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Xynisteri",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Xynisteri",
        "seq": "22,31"
      }
    ],
    "CleanPhrase": "[origin, Xynisteri]",
    "id": "f703a972a86f40aa9788b9324760cfa2",
    "Phrase": "[What;;, is;;, the origin;;, of;;, Xynisteri;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "origin",
        "uri": "http://dbpedia.org/ontology/origin",
        "seq": "12,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who gave the musical score  of 9 to 5 (musical) ?",
    "SerialNumber": "4072",
    "Words": "[Who, gave, the, musical, score, of, 9, to, 5, \\, (, musical, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/9_to_5_(musical)\u003e \u003chttp://dbpedia.org/ontology/musicBy\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "9 to 5 (musical)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/9_to_5_(musical)",
        "seq": "31,47"
      }
    ],
    "CleanPhrase": "[gave, musical score, 9, 5]",
    "id": "65165521d68f40e7a5aa5bcd34fd39b3",
    "Phrase": "[Who;;, gave;;, the musical score;;, of;;, 9;;, to;;, 5;;]",
    "predicate mapping": [
      {
        "score": 22,
        "label": "musical",
        "uri": "http://dbpedia.org/ontology/musicBy",
        "seq": "13,20",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the monarch of Bertalan Szemere ?",
    "SerialNumber": "4079",
    "Words": "[Who, is, the, monarch, of, Bertalan, Szemere, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bertalan_Szemere\u003e \u003chttp://dbpedia.org/ontology/monarch\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Bertalan Szemere",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Bertalan_Szemere",
        "seq": "22,38"
      }
    ],
    "CleanPhrase": "[monarch, Bertalan Szemere]",
    "id": "b565b9a72721499f8857765c8003b017",
    "Phrase": "[Who;;, is;;, the monarch;;, of;;, Bertalan Szemere;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "monarch",
        "uri": "http://dbpedia.org/ontology/monarch",
        "seq": "11,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the state of Timothy J. Roemer ?",
    "SerialNumber": "4086",
    "Words": "[Name, the, state, of, Timothy, J, Roemer, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Timothy_J._Roemer\u003e \u003chttp://dbpedia.org/property/state\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Timothy J. Roemer",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Timothy_J._Roemer",
        "seq": "18,35"
      }
    ],
    "CleanPhrase": "[state, Timothy J Roemer]",
    "id": "4ad334fedc644b27b70be5eb63ee7379",
    "Phrase": "[the state;;, of;;, Timothy J Roemer;;]",
    "predicate mapping": [
      {
        "score": 283,
        "label": "state",
        "uri": "http://dbpedia.org/property/state",
        "seq": "9,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the location of Dad\u0027s Root Beer on Google maps?",
    "SerialNumber": "4094",
    "Words": "[What, is, the, location, of, Dad, \u0027s, Root, Beer, on, Google, maps, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Dad\u0027s_Root_Beer\u003e \u003chttp://dbpedia.org/property/locationCity\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Dad\u0027s Root Beer",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Dad\u0027s_Root_Beer",
        "seq": "24,39"
      }
    ],
    "CleanPhrase": "[location, Dad, \u0027s Root Beer, Google maps]",
    "id": "9e6adf11753c4b9aaf5b447c279a2806",
    "Phrase": "[What;;, is;;, the location;;, of;;, Dad;;, \u0027s Root Beer;;, on;;, Google maps;;]",
    "predicate mapping": [
      {
        "score": 178,
        "label": "location",
        "uri": "http://dbpedia.org/property/locationCity",
        "seq": "12,20",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the nearest city to David W. Brown House ?",
    "SerialNumber": "4103",
    "Words": "[Name, the, nearest, city, to, David, W, Brown, House, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/David_W._Brown_House\u003e \u003chttp://dbpedia.org/ontology/nearestCity\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "David W. Brown House",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/David_W._Brown_House",
        "seq": "25,45"
      }
    ],
    "CleanPhrase": "[nearest city, David W Brown House]",
    "id": "9d219753a5dd4445828a1191d8654d63",
    "Phrase": "[Name;;, the nearest city;;, to;;, David W Brown House;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "nearest city",
        "uri": "http://dbpedia.org/ontology/nearestCity",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the work institutions of Andrew Schally?",
    "SerialNumber": "4109",
    "Words": "[Name, the, work, institutions, of, Andrew, Schally, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Andrew_Schally\u003e \u003chttp://dbpedia.org/property/workInstitutions\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Andrew Schally",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Andrew_Schally",
        "seq": "30,44"
      }
    ],
    "CleanPhrase": "[work institutions, Andrew Schally]",
    "id": "133aa4a4648d4bb3b3f15ed06a0566cd",
    "Phrase": "[the work institutions;;, of;;, Andrew Schally;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "work institutions",
        "uri": "http://dbpedia.org/property/workInstitutions",
        "seq": "9,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where does the jurisdiction of European Border and Coast Guard fall?",
    "SerialNumber": "4114",
    "Words": "[Where, does, the, jurisdiction, of, European, Border, and, Coast, Guard, fall, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/European_Border_and_Coast_Guard\u003e \u003chttp://dbpedia.org/property/jurisdiction\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "European Border and Coast Guard",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/European_Border_and_Coast_Guard",
        "seq": "31,62"
      }
    ],
    "CleanPhrase": "[jurisdiction, European Border, Coast Guard, fall]",
    "id": "4d4d5eb4e4af459bb778d50006a9fc0b",
    "Phrase": "[Where;;, the jurisdiction;;, of;;, European Border;;, Coast Guard;;, fall;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "jurisdiction",
        "uri": "http://dbpedia.org/property/jurisdiction",
        "seq": "15,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is the stadium of Philadelphia Rage ?",
    "SerialNumber": "4119",
    "Words": "[Where, is, the, stadium, of, Philadelphia, Rage, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Philadelphia_Rage\u003e \u003chttp://dbpedia.org/ontology/stadium\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 76,
        "label": "Philadelphia Rage",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Philadelphia_Rage",
        "seq": "24,41"
      }
    ],
    "CleanPhrase": "[stadium, Philadelphia Rage]",
    "id": "9fbc4d9d9b2b46fab68cb8a4b910c7e3",
    "Phrase": "[Where;;, is;;, the stadium;;, of;;, Philadelphia Rage;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "stadium",
        "uri": "http://dbpedia.org/ontology/stadium",
        "seq": "13,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who designed the language integrated query?",
    "SerialNumber": "4124",
    "Words": "[Who, designed, the, language, integrated, query, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Language_Integrated_Query\u003e \u003chttp://dbpedia.org/ontology/designer\u003e ?uri  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "language integrated query",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Language_Integrated_Query",
        "seq": "17,42"
      }
    ],
    "CleanPhrase": "[designed, language integrated query]",
    "id": "13dbeaf27a1e47de9803518e1c666298",
    "Phrase": "[Who;;, designed;;, the language integrated query;;]",
    "predicate mapping": [
      {
        "score": 13,
        "label": "designed",
        "uri": "http://dbpedia.org/ontology/designer",
        "seq": "4,12",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who was the vice president under which elizabeth alexander served?",
    "SerialNumber": "4128",
    "Words": "[Who, was, the, vice, president, under, which, elizabeth, alexander, served, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Elizabeth_Alexander_(press_secretary)\u003e \u003chttp://dbpedia.org/ontology/vicePresident\u003e ?uri  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 581,
        "label": "elizabeth alexander",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Elizabeth_Alexander_(press_secretary)",
        "seq": "39,58"
      }
    ],
    "CleanPhrase": "[vice president, elizabeth alexander, served]",
    "id": "8815d1ddfc484214b7b55c86c2793625",
    "Phrase": "[Who;;, was;;, the vice president;;, under;;, which;;, elizabeth alexander;;, served;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "vice president",
        "uri": "http://dbpedia.org/ontology/vicePresident",
        "seq": "12,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the broadcast area of CFRX ?",
    "SerialNumber": "4142",
    "Words": "[What, is, the, broadcast, area, of, CFRX, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/CFRX\u003e \u003chttp://dbpedia.org/ontology/broadcastArea\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "CFRX",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/CFRX",
        "seq": "30,34"
      }
    ],
    "CleanPhrase": "[broadcast area, CFRX]",
    "id": "9a955de401c24f42860fa3e6615c803a",
    "Phrase": "[What;;, is;;, the broadcast area;;, of;;, CFRX;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "broadcast area",
        "uri": "http://dbpedia.org/ontology/broadcastArea",
        "seq": "12,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the venerated in of Edwin of Northumbria ?",
    "SerialNumber": "4146",
    "Words": "[What, is, the, venerated, in, of, Edwin, of, Northumbria, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Edwin_of_Northumbria\u003e \u003chttp://dbpedia.org/property/veneratedIn\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Edwin of Northumbria",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Edwin_of_Northumbria",
        "seq": "28,48"
      }
    ],
    "CleanPhrase": "[venerated, Edwin, Northumbria]",
    "id": "a09f56627a1f4c2b81bc88acfcd1d276",
    "Phrase": "[What;;, is;;, the venerated;;, in;;, of;;, Edwin;;, of;;, Northumbria;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "venerated in",
        "uri": "http://dbpedia.org/property/veneratedIn",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who operates Liverpool Playhouse ?",
    "SerialNumber": "4165",
    "Words": "[Who, operates, Liverpool, Playhouse, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Liverpool_Playhouse\u003e \u003chttp://dbpedia.org/ontology/operatedBy\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "Liverpool Playhouse",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Liverpool_Playhouse",
        "seq": "13,32"
      }
    ],
    "CleanPhrase": "[operates, Liverpool Playhouse]",
    "id": "0bad2fab137148b9af20a97efb55fe8b",
    "Phrase": "[Who;;, operates;;, Liverpool Playhouse;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "",
        "uri": "http://dbpedia.org/ontology/operatedBy",
        "seq": "0,0",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who owns Torrey Pines Gliderport?",
    "SerialNumber": "4167",
    "Words": "[Who, owns, Torrey, Pines, Gliderport, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Torrey_Pines_Gliderport\u003e \u003chttp://dbpedia.org/property/owner\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Torrey Pines Gliderport",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Torrey_Pines_Gliderport",
        "seq": "9,32"
      }
    ],
    "CleanPhrase": "[owns, Torrey Pines Gliderport]",
    "id": "832149002e9c4fbb885ab3ab42730390",
    "Phrase": "[Who;;, owns;;, Torrey Pines Gliderport;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "owns",
        "uri": "http://dbpedia.org/property/owner",
        "seq": "4,8",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "where did Deion Sanders debut?",
    "SerialNumber": "4168",
    "Words": "[where, did, Deion, Sanders, debut, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Deion_Sanders\u003e \u003chttp://dbpedia.org/property/debutteam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Deion Sanders",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Deion_Sanders",
        "seq": "10,23"
      }
    ],
    "CleanPhrase": "[Deion Sanders, debut]",
    "id": "23972462c8c7409cb83f6a8f21f0c607",
    "Phrase": "[where;;, Deion Sanders;;, debut;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "debut",
        "uri": "http://dbpedia.org/property/debutteam",
        "seq": "24,29",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the nationality of Sune Agerschou ?",
    "SerialNumber": "4177",
    "Words": "[What, is, the, nationality, of, Sune, Agerschou, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Sune_Agerschou\u003e \u003chttp://dbpedia.org/ontology/nationality\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Sune Agerschou",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Sune_Agerschou",
        "seq": "27,41"
      }
    ],
    "CleanPhrase": "[nationality, Sune Agerschou]",
    "id": "571c9d7dbe1f4a07a655803197f286d4",
    "Phrase": "[What;;, is;;, the nationality;;, of;;, Sune Agerschou;;]",
    "predicate mapping": [
      {
        "score": 13,
        "label": "nationality",
        "uri": "http://dbpedia.org/ontology/nationality",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the distributing label of StandBy Records ?",
    "SerialNumber": "4184",
    "Words": "[What, is, the, distributing, label, of, StandBy, Records, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/StandBy_Records\u003e \u003chttp://dbpedia.org/ontology/distributingLabel\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 5,
        "label": "StandBy Records",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/StandBy_Records",
        "seq": "34,49"
      }
    ],
    "CleanPhrase": "[distributing label, StandBy Records]",
    "id": "9fd2de743eac4abf82d003f30ce832e3",
    "Phrase": "[What;;, is;;, the distributing label;;, of;;, StandBy Records;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "distributing label",
        "uri": "http://dbpedia.org/ontology/distributingLabel",
        "seq": "12,30",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What are some products manufactured by Sony? ",
    "SerialNumber": "4197",
    "Words": "[What, are, some, products, manufactured, by, Sony, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/manufacturer\u003e \u003chttp://dbpedia.org/resource/Sony\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 131,
        "label": "Sony",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Sony",
        "seq": "39,43"
      }
    ],
    "CleanPhrase": "[products, manufactured, Sony]",
    "id": "20279be806b8412f9bc87ac6de8c50aa",
    "Phrase": "[What;;, are;;, some products;;, manufactured;;, by;;, Sony;;]",
    "predicate mapping": [
      {
        "score": 7,
        "label": "manufactured by",
        "uri": "http://dbpedia.org/ontology/manufacturer",
        "seq": "23,38",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "AH141 highway is a part of which country?",
    "SerialNumber": "4214",
    "Words": "[AH141, highway, is, a, part, of, which, country, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/AH141\u003e \u003chttp://dbpedia.org/ontology/county\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "AH141",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/AH141",
        "seq": "0,5"
      }
    ],
    "CleanPhrase": "[AH141 highway, part, country]",
    "id": "c88a014e1fb347f1aa31dc40e7c66e55",
    "Phrase": "[AH141 highway;;, is;;, a part;;, of;;, which;;, country;;]",
    "predicate mapping": [
      {
        "score": 69,
        "label": "country",
        "uri": "http://dbpedia.org/ontology/county",
        "seq": "33,40",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the first driver of 1999 San Marino Grand Prix ?",
    "SerialNumber": "4230",
    "Words": "[Name, the, first, driver, of, 1999, San, Marino, Grand, Prix, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/1999_San_Marino_Grand_Prix\u003e \u003chttp://dbpedia.org/ontology/firstDriver\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "1999 San Marino Grand Prix",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/1999_San_Marino_Grand_Prix",
        "seq": "25,51"
      }
    ],
    "CleanPhrase": "[driver, 1999 San Marino Grand Prix]",
    "id": "950ceddbc0c5404eabe9f4770407937b",
    "Phrase": "[Name;;, the first driver;;, of;;, 1999 San Marino Grand Prix;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "first driver",
        "uri": "http://dbpedia.org/ontology/firstDriver",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the awards won by Elie Wiesel ?",
    "SerialNumber": "4250",
    "Words": "[Name, the, awards, won, by, Elie, Wiesel, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Elie_Wiesel\u003e \u003chttp://dbpedia.org/property/awards\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Elie Wiesel",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Elie_Wiesel",
        "seq": "23,34"
      }
    ],
    "CleanPhrase": "[awards, won, Elie Wiesel]",
    "id": "1c52f65be95947dab2143ce16d756039",
    "Phrase": "[the awards;;, won;;, by;;, Elie Wiesel;;]",
    "predicate mapping": [
      {
        "score": 7,
        "label": "awards",
        "uri": "http://dbpedia.org/property/awards",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the home stadium of Kenya\u0027s women national football team ?",
    "SerialNumber": "4251",
    "Words": "[What, is, the, home, stadium, of, Kenya, \u0027s, women, national, football, team, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Kenya_women\u0027s_national_football_team\u003e \u003chttp://dbpedia.org/property/homeStadium\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Kenya\u0027s women national football team",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Kenya_women\u0027s_national_football_team",
        "seq": "28,33"
      }
    ],
    "CleanPhrase": "[home stadium, Kenya, \u0027s women national football team]",
    "id": "50f4fe1ce39347729daff3f6980c6107",
    "Phrase": "[What;;, is;;, the home stadium;;, of;;, Kenya;;, \u0027s women national football team;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "home stadium",
        "uri": "http://dbpedia.org/property/homeStadium",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the local authority of Trinity School, Brentwood ?",
    "SerialNumber": "4269",
    "Words": "[Name, the, local, authority, of, Trinity, School, ,, Brentwood, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Trinity_School,_Brentwood\u003e \u003chttp://dbpedia.org/ontology/localAuthority\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Trinity School, Brentwood",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Trinity_School,_Brentwood",
        "seq": "28,53"
      }
    ],
    "CleanPhrase": "[local authority, Trinity School, Brentwood]",
    "id": "ef6dc0a3edb54f33bf874f7c5b9dae0a",
    "Phrase": "[Name;;, the local authority;;, of;;, Trinity School;;, Brentwood;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "local authority",
        "uri": "http://dbpedia.org/ontology/localAuthority",
        "seq": "9,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the label of Double Diamond (album) ?",
    "SerialNumber": "4271",
    "Words": "[What, is, the, label, of, Double, Diamond, \\, (, album, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Double_Diamond_(album)\u003e \u003chttp://dbpedia.org/ontology/recordLabel\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Double Diamond (album)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Double_Diamond_(album)",
        "seq": "21,43"
      }
    ],
    "CleanPhrase": "[label, Double Diamond]",
    "id": "e4aba45bbd7247a2849bb269cb3fc809",
    "Phrase": "[What;;, is;;, the label;;, of;;, Double Diamond;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "label",
        "uri": "http://dbpedia.org/ontology/recordLabel",
        "seq": "12,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the profession of Claiborne Pell ?",
    "SerialNumber": "4293",
    "Words": "[What, is, the, profession, of, Claiborne, Pell, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Claiborne_Pell\u003e \u003chttp://dbpedia.org/ontology/profession\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Claiborne Pell",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Claiborne_Pell",
        "seq": "26,40"
      }
    ],
    "CleanPhrase": "[profession, Claiborne Pell]",
    "id": "2ead55d30e1d4a53b7f6ef00e0fe8125",
    "Phrase": "[What;;, is;;, the profession;;, of;;, Claiborne Pell;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "profession",
        "uri": "http://dbpedia.org/ontology/profession",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the developer of Dart (programming language) ?",
    "SerialNumber": "4322",
    "Words": "[Who, is, the, developer, of, Dart, \\, (, programming, language, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Dart_(programming_language)\u003e \u003chttp://dbpedia.org/property/developer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Dart (programming language)",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Dart_(programming_language)",
        "seq": "24,51"
      }
    ],
    "CleanPhrase": "[developer, Dart]",
    "id": "60524d1955cf4a6eba1f5eab56431ce4",
    "Phrase": "[Who;;, is;;, the developer;;, of;;, Dart;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "developer",
        "uri": "http://dbpedia.org/property/developer",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who is the political figure whose military branch is Colonial troops?",
    "SerialNumber": "4328",
    "Words": "[Who, is, the, political, figure, whose, military, branch, is, Colonial, troops, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/militaryBranch\u003e \u003chttp://dbpedia.org/resource/Colonial_troops\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Colonial troops",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Colonial_troops",
        "seq": "53,68"
      }
    ],
    "CleanPhrase": "[political figure, military branch, Colonial troops]",
    "id": "b80824e9484341ffa682161fdd38a1fa",
    "Phrase": "[Who;;, is;;, the political figure;;, whose military branch;;, is;;, Colonial troops;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "military branch",
        "uri": "http://dbpedia.org/ontology/militaryBranch",
        "seq": "34,49",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which scientist is known for writing Philosophi Naturalis Principia Mathematica?",
    "SerialNumber": "4336",
    "Words": "[Which, scientist, is, known, for, writing, Philosophi, Naturalis, Principia, Mathematica, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/knownFor\u003e \u003chttp://dbpedia.org/resource/Philosophiæ_Naturalis_Principia_Mathematica\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Principia Mathematica",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Philosophiæ_Naturalis_Principia_Mathematica",
        "seq": "58,79"
      }
    ],
    "CleanPhrase": "[scientist, writing, Philosophi Naturalis Principia Mathematica]",
    "id": "b01faa87ad5d492582e9236745d1282d",
    "Phrase": "[Which scientist;;, is known;;, for;;, writing;;, Philosophi Naturalis Principia Mathematica;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "known for",
        "uri": "http://dbpedia.org/property/knownFor",
        "seq": "19,28",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which state eorge M. Chilcott  belong ?",
    "SerialNumber": "4341",
    "Words": "[To, which, state, eorge, M, Chilcott, belong, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/George_M._Chilcott\u003e \u003chttp://dbpedia.org/property/state\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "eorge M. Chilcott",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/George_M._Chilcott",
        "seq": "21,32"
      }
    ],
    "CleanPhrase": "[state, eorge M Chilcott, belong]",
    "id": "02be653e65e640b390467b40c75c8113",
    "Phrase": "[To;;, which;;, state;;, eorge M Chilcott;;, belong;;]",
    "predicate mapping": [
      {
        "score": 283,
        "label": "state",
        "uri": "http://dbpedia.org/property/state",
        "seq": "9,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the predecessor of Voere ?",
    "SerialNumber": "4353",
    "Words": "[Who, is, the, predecessor, of, Voere, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Voere\u003e \u003chttp://dbpedia.org/ontology/predecessor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Voere",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Voere",
        "seq": "26,31"
      }
    ],
    "CleanPhrase": "[predecessor, Voere]",
    "id": "5aa7006cd15c46c2bb25952420fc9ab6",
    "Phrase": "[Who;;, is;;, the predecessor;;, of;;, Voere;;]",
    "predicate mapping": [
      {
        "score": 22,
        "label": "predecessor",
        "uri": "http://dbpedia.org/ontology/predecessor",
        "seq": "11,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the writer of He\u0027s a Pirate ?",
    "SerialNumber": "4360",
    "Words": "[Who, is, the, writer, of, He, \u0027s, a, Pirate, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/He\u0027s_a_Pirate\u003e \u003chttp://dbpedia.org/property/writer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "He\u0027s a Pirate",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/He\u0027s_a_Pirate",
        "seq": "21,34"
      }
    ],
    "CleanPhrase": "[writer, \u0027s, Pirate]",
    "id": "84e39f9dfd9b421eaede863a68c7d3dd",
    "Phrase": "[Who;;, is;;, the writer;;, of;;, He;;, \u0027s;;, a Pirate \\;;]",
    "predicate mapping": [
      {
        "score": 64,
        "label": "writer",
        "uri": "http://dbpedia.org/property/writer",
        "seq": "11,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where did anton ausserer die?",
    "SerialNumber": "4366",
    "Words": "[Where, did, anton, ausserer, die, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Anton_Ausserer\u003e \u003chttp://dbpedia.org/property/deathPlace\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "anton ausserer",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Anton_Ausserer",
        "seq": "10,24"
      }
    ],
    "CleanPhrase": "[anton ausserer, die]",
    "id": "249446474067450f80688ee178af8d63",
    "Phrase": "[Where;;, anton ausserer;;, die;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "die",
        "uri": "http://dbpedia.org/property/deathPlace",
        "seq": "25,28",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What has  location as Ontario?",
    "SerialNumber": "4372",
    "Words": "[What, has, location, as, Ontario, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/location\u003e \u003chttp://dbpedia.org/resource/Ontario\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6507,
        "label": "Ontario",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Ontario",
        "seq": "22,29"
      }
    ],
    "CleanPhrase": "[location, Ontario]",
    "id": "846635db38f040eaa3478eac855e39e8",
    "Phrase": "[What;;, has;;, location;;, as;;, Ontario;;]",
    "predicate mapping": [
      {
        "score": 22,
        "label": "location",
        "uri": "http://dbpedia.org/ontology/location",
        "seq": "10,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was  William Anthony  trained ?",
    "SerialNumber": "4373",
    "Words": "[Where, was, William, Anthony, trained, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/William_Anthony_(artist)\u003e \u003chttp://dbpedia.org/ontology/training\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 389,
        "label": "William Anthony",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/William_Anthony_(artist)",
        "seq": "11,26"
      }
    ],
    "CleanPhrase": "[William Anthony, trained]",
    "id": "5bcc534759a2403ca4f0e614344dc088",
    "Phrase": "[Where;;, was;;, William Anthony;;, trained;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "trained",
        "uri": "http://dbpedia.org/ontology/training",
        "seq": "28,35",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "City of Miami Cemetery is the governing body of which city?",
    "SerialNumber": "4375",
    "Words": "[City, of, Miami, Cemetery, is, the, governing, body, of, which, city, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/City_of_Miami_Cemetery\u003e \u003chttp://dbpedia.org/property/governingBody\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "City of Miami Cemetery",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/City_of_Miami_Cemetery",
        "seq": "0,22"
      }
    ],
    "CleanPhrase": "[City, Miami Cemetery, governing body, city]",
    "id": "a3c789f47bd247b6be843aa13563bc36",
    "Phrase": "[City;;, of;;, Miami Cemetery;;, is;;, the governing body;;, of;;, which;;, city;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "governing body",
        "uri": "http://dbpedia.org/property/governingBody",
        "seq": "30,44",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Whose military unit is 39th infantry regiment in 1812?",
    "SerialNumber": "4403",
    "Words": "[Whose, military, unit, is, 39th, infantry, regiment, in, 1812, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/militaryUnit\u003e \u003chttp://dbpedia.org/resource/39th_Infantry_Regiment_(War_of_1812)\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 266,
        "label": "39th infantry regiment",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/39th_Infantry_Regiment_(War_of_1812)",
        "seq": "23,45"
      }
    ],
    "CleanPhrase": "[military unit, 39th infantry regiment, 1812]",
    "id": "2ee9621573e44f3caa895a060b7ebda9",
    "Phrase": "[Whose military unit;;, is;;, 39th infantry regiment;;, in;;, 1812;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "military unit",
        "uri": "http://dbpedia.org/ontology/militaryUnit",
        "seq": "6,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the current members of Metro Station (band) ?",
    "SerialNumber": "4405",
    "Words": "[List, the, current, members, of, Metro, Station, \\, (, band, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Metro_Station_(band)\u003e \u003chttp://dbpedia.org/property/currentMembers\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Metro Station (band)",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Metro_Station_(band)",
        "seq": "28,48"
      }
    ],
    "CleanPhrase": "[List, current members, Metro Station]",
    "id": "74c5d0464b124cb38cdf4cd48125cf81",
    "Phrase": "[List;;, the current members;;, of;;, Metro Station;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "current members",
        "uri": "http://dbpedia.org/property/currentMembers",
        "seq": "9,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the builder of Presidio Santa Cruz de Terrenate ?",
    "SerialNumber": "4407",
    "Words": "[Who, is, the, builder, of, Presidio, Santa, Cruz, de, Terrenate, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Presidio_Santa_Cruz_de_Terrenate\u003e \u003chttp://dbpedia.org/ontology/builder\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Presidio Santa Cruz de Terrenate",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Presidio_Santa_Cruz_de_Terrenate",
        "seq": "22,54"
      }
    ],
    "CleanPhrase": "[builder, Presidio Santa Cruz de]",
    "id": "951936711e75498793c0cc4258ef5eb3",
    "Phrase": "[Who;;, is;;, the builder;;, of;;, Presidio Santa Cruz de;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "builder",
        "uri": "http://dbpedia.org/ontology/builder",
        "seq": "11,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the ingredients of Kaszanka?",
    "SerialNumber": "4412",
    "Words": "[List, the, ingredients, of, Kaszanka, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Kaszanka\u003e \u003chttp://dbpedia.org/ontology/ingredient\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Kaszanka",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Kaszanka",
        "seq": "24,32"
      }
    ],
    "CleanPhrase": "[List, ingredients, Kaszanka]",
    "id": "5a183f932ebe44a9bc2b48aa7f73e605",
    "Phrase": "[List;;, the ingredients;;, of;;, Kaszanka;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "ingredient",
        "uri": "http://dbpedia.org/ontology/ingredient",
        "seq": "9,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What religion did Gamini Seneviratne follow?",
    "SerialNumber": "4415",
    "Words": "[What, religion, did, Gamini, Seneviratne, follow, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Gamini_Seneviratne\u003e \u003chttp://dbpedia.org/ontology/religion\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Gamini Seneviratne",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Gamini_Seneviratne",
        "seq": "18,36"
      }
    ],
    "CleanPhrase": "[religion, Gamini Seneviratne, follow]",
    "id": "c73a4a3eacb742309e74d6f0c2e8e729",
    "Phrase": "[What religion;;, did;;, Gamini Seneviratne;;, follow;;]",
    "predicate mapping": [
      {
        "score": 14,
        "label": "religion",
        "uri": "http://dbpedia.org/ontology/religion",
        "seq": "5,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the alma mater of Andrew W. Lewis ?",
    "SerialNumber": "4442",
    "Words": "[What, is, the, alma, mater, of, Andrew, W, Lewis, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Andrew_W._Lewis\u003e \u003chttp://dbpedia.org/ontology/almaMater\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Andrew W. Lewis",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Andrew_W._Lewis",
        "seq": "26,41"
      }
    ],
    "CleanPhrase": "[alma mater, Andrew W Lewis]",
    "id": "89e6c9790a3e43338859011415755939",
    "Phrase": "[What;;, is;;, the alma mater;;, of;;, Andrew W Lewis;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "alma mater",
        "uri": "http://dbpedia.org/ontology/almaMater",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the architect of Marine Corps Air Station Kaneohe Bay ?",
    "SerialNumber": "4464",
    "Words": "[Name, the, architect, of, Marine, Corps, Air, Station, Kaneohe, Bay, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay\u003e \u003chttp://dbpedia.org/property/architect\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Marine Corps Air Station Kaneohe Bay",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay",
        "seq": "22,58"
      }
    ],
    "CleanPhrase": "[architect, Marine Corps Air Station Kaneohe Bay]",
    "id": "81ed6105f8064c79a73b3ad0ab2f0dcd",
    "Phrase": "[the architect;;, of;;, Marine Corps Air Station Kaneohe Bay;;]",
    "predicate mapping": [
      {
        "score": 45,
        "label": "architect",
        "uri": "http://dbpedia.org/property/architect",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In which races did Mouse Morris take part?",
    "SerialNumber": "4476",
    "Words": "[In, which, races, did, Mouse, Morris, take, part, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Mouse_Morris\u003e \u003chttp://dbpedia.org/property/race\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 43,
        "label": "Mouse Morris",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Mouse_Morris",
        "seq": "19,31"
      }
    ],
    "CleanPhrase": "[races, Mouse Morris, part]",
    "id": "500a1a24138f4ee68a58423b2a86132d",
    "Phrase": "[In;;, which;;, races;;, did;;, Mouse Morris;;, take;;, part;;]",
    "predicate mapping": [
      {
        "score": 397,
        "label": "race",
        "uri": "http://dbpedia.org/property/race",
        "seq": "9,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the meaning of Heydar ?",
    "SerialNumber": "4480",
    "Words": "[What, is, the, meaning, of, Heydar, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Heydar\u003e \u003chttp://dbpedia.org/property/meaning\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Heydar",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Heydar",
        "seq": "23,29"
      }
    ],
    "CleanPhrase": "[meaning, Heydar]",
    "id": "43d5d1b277764d509013b0740a1134cd",
    "Phrase": "[What;;, is;;, the meaning;;, of;;, Heydar;;]",
    "predicate mapping": [
      {
        "score": 104,
        "label": "meaning",
        "uri": "http://dbpedia.org/property/meaning",
        "seq": "12,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name all the junctions of U.S. Route 59?",
    "SerialNumber": "4484",
    "Words": "[Name, all, the, junctions, of, U, S, Route, 59, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/U.S._Route_59\u003e \u003chttp://dbpedia.org/property/junction\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 14,
        "label": "U.S. Route 59",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/U.S._Route_59",
        "seq": "26,39"
      }
    ],
    "CleanPhrase": "[junctions, U S Route 59]",
    "id": "34fe2288fd964273ad3d8a6c884539e7",
    "Phrase": "[Name;;, all the junctions;;, of;;, U S Route 59;;]",
    "predicate mapping": [
      {
        "score": 15,
        "label": "junction",
        "uri": "http://dbpedia.org/property/junction",
        "seq": "13,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the route start of Saint Petersburg  Moscow Railway ?",
    "SerialNumber": "4498",
    "Words": "[Name, the, route, start, of, Saint, Petersburg, Moscow, Railway, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Saint_Petersburg_–_Moscow_Railway\u003e \u003chttp://dbpedia.org/ontology/routeStart\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "Saint Petersburg Moscow Railway",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Saint_Petersburg_–_Moscow_Railway",
        "seq": "-1,30"
      }
    ],
    "CleanPhrase": "[route start, Saint Petersburg Moscow Railway]",
    "id": "60cca930301f44db9b136d974bf6b92e",
    "Phrase": "[Name;;, the route start;;, of;;, Saint Petersburg Moscow Railway;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "route start",
        "uri": "http://dbpedia.org/ontology/routeStart",
        "seq": "9,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the appointer of Earl B. Ruth ?",
    "SerialNumber": "4510",
    "Words": "[Who, is, the, appointer, of, Earl, B, Ruth, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Earl_B._Ruth\u003e \u003chttp://dbpedia.org/property/appointer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Earl B. Ruth",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Earl_B._Ruth",
        "seq": "24,36"
      }
    ],
    "CleanPhrase": "[appointer, Earl B Ruth]",
    "id": "dbfcf2136b7344f1830bc4405769bc6d",
    "Phrase": "[Who;;, is;;, the appointer;;, of;;, Earl B Ruth;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "appointer",
        "uri": "http://dbpedia.org/property/appointer",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which river does Katima Mulilo Bridge cross?",
    "SerialNumber": "4512",
    "Words": "[Which, river, does, Katima, Mulilo, Bridge, cross, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Katima_Mulilo_Bridge\u003e \u003chttp://dbpedia.org/property/crosses\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Katima Mulilo Bridge",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Katima_Mulilo_Bridge",
        "seq": "17,37"
      }
    ],
    "CleanPhrase": "[river, Katima Mulilo Bridge cross]",
    "id": "fb2bca9718884cd19844ef5476627883",
    "Phrase": "[Which river;;, does;;, Katima Mulilo Bridge cross;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "cross",
        "uri": "http://dbpedia.org/property/crosses",
        "seq": "38,43",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the city of Phil-Ellena ?",
    "SerialNumber": "4515",
    "Words": "[Name, the, city, of, Phil, Ellena, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Phil-Ellena\u003e \u003chttp://dbpedia.org/ontology/city\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Phil-Ellena",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Phil-Ellena",
        "seq": "17,28"
      }
    ],
    "CleanPhrase": "[city, Phil, Ellena]",
    "id": "6f2c1b486fea4099ad02147fd9c090c8",
    "Phrase": "[the city;;, of;;, Phil;;, Ellena;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "city",
        "uri": "http://dbpedia.org/ontology/city",
        "seq": "9,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which nation did David Animle Hanses owe his allegiance?",
    "SerialNumber": "4517",
    "Words": "[To, which, nation, did, David, Animle, Hanses, owe, his, allegiance, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/David_Animle_Hansen\u003e \u003chttp://dbpedia.org/property/allegiance\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "David Animle Hanses",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/David_Animle_Hansen",
        "seq": "20,39"
      }
    ],
    "CleanPhrase": "[nation, David Animle Hanses, owe, allegiance]",
    "id": "14230056a4a745b8b5ed6e10149011b0",
    "Phrase": "[To;;, which;;, nation;;, did;;, David Animle Hanses;;, owe;;, his allegiance;;]",
    "predicate mapping": [
      {
        "score": 18,
        "label": "allegiance",
        "uri": "http://dbpedia.org/property/allegiance",
        "seq": "48,58",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Name the ones who debuted in the San Francisco 49ers.",
    "SerialNumber": "4526",
    "Words": "[Name, the, ones, who, debuted, in, the, San, Francisco, 49ers]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/debutTeam\u003e \u003chttp://dbpedia.org/resource/San_Francisco_49ers\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "San Francisco 49ers",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/San_Francisco_49ers",
        "seq": "33,52"
      }
    ],
    "CleanPhrase": "[debuted, San Francisco 49ers]",
    "id": "c46d642e8b374c718591fa89a18d4498",
    "Phrase": "[Name;;, the ones;;, who;;, debuted;;, in;;, the San Francisco 49ers;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "debuted",
        "uri": "http://dbpedia.org/ontology/debutTeam",
        "seq": "18,25",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where is the headquarter of Regional Transit Authority of Southeast Michigan ?",
    "SerialNumber": "4539",
    "Words": "[Where, is, the, headquarter, of, Regional, Transit, Authority, of, Southeast, Michigan, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Regional_Transit_Authority_of_Southeast_Michigan\u003e \u003chttp://dbpedia.org/property/headquarters\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Regional Transit Authority of Southeast Michigan",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Regional_Transit_Authority_of_Southeast_Michigan",
        "seq": "28,76"
      }
    ],
    "CleanPhrase": "[headquarter, Regional Transit Authority, Southeast Michigan]",
    "id": "f0d17b5fa2ce4598ae52fa5bb9b644ab",
    "Phrase": "[Where;;, is;;, the headquarter;;, of;;, Regional Transit Authority;;, of;;, Southeast Michigan \\;;]",
    "predicate mapping": [
      {
        "score": 27,
        "label": "headquarter",
        "uri": "http://dbpedia.org/property/headquarters",
        "seq": "13,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the appointer of Charles Goodell ?",
    "SerialNumber": "4540",
    "Words": "[Who, is, the, appointer, of, Charles, Goodell, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Charles_Goodell\u003e \u003chttp://dbpedia.org/ontology/appointer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 12,
        "label": "Charles Goodell",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Charles_Goodell",
        "seq": "24,39"
      }
    ],
    "CleanPhrase": "[appointer, Charles Goodell]",
    "id": "7cecf227f82e424e953870dbd55f9a58",
    "Phrase": "[Who;;, is;;, the appointer;;, of;;, Charles Goodell;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "appointer",
        "uri": "http://dbpedia.org/ontology/appointer",
        "seq": "11,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the destinations of Novair International Airways ?",
    "SerialNumber": "4548",
    "Words": "[List, the, destinations, of, Novair, International, Airways, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Novair_International_Airways\u003e \u003chttp://dbpedia.org/property/destinations\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Novair International Airways",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Novair_International_Airways",
        "seq": "25,53"
      }
    ],
    "CleanPhrase": "[List, destinations, Novair International Airways]",
    "id": "6399efe5ee3f4af7853501362f0efde3",
    "Phrase": "[List;;, the destinations;;, of;;, Novair International Airways;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "destinations",
        "uri": "http://dbpedia.org/property/destinations",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the guests of On Broadway ?",
    "SerialNumber": "4549",
    "Words": "[List, the, guests, of, On, Broadway, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/On_Broadway_(Smash)\u003e \u003chttp://dbpedia.org/property/guests\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 163,
        "label": "On Broadway",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/On_Broadway_(Smash)",
        "seq": "19,30"
      }
    ],
    "CleanPhrase": "[List, guests, Broadway]",
    "id": "9fd4114ea96b48438d0091ba51b47a86",
    "Phrase": "[List;;, the guests;;, of;;, On Broadway \\;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "guests",
        "uri": "http://dbpedia.org/property/guests",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the political party to which Purnima Banerjee is a member of??",
    "SerialNumber": "4557",
    "Words": "[What, is, the, political, party, to, which, Purnima, Banerjee, is, a, member, of, \\, ?, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Purnima_Banerjee\u003e \u003chttp://dbpedia.org/ontology/party\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Purnima Banerjee",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Purnima_Banerjee",
        "seq": "37,53"
      }
    ],
    "CleanPhrase": "[political party, Purnima Banerjee, member]",
    "id": "42a5180e4dc54977ac1383fad51c98c2",
    "Phrase": "[What;;, is;;, the political party;;, to;;, which;;, Purnima Banerjee;;, is;;, a member;;, of;;]",
    "predicate mapping": [
      {
        "score": 34,
        "label": "political party",
        "uri": "http://dbpedia.org/ontology/party",
        "seq": "12,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "what has been developed by John Fanning?",
    "SerialNumber": "4568",
    "Words": "[what, has, been, developed, by, John, Fanning, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/developer\u003e \u003chttp://dbpedia.org/resource/John_Fanning_(businessman)\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 98,
        "label": "John Fanning",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/John_Fanning_(businessman)",
        "seq": "27,39"
      }
    ],
    "CleanPhrase": "[developed, John Fanning]",
    "id": "d018211e5cad471cb48e42286b59f8bc",
    "Phrase": "[what;;, has been developed;;, by;;, John Fanning;;]",
    "predicate mapping": [
      {
        "score": 16,
        "label": "developed by",
        "uri": "http://dbpedia.org/ontology/developer",
        "seq": "14,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the province of Egypt Nanotechnology Center ?",
    "SerialNumber": "4578",
    "Words": "[What, is, the, province, of, Egypt, Nanotechnology, Center, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Egypt_Nanotechnology_Center\u003e \u003chttp://dbpedia.org/property/province\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Egypt Nanotechnology Center",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Egypt_Nanotechnology_Center",
        "seq": "24,51"
      }
    ],
    "CleanPhrase": "[province, Egypt Nanotechnology Center]",
    "id": "a1b2a89fbda54f5aa1f4d78972f6b0ce",
    "Phrase": "[What;;, is;;, the province;;, of;;, Egypt Nanotechnology Center;;]",
    "predicate mapping": [
      {
        "score": 72,
        "label": "province",
        "uri": "http://dbpedia.org/property/province",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where did Rheinmetall MG 60 originated ?",
    "SerialNumber": "4581",
    "Words": "[Where, did, Rheinmetall, MG, 60, originated, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Rheinmetall_MG_60\u003e \u003chttp://dbpedia.org/ontology/origin\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Rheinmetall MG 60",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Rheinmetall_MG_60",
        "seq": "10,27"
      }
    ],
    "CleanPhrase": "[Rheinmetall MG 60, originated]",
    "id": "22555965f19f4a6e92729f88efea818c",
    "Phrase": "[Where;;, Rheinmetall MG 60;;, originated;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "origin",
        "uri": "http://dbpedia.org/ontology/origin",
        "seq": "28,34",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the river mouth of Moordener Kill ?",
    "SerialNumber": "4588",
    "Words": "[Name, the, river, mouth, of, Moordener, Kill, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Moordener_Kill\u003e \u003chttp://dbpedia.org/ontology/riverMouth\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Moordener Kill",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Moordener_Kill",
        "seq": "24,38"
      }
    ],
    "CleanPhrase": "[river mouth, Moordener, Kill]",
    "id": "c4229602891d40e0b35e90c5f8098d4b",
    "Phrase": "[Name;;, the river mouth;;, of;;, Moordener;;, Kill;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "river mouth",
        "uri": "http://dbpedia.org/ontology/riverMouth",
        "seq": "9,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What type of engines are utilised by Purvis Eureka?",
    "SerialNumber": "4592",
    "Words": "[What, type, of, engines, are, utilised, by, Purvis, Eureka, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Purvis_Eureka\u003e \u003chttp://dbpedia.org/property/engine\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Purvis Eureka",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Purvis_Eureka",
        "seq": "37,50"
      }
    ],
    "CleanPhrase": "[type, engines, utilised, Purvis Eureka]",
    "id": "75fa0d818e204f15beda5bf1e16d1d58",
    "Phrase": "[What type;;, of;;, engines;;, are utilised;;, by;;, Purvis Eureka;;]",
    "predicate mapping": [
      {
        "score": 110,
        "label": "engine",
        "uri": "http://dbpedia.org/property/engine",
        "seq": "13,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who did Daniel Gibson marry?",
    "SerialNumber": "4613",
    "Words": "[Who, did, Daniel, Gibson, marry, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/spouse\u003e \u003chttp://dbpedia.org/resource/Daniel_Gibson\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Daniel Gibson",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Daniel_Gibson",
        "seq": "8,21"
      }
    ],
    "CleanPhrase": "[Daniel Gibson, marry]",
    "id": "4b249c6c2fef48e889eb99914a430034",
    "Phrase": "[Who;;, did;;, Daniel Gibson;;, marry;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "marry",
        "uri": "http://dbpedia.org/ontology/spouse",
        "seq": "22,27",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the regions served by Toll Global Express ?",
    "SerialNumber": "4625",
    "Words": "[Name, the, regions, served, by, Toll, Global, Express, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Toll_Global_Express\u003e \u003chttp://dbpedia.org/ontology/regionServed\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Toll Global Express",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Toll_Global_Express",
        "seq": "27,46"
      }
    ],
    "CleanPhrase": "[regions, served, Toll Global Express]",
    "id": "0aef05bbe0154edd9c0c705a89a3c182",
    "Phrase": "[Name;;, the regions;;, served;;, by;;, Toll Global Express;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "regions served",
        "uri": "http://dbpedia.org/ontology/regionServed",
        "seq": "9,23",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the ssignificant buildings of Ivan Fomin ?",
    "SerialNumber": "4638",
    "Words": "[Name, the, ssignificant, buildings, of, Ivan, Fomin, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Ivan_Fomin\u003e \u003chttp://dbpedia.org/ontology/significantBuilding\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Ivan Fomin",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Ivan_Fomin",
        "seq": "35,45"
      }
    ],
    "CleanPhrase": "[ssignificant buildings, Ivan Fomin]",
    "id": "4c026c13b12440d5b522a35a7614900a",
    "Phrase": "[Name;;, the ssignificant buildings;;, of;;, Ivan Fomin;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "significant building",
        "uri": "http://dbpedia.org/ontology/significantBuilding",
        "seq": "10,30",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the name of the homeground of football team Panionios G.S.S.?",
    "SerialNumber": "4643",
    "Words": "[What, is, the, name, of, the, homeground, of, football, team, Panionios, G, S, S, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/2013–14_Panionios_G.S.S._season\u003e \u003chttp://dbpedia.org/ontology/ground\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 9,
        "label": "Panionios G.S.S.",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/2013–14_Panionios_G.S.S._season",
        "seq": "52,68"
      }
    ],
    "CleanPhrase": "[homeground, football team, Panionios G S S]",
    "id": "e2c1089bbf4440f798c4e4415ab5b6c1",
    "Phrase": "[What;;, is;;, the name;;, of;;, the homeground;;, of;;, football team;;, Panionios G S S;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "ground",
        "uri": "http://dbpedia.org/ontology/ground",
        "seq": "28,34",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the primary  subjects of A Christian Turn\u0027d Turk?",
    "SerialNumber": "4652",
    "Words": "[List, the, primary, subjects, of, A, Christian, Turn, \u0027d, Turk, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/A_Christian_Turn\u0027d_Turk\u003e \u003chttp://dbpedia.org/property/subject\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "A Christian Turn\u0027d Turk",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/A_Christian_Turn\u0027d_Turk",
        "seq": "30,53"
      }
    ],
    "CleanPhrase": "[List, primary subjects, Christian Turn]",
    "id": "edcf0c29b7884073984ea20413f0eb1c",
    "Phrase": "[List;;, the primary subjects;;, of;;, A Christian Turn;;]",
    "predicate mapping": [
      {
        "score": 24,
        "label": "subject",
        "uri": "http://dbpedia.org/property/subject",
        "seq": "18,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the  outflow of Lake Uniamsi?",
    "SerialNumber": "4660",
    "Words": "[List, the, outflow, of, Lake, Uniamsi, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Lake_Uniamési\u003e \u003chttp://dbpedia.org/ontology/outflow\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Lake Uniamsi",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Lake_Uniamési",
        "seq": "21,33"
      }
    ],
    "CleanPhrase": "[List, outflow, Lake Uniamsi]",
    "id": "307417ba7c684e2887f17e9a33b81e3e",
    "Phrase": "[List;;, the outflow;;, of;;, Lake Uniamsi;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "outflow",
        "uri": "http://dbpedia.org/ontology/outflow",
        "seq": "10,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the major shrines of Jovan Vladimir?",
    "SerialNumber": "4665",
    "Words": "[List, the, major, shrines, of, Jovan, Vladimir, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Jovan_Vladimir\u003e \u003chttp://dbpedia.org/property/majorShrine\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Jovan Vladimir",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Jovan_Vladimir",
        "seq": "26,40"
      }
    ],
    "CleanPhrase": "[List, major shrines, Jovan Vladimir]",
    "id": "de4a17ef8b2f4b39b40ef30f83c56a81",
    "Phrase": "[List;;, the major shrines;;, of;;, Jovan Vladimir;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "major shrine",
        "uri": "http://dbpedia.org/property/majorShrine",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What are on the borders of Shimsa Plateau?",
    "SerialNumber": "4668",
    "Words": "[What, are, on, the, borders, of, Shimsa, Plateau, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Shimōsa_Plateau\u003e \u003chttp://dbpedia.org/ontology/border\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Shimsa Plateau",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Shimōsa_Plateau",
        "seq": "27,41"
      }
    ],
    "CleanPhrase": "[borders, Shimsa Plateau]",
    "id": "15c9ac66e1244177b01e0b4386cf5efb",
    "Phrase": "[What;;, are;;, on;;, the borders;;, of;;, Shimsa Plateau;;]",
    "predicate mapping": [
      {
        "score": 7,
        "label": "border",
        "uri": "http://dbpedia.org/ontology/border",
        "seq": "16,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who edited  British Gazette ?",
    "SerialNumber": "4669",
    "Words": "[Who, edited, British, Gazette, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/British_Gazette\u003e \u003chttp://dbpedia.org/property/editor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 7,
        "label": "British Gazette",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/British_Gazette",
        "seq": "12,27"
      }
    ],
    "CleanPhrase": "[edited, British Gazette]",
    "id": "2e7e281583534d89b40fa6de036f5439",
    "Phrase": "[Who;;, edited;;, British Gazette;;]",
    "predicate mapping": [
      {
        "score": 10,
        "label": "edited",
        "uri": "http://dbpedia.org/property/editor",
        "seq": "4,10",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which spanish novel was published by Francisco de Robles?",
    "SerialNumber": "4670",
    "Words": "[Which, spanish, novel, was, published, by, Francisco, de, Robles, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/publisher\u003e \u003chttp://dbpedia.org/resource/Francisco_de_Robles\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Francisco de Robles",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Francisco_de_Robles",
        "seq": "37,56"
      }
    ],
    "CleanPhrase": "[spanish, published, Francisco de Robles]",
    "id": "baa53040546c4b7485dd8c3b4ecd311e",
    "Phrase": "[Which spanish novel;;, was published;;, by;;, Francisco de Robles;;]",
    "predicate mapping": [
      {
        "score": 8,
        "label": "published",
        "uri": "http://dbpedia.org/property/publisher",
        "seq": "24,33",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the prospect team of Robin Kovacs ?",
    "SerialNumber": "4678",
    "Words": "[List, the, prospect, team, of, Robin, Kovacs, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Robin_Kovacs\u003e \u003chttp://dbpedia.org/property/prospectTeam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Robin Kovacs",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Robin_Kovacs",
        "seq": "26,38"
      }
    ],
    "CleanPhrase": "[prospect team, Robin Kovacs]",
    "id": "0f900abe071d458c8008e93f37f6c252",
    "Phrase": "[the prospect team;;, of;;, Robin Kovacs;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "prospect team",
        "uri": "http://dbpedia.org/property/prospectTeam",
        "seq": "9,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the club of Perianne Jones ?",
    "SerialNumber": "4686",
    "Words": "[What, is, the, club, of, Perianne, Jones, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Perianne_Jones\u003e \u003chttp://dbpedia.org/property/club\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Perianne Jones",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Perianne_Jones",
        "seq": "20,34"
      }
    ],
    "CleanPhrase": "[club, Perianne Jones]",
    "id": "0827b6115c1e42db887f851cff070db2",
    "Phrase": "[What;;, is;;, the club;;, of;;, Perianne Jones;;]",
    "predicate mapping": [
      {
        "score": 138,
        "label": "club",
        "uri": "http://dbpedia.org/property/club",
        "seq": "12,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the founder of Oprah Winfrey Network (U.S. TV channel) ?",
    "SerialNumber": "4692",
    "Words": "[Who, is, the, founder, of, Oprah, Winfrey, Network, \\, (, U, S, TV, channel, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Oprah_Winfrey_Network_(U.S._TV_channel)\u003e \u003chttp://dbpedia.org/property/founder\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 23,
        "label": "Oprah Winfrey Network",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Oprah_Winfrey_Network_(U.S._TV_channel)",
        "seq": "22,43"
      }
    ],
    "CleanPhrase": "[founder, Oprah Winfrey Network, U S TV channel]",
    "id": "bef4d21a7f66422c8f6b906ff1dfc6ca",
    "Phrase": "[Who;;, is;;, the founder;;, of;;, Oprah Winfrey Network;;, U S TV channel;;]",
    "predicate mapping": [
      {
        "score": 1815,
        "label": "founder of",
        "uri": "http://dbpedia.org/property/founder",
        "seq": "11,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the career of George Arceneaux, Jr. ?",
    "SerialNumber": "4696",
    "Words": "[What, is, the, career, of, George, Arceneaux, ,, Jr, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/George_Arceneaux,_Jr.\u003e \u003chttp://dbpedia.org/ontology/occupation\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "George Arceneaux, Jr.",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/George_Arceneaux,_Jr.",
        "seq": "22,43"
      }
    ],
    "CleanPhrase": "[career, George Arceneaux]",
    "id": "3bf7d79605ca4456a79601a892b1ce3a",
    "Phrase": "[What;;, is;;, the career;;, of;;, George Arceneaux;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "career",
        "uri": "http://dbpedia.org/ontology/occupation",
        "seq": "12,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the prospect team of Mikhail Pashnin ?",
    "SerialNumber": "4697",
    "Words": "[Name, the, prospect, team, of, Mikhail, Pashnin, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Mikhail_Pashnin\u003e \u003chttp://dbpedia.org/property/prospectTeam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Mikhail Pashnin",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Mikhail_Pashnin",
        "seq": "26,41"
      }
    ],
    "CleanPhrase": "[prospect team, Mikhail Pashnin]",
    "id": "c762b3cd8bd848748e7d136d4b2588c3",
    "Phrase": "[Name;;, the prospect team;;, of;;, Mikhail Pashnin;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "prospect team",
        "uri": "http://dbpedia.org/property/prospectTeam",
        "seq": "9,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Who all held a position when Gough Whitlam was the prime minister?",
    "SerialNumber": "4699",
    "Words": "[Who, all, held, a, position, when, Gough, Whitlam, was, the, prime, minister, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/primeMinister\u003e \u003chttp://dbpedia.org/resource/Gough_Whitlam\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Gough Whitlam",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Gough_Whitlam",
        "seq": "29,42"
      }
    ],
    "CleanPhrase": "[held, position, Gough Whitlam, prime minister]",
    "id": "0c72f7f8c4d549bc9c7f59b72394a598",
    "Phrase": "[Who;;, all;;, held;;, a position;;, when;;, Gough Whitlam;;, was;;, the prime minister;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "prime minister",
        "uri": "http://dbpedia.org/ontology/primeMinister",
        "seq": "51,65",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which veterans served at CBS?",
    "SerialNumber": "4700",
    "Words": "[Which, veterans, served, at, CBS, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/occupation\u003e \u003chttp://dbpedia.org/resource/CBS\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 93,
        "label": "CBS",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/CBS",
        "seq": "25,28"
      }
    ],
    "CleanPhrase": "[veterans, served, CBS]",
    "id": "af5ba5ad9b42455eab9f628eba9d1e2c",
    "Phrase": "[Which;;, veterans;;, served;;, at;;, CBS;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "at",
        "uri": "http://dbpedia.org/ontology/occupation",
        "seq": "22,24",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the  distributor of Rev (drink) ?",
    "SerialNumber": "4704",
    "Words": "[Who, is, the, distributor, of, Rev, \\, (, drink, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Rev_(drink)\u003e \u003chttp://dbpedia.org/ontology/distributor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "Rev (drink)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Rev_(drink)",
        "seq": "27,38"
      }
    ],
    "CleanPhrase": "[distributor]",
    "id": "32d3e61eddc2407e87f186bc486cd36e",
    "Phrase": "[Who;;, is;;, the distributor;;, of;;]",
    "predicate mapping": [
      {
        "score": 17,
        "label": "distributor",
        "uri": "http://dbpedia.org/ontology/distributor",
        "seq": "12,23",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the nationalteam of Trn Vit Hng ?",
    "SerialNumber": "4707",
    "Words": "[Name, the, nationalteam, of, Trn, Vit, Hng, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Trần_Việt_Hương\u003e \u003chttp://dbpedia.org/property/nationalteam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": -1,
        "label": "Trn Vit Hng",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Trần_Việt_Hương",
        "seq": "25,36"
      }
    ],
    "CleanPhrase": "[nationalteam, Trn Vit Hng]",
    "id": "4a351ee20c4a44c3b120ab07ca56f7a7",
    "Phrase": "[Name;;, the nationalteam;;, of;;, Trn Vit Hng;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "nationalteam",
        "uri": "http://dbpedia.org/property/nationalteam",
        "seq": "9,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the allegiance of Albert Kwesi Ocran ?",
    "SerialNumber": "4708",
    "Words": "[What, is, the, allegiance, of, Albert, Kwesi, Ocran, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Albert_Kwesi_Ocran\u003e \u003chttp://dbpedia.org/property/allegiance\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Albert Kwesi Ocran",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Albert_Kwesi_Ocran",
        "seq": "26,44"
      }
    ],
    "CleanPhrase": "[allegiance, Albert Kwesi, Ocran]",
    "id": "7b40ce95904c467d8f1c01dccd0ce70c",
    "Phrase": "[What;;, is;;, the allegiance;;, of;;, Albert Kwesi;;, Ocran;;]",
    "predicate mapping": [
      {
        "score": 18,
        "label": "allegiance",
        "uri": "http://dbpedia.org/property/allegiance",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who appointed William L. Dayton ?",
    "SerialNumber": "4710",
    "Words": "[Who, appointed, William, L, Dayton, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/William_L._Dayton\u003e \u003chttp://dbpedia.org/ontology/appointer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "William L. Dayton",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/William_L._Dayton",
        "seq": "14,31"
      }
    ],
    "CleanPhrase": "[appointed, William L Dayton]",
    "id": "c0cf9476109b449782a8226a9ae2ae4f",
    "Phrase": "[Who;;, appointed;;, William L Dayton;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "appointed",
        "uri": "http://dbpedia.org/ontology/appointer",
        "seq": "4,13",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the Artist of Madagascar: Operation Penguin ?",
    "SerialNumber": "4712",
    "Words": "[Name, the, Artist, of, Madagascar, Operation, Penguin, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Madagascar:_Operation_Penguin\u003e \u003chttp://dbpedia.org/property/artist\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 37,
        "label": "Operation Penguin",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Madagascar:_Operation_Penguin",
        "seq": "31,48"
      }
    ],
    "CleanPhrase": "[Artist, Madagascar Operation Penguin]",
    "id": "a2ec42a127424074b5d7bc144285dcd6",
    "Phrase": "[the Artist;;, of;;, Madagascar Operation Penguin;;]",
    "predicate mapping": [
      {
        "score": 69,
        "label": "Artist",
        "uri": "http://dbpedia.org/property/artist",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "list all the chairman of Vancouver Whitecaps FC?",
    "SerialNumber": "4715",
    "Words": "[list, all, the, chairman, of, Vancouver, Whitecaps, FC, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Vancouver_Whitecaps_FC\u003e \u003chttp://dbpedia.org/property/chairman\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Vancouver Whitecaps FC",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Vancouver_Whitecaps_FC",
        "seq": "25,47"
      }
    ],
    "CleanPhrase": "[list, chairman, Vancouver Whitecaps FC]",
    "id": "047a2084681a4bc4b07d5e2e9995f2eb",
    "Phrase": "[list;;, all the chairman;;, of;;, Vancouver Whitecaps FC;;]",
    "predicate mapping": [
      {
        "score": 97,
        "label": "chairman",
        "uri": "http://dbpedia.org/property/chairman",
        "seq": "13,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the label of The Producers (2005 film) ?",
    "SerialNumber": "4717",
    "Words": "[Who, is, the, label, of, The, Producers, \\, (, 2005, film, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Producers_(2005_film)\u003e \u003chttp://dbpedia.org/property/label\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "The Producers (2005 film)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/The_Producers_(2005_film)",
        "seq": "20,45"
      }
    ],
    "CleanPhrase": "[label, Producers, 2005 film]",
    "id": "0d3ce4f95ac74189a54701a42dda617d",
    "Phrase": "[Who;;, is;;, the label;;, of;;, The Producers;;, 2005 film;;]",
    "predicate mapping": [
      {
        "score": 346,
        "label": "label",
        "uri": "http://dbpedia.org/property/label",
        "seq": "11,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What is the state whose largest city is Denver?",
    "SerialNumber": "4719",
    "Words": "[What, is, the, state, whose, largest, city, is, Denver, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/largestCity\u003e \u003chttp://dbpedia.org/resource/Denver\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 155,
        "label": "Denver",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Denver",
        "seq": "40,46"
      }
    ],
    "CleanPhrase": "[state, largest city, Denver]",
    "id": "d6b6dd1b9b1f42b2a4339f0040398eca",
    "Phrase": "[What;;, is;;, the state;;, whose largest city;;, is;;, Denver;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "largest city",
        "uri": "http://dbpedia.org/ontology/largestCity",
        "seq": "24,36",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the licensee of EXXV-TV ?",
    "SerialNumber": "4723",
    "Words": "[Who, is, the, licensee, of, EXXV, TV, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/EXXV-TV\u003e \u003chttp://dbpedia.org/property/licensee\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "EXXV-TV",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/EXXV-TV",
        "seq": "23,30"
      }
    ],
    "CleanPhrase": "[licensee, EXXV TV]",
    "id": "106ea7f1234e4ae29451ff12ce6e4684",
    "Phrase": "[Who;;, is;;, the licensee;;, of;;, EXXV TV;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "licensee",
        "uri": "http://dbpedia.org/property/licensee",
        "seq": "11,19",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In which language is All I need is Your Sweet lovin written ?",
    "SerialNumber": "4725",
    "Words": "[In, which, language, is, All, I, need, is, Your, Sweet, lovin, written, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/All_I_Need_Is_Your_Sweet_Lovin\u0027\u003e \u003chttp://dbpedia.org/property/language\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "All I need is Your Sweet lovin ",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/All_I_Need_Is_Your_Sweet_Lovin\u0027",
        "seq": "21,52"
      }
    ],
    "CleanPhrase": "[language, Sweet lovin, written]",
    "id": "61cf658e0164453f858aee18ab264e25",
    "Phrase": "[In;;, which;;, language;;, is;;, I;;, need;;, is;;, Your Sweet lovin;;, written;;]",
    "predicate mapping": [
      {
        "score": 114,
        "label": "language",
        "uri": "http://dbpedia.org/property/language",
        "seq": "9,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the child of John Tyler, Sr.?",
    "SerialNumber": "4737",
    "Words": "[Who, is, the, child, of, John, Tyler, ,, Sr, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/John_Tyler,_Sr.\u003e \u003chttp://dbpedia.org/ontology/child\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "John Tyler, Sr.",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/John_Tyler,_Sr.",
        "seq": "20,35"
      }
    ],
    "CleanPhrase": "[child, John Tyler, Sr]",
    "id": "922da121de7d4c2b94f5704844a63b18",
    "Phrase": "[Who;;, is;;, the child;;, of;;, John Tyler;;, Sr;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "child",
        "uri": "http://dbpedia.org/ontology/child",
        "seq": "11,16",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What company is the distributor of Bombay Sapphire?",
    "SerialNumber": "4740",
    "Words": "[What, company, is, the, distributor, of, Bombay, Sapphire, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bombay_Sapphire\u003e \u003chttp://dbpedia.org/property/distributor\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "Bombay Sapphire",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Bombay_Sapphire",
        "seq": "35,50"
      }
    ],
    "CleanPhrase": "[company, distributor, Bombay Sapphire]",
    "id": "0dd98abb1d704acbaaaf373111ec2b6f",
    "Phrase": "[What company;;, is;;, the distributor;;, of;;, Bombay Sapphire;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "distributor",
        "uri": "http://dbpedia.org/property/distributor",
        "seq": "20,31",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the part of Liverpool city region \u003e",
    "SerialNumber": "4742",
    "Words": "[Name, the, part, of, Liverpool, city, region]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Liverpool_City_Region\u003e \u003chttp://dbpedia.org/ontology/part\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Liverpool city region",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Liverpool_City_Region",
        "seq": "17,38"
      }
    ],
    "CleanPhrase": "[part, Liverpool city region]",
    "id": "3fabc75aa05d4a37873532407e1f9e53",
    "Phrase": "[Name;;, the part;;, of;;, Liverpool city region;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "part",
        "uri": "http://dbpedia.org/ontology/part",
        "seq": "9,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List all the children of Barbara Bush?",
    "SerialNumber": "4755",
    "Words": "[List, all, the, children, of, Barbara, Bush, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Barbara_Bush\u003e \u003chttp://dbpedia.org/property/children\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Barbara Bush",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Barbara_Bush",
        "seq": "25,37"
      }
    ],
    "CleanPhrase": "[List, children, Barbara Bush]",
    "id": "7c78f74e4f404592838f82e9d563e6e0",
    "Phrase": "[List;;, all the children;;, of;;, Barbara Bush;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "children",
        "uri": "http://dbpedia.org/property/children",
        "seq": "13,21",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "who is the husband of Rosie Huntington Whiteley?",
    "SerialNumber": "4756",
    "Words": "[who, is, the, husband, of, Rosie, Huntington, Whiteley, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Rosie_Huntington-Whiteley\u003e \u003chttp://dbpedia.org/ontology/partner\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 12,
        "label": "Rosie Huntington",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Rosie_Huntington-Whiteley",
        "seq": "22,38"
      }
    ],
    "CleanPhrase": "[husband, Rosie Huntington Whiteley]",
    "id": "6239f50c40b045fb92f0ad0b63792e7b",
    "Phrase": "[who;;, is;;, the husband;;, of;;, Rosie Huntington Whiteley;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "husband",
        "uri": "http://dbpedia.org/ontology/partner",
        "seq": "11,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the official name of Arkansas wine ?",
    "SerialNumber": "4759",
    "Words": "[What, is, the, official, name, of, Arkansas, wine, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Arkansas_wine\u003e \u003chttp://dbpedia.org/property/officialName\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 924,
        "label": "Arkansas wine",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Arkansas_wine",
        "seq": "29,42"
      }
    ],
    "CleanPhrase": "[official, Arkansas, wine]",
    "id": "0fca46ab984148228bc912ac09c14cea",
    "Phrase": "[What;;, is;;, the official name;;, of;;, Arkansas;;, wine;;]",
    "predicate mapping": [
      {
        "score": 5,
        "label": "official name",
        "uri": "http://dbpedia.org/property/officialName",
        "seq": "12,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the alma mater of Julian Leow Beng Kim?",
    "SerialNumber": "4761",
    "Words": "[What, is, the, alma, mater, of, Julian, Leow, Beng, Kim, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Julian_Leow_Beng_Kim\u003e \u003chttp://dbpedia.org/property/almaMater\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Julian Leow Beng Kim",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Julian_Leow_Beng_Kim",
        "seq": "26,46"
      }
    ],
    "CleanPhrase": "[alma mater, Julian Leow Beng]",
    "id": "da407b1a436f4844abc78ef45daebf4f",
    "Phrase": "[What;;, is;;, the alma mater;;, of;;, Julian Leow Beng;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "alma mater",
        "uri": "http://dbpedia.org/property/almaMater",
        "seq": "12,22",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What discipline was The Chess Monthly about ?",
    "SerialNumber": "4762",
    "Words": "[What, discipline, was, The, Chess, Monthly, about, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Chess_Monthly\u003e \u003chttp://dbpedia.org/property/discipline\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "The Chess Monthly",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/The_Chess_Monthly",
        "seq": "20,37"
      }
    ],
    "CleanPhrase": "[discipline, Chess Monthly]",
    "id": "8745414c54fd44fc805e024437bff491",
    "Phrase": "[What discipline;;, was;;, The Chess Monthly;;, about;;]",
    "predicate mapping": [
      {
        "score": 16,
        "label": "discipline",
        "uri": "http://dbpedia.org/property/discipline",
        "seq": "5,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Who is the executive producer of Into the Dalek ?",
    "SerialNumber": "4789",
    "Words": "[Who, is, the, executive, producer, of, Into, the, Dalek, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Into_the_Dalek\u003e \u003chttp://dbpedia.org/property/executiveProducer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Into the Dalek",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Into_the_Dalek",
        "seq": "33,47"
      }
    ],
    "CleanPhrase": "[executive producer, Dalek]",
    "id": "d7d45064bde94687972a63ec05a2d4a6",
    "Phrase": "[Who;;, is;;, the executive producer;;, of;;, Into;;, the Dalek;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "executive producer",
        "uri": "http://dbpedia.org/property/executiveProducer",
        "seq": "11,29",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the prize awarded to Bruce Beutler ?",
    "SerialNumber": "4791",
    "Words": "[What, is, the, prize, awarded, to, Bruce, Beutler, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bruce_Beutler\u003e \u003chttp://dbpedia.org/ontology/award\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Bruce Beutler",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Bruce_Beutler",
        "seq": "29,42"
      }
    ],
    "CleanPhrase": "[prize, awarded, Bruce Beutler]",
    "id": "7d0fb5e551594d689aef4adfbadcb48a",
    "Phrase": "[What;;, is;;, the prize;;, awarded;;, to;;, Bruce Beutler;;]",
    "predicate mapping": [
      {
        "score": 99,
        "label": "prize awarded",
        "uri": "http://dbpedia.org/ontology/award",
        "seq": "12,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the religion of character of Janice Soprano from The Soprano television show?",
    "SerialNumber": "4795",
    "Words": "[What, is, the, religion, of, character, of, Janice, Soprano, from, The, Soprano, television, show, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Janice_Soprano\u003e \u003chttp://dbpedia.org/ontology/religion\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Janice Soprano",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Janice_Soprano",
        "seq": "37,51"
      }
    ],
    "CleanPhrase": "[religion, character, Janice Soprano, Soprano television show]",
    "id": "70c322e322db4335be2a68becb37f2fc",
    "Phrase": "[What;;, is;;, the religion;;, of;;, character;;, of;;, Janice Soprano;;, from;;, The Soprano television show;;]",
    "predicate mapping": [
      {
        "score": 14,
        "label": "religion",
        "uri": "http://dbpedia.org/ontology/religion",
        "seq": "12,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Name some comic characters created by Bruce Timm?",
    "SerialNumber": "4798",
    "Words": "[Name, some, comic, characters, created, by, Bruce, Timm, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/creator\u003e \u003chttp://dbpedia.org/resource/Bruce_Timm\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Bruce Timm",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Bruce_Timm",
        "seq": "38,48"
      }
    ],
    "CleanPhrase": "[comic characters, created, Bruce Timm]",
    "id": "9af1387628eb41aaaa7bfc96527b7dea",
    "Phrase": "[Name;;, some comic characters;;, created;;, by;;, Bruce Timm;;]",
    "predicate mapping": [
      {
        "score": 28,
        "label": "created by",
        "uri": "http://dbpedia.org/ontology/creator",
        "seq": "27,37",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which constructor\u0027s team won the 1967 Mexican Grand Prix ?",
    "SerialNumber": "4805",
    "Words": "[Which, constructor, \u0027s, team, won, the, 1967, Mexican, Grand, Prix, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/1967_Mexican_Grand_Prix\u003e \u003chttp://dbpedia.org/property/firstTeam\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "1967 Mexican Grand Prix",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/1967_Mexican_Grand_Prix",
        "seq": "33,56"
      }
    ],
    "CleanPhrase": "[constructor, \u0027s team, won, 1967 Mexican Grand Prix]",
    "id": "a705fea63f8f4de8ba925717adbd4594",
    "Phrase": "[Which;;, constructor;;, \u0027s team;;, won;;, the 1967 Mexican Grand Prix;;]",
    "predicate mapping": [
      {
        "score": 373,
        "label": "team",
        "uri": "http://dbpedia.org/property/firstTeam",
        "seq": "20,24",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was Juno I launched from ?",
    "SerialNumber": "4820",
    "Words": "[Where, was, Juno, I, launched, from, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Juno_I\u003e \u003chttp://dbpedia.org/ontology/launchSite\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 29,
        "label": "Juno I",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Juno_I",
        "seq": "10,16"
      }
    ],
    "CleanPhrase": "[Juno, launched]",
    "id": "98d2968030a145948b4b54314cb8aa7c",
    "Phrase": "[Where;;, was;;, Juno I;;, launched;;, from;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "launched",
        "uri": "http://dbpedia.org/ontology/launchSite",
        "seq": "17,25",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Which river goes through cohoes, NY",
    "SerialNumber": "4826",
    "Words": "[Which, river, goes, through, cohoes, ,, NY]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Cohoes,_New_York\u003e \u003chttp://dbpedia.org/ontology/river\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 6,
        "label": "cohoes, NY",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Cohoes,_New_York",
        "seq": "33,35"
      }
    ],
    "CleanPhrase": "[river, cohoes, NY]",
    "id": "7306c480b5f0480e85dea19fd979e9c2",
    "Phrase": "[Which river;;, goes;;, through;;, cohoes;;, NY;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "river",
        "uri": "http://dbpedia.org/ontology/river",
        "seq": "6,11",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In what wars was Steve Buyer involved?",
    "SerialNumber": "4832",
    "Words": "[In, what, wars, was, Steve, Buyer, involved, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Steve_Buyer\u003e \u003chttp://dbpedia.org/ontology/battle\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Steve Buyer",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Steve_Buyer",
        "seq": "17,28"
      }
    ],
    "CleanPhrase": "[wars, Steve Buyer, involved]",
    "id": "e2cc5e87ec094843ad79d8b454a8eab6",
    "Phrase": "[In;;, what wars;;, was;;, Steve Buyer;;, involved;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "war",
        "uri": "http://dbpedia.org/ontology/battle",
        "seq": "8,11",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the style of architecture of Shaheed Minar, Kolkata ?",
    "SerialNumber": "4835",
    "Words": "[What, is, the, style, of, architecture, of, Shaheed, Minar, ,, Kolkata, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Shaheed_Minar,_Kolkata\u003e \u003chttp://dbpedia.org/ontology/architecturalStyle\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Shaheed Minar, Kolkata",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Shaheed_Minar,_Kolkata",
        "seq": "37,59"
      }
    ],
    "CleanPhrase": "[style, architecture, Shaheed Minar, Kolkata]",
    "id": "a17ff3e0133f4d449e03ef1930da70d9",
    "Phrase": "[What;;, is;;, the style;;, of;;, architecture;;, of;;, Shaheed Minar;;, Kolkata;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "style of architecture",
        "uri": "http://dbpedia.org/ontology/architecturalStyle",
        "seq": "12,33",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which company\u0027s division is Audi India? Correct Question",
    "SerialNumber": "4839",
    "Words": "[Which, company, \u0027s, division, is, Audi, India, \\, ?, Correct, Question]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/divisions\u003e \u003chttp://dbpedia.org/resource/Audi_India\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Audi India",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Audi_India",
        "seq": "28,38"
      }
    ],
    "CleanPhrase": "[company, \u0027s division, Audi India, Correct Question]",
    "id": "1e9caa7262cd4fd1a51cf31d4ba704e9",
    "Phrase": "[Which company;;, \u0027s division;;, is;;, Audi India;;, Correct Question;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "division",
        "uri": "http://dbpedia.org/property/divisions",
        "seq": "16,24",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the bloomington viaduct built to cross?",
    "SerialNumber": "4849",
    "Words": "[What, is, the, bloomington, viaduct, built, to, cross, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Bloomington_Viaduct\u003e \u003chttp://dbpedia.org/property/crosses\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "bloomington viaduct",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Bloomington_Viaduct",
        "seq": "12,31"
      }
    ],
    "CleanPhrase": "[bloomington viaduct, built, cross]",
    "id": "b2a4d8fce56a4890a9e803ec33770b7c",
    "Phrase": "[What;;, is;;, the bloomington viaduct;;, built;;, to cross;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "cross",
        "uri": "http://dbpedia.org/property/crosses",
        "seq": "41,46",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "To which city does Northeast Library belong?",
    "SerialNumber": "4860",
    "Words": "[To, which, city, does, Northeast, Library, belong, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Northeast_Library\u003e \u003chttp://dbpedia.org/ontology/city\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 7,
        "label": "Northeast Library",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Northeast_Library",
        "seq": "19,36"
      }
    ],
    "CleanPhrase": "[city, Northeast Library, belong]",
    "id": "69ff2b75810646209568b0df3e994b16",
    "Phrase": "[To;;, which;;, city;;, does;;, Northeast Library;;, belong;;]",
    "predicate mapping": [
      {
        "score": 6,
        "label": "city",
        "uri": "http://dbpedia.org/ontology/city",
        "seq": "9,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Which football managers managed Middlesbrough F.C.?",
    "SerialNumber": "4868",
    "Words": "[Which, football, managers, managed, Middlesbrough, F, C, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/managerClub\u003e \u003chttp://dbpedia.org/resource/Middlesbrough_F.C.\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 20,
        "label": "Middlesbrough F.C",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Middlesbrough_F.C.",
        "seq": "32,49"
      }
    ],
    "CleanPhrase": "[football managers, managed, Middlesbrough F C]",
    "id": "9028456938924abe93b5277af2137115",
    "Phrase": "[Which;;, football managers;;, managed;;, Middlesbrough F C;;]",
    "predicate mapping": [
      {
        "score": -1,
        "label": "managers",
        "uri": "http://dbpedia.org/ontology/managerClub",
        "seq": "15,23",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What developed EMMS?",
    "SerialNumber": "4870",
    "Words": "[What, developed, EMMS, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/EMMS\u003e \u003chttp://dbpedia.org/ontology/developer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 3,
        "label": "EMMS",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/EMMS",
        "seq": "15,19"
      }
    ],
    "CleanPhrase": "[developed, EMMS]",
    "id": "8cc928e4d47048b1861ea9bb7b35471e",
    "Phrase": "[What;;, developed;;, EMMS;;]",
    "predicate mapping": [
      {
        "score": 15,
        "label": "developed",
        "uri": "http://dbpedia.org/ontology/developer",
        "seq": "5,14",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the genre of Battle Chess?",
    "SerialNumber": "4878",
    "Words": "[What, is, the, genre, of, Battle, Chess, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Battle_Chess\u003e \u003chttp://dbpedia.org/property/genre\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 24,
        "label": "Battle Chess",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Battle_Chess",
        "seq": "21,33"
      }
    ],
    "CleanPhrase": "[genre, Battle Chess]",
    "id": "bed9c24aa6cd405ab16165885735645b",
    "Phrase": "[What;;, is;;, the genre;;, of;;, Battle Chess;;]",
    "predicate mapping": [
      {
        "score": 46,
        "label": "genre",
        "uri": "http://dbpedia.org/property/genre",
        "seq": "12,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Namt the fields of Paul Demiville ?",
    "SerialNumber": "4884",
    "Words": "[Namt, the, fields, of, Paul, Demiville, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Paul_Demiéville\u003e \u003chttp://dbpedia.org/property/fields\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Paul Demiville",
        "matchedBy": "NER-1-1",
        "uri": "http://dbpedia.org/resource/Paul_Demiéville",
        "seq": "19,33"
      }
    ],
    "CleanPhrase": "[Namt fields, Paul Demiville]",
    "id": "3065422e5ed048afbfe5677cff2a318b",
    "Phrase": "[Namt the fields;;, of;;, Paul Demiville;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "fields",
        "uri": "http://dbpedia.org/property/fields",
        "seq": "9,15",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Whose shrine is in aachen cathedral?",
    "SerialNumber": "4910",
    "Words": "[Whose, shrine, is, in, aachen, cathedral, \\, ?]",
    "sparql_query": "SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/property/majorShrine\u003e \u003chttp://dbpedia.org/resource/Aachen_Cathedral\u003e  . }",
    "checked": "false",
    "entity mapping": [
      {
        "score": 4,
        "label": "aachen cathedral",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Aachen_Cathedral",
        "seq": "19,35"
      }
    ],
    "CleanPhrase": "[shrine, aachen cathedral]",
    "id": "de05f30a4e304ecc8294fe2c50948518",
    "Phrase": "[Whose shrine;;, is;;, in;;, aachen cathedral \\;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "shrine",
        "uri": "http://dbpedia.org/property/majorShrine",
        "seq": "6,12",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "Giorgos Kaminis is the mayor of what?",
    "SerialNumber": "4912",
    "Words": "[Giorgos, Kaminis, is, the, mayor, of, what, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/mayor\u003e \u003chttp://dbpedia.org/resource/Giorgos_Kaminis\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Giorgos Kaminis",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Giorgos_Kaminis",
        "seq": "0,15"
      }
    ],
    "CleanPhrase": "[Giorgos Kaminis, mayor]",
    "id": "543de17bf3734e12bdf36bd202942338",
    "Phrase": "[Giorgos Kaminis;;, is;;, the mayor;;, of;;, what;;]",
    "predicate mapping": [
      {
        "score": 2,
        "label": "mayor",
        "uri": "http://dbpedia.org/ontology/mayor",
        "seq": "23,28",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the incumbent of Linda Jenness ?",
    "SerialNumber": "4913",
    "Words": "[Name, the, incumbent, of, Linda, Jenness, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Linda_Jenness\u003e \u003chttp://dbpedia.org/ontology/incumbent\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Linda Jenness",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Linda_Jenness",
        "seq": "22,35"
      }
    ],
    "CleanPhrase": "[incumbent, Linda Jenness]",
    "id": "40ce6c3ca38043918ce00a735a2e4c98",
    "Phrase": "[the incumbent;;, of;;, Linda Jenness;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "incumbent",
        "uri": "http://dbpedia.org/ontology/incumbent",
        "seq": "9,18",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "List the affiliation of Indian general election, 2004 (Andhra Pradesh) ?",
    "SerialNumber": "4925",
    "Words": "[List, the, affiliation, of, Indian, general, election, ,, 2004, \\, (, Andhra, Pradesh, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)\u003e \u003chttp://dbpedia.org/ontology/affiliation\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 2,
        "label": "Indian general election, 2004 (Andhra Pradesh)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)",
        "seq": "24,70"
      }
    ],
    "CleanPhrase": "[List, affiliation, Indian general election, 2004, Andhra Pradesh]",
    "id": "b45a5663ebe3439a9c8032edaa8750b3",
    "Phrase": "[List;;, the affiliation;;, of;;, Indian general election;;, 2004;;, Andhra Pradesh;;]",
    "predicate mapping": [
      {
        "score": 15,
        "label": "affiliation",
        "uri": "http://dbpedia.org/ontology/affiliation",
        "seq": "9,20",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the location town of Seattle Great Wheel ?",
    "SerialNumber": "4940",
    "Words": "[What, is, the, location, town, of, Seattle, Great, Wheel, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Seattle_Great_Wheel\u003e \u003chttp://dbpedia.org/property/locationTown\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Seattle Great Wheel",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Seattle_Great_Wheel",
        "seq": "29,48"
      }
    ],
    "CleanPhrase": "[location town, Seattle Great Wheel]",
    "id": "0e96324fa1db4239b4f08a7cc5d7d4a1",
    "Phrase": "[What;;, is;;, the location town;;, of;;, Seattle Great Wheel;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "location town",
        "uri": "http://dbpedia.org/property/locationTown",
        "seq": "12,25",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Where was Girls (The Prodigy song)  recorded ?",
    "SerialNumber": "4948",
    "Words": "[Where, was, Girls, \\, (, The, Prodigy, song, \\, ), recorded, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Girls_(The_Prodigy_song)\u003e \u003chttp://dbpedia.org/property/recorded\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Girls (The Prodigy song)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Girls_(The_Prodigy_song)",
        "seq": "10,34"
      }
    ],
    "CleanPhrase": "[Girls, Prodigy song, recorded]",
    "id": "47f4b2253dac4f8f978ff5b8c2166041",
    "Phrase": "[Where;;, was;;, Girls;;, The Prodigy song;;, recorded;;]",
    "predicate mapping": [
      {
        "score": 4,
        "label": "recorded",
        "uri": "http://dbpedia.org/property/recorded",
        "seq": "36,44",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the party of Indira Gandhi ?",
    "SerialNumber": "4949",
    "Words": "[Name, the, party, of, Indira, Gandhi, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Indira_Gandhi\u003e \u003chttp://dbpedia.org/ontology/party\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "Indira Gandhi",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Indira_Gandhi",
        "seq": "18,31"
      }
    ],
    "CleanPhrase": "[party, Indira Gandhi]",
    "id": "01dc45d5615b43ea9c0888c88020fb68",
    "Phrase": "[the party;;, of;;, Indira Gandhi;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "party",
        "uri": "http://dbpedia.org/ontology/party",
        "seq": "9,14",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the PLACE OF DEATH of Charles Gordon (artist) ?",
    "SerialNumber": "4963",
    "Words": "[What, is, the, PLACE, OF, DEATH, of, Charles, Gordon, \\, (, artist, \\, ), \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Charles_Gordon_(artist)\u003e \u003chttp://dbpedia.org/property/placeOfDeath\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Charles Gordon (artist)",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Charles_Gordon_(artist)",
        "seq": "30,53"
      }
    ],
    "CleanPhrase": "[PLACE, DEATH, Charles Gordon]",
    "id": "f22fef56a0c84c86886dc2dc2243a721",
    "Phrase": "[What;;, is;;, the PLACE;;, OF;;, DEATH;;, of;;, Charles Gordon;;]",
    "predicate mapping": [
      {
        "score": 1,
        "label": "PLACE OF DEATH",
        "uri": "http://dbpedia.org/property/placeOfDeath",
        "seq": "12,26",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "Name the composer of motorpsycho Nitemare ?",
    "SerialNumber": "4968",
    "Words": "[Name, the, composer, of, motorpsycho, Nitemare, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Motorpsycho_Nitemare\u003e \u003chttp://dbpedia.org/property/composer\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 1,
        "label": "motorpsycho Nitemare",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Motorpsycho_Nitemare",
        "seq": "21,41"
      }
    ],
    "CleanPhrase": "[composer, motorpsycho]",
    "id": "9b3d41fd10154e0099da01bfaf7daf4a",
    "Phrase": "[the composer;;, of;;, motorpsycho;;]",
    "predicate mapping": [
      {
        "score": 8,
        "label": "composer",
        "uri": "http://dbpedia.org/property/composer",
        "seq": "9,17",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "In which city did The Ultimate Fighter: Team Rousey vs. Team Tate take place ?",
    "SerialNumber": "4972",
    "Words": "[In, which, city, did, The, Ultimate, Fighter, Team, Rousey, vs, Team, Tate, take, place, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/The_Ultimate_Fighter:_Team_Rousey_vs._Team_Tate\u003e \u003chttp://dbpedia.org/property/city\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "The Ultimate Fighter: Team Rousey vs. Team Tate",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/The_Ultimate_Fighter:_Team_Rousey_vs._Team_Tate",
        "seq": "18,65"
      }
    ],
    "CleanPhrase": "[city, Ultimate Fighter Team Rousey Team Tate, place]",
    "id": "bc638eba36ac42a4ad637b88465f433e",
    "Phrase": "[In;;, which;;, city;;, did;;, The Ultimate Fighter Team Rousey vs Team Tate;;, take;;, place;;]",
    "predicate mapping": [
      {
        "score": 0,
        "label": "city",
        "uri": "http://dbpedia.org/property/city",
        "seq": "9,13",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "2",
    "question": "What is the burial place of Iyoas I ?",
    "SerialNumber": "4990",
    "Words": "[What, is, the, burial, place, of, Iyoas, I, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE { \u003chttp://dbpedia.org/resource/Iyoas_I\u003e \u003chttp://dbpedia.org/property/placeOfBurial\u003e ?uri } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Iyoas I",
        "matchedBy": "spotlight",
        "uri": "http://dbpedia.org/resource/Iyoas_I",
        "seq": "28,35"
      }
    ],
    "CleanPhrase": "[burial place, Iyoas]",
    "id": "88fe11d131e142dfa0952fca359787eb",
    "Phrase": "[What;;, is;;, the burial place;;, of;;, Iyoas;;, I;;, \\;;]",
    "predicate mapping": [
      {
        "score": 3,
        "label": "burial place",
        "uri": "http://dbpedia.org/property/placeOfBurial",
        "seq": "12,24",
        "mappedBy": "byLabelMatch"
      }
    ]
  },
  {
    "sparql_id": "1",
    "question": "What movies have been produced by the production house owned by Larry J. Franco?",
    "SerialNumber": "4996",
    "Words": "[What, movies, have, been, produced, by, the, production, house, owned, by, Larry, J, Franco, \\, ?]",
    "sparql_query": " SELECT DISTINCT ?uri WHERE {?uri \u003chttp://dbpedia.org/ontology/producer\u003e \u003chttp://dbpedia.org/resource/Larry_J._Franco\u003e } ",
    "checked": "false",
    "entity mapping": [
      {
        "score": 0,
        "label": "Larry J. Franco",
        "matchedBy": "byLabel",
        "uri": "http://dbpedia.org/resource/Larry_J._Franco",
        "seq": "64,79"
      }
    ],
    "CleanPhrase": "[movies, produced, production house, owned, Larry J Franco]",
    "id": "f81e51fa36714841b71d71f2c518a477",
    "Phrase": "[What movies;;, have been produced;;, by;;, the production house;;, owned;;, by;;, Larry J Franco;;]",
    "predicate mapping": [
      {
        "score": 22,
        "label": "produced",
        "uri": "http://dbpedia.org/ontology/producer",
        "seq": "22,30",
        "mappedBy": "byPriorLabelMatch"
      }
    ]
  }
]